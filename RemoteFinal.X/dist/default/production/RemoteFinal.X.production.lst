

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 16 13:35:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,inline
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,inline
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,inline
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,inline
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1,inline
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1,inline
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1,inline
    81                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1,inline
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1
   115                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   121                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   122  0000                     
   123                           ; Version 1.45
   124                           ; Generated 16/11/2017 GMT
   125                           ; 
   126                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   127                           ; All rights reserved.
   128                           ; 
   129                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   130                           ; 
   131                           ; Redistribution and use in source and binary forms, with or without modification, are
   132                           ; permitted provided that the following conditions are met:
   133                           ; 
   134                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   135                           ;        conditions and the following disclaimer.
   136                           ; 
   137                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   138                           ;        of conditions and the following disclaimer in the documentation and/or other
   139                           ;        materials provided with the distribution.
   140                           ; 
   141                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   142                           ;        software without specific prior written permission.
   143                           ; 
   144                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   145                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   146                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   147                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   148                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   149                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   150                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   151                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   152                           ; 
   153                           ; 
   154                           ; Code-generator required, PIC18F25K22 Definitions
   155                           ; 
   156                           ; SFR Addresses
   157  0000                     
   158                           	psect	idataBANK0
   159  001086                     __pidataBANK0:
   160                           	opt stack 0
   161                           
   162                           ;initializer for _fsmStateTable
   163  001086  E0                 	db	low _do_I2C_IDLE
   164  001087  11                 	db	high _do_I2C_IDLE
   165  001088  3E                 	db	low _do_I2C_SEND_ADR_READ
   166  001089  11                 	db	high _do_I2C_SEND_ADR_READ
   167  00108A  12                 	db	low _do_I2C_SEND_ADR_WRITE
   168  00108B  11                 	db	high _do_I2C_SEND_ADR_WRITE
   169  00108C  F2                 	db	low _do_I2C_TX
   170  00108D  07                 	db	high _do_I2C_TX
   171  00108E  AA                 	db	low _do_I2C_RX
   172  00108F  09                 	db	high _do_I2C_RX
   173  001090  CE                 	db	low _do_I2C_RCEN
   174  001091  11                 	db	high _do_I2C_RCEN
   175  001092  2C                 	db	low _do_I2C_TX_EMPTY
   176  001093  0C                 	db	high _do_I2C_TX_EMPTY
   177  001094  B2                 	db	low _do_I2C_SEND_RESTART_READ
   178  001095  12                 	db	high _do_I2C_SEND_RESTART_READ
   179  001096  A4                 	db	low _do_I2C_SEND_RESTART_WRITE
   180  001097  12                 	db	high _do_I2C_SEND_RESTART_WRITE
   181  001098  96                 	db	low _do_I2C_SEND_RESTART
   182  001099  12                 	db	high _do_I2C_SEND_RESTART
   183  00109A  88                 	db	low _do_I2C_SEND_STOP
   184  00109B  12                 	db	high _do_I2C_SEND_STOP
   185  00109C  7A                 	db	low _do_I2C_DO_ACK
   186  00109D  12                 	db	high _do_I2C_DO_ACK
   187  00109E  6C                 	db	low _do_I2C_DO_NACK_STOP
   188  00109F  12                 	db	high _do_I2C_DO_NACK_STOP
   189  0010A0  5E                 	db	low _do_I2C_DO_NACK_RESTART
   190  0010A1  12                 	db	high _do_I2C_DO_NACK_RESTART
   191  0010A2  54                 	db	low _do_I2C_RESET
   192  0010A3  11                 	db	high _do_I2C_RESET
   193  0010A4  82                 	db	low _do_I2C_DO_ADDRESS_NACK
   194  0010A5  0D                 	db	high _do_I2C_DO_ADDRESS_NACK
   195  0010A6  28                 	db	low _do_I2C_SEND_INITIAL_READ
   196  0010A7  11                 	db	high _do_I2C_SEND_INITIAL_READ
   197  0010A8  96                 	db	low _do_I2C_TX_REGISTER
   198  0010A9  11                 	db	high _do_I2C_TX_REGISTER
   199                           
   200                           	psect	idataBANK1
   201  000F70                     __pidataBANK1:
   202                           	opt stack 0
   203                           
   204                           ;initializer for printString@F7170
   205  000F70  0A                 	db	10
   206  000F71  0D                 	db	13
   207  000F72  47                 	db	71
   208  000F73  4F                 	db	79
   209  000F74  54                 	db	84
   210  000F75  20                 	db	32
   211  000F76  48                 	db	72
   212  000F77  45                 	db	69
   213  000F78  52                 	db	82
   214  000F79  45                 	db	69
   215  000F7A  2E                 	db	46
   216  000F7B  20                 	db	32
   217  000F7C  0A                 	db	10
   218  000F7D  0D                 	db	13
   219  000F7E  00                 	db	0
   220  000F7F  00                 	db	0
   221  000F80  00                 	db	0
   222  000F81  00                 	db	0
   223  000F82  00                 	db	0
   224  000F83  00                 	db	0
   225  000F84  00                 	db	0
   226  000F85  00                 	db	0
   227  000F86  00                 	db	0
   228  000F87  00                 	db	0
   229  000F88  00                 	db	0
   230  000F89  00                 	db	0
   231  000F8A  00                 	db	0
   232  000F8B  00                 	db	0
   233  000F8C  00                 	db	0
   234  000F8D  00                 	db	0
   235  000F8E  00                 	db	0
   236  000F8F  00                 	db	0
   237  000F90  00                 	db	0
   238  000F91  00                 	db	0
   239  000F92  00                 	db	0
   240  000F93  00                 	db	0
   241  000F94  00                 	db	0
   242  000F95  00                 	db	0
   243  000F96  00                 	db	0
   244  000F97  00                 	db	0
   245  000F98  00                 	db	0
   246  000F99  00                 	db	0
   247  000F9A  00                 	db	0
   248  000F9B  00                 	db	0
   249  000F9C  00                 	db	0
   250  000F9D  00                 	db	0
   251  000F9E  00                 	db	0
   252  000F9F  00                 	db	0
   253  000FA0  00                 	db	0
   254  000FA1  00                 	db	0
   255                           
   256                           	psect	smallconst
   257  000600                     __psmallconst:
   258                           	opt stack 0
   259  000600  00                 	db	0
   260  000601                     _dpowers:
   261                           	opt stack 0
   262  000601  0001               	dw	1
   263  000603  000A               	dw	10
   264  000605  0064               	dw	100
   265  000607  03E8               	dw	1000
   266  000609  2710               	dw	10000
   267  00060B                     __end_of_dpowers:
   268                           	opt stack 0
   269  00060B                     STR_1:
   270  00060B  0A                 	db	10
   271  00060C  0D                 	db	13
   272  00060D  56                 	db	86	;'V'
   273  00060E  61                 	db	97	;'a'
   274  00060F  6C                 	db	108	;'l'
   275  000610  75                 	db	117	;'u'
   276  000611  65                 	db	101	;'e'
   277  000612  73                 	db	115	;'s'
   278  000613  20                 	db	32
   279  000614  61                 	db	97	;'a'
   280  000615  72                 	db	114	;'r'
   281  000616  65                 	db	101	;'e'
   282  000617  2C                 	db	44
   283  000618  20                 	db	32
   284  000619  78                 	db	120	;'x'
   285  00061A  3A                 	db	58	;':'
   286  00061B  20                 	db	32
   287  00061C  25                 	db	37
   288  00061D  64                 	db	100	;'d'
   289  00061E  2C                 	db	44
   290  00061F  20                 	db	32
   291  000620  79                 	db	121	;'y'
   292  000621  3A                 	db	58	;':'
   293  000622  20                 	db	32
   294  000623  25                 	db	37
   295  000624  64                 	db	100	;'d'
   296  000625  2C                 	db	44
   297  000626  20                 	db	32
   298  000627  7A                 	db	122	;'z'
   299  000628  3A                 	db	58	;':'
   300  000629  20                 	db	32
   301  00062A  25                 	db	37
   302  00062B  64                 	db	100	;'d'
   303  00062C  00                 	db	0
   304                           
   305                           ; #config settings
   306  00062D  00                 	db	0	; dummy byte at the end
   307  0000                     
   308                           	psect	nvCOMRAM
   309  000049                     __pnvCOMRAM:
   310                           	opt stack 0
   311  000049                     _eusart1TxBufferRemaining:
   312                           	opt stack 0
   313  000049                     	ds	1
   314                           
   315                           	psect	nvBANK0
   316  0000E3                     __pnvBANK0:
   317                           	opt stack 0
   318  0000E3                     _EUSART1_RxDefaultInterruptHandler:
   319                           	opt stack 0
   320  0000E3                     	ds	2
   321  0000E5                     _EUSART1_TxDefaultInterruptHandler:
   322                           	opt stack 0
   323  0000E5                     	ds	2
   324  0000                     _ANSELA	set	3896
   325  0000                     _ANSELB	set	3897
   326  0000                     _ANSELC	set	3898
   327  0000                     _PIE2bits	set	4000
   328  0000                     _INTCONbits	set	4082
   329  0000                     _RCONbits	set	4048
   330  0000                     _INTCON2bits	set	4081
   331  0000                     _WPUB	set	3937
   332  0000                     _TRISC	set	3988
   333  0000                     _TRISB	set	3987
   334  0000                     _TRISA	set	3986
   335  0000                     _LATC	set	3979
   336  0000                     _LATB	set	3978
   337  0000                     _LATA	set	3977
   338  0000                     _PIR2bits	set	4001
   339  0000                     _SSP1STATbits	set	4039
   340  0000                     _SSP1MSK	set	4042
   341  0000                     _SSP1BUF	set	4041
   342  0000                     _SSP1CON2bits	set	4037
   343  0000                     _SSP1ADD	set	4040
   344  0000                     _SSP1CON2	set	4037
   345  0000                     _SSP1CON1	set	4038
   346  0000                     _SSP1STAT	set	4039
   347  0000                     _PIR1bits	set	3998
   348  0000                     _SSP1CON1bits	set	4038
   349  0000                     _OSCTUNE	set	3995
   350  0000                     _OSCCON2	set	4050
   351  0000                     _OSCCON	set	4051
   352  0000                     _RCREG1	set	4014
   353  0000                     _RCSTA1bits	set	4011
   354  0000                     _TXREG1	set	4013
   355  0000                     _TXSTA1bits	set	4012
   356  0000                     _SPBRGH1	set	4016
   357  0000                     _SPBRG1	set	4015
   358  0000                     _TXSTA1	set	4012
   359  0000                     _RCSTA1	set	4011
   360  0000                     _BAUDCON1	set	4024
   361  0000                     _PIE1bits	set	3997
   362                           
   363                           	psect	cinit
   364  000B04                     __pcinit:
   365                           	opt stack 0
   366  000B04                     start_initialization:
   367                           	opt stack 0
   368  000B04                     __initialization:
   369                           	opt stack 0
   370                           
   371                           ; Initialize objects allocated to BANK1 (50 bytes)
   372                           ; load TBLPTR registers with __pidataBANK1
   373  000B04  0E70               	movlw	low __pidataBANK1
   374  000B06  6EF6               	movwf	tblptrl,c
   375  000B08  0E0F               	movlw	high __pidataBANK1
   376  000B0A  6EF7               	movwf	tblptrh,c
   377  000B0C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   378  000B0E  6EF8               	movwf	tblptru,c
   379  000B10  EE01  F000         	lfsr	0,__pdataBANK1
   380  000B14  EE10 F032          	lfsr	1,50
   381  000B18                     copy_data0:
   382  000B18  0009               	tblrd		*+
   383  000B1A  CFF5 FFEE          	movff	tablat,postinc0
   384  000B1E  50E5               	movf	postdec1,w,c
   385  000B20  50E1               	movf	fsr1l,w,c
   386  000B22  E1FA               	bnz	copy_data0
   387                           
   388                           ; Initialize objects allocated to BANK0 (36 bytes)
   389                           ; load TBLPTR registers with __pidataBANK0
   390  000B24  0E86               	movlw	low __pidataBANK0
   391  000B26  6EF6               	movwf	tblptrl,c
   392  000B28  0E10               	movlw	high __pidataBANK0
   393  000B2A  6EF7               	movwf	tblptrh,c
   394  000B2C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   395  000B2E  6EF8               	movwf	tblptru,c
   396  000B30  EE00  F0BF         	lfsr	0,__pdataBANK0
   397  000B34  EE10 F024          	lfsr	1,36
   398  000B38                     copy_data1:
   399  000B38  0009               	tblrd		*+
   400  000B3A  CFF5 FFEE          	movff	tablat,postinc0
   401  000B3E  50E5               	movf	postdec1,w,c
   402  000B40  50E1               	movf	fsr1l,w,c
   403  000B42  E1FA               	bnz	copy_data1
   404                           
   405                           ; Clear objects allocated to BANK0 (37 bytes)
   406  000B44  EE00  F09A         	lfsr	0,__pbssBANK0
   407  000B48  0E25               	movlw	37
   408  000B4A                     clear_0:
   409  000B4A  6AEE               	clrf	postinc0,c
   410  000B4C  06E8               	decf	wreg,f,c
   411  000B4E  E1FD               	bnz	clear_0
   412                           
   413                           ; Clear objects allocated to COMRAM (37 bytes)
   414  000B50  EE00  F001         	lfsr	0,__pbssCOMRAM
   415  000B54  0E25               	movlw	37
   416  000B56                     clear_1:
   417  000B56  6AEE               	clrf	postinc0,c
   418  000B58  06E8               	decf	wreg,f,c
   419  000B5A  E1FD               	bnz	clear_1
   420  000B5C                     end_of_initialization:
   421                           	opt stack 0
   422  000B5C                     __end_of__initialization:
   423                           	opt stack 0
   424  000B5C  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   425  000B5E  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   426  000B60  0E00               	movlw	low (__Lmediumconst shr (0+16))
   427  000B62  6EF8               	movwf	tblptru,c
   428  000B64  0100               	movlb	0
   429  000B66  EFB5  F005         	goto	_main	;jump to C main() function
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           postdec1	equ	0xFE5
   437                           fsr1l	equ	0xFE1
   438                           
   439                           	psect	bssCOMRAM
   440  000001                     __pbssCOMRAM:
   441                           	opt stack 0
   442  000001                     _eusart1RxBuffer:
   443                           	opt stack 0
   444  000001                     	ds	8
   445  000009                     _eusart1TxBuffer:
   446                           	opt stack 0
   447  000009                     	ds	8
   448  000011                     _i2c1_driver_i2cISR:
   449                           	opt stack 0
   450  000011                     	ds	2
   451  000013                     _i2c1_driver_busCollisionISR:
   452                           	opt stack 0
   453  000013                     	ds	2
   454  000015                     read_xyzvalues@status:
   455                           	opt stack 0
   456  000015                     	ds	1
   457  000016                     read_register@status:
   458                           	opt stack 0
   459  000016                     	ds	1
   460  000017                     write_register@status:
   461                           	opt stack 0
   462  000017                     	ds	1
   463  000018                     _eusart1RxCount:
   464                           	opt stack 0
   465  000018                     	ds	1
   466  000019                     _eusart1RxTail:
   467                           	opt stack 0
   468  000019                     	ds	1
   469  00001A                     _eusart1RxHead:
   470                           	opt stack 0
   471  00001A                     	ds	1
   472  00001B                     _eusart1TxTail:
   473                           	opt stack 0
   474  00001B                     	ds	1
   475  00001C                     _eusart1TxHead:
   476                           	opt stack 0
   477  00001C                     	ds	1
   478  00001D                     read_xyzvalues@readbuffer:
   479                           	opt stack 0
   480  00001D                     	ds	6
   481  000023                     write_register@buffer:
   482                           	opt stack 0
   483  000023                     	ds	2
   484  000025                     read_register@receivebuffer:
   485                           	opt stack 0
   486  000025                     	ds	1
   487                           tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           postdec1	equ	0xFE5
   494                           fsr1l	equ	0xFE1
   495                           
   496                           	psect	bssBANK0
   497  00009A                     __pbssBANK0:
   498                           	opt stack 0
   499  00009A                     _i2c_status:
   500                           	opt stack 0
   501  00009A                     	ds	37
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           postdec1	equ	0xFE5
   509                           fsr1l	equ	0xFE1
   510                           
   511                           	psect	dataBANK0
   512  0000BF                     __pdataBANK0:
   513                           	opt stack 0
   514  0000BF                     _fsmStateTable:
   515                           	opt stack 0
   516  0000BF                     	ds	36
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	dataBANK1
   527  000100                     __pdataBANK1:
   528                           	opt stack 0
   529  000100                     printString@F7170:
   530                           	opt stack 0
   531  000100                     	ds	50
   532                           tblptru	equ	0xFF8
   533                           tblptrh	equ	0xFF7
   534                           tblptrl	equ	0xFF6
   535                           tablat	equ	0xFF5
   536                           postinc0	equ	0xFEE
   537                           wreg	equ	0xFE8
   538                           postdec1	equ	0xFE5
   539                           fsr1l	equ	0xFE1
   540                           
   541                           	psect	cstackBANK0
   542  000060                     __pcstackBANK0:
   543                           	opt stack 0
   544  000060                     ?_printf:
   545                           	opt stack 0
   546  000060                     printf@f:
   547                           	opt stack 0
   548  000060                     read_xyzvalues@sensorData:
   549                           	opt stack 0
   550  000060                     printString@welcome:
   551                           	opt stack 0
   552                           
   553                           ; 50 bytes @ 0x0
   554  000060                     	ds	8
   555  000068                     printf@ap:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x8
   559  000068                     	ds	2
   560  00006A                     printf@flag:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0xA
   564  00006A                     	ds	1
   565  00006B                     printf@prec:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0xB
   569  00006B                     	ds	1
   570  00006C                     printf@val:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0xC
   574  00006C                     	ds	2
   575  00006E                     printf@c:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0xE
   579  00006E                     	ds	36
   580  000092                     printString@i:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x32
   584  000092                     	ds	2
   585  000094                     main@data:
   586                           	opt stack 0
   587                           
   588                           ; 6 bytes @ 0x34
   589  000094                     	ds	6
   590                           tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           postdec1	equ	0xFE5
   597                           fsr1l	equ	0xFE1
   598                           
   599                           	psect	cstackCOMRAM
   600  000026                     __pcstackCOMRAM:
   601                           	opt stack 0
   602  000026                     ??i2_i2c1_driver_isNACK:
   603  000026                     i2i2c1_driver_TXData@d:
   604                           	opt stack 0
   605  000026                     i2_do_I2C_TX$315:
   606                           	opt stack 0
   607  000026                     i2returnReset@p:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x0
   611  000026                     	ds	2
   612  000028                     ??_INTERRUPT_InterruptManager:
   613  000028                     
   614                           ; 1 bytes @ 0x2
   615  000028                     	ds	18
   616  00003A                     ??_mssp1_IRQisEnabled:
   617  00003A                     ??_i2c1_driver_isNACK:
   618  00003A                     ?___lwdiv:
   619                           	opt stack 0
   620  00003A                     i2c_close@ret:
   621                           	opt stack 0
   622  00003A                     EUSART1_Write@txData:
   623                           	opt stack 0
   624  00003A                     i2c1_driver_TXData@d:
   625                           	opt stack 0
   626  00003A                     i2c_setBuffer@buffer:
   627                           	opt stack 0
   628  00003A                     returnReset@p:
   629                           	opt stack 0
   630  00003A                     EUSART1_SetTxInterruptHandler@handler:
   631                           	opt stack 0
   632  00003A                     EUSART1_SetRxInterruptHandler@handler:
   633                           	opt stack 0
   634  00003A                     mssp1_waitForEvent@timeout:
   635                           	opt stack 0
   636  00003A                     i2c1_driver_setBusCollisionISR@f:
   637                           	opt stack 0
   638  00003A                     i2c1_driver_setI2cISR@f:
   639                           	opt stack 0
   640  00003A                     ___lwdiv@dividend:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x14
   644  00003A                     	ds	1
   645  00003B                     ??_printString:
   646  00003B                     putch@txData:
   647                           	opt stack 0
   648  00003B                     _do_I2C_TX$315:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x15
   652  00003B                     	ds	1
   653  00003C                     i2c_open@ret:
   654                           	opt stack 0
   655  00003C                     i2c_setBuffer@bufferSize:
   656                           	opt stack 0
   657  00003C                     ___lwdiv@divisor:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x16
   661  00003C                     	ds	1
   662  00003D                     i2c_open@address:
   663                           	opt stack 0
   664  00003D                     i2c_masterOperation@operation:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x17
   668  00003D                     	ds	1
   669  00003E                     i2c_masterOperation@ret:
   670                           	opt stack 0
   671  00003E                     ___lwdiv@counter:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x18
   675  00003E                     	ds	1
   676  00003F                     i2c_masterAccelRead@reg:
   677                           	opt stack 0
   678  00003F                     write_register@data:
   679                           	opt stack 0
   680  00003F                     ___lwdiv@quotient:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x19
   684  00003F                     	ds	1
   685  000040                     ?_read_xyzvalues:
   686                           	opt stack 0
   687  000040                     write_register@reg:
   688                           	opt stack 0
   689  000040                     read_register@reg:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x1A
   693  000040                     	ds	1
   694  000041                     ??_ACCELEROMETER_Initialize:
   695  000041                     ?___lwmod:
   696                           	opt stack 0
   697  000041                     ___lwmod@dividend:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x1B
   701  000041                     	ds	2
   702  000043                     ___lwmod@divisor:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x1D
   706  000043                     	ds	2
   707  000045                     ___lwmod@counter:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x1F
   711  000045                     	ds	1
   712  000046                     ??_printf:
   713                           
   714                           ; 1 bytes @ 0x20
   715  000046                     	ds	1
   716  000047                     ??_main:
   717                           
   718                           ; 1 bytes @ 0x21
   719  000047                     	ds	2
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           postinc0	equ	0xFEE
   725                           wreg	equ	0xFE8
   726                           postdec1	equ	0xFE5
   727                           fsr1l	equ	0xFE1
   728                           
   729 ;;
   730 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   731 ;;
   732 ;; *************** function _main *****************
   733 ;; Defined at:
   734 ;;		line 70 in file "main.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  data            6   52[BANK0 ] struct .
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   748 ;;      Params:         0       0       0       0       0       0       0
   749 ;;      Locals:         0       6       0       0       0       0       0
   750 ;;      Temps:          2       0       0       0       0       0       0
   751 ;;      Totals:         2       6       0       0       0       0       0
   752 ;;Total ram usage:        8 bytes
   753 ;; Hardware stack levels required when called:   14
   754 ;; This function calls:
   755 ;;		_ACCELEROMETER_Initialize
   756 ;;		_SYSTEM_Initialize
   757 ;;		_printString
   758 ;;		_printf
   759 ;;		_read_xyzvalues
   760 ;; This function is called by:
   761 ;;		Startup code after reset
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text0
   766  000B6A                     __ptext0:
   767                           	opt stack 0
   768  000B6A                     _main:
   769                           	opt stack 17
   770                           
   771                           ;main.c: 71: accelerometer_data_t data;
   772                           ;main.c: 74: SYSTEM_Initialize();
   773                           
   774                           ;incstack = 0
   775  000B6A  ECD5  F008         	call	_SYSTEM_Initialize	;wreg free
   776                           
   777                           ;main.c: 77: (INTCONbits.GIE = 1);
   778  000B6E  8EF2               	bsf	intcon,7,c	;volatile
   779                           
   780                           ;main.c: 80: (INTCONbits.PEIE = 1);
   781  000B70  8CF2               	bsf	intcon,6,c	;volatile
   782                           
   783                           ;main.c: 82: ACCELEROMETER_Initialize();
   784  000B72  EC4C  F005         	call	_ACCELEROMETER_Initialize	;wreg free
   785                           
   786                           ;main.c: 84: printString();
   787  000B76  ECE6  F005         	call	_printString	;wreg free
   788  000B7A                     
   789                           ;main.c: 87: data = read_xyzvalues();
   790  000B7A  EC44  F004         	call	_read_xyzvalues	;wreg free
   791  000B7E  EE20  F094         	lfsr	2,main@data
   792  000B82  0E05               	movlw	5
   793  000B84                     u2121:
   794  000B84  CFEB FFDB          	movff	plusw0,plusw2
   795  000B88  06E8               	decf	wreg,f,c
   796  000B8A  E2FC               	bc	u2121
   797                           
   798                           ;main.c: 88: _delay((unsigned long)((100)*(16000000/4000.0)));
   799  000B8C  0E03               	movlw	3
   800  000B8E  6E48               	movwf	(??_main+1)& (0+255),c
   801  000B90  0E08               	movlw	8
   802  000B92  6E47               	movwf	??_main& (0+255),c
   803  000B94  0E77               	movlw	119
   804  000B96                     u2137:
   805  000B96  2EE8               	decfsz	wreg,f,c
   806  000B98  D7FE               	bra	u2137
   807  000B9A  2E47               	decfsz	??_main& (0+255),f,c
   808  000B9C  D7FC               	bra	u2137
   809  000B9E  2E48               	decfsz	(??_main+1)& (0+255),f,c
   810  000BA0  D7FA               	bra	u2137
   811  000BA2  F000               	nop	
   812                           
   813                           ;main.c: 90: printf("\n\rValues are, x: %d, y: %d, z: %d", data.x, data.y, data.z);
   814  000BA4  0E0B               	movlw	low STR_1
   815  000BA6  0100               	movlb	0	; () banked
   816  000BA8  6F60               	movwf	printf@f& (0+255),b
   817  000BAA  0E06               	movlw	high STR_1
   818  000BAC  6F61               	movwf	(printf@f+1)& (0+255),b
   819  000BAE  C094  F062         	movff	main@data,?_printf+2
   820  000BB2  C095  F063         	movff	main@data+1,?_printf+3
   821  000BB6  C096  F064         	movff	main@data+2,?_printf+4
   822  000BBA  C097  F065         	movff	main@data+3,?_printf+5
   823  000BBE  C098  F066         	movff	main@data+4,?_printf+6
   824  000BC2  C099  F067         	movff	main@data+5,?_printf+7
   825  000BC6  EC17  F003         	call	_printf	;wreg free
   826  000BCA  D7D7               	goto	l613
   827  000BCC                     __end_of_main:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           intcon	equ	0xFF2
   834                           postinc0	equ	0xFEE
   835                           plusw0	equ	0xFEB
   836                           wreg	equ	0xFE8
   837                           postdec1	equ	0xFE5
   838                           fsr1l	equ	0xFE1
   839                           plusw2	equ	0xFDB
   840                           
   841 ;; *************** function _read_xyzvalues *****************
   842 ;; Defined at:
   843 ;;		line 67 in file "accelerometer.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;  sensorData      6    0[BANK0 ] struct .
   848 ;; Return value:  Size  Location     Type
   849 ;;                  6   26[COMRAM] struct .
   850 ;; Registers used:
   851 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   857 ;;      Params:         6       0       0       0       0       0       0
   858 ;;      Locals:         0       6       0       0       0       0       0
   859 ;;      Temps:          0       0       0       0       0       0       0
   860 ;;      Totals:         6       6       0       0       0       0       0
   861 ;;Total ram usage:       12 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:   12
   864 ;; This function calls:
   865 ;;		_i2c_close
   866 ;;		_i2c_masterAccelRead
   867 ;;		_i2c_open
   868 ;;		_i2c_setBuffer
   869 ;; This function is called by:
   870 ;;		_main
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text1
   875  000888                     __ptext1:
   876                           	opt stack 0
   877  000888                     _read_xyzvalues:
   878                           	opt stack 18
   879                           
   880                           ;accelerometer.c: 68: static i2c_error_t status;
   881                           ;accelerometer.c: 69: static volatile uint8_t readbuffer[6];
   882                           ;accelerometer.c: 70: accelerometer_data_t sensorData;
   883                           ;accelerometer.c: 73: i2c_open(0x1D);
   884                           
   885                           ;incstack = 0
   886  000888  0E1D               	movlw	29
   887  00088A  ECAC  F003         	call	_i2c_open
   888                           
   889                           ;accelerometer.c: 74: i2c_setBuffer(readbuffer, 6);
   890  00088E  0E1D               	movlw	low read_xyzvalues@readbuffer
   891  000890  6E3A               	movwf	i2c_setBuffer@buffer,c
   892  000892  0E00               	movlw	high read_xyzvalues@readbuffer
   893  000894  6E3B               	movwf	i2c_setBuffer@buffer+1,c
   894  000896  0E00               	movlw	0
   895  000898  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
   896  00089A  0E06               	movlw	6
   897  00089C  6E3C               	movwf	i2c_setBuffer@bufferSize,c
   898  00089E  EC64  F008         	call	_i2c_setBuffer	;wreg free
   899                           
   900                           ;accelerometer.c: 77: status = i2c_masterAccelRead(0x01);
   901  0008A2  0E01               	movlw	1
   902  0008A4  EC28  F009         	call	_i2c_masterAccelRead
   903  0008A8  6E15               	movwf	read_xyzvalues@status,c
   904                           
   905                           ;accelerometer.c: 80: status = i2c_close();
   906  0008AA  EC55  F008         	call	_i2c_close	;wreg free
   907  0008AE  6E15               	movwf	read_xyzvalues@status,c
   908                           
   909                           ;accelerometer.c: 82: sensorData.x = readbuffer[0];
   910  0008B0  C01D  F060         	movff	read_xyzvalues@readbuffer,read_xyzvalues@sensorData	;volatile
   911  0008B4  0100               	movlb	0	; () banked
   912  0008B6  6B61               	clrf	(read_xyzvalues@sensorData+1)& (0+255),b
   913                           
   914                           ; BSR set to: 0
   915                           ;accelerometer.c: 83: sensorData.x <<= 8;
   916  0008B8  5160               	movf	read_xyzvalues@sensorData& (0+255),w,b
   917  0008BA  6F61               	movwf	(read_xyzvalues@sensorData+1)& (0+255),b
   918  0008BC  6B60               	clrf	read_xyzvalues@sensorData& (0+255),b
   919                           
   920                           ; BSR set to: 0
   921                           ;accelerometer.c: 84: sensorData.x |= readbuffer[1];
   922  0008BE  501E               	movf	read_xyzvalues@readbuffer+1,w,c	;volatile
   923  0008C0  1360               	iorwf	read_xyzvalues@sensorData& (0+255),f,b
   924                           
   925                           ; BSR set to: 0
   926                           ;accelerometer.c: 85: sensorData.x >>= 2;
   927  0008C2  3561               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   928  0008C4  3361               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   929  0008C6  3360               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   930  0008C8  3561               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   931  0008CA  3361               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   932  0008CC  3360               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   933                           
   934                           ; BSR set to: 0
   935                           ;accelerometer.c: 87: sensorData.y = readbuffer[2];
   936  0008CE  C01F  F062         	movff	read_xyzvalues@readbuffer+2,read_xyzvalues@sensorData+2	;volatile
   937  0008D2  6B63               	clrf	(read_xyzvalues@sensorData+3)& (0+255),b
   938                           
   939                           ; BSR set to: 0
   940                           ;accelerometer.c: 88: sensorData.y <<= 8;
   941  0008D4  5162               	movf	(read_xyzvalues@sensorData+2)& (0+255),w,b
   942  0008D6  6F63               	movwf	(read_xyzvalues@sensorData+3)& (0+255),b
   943  0008D8  6B62               	clrf	(read_xyzvalues@sensorData+2)& (0+255),b
   944                           
   945                           ; BSR set to: 0
   946                           ;accelerometer.c: 89: sensorData.y |= readbuffer[3];
   947  0008DA  5020               	movf	read_xyzvalues@readbuffer+3,w,c	;volatile
   948  0008DC  1362               	iorwf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   949                           
   950                           ; BSR set to: 0
   951                           ;accelerometer.c: 90: sensorData.y >>= 2;
   952  0008DE  3563               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   953  0008E0  3363               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   954  0008E2  3362               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   955  0008E4  3563               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   956  0008E6  3363               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   957  0008E8  3362               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   958                           
   959                           ; BSR set to: 0
   960                           ;accelerometer.c: 92: sensorData.z = readbuffer[4];
   961  0008EA  C021  F064         	movff	read_xyzvalues@readbuffer+4,read_xyzvalues@sensorData+4	;volatile
   962  0008EE  6B65               	clrf	(read_xyzvalues@sensorData+5)& (0+255),b
   963                           
   964                           ; BSR set to: 0
   965                           ;accelerometer.c: 93: sensorData.z <<= 8;
   966  0008F0  5164               	movf	(read_xyzvalues@sensorData+4)& (0+255),w,b
   967  0008F2  6F65               	movwf	(read_xyzvalues@sensorData+5)& (0+255),b
   968  0008F4  6B64               	clrf	(read_xyzvalues@sensorData+4)& (0+255),b
   969                           
   970                           ; BSR set to: 0
   971                           ;accelerometer.c: 94: sensorData.z |= readbuffer[5];
   972  0008F6  5022               	movf	read_xyzvalues@readbuffer+5,w,c	;volatile
   973  0008F8  1364               	iorwf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   974                           
   975                           ; BSR set to: 0
   976                           ;accelerometer.c: 95: sensorData.z >>= 2;
   977  0008FA  3565               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   978  0008FC  3365               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   979  0008FE  3364               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   980  000900  3565               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   981  000902  3365               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   982  000904  3364               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   983                           
   984                           ; BSR set to: 0
   985                           ;accelerometer.c: 97: return sensorData;
   986  000906  EE20  F060         	lfsr	2,read_xyzvalues@sensorData
   987  00090A  EE00  F040         	lfsr	0,?_read_xyzvalues
   988  00090E  0E05               	movlw	5
   989  000910                     u1861:
   990  000910  CFDB FFEB          	movff	plusw2,plusw0
   991  000914  06E8               	decf	wreg,f,c
   992  000916  E2FC               	bc	u1861
   993  000918  0012               	return	
   994  00091A                     __end_of_read_xyzvalues:
   995                           	opt stack 0
   996                           tblptru	equ	0xFF8
   997                           tblptrh	equ	0xFF7
   998                           tblptrl	equ	0xFF6
   999                           tablat	equ	0xFF5
  1000                           intcon	equ	0xFF2
  1001                           postinc0	equ	0xFEE
  1002                           plusw0	equ	0xFEB
  1003                           wreg	equ	0xFE8
  1004                           postdec1	equ	0xFE5
  1005                           fsr1l	equ	0xFE1
  1006                           plusw2	equ	0xFDB
  1007                           
  1008 ;; *************** function _printf *****************
  1009 ;; Defined at:
  1010 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1013 ;;		 -> STR_1(34), 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  tmpval          4    0        struct .
  1016 ;;  cp              3    0        PTR const unsigned char 
  1017 ;;  val             2   12[BANK0 ] unsigned int 
  1018 ;;  ap              2    8[BANK0 ] PTR void [1]
  1019 ;;		 -> ?_printf(2), 
  1020 ;;  len             2    0        unsigned int 
  1021 ;;  c               1   14[BANK0 ] char 
  1022 ;;  prec            1   11[BANK0 ] char 
  1023 ;;  flag            1   10[BANK0 ] unsigned char 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  2    0[BANK0 ] int 
  1026 ;; Registers used:
  1027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1033 ;;      Params:         0       8       0       0       0       0       0
  1034 ;;      Locals:         0       7       0       0       0       0       0
  1035 ;;      Temps:          1       0       0       0       0       0       0
  1036 ;;      Totals:         1      15       0       0       0       0       0
  1037 ;;Total ram usage:       16 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    7
  1040 ;; This function calls:
  1041 ;;		___lwdiv
  1042 ;;		___lwmod
  1043 ;;		_putch
  1044 ;; This function is called by:
  1045 ;;		_main
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           	psect	text2
  1050  00062E                     __ptext2:
  1051                           	opt stack 0
  1052  00062E                     _printf:
  1053                           	opt stack 23
  1054                           
  1055                           ;doprnt.c: 466: va_list ap;
  1056                           ;doprnt.c: 499: signed char c;
  1057                           ;doprnt.c: 506: signed char prec;
  1058                           ;doprnt.c: 508: unsigned char flag;
  1059                           ;doprnt.c: 523: union {
  1060                           ;doprnt.c: 524: unsigned long vd;
  1061                           ;doprnt.c: 525: double integ;
  1062                           ;doprnt.c: 526: } tmpval;
  1063                           ;doprnt.c: 528: unsigned int val;
  1064                           ;doprnt.c: 529: unsigned len;
  1065                           ;doprnt.c: 530: const char * cp;
  1066                           ;doprnt.c: 533: *ap = __va_start();
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;incstack = 0
  1070  00062E  0E62               	movlw	low (?_printf+2)
  1071  000630  0100               	movlb	0	; () banked
  1072  000632  6F68               	movwf	printf@ap& (0+255),b
  1073  000634  0E00               	movlw	high (?_printf+2)
  1074  000636  6F69               	movwf	(printf@ap+1)& (0+255),b
  1075                           
  1076                           ;doprnt.c: 536: while(c = *f++) {
  1077  000638  D081               	goto	u1930
  1078  00063A                     
  1079                           ; BSR set to: 0
  1080                           ;doprnt.c: 538: if(c != '%')
  1081                           
  1082                           ; BSR set to: 0
  1083  00063A  0E25               	movlw	37
  1084  00063C  196E               	xorwf	printf@c& (0+255),w,b
  1085  00063E  B4D8               	btfsc	status,2,c
  1086  000640  D004               	goto	l672
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;doprnt.c: 540: {
  1090                           ;doprnt.c: 541: (putch(c) );
  1091  000642  516E               	movf	printf@c& (0+255),w,b
  1092  000644  EC73  F009         	call	_putch
  1093                           
  1094                           ;doprnt.c: 542: continue;
  1095  000648  D079               	goto	u1930
  1096  00064A                     l672:
  1097                           
  1098                           ;doprnt.c: 543: }
  1099                           ;doprnt.c: 548: flag = 0;
  1100  00064A  0E00               	movlw	0
  1101  00064C  0100               	movlb	0	; () banked
  1102  00064E  6F6A               	movwf	printf@flag& (0+255),b
  1103                           
  1104                           ; BSR set to: 0
  1105                           
  1106                           ; BSR set to: 0
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;doprnt.c: 822: }
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;doprnt.c: 813: continue;
  1113                           
  1114                           ;doprnt.c: 802: default:
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;doprnt.c: 698: case 'i':
  1118                           ;doprnt.c: 699: break;
  1119                           
  1120                           ; BSR set to: 0
  1121                           
  1122                           ;doprnt.c: 697: case 'd':
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;doprnt.c: 638: goto alldone;
  1126                           
  1127                           ;doprnt.c: 637: case 0:
  1128                           
  1129                           ;doprnt.c: 635: switch(c = *f++) {
  1130  000650  C060  FFF6         	movff	printf@f,tblptrl
  1131  000654  C061  FFF7         	movff	printf@f+1,tblptrh
  1132  000658  4B60               	infsnz	printf@f& (0+255),f,b
  1133  00065A  2B61               	incf	(printf@f+1)& (0+255),f,b
  1134  00065C                     	if	0	;tblptru may be non-zero
  1135  00065C                     	endif
  1136  00065C                     	if	0	;tblptru may be non-zero
  1137  00065C                     	endif
  1138  00065C  0008               	tblrd		*
  1139  00065E  CFF5 F06E          	movff	tablat,printf@c
  1140  000662  516E               	movf	printf@c& (0+255),w,b
  1141                           
  1142                           ; Switch size 1, requested type "space"
  1143                           ; Number of cases is 3, Range of values is 0 to 105
  1144                           ; switch strategies available:
  1145                           ; Name         Instructions Cycles
  1146                           ; simple_byte           10     6 (average)
  1147                           ;	Chosen strategy is simple_byte
  1148  000664  0A00               	xorlw	0	; case 0
  1149  000666  B4D8               	btfsc	status,2,c
  1150  000668  0012               	return	
  1151  00066A  0A64               	xorlw	100	; case 100
  1152  00066C  B4D8               	btfsc	status,2,c
  1153  00066E  D003               	goto	l678
  1154  000670  0A0D               	xorlw	13	; case 105
  1155  000672  A4D8               	btfss	status,2,c
  1156  000674  D063               	goto	u1930
  1157  000676                     l678:
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;doprnt.c: 1253: {
  1161                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1162                           
  1163                           ; BSR set to: 0
  1164  000676  C068  FFD9         	movff	printf@ap,fsr2l
  1165  00067A  C069  FFDA         	movff	printf@ap+1,fsr2h
  1166  00067E  CFDE F06C          	movff	postinc2,printf@val
  1167  000682  CFDD F06D          	movff	postdec2,printf@val+1
  1168                           
  1169                           ; BSR set to: 0
  1170  000686  0E02               	movlw	2
  1171  000688  2768               	addwf	printf@ap& (0+255),f,b
  1172  00068A  0E00               	movlw	0
  1173  00068C  2369               	addwfc	(printf@ap+1)& (0+255),f,b
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;doprnt.c: 1261: if((int)val < 0) {
  1177  00068E  AF6D               	btfss	(printf@val+1)& (0+255),7,b
  1178  000690  D006               	goto	l680
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;doprnt.c: 1262: flag |= 0x03;
  1182  000692  0E03               	movlw	3
  1183  000694  136A               	iorwf	printf@flag& (0+255),f,b
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;doprnt.c: 1263: val = -val;
  1187  000696  6D6C               	negf	printf@val& (0+255),b
  1188  000698  1F6D               	comf	(printf@val+1)& (0+255),f,b
  1189  00069A  B0D8               	btfsc	status,0,c
  1190  00069C  2B6D               	incf	(printf@val+1)& (0+255),f,b
  1191  00069E                     l680:
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;doprnt.c: 1264: }
  1195                           ;doprnt.c: 1266: }
  1196                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1197                           
  1198                           ; BSR set to: 0
  1199  00069E  0E01               	movlw	1
  1200  0006A0  6F6E               	movwf	printf@c& (0+255),b
  1201  0006A2                     l4013:
  1202                           
  1203                           ; BSR set to: 0
  1204  0006A2  0E05               	movlw	5
  1205  0006A4  196E               	xorwf	printf@c& (0+255),w,b
  1206  0006A6  B4D8               	btfsc	status,2,c
  1207  0006A8  D012               	goto	u1910
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;doprnt.c: 1306: if(val < dpowers[c])
  1211                           
  1212                           ; BSR set to: 0
  1213                           
  1214                           ; BSR set to: 0
  1215  0006AA  516E               	movf	printf@c& (0+255),w,b
  1216  0006AC  0D02               	mullw	2
  1217  0006AE  0E01               	movlw	low _dpowers
  1218  0006B0  24F3               	addwf	prodl,w,c
  1219  0006B2  6EF6               	movwf	tblptrl,c
  1220  0006B4  0E06               	movlw	high _dpowers
  1221  0006B6  20F4               	addwfc	prodh,w,c
  1222  0006B8  6EF7               	movwf	tblptrh,c
  1223  0006BA                     	if	0	;There are less than 3 active tblptr bytes
  1224  0006BA                     	endif
  1225  0006BA  0009               	tblrd		*+
  1226  0006BC  50F5               	movf	tablat,w,c
  1227  0006BE  5D6C               	subwf	printf@val& (0+255),w,b
  1228  0006C0  0009               	tblrd		*+
  1229  0006C2  50F5               	movf	tablat,w,c
  1230  0006C4  596D               	subwfb	(printf@val+1)& (0+255),w,b
  1231  0006C6  A0D8               	btfss	status,0,c
  1232  0006C8  D002               	goto	u1910
  1233                           
  1234                           ; BSR set to: 0
  1235                           
  1236                           ; BSR set to: 0
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;doprnt.c: 1307: break;
  1240  0006CA  2B6E               	incf	printf@c& (0+255),f,b
  1241  0006CC  D7EA               	goto	l4013
  1242  0006CE                     u1910:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;doprnt.c: 1422: {
  1246                           ;doprnt.c: 1438: if(flag & 0x03)
  1247                           
  1248                           ; BSR set to: 0
  1249  0006CE  C06A  F046         	movff	printf@flag,??_printf
  1250  0006D2  0E03               	movlw	3
  1251  0006D4  1646               	andwf	??_printf,f,c
  1252  0006D6  B4D8               	btfsc	status,2,c
  1253  0006D8  D003               	goto	l684
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;doprnt.c: 1439: (putch('-') );
  1257  0006DA  0E2D               	movlw	45
  1258  0006DC  EC73  F009         	call	_putch
  1259  0006E0                     l684:
  1260                           
  1261                           ;doprnt.c: 1469: }
  1262                           ;doprnt.c: 1472: prec = c;
  1263  0006E0  C06E  F06B         	movff	printf@c,printf@prec
  1264                           
  1265                           ;doprnt.c: 1474: while(prec--) {
  1266  0006E4  D026               	goto	l685
  1267  0006E6                     
  1268                           ;doprnt.c: 1478: {
  1269                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1270  0006E6  0100               	movlb	0	; () banked
  1271  0006E8  516B               	movf	printf@prec& (0+255),w,b
  1272  0006EA  0D02               	mullw	2
  1273  0006EC  0E01               	movlw	low _dpowers
  1274  0006EE  24F3               	addwf	prodl,w,c
  1275  0006F0  6EF6               	movwf	tblptrl,c
  1276  0006F2  0E06               	movlw	high _dpowers
  1277  0006F4  20F4               	addwfc	prodh,w,c
  1278  0006F6  6EF7               	movwf	tblptrh,c
  1279  0006F8                     	if	0	;There are less than 3 active tblptr bytes
  1280  0006F8                     	endif
  1281  0006F8  0009               	tblrd		*+
  1282  0006FA  CFF5 F03C          	movff	tablat,___lwdiv@divisor
  1283  0006FE  000A               	tblrd		*-
  1284  000700  CFF5 F03D          	movff	tablat,___lwdiv@divisor+1
  1285  000704  C06C  F03A         	movff	printf@val,___lwdiv@dividend
  1286  000708  C06D  F03B         	movff	printf@val+1,___lwdiv@dividend+1
  1287  00070C  EC71  F006         	call	___lwdiv	;wreg free
  1288  000710  C03A  F041         	movff	?___lwdiv,___lwmod@dividend
  1289  000714  C03B  F042         	movff	?___lwdiv+1,___lwmod@dividend+1
  1290  000718  0E00               	movlw	0
  1291  00071A  6E44               	movwf	___lwmod@divisor+1,c
  1292  00071C  0E0A               	movlw	10
  1293  00071E  6E43               	movwf	___lwmod@divisor,c
  1294  000720  EC7A  F007         	call	___lwmod	;wreg free
  1295  000724  5041               	movf	?___lwmod,w,c
  1296  000726  0F30               	addlw	48
  1297  000728  0100               	movlb	0	; () banked
  1298  00072A  6F6E               	movwf	printf@c& (0+255),b
  1299                           
  1300                           ; BSR set to: 0
  1301                           ;doprnt.c: 1523: }
  1302                           ;doprnt.c: 1524: (putch(c) );
  1303  00072C  516E               	movf	printf@c& (0+255),w,b
  1304  00072E  EC73  F009         	call	_putch
  1305  000732                     l685:
  1306  000732  0100               	movlb	0	; () banked
  1307  000734  076B               	decf	printf@prec& (0+255),f,b
  1308  000736  296B               	incf	printf@prec& (0+255),w,b
  1309  000738  A4D8               	btfss	status,2,c
  1310  00073A  D7D5               	goto	l686
  1311  00073C                     u1930:
  1312                           
  1313                           ; BSR set to: 0
  1314                           
  1315                           ; BSR set to: 0
  1316  00073C  C060  FFF6         	movff	printf@f,tblptrl
  1317  000740  C061  FFF7         	movff	printf@f+1,tblptrh
  1318  000744  0100               	movlb	0	; () banked
  1319  000746  4B60               	infsnz	printf@f& (0+255),f,b
  1320  000748  2B61               	incf	(printf@f+1)& (0+255),f,b
  1321  00074A                     	if	0	;tblptru may be non-zero
  1322  00074A                     	endif
  1323  00074A                     	if	0	;tblptru may be non-zero
  1324  00074A                     	endif
  1325  00074A  0008               	tblrd		*
  1326  00074C  CFF5 F06E          	movff	tablat,printf@c
  1327  000750  516E               	movf	printf@c& (0+255),w,b
  1328  000752  B4D8               	btfsc	status,2,c
  1329  000754  0012               	return	
  1330  000756  D771               	goto	l671
  1331  000758                     __end_of_printf:
  1332                           	opt stack 0
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           prodh	equ	0xFF4
  1338                           prodl	equ	0xFF3
  1339                           intcon	equ	0xFF2
  1340                           postinc0	equ	0xFEE
  1341                           plusw0	equ	0xFEB
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1l	equ	0xFE1
  1345                           postinc2	equ	0xFDE
  1346                           postdec2	equ	0xFDD
  1347                           plusw2	equ	0xFDB
  1348                           fsr2h	equ	0xFDA
  1349                           fsr2l	equ	0xFD9
  1350                           status	equ	0xFD8
  1351                           
  1352 ;; *************** function _putch *****************
  1353 ;; Defined at:
  1354 ;;		line 178 in file "mcc_generated_files/eusart1.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;  txData          1    wreg     unsigned char 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  txData          1   21[COMRAM] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1368 ;;      Params:         0       0       0       0       0       0       0
  1369 ;;      Locals:         1       0       0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0
  1371 ;;      Totals:         1       0       0       0       0       0       0
  1372 ;;Total ram usage:        1 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    6
  1375 ;; This function calls:
  1376 ;;		_EUSART1_Write
  1377 ;; This function is called by:
  1378 ;;		_printf
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text3
  1383  0012E6                     __ptext3:
  1384                           	opt stack 0
  1385  0012E6                     _putch:
  1386                           	opt stack 23
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;incstack = 0
  1390                           ;putch@txData stored from wreg
  1391  0012E6  6E3B               	movwf	putch@txData,c
  1392                           
  1393                           ;eusart1.c: 180: EUSART1_Write(txData);
  1394  0012E8  503B               	movf	putch@txData,w,c
  1395  0012EA  EC9B  F007         	call	_EUSART1_Write
  1396  0012EE  0012               	return		;funcret
  1397  0012F0                     __end_of_putch:
  1398                           	opt stack 0
  1399                           tblptru	equ	0xFF8
  1400                           tblptrh	equ	0xFF7
  1401                           tblptrl	equ	0xFF6
  1402                           tablat	equ	0xFF5
  1403                           prodh	equ	0xFF4
  1404                           prodl	equ	0xFF3
  1405                           intcon	equ	0xFF2
  1406                           postinc0	equ	0xFEE
  1407                           plusw0	equ	0xFEB
  1408                           wreg	equ	0xFE8
  1409                           postdec1	equ	0xFE5
  1410                           fsr1l	equ	0xFE1
  1411                           postinc2	equ	0xFDE
  1412                           postdec2	equ	0xFDD
  1413                           plusw2	equ	0xFDB
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function ___lwmod *****************
  1419 ;; Defined at:
  1420 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  dividend        2   27[COMRAM] unsigned int 
  1423 ;;  divisor         2   29[COMRAM] unsigned int 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  counter         1   31[COMRAM] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  2   27[COMRAM] unsigned int 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1435 ;;      Params:         4       0       0       0       0       0       0
  1436 ;;      Locals:         1       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0
  1438 ;;      Totals:         5       0       0       0       0       0       0
  1439 ;;Total ram usage:        5 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    5
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_printf
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text4
  1450  000EF4                     __ptext4:
  1451                           	opt stack 0
  1452  000EF4                     ___lwmod:
  1453                           	opt stack 24
  1454                           
  1455                           ;incstack = 0
  1456  000EF4  5043               	movf	___lwmod@divisor,w,c
  1457  000EF6  1044               	iorwf	___lwmod@divisor+1,w,c
  1458  000EF8  B4D8               	btfsc	status,2,c
  1459  000EFA  D018               	goto	l1108
  1460  000EFC  0E01               	movlw	1
  1461  000EFE  6E45               	movwf	___lwmod@counter,c
  1462  000F00  D004               	goto	l1103
  1463  000F02  90D8               	bcf	status,0,c
  1464  000F04  3643               	rlcf	___lwmod@divisor,f,c
  1465  000F06  3644               	rlcf	___lwmod@divisor+1,f,c
  1466  000F08  2A45               	incf	___lwmod@counter,f,c
  1467  000F0A                     l1103:
  1468  000F0A  AE44               	btfss	___lwmod@divisor+1,7,c
  1469  000F0C  D7FA               	goto	l1104
  1470  000F0E                     u1730:
  1471  000F0E  5043               	movf	___lwmod@divisor,w,c
  1472  000F10  5C41               	subwf	___lwmod@dividend,w,c
  1473  000F12  5044               	movf	___lwmod@divisor+1,w,c
  1474  000F14  5842               	subwfb	___lwmod@dividend+1,w,c
  1475  000F16  A0D8               	btfss	status,0,c
  1476  000F18  D004               	goto	l1107
  1477  000F1A  5043               	movf	___lwmod@divisor,w,c
  1478  000F1C  5E41               	subwf	___lwmod@dividend,f,c
  1479  000F1E  5044               	movf	___lwmod@divisor+1,w,c
  1480  000F20  5A42               	subwfb	___lwmod@dividend+1,f,c
  1481  000F22                     l1107:
  1482  000F22  90D8               	bcf	status,0,c
  1483  000F24  3244               	rrcf	___lwmod@divisor+1,f,c
  1484  000F26  3243               	rrcf	___lwmod@divisor,f,c
  1485  000F28  2E45               	decfsz	___lwmod@counter,f,c
  1486  000F2A  D7F1               	goto	u1730
  1487  000F2C                     l1108:
  1488  000F2C  C041  F041         	movff	___lwmod@dividend,?___lwmod
  1489  000F30  C042  F042         	movff	___lwmod@dividend+1,?___lwmod+1
  1490  000F34  0012               	return		;funcret
  1491  000F36                     __end_of___lwmod:
  1492                           	opt stack 0
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           prodh	equ	0xFF4
  1498                           prodl	equ	0xFF3
  1499                           intcon	equ	0xFF2
  1500                           postinc0	equ	0xFEE
  1501                           plusw0	equ	0xFEB
  1502                           wreg	equ	0xFE8
  1503                           postdec1	equ	0xFE5
  1504                           fsr1l	equ	0xFE1
  1505                           postinc2	equ	0xFDE
  1506                           postdec2	equ	0xFDD
  1507                           plusw2	equ	0xFDB
  1508                           fsr2h	equ	0xFDA
  1509                           fsr2l	equ	0xFD9
  1510                           status	equ	0xFD8
  1511                           
  1512 ;; *************** function ___lwdiv *****************
  1513 ;; Defined at:
  1514 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;  dividend        2   20[COMRAM] unsigned int 
  1517 ;;  divisor         2   22[COMRAM] unsigned int 
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  quotient        2   25[COMRAM] unsigned int 
  1520 ;;  counter         1   24[COMRAM] unsigned char 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  2   20[COMRAM] unsigned int 
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1530 ;;      Params:         4       0       0       0       0       0       0
  1531 ;;      Locals:         3       0       0       0       0       0       0
  1532 ;;      Temps:          0       0       0       0       0       0       0
  1533 ;;      Totals:         7       0       0       0       0       0       0
  1534 ;;Total ram usage:        7 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    5
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		_printf
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text5
  1545  000CE2                     __ptext5:
  1546                           	opt stack 0
  1547  000CE2                     ___lwdiv:
  1548                           	opt stack 24
  1549                           
  1550                           ;incstack = 0
  1551  000CE2  0E00               	movlw	0
  1552  000CE4  6E40               	movwf	___lwdiv@quotient+1,c
  1553  000CE6  0E00               	movlw	0
  1554  000CE8  6E3F               	movwf	___lwdiv@quotient,c
  1555  000CEA  503C               	movf	___lwdiv@divisor,w,c
  1556  000CEC  103D               	iorwf	___lwdiv@divisor+1,w,c
  1557  000CEE  B4D8               	btfsc	status,2,c
  1558  000CF0  D01C               	goto	l1098
  1559  000CF2  0E01               	movlw	1
  1560  000CF4  6E3E               	movwf	___lwdiv@counter,c
  1561  000CF6  D004               	goto	l1093
  1562  000CF8  90D8               	bcf	status,0,c
  1563  000CFA  363C               	rlcf	___lwdiv@divisor,f,c
  1564  000CFC  363D               	rlcf	___lwdiv@divisor+1,f,c
  1565  000CFE  2A3E               	incf	___lwdiv@counter,f,c
  1566  000D00                     l1093:
  1567  000D00  AE3D               	btfss	___lwdiv@divisor+1,7,c
  1568  000D02  D7FA               	goto	l1094
  1569  000D04                     u1700:
  1570  000D04  90D8               	bcf	status,0,c
  1571  000D06  363F               	rlcf	___lwdiv@quotient,f,c
  1572  000D08  3640               	rlcf	___lwdiv@quotient+1,f,c
  1573  000D0A  503C               	movf	___lwdiv@divisor,w,c
  1574  000D0C  5C3A               	subwf	___lwdiv@dividend,w,c
  1575  000D0E  503D               	movf	___lwdiv@divisor+1,w,c
  1576  000D10  583B               	subwfb	___lwdiv@dividend+1,w,c
  1577  000D12  A0D8               	btfss	status,0,c
  1578  000D14  D005               	goto	l1097
  1579  000D16  503C               	movf	___lwdiv@divisor,w,c
  1580  000D18  5E3A               	subwf	___lwdiv@dividend,f,c
  1581  000D1A  503D               	movf	___lwdiv@divisor+1,w,c
  1582  000D1C  5A3B               	subwfb	___lwdiv@dividend+1,f,c
  1583  000D1E  803F               	bsf	___lwdiv@quotient,0,c
  1584  000D20                     l1097:
  1585  000D20  90D8               	bcf	status,0,c
  1586  000D22  323D               	rrcf	___lwdiv@divisor+1,f,c
  1587  000D24  323C               	rrcf	___lwdiv@divisor,f,c
  1588  000D26  2E3E               	decfsz	___lwdiv@counter,f,c
  1589  000D28  D7ED               	goto	u1700
  1590  000D2A                     l1098:
  1591  000D2A  C03F  F03A         	movff	___lwdiv@quotient,?___lwdiv
  1592  000D2E  C040  F03B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1593  000D32  0012               	return		;funcret
  1594  000D34                     __end_of___lwdiv:
  1595                           	opt stack 0
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           prodh	equ	0xFF4
  1601                           prodl	equ	0xFF3
  1602                           intcon	equ	0xFF2
  1603                           postinc0	equ	0xFEE
  1604                           plusw0	equ	0xFEB
  1605                           wreg	equ	0xFE8
  1606                           postdec1	equ	0xFE5
  1607                           fsr1l	equ	0xFE1
  1608                           postinc2	equ	0xFDE
  1609                           postdec2	equ	0xFDD
  1610                           plusw2	equ	0xFDB
  1611                           fsr2h	equ	0xFDA
  1612                           fsr2l	equ	0xFD9
  1613                           status	equ	0xFD8
  1614                           
  1615 ;; *************** function _printString *****************
  1616 ;; Defined at:
  1617 ;;		line 59 in file "main.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;		None
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  i               2   50[BANK0 ] int 
  1622 ;;  welcome        50    0[BANK0 ] unsigned char [50]
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1632 ;;      Params:         0       0       0       0       0       0       0
  1633 ;;      Locals:         0      52       0       0       0       0       0
  1634 ;;      Temps:          2       0       0       0       0       0       0
  1635 ;;      Totals:         2      52       0       0       0       0       0
  1636 ;;Total ram usage:       54 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    6
  1639 ;; This function calls:
  1640 ;;		_EUSART1_Write
  1641 ;; This function is called by:
  1642 ;;		_main
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           	psect	text6
  1647  000BCC                     __ptext6:
  1648                           	opt stack 0
  1649  000BCC                     _printString:
  1650                           	opt stack 24
  1651                           
  1652                           ;main.c: 60: char welcome[50] = "\n\rGOT HERE. \n\r";
  1653                           
  1654                           ;incstack = 0
  1655  000BCC  EE21  F000         	lfsr	2,printString@F7170
  1656  000BD0  EE10  F060         	lfsr	1,printString@welcome
  1657  000BD4  0E31               	movlw	49
  1658  000BD6                     u1821:
  1659  000BD6  CFDB FFE3          	movff	plusw2,plusw1
  1660  000BDA  06E8               	decf	wreg,f,c
  1661  000BDC  E2FC               	bc	u1821
  1662                           
  1663                           ;main.c: 61: for (int i = 0; i < 50; i++ ) {
  1664  000BDE  0E00               	movlw	0
  1665  000BE0  0100               	movlb	0	; () banked
  1666  000BE2  6F93               	movwf	(printString@i+1)& (0+255),b
  1667  000BE4  0E00               	movlw	0
  1668  000BE6  6F92               	movwf	printString@i& (0+255),b
  1669  000BE8                     l3935:
  1670                           
  1671                           ; BSR set to: 0
  1672  000BE8  BF93               	btfsc	(printString@i+1)& (0+255),7,b
  1673  000BEA  D006               	goto	l606
  1674  000BEC  5193               	movf	(printString@i+1)& (0+255),w,b
  1675  000BEE  E11D               	bnz	l608
  1676  000BF0  0E32               	movlw	50
  1677  000BF2  5D92               	subwf	printString@i& (0+255),w,b
  1678  000BF4  B0D8               	btfsc	status,0,c
  1679  000BF6  0012               	return	
  1680  000BF8                     l606:
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 62: EUSART1_Write(welcome[i]);
  1684                           
  1685                           ; BSR set to: 0
  1686  000BF8  0E60               	movlw	low printString@welcome
  1687  000BFA  2592               	addwf	printString@i& (0+255),w,b
  1688  000BFC  6ED9               	movwf	fsr2l,c
  1689  000BFE  0E00               	movlw	high printString@welcome
  1690  000C00  2193               	addwfc	(printString@i+1)& (0+255),w,b
  1691  000C02  6EDA               	movwf	fsr2h,c
  1692  000C04  50DF               	movf	indf2,w,c
  1693  000C06  EC9B  F007         	call	_EUSART1_Write
  1694                           
  1695                           ;main.c: 63: _delay((unsigned long)((100)*(16000000/4000.0)));
  1696  000C0A  0E03               	movlw	3
  1697  000C0C  6E3C               	movwf	(??_printString+1)& (0+255),c
  1698  000C0E  0E08               	movlw	8
  1699  000C10  6E3B               	movwf	??_printString& (0+255),c
  1700  000C12  0E77               	movlw	119
  1701  000C14                     u2147:
  1702  000C14  2EE8               	decfsz	wreg,f,c
  1703  000C16  D7FE               	bra	u2147
  1704  000C18  2E3B               	decfsz	??_printString& (0+255),f,c
  1705  000C1A  D7FC               	bra	u2147
  1706  000C1C  2E3C               	decfsz	(??_printString+1)& (0+255),f,c
  1707  000C1E  D7FA               	bra	u2147
  1708  000C20  F000               	nop	
  1709  000C22  0100               	movlb	0	; () banked
  1710  000C24  4B92               	infsnz	printString@i& (0+255),f,b
  1711  000C26  2B93               	incf	(printString@i+1)& (0+255),f,b
  1712  000C28  D7DF               	goto	l3935
  1713  000C2A                     l608:
  1714                           
  1715                           ; BSR set to: 0
  1716  000C2A  0012               	return		;funcret
  1717  000C2C                     __end_of_printString:
  1718                           	opt stack 0
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           prodh	equ	0xFF4
  1724                           prodl	equ	0xFF3
  1725                           intcon	equ	0xFF2
  1726                           postinc0	equ	0xFEE
  1727                           plusw0	equ	0xFEB
  1728                           wreg	equ	0xFE8
  1729                           postdec1	equ	0xFE5
  1730                           plusw1	equ	0xFE3
  1731                           fsr1l	equ	0xFE1
  1732                           indf2	equ	0xFDF
  1733                           postinc2	equ	0xFDE
  1734                           postdec2	equ	0xFDD
  1735                           plusw2	equ	0xFDB
  1736                           fsr2h	equ	0xFDA
  1737                           fsr2l	equ	0xFD9
  1738                           status	equ	0xFD8
  1739                           
  1740 ;; *************** function _EUSART1_Write *****************
  1741 ;; Defined at:
  1742 ;;		line 150 in file "mcc_generated_files/eusart1.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  txData          1    wreg     unsigned char 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  txData          1   20[COMRAM] unsigned char 
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1756 ;;      Params:         0       0       0       0       0       0       0
  1757 ;;      Locals:         1       0       0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0       0       0
  1759 ;;      Totals:         1       0       0       0       0       0       0
  1760 ;;Total ram usage:        1 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    5
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_putch
  1767 ;;		_printString
  1768 ;;		_Send_UART
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text7
  1773  000F36                     __ptext7:
  1774                           	opt stack 0
  1775  000F36                     _EUSART1_Write:
  1776                           	opt stack 23
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;incstack = 0
  1780                           ;EUSART1_Write@txData stored from wreg
  1781  000F36  6E3A               	movwf	EUSART1_Write@txData,c
  1782  000F38                     
  1783                           ;eusart1.c: 153: {
  1784                           
  1785                           ;eusart1.c: 152: while(0 == eusart1TxBufferRemaining)
  1786  000F38  5049               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  1787  000F3A  B4D8               	btfsc	status,2,c
  1788  000F3C  D7FD               	goto	l3711
  1789                           
  1790                           ;eusart1.c: 154: }
  1791                           ;eusart1.c: 156: if(0 == PIE1bits.TX1IE)
  1792  000F3E  B89D               	btfsc	3997,4,c	;volatile
  1793  000F40  D003               	goto	l309
  1794                           
  1795                           ;eusart1.c: 157: {
  1796                           ;eusart1.c: 158: TXREG1 = txData;
  1797  000F42  C03A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1798                           
  1799                           ;eusart1.c: 159: }
  1800  000F46  D012               	goto	l310
  1801  000F48                     l309:
  1802                           
  1803                           ;eusart1.c: 160: else
  1804                           ;eusart1.c: 161: {
  1805                           ;eusart1.c: 162: PIE1bits.TX1IE = 0;
  1806  000F48  989D               	bcf	3997,4,c	;volatile
  1807                           
  1808                           ;eusart1.c: 163: eusart1TxBuffer[eusart1TxHead++] = txData;
  1809  000F4A  501C               	movf	_eusart1TxHead,w,c	;volatile
  1810  000F4C  0D01               	mullw	1
  1811  000F4E  0E09               	movlw	low _eusart1TxBuffer
  1812  000F50  24F3               	addwf	prodl,w,c
  1813  000F52  6ED9               	movwf	fsr2l,c
  1814  000F54  0E00               	movlw	high _eusart1TxBuffer
  1815  000F56  20F4               	addwfc	prodh,w,c
  1816  000F58  6EDA               	movwf	fsr2h,c
  1817  000F5A  C03A  FFDF         	movff	EUSART1_Write@txData,indf2
  1818  000F5E  2A1C               	incf	_eusart1TxHead,f,c	;volatile
  1819                           
  1820                           ;eusart1.c: 164: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  1821  000F60  0E07               	movlw	7
  1822  000F62  641C               	cpfsgt	_eusart1TxHead,c	;volatile
  1823  000F64  D002               	goto	l311
  1824                           
  1825                           ;eusart1.c: 165: {
  1826                           ;eusart1.c: 166: eusart1TxHead = 0;
  1827  000F66  0E00               	movlw	0
  1828  000F68  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1829  000F6A                     l311:
  1830                           
  1831                           ;eusart1.c: 167: }
  1832                           ;eusart1.c: 168: eusart1TxBufferRemaining--;
  1833  000F6A  0649               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1834  000F6C                     l310:
  1835                           
  1836                           ;eusart1.c: 169: }
  1837                           ;eusart1.c: 170: PIE1bits.TX1IE = 1;
  1838  000F6C  889D               	bsf	3997,4,c	;volatile
  1839  000F6E  0012               	return		;funcret
  1840  000F70                     __end_of_EUSART1_Write:
  1841                           	opt stack 0
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           intcon	equ	0xFF2
  1849                           postinc0	equ	0xFEE
  1850                           plusw0	equ	0xFEB
  1851                           wreg	equ	0xFE8
  1852                           postdec1	equ	0xFE5
  1853                           plusw1	equ	0xFE3
  1854                           fsr1l	equ	0xFE1
  1855                           indf2	equ	0xFDF
  1856                           postinc2	equ	0xFDE
  1857                           postdec2	equ	0xFDD
  1858                           plusw2	equ	0xFDB
  1859                           fsr2h	equ	0xFDA
  1860                           fsr2l	equ	0xFD9
  1861                           status	equ	0xFD8
  1862                           
  1863 ;; *************** function _SYSTEM_Initialize *****************
  1864 ;; Defined at:
  1865 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1879 ;;      Params:         0       0       0       0       0       0       0
  1880 ;;      Locals:         0       0       0       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0
  1882 ;;      Totals:         0       0       0       0       0       0       0
  1883 ;;Total ram usage:        0 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    7
  1886 ;; This function calls:
  1887 ;;		_EUSART1_Initialize
  1888 ;;		_INTERRUPT_Initialize
  1889 ;;		_OSCILLATOR_Initialize
  1890 ;;		_PIN_MANAGER_Initialize
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text8
  1897  0011AA                     __ptext8:
  1898                           	opt stack 0
  1899  0011AA                     _SYSTEM_Initialize:
  1900                           	opt stack 23
  1901                           
  1902                           ;mcc.c: 114: INTERRUPT_Initialize();
  1903                           
  1904                           ;incstack = 0
  1905  0011AA  ECCD  F009         	call	_INTERRUPT_Initialize	;wreg free
  1906                           
  1907                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1908  0011AE  EC2E  F008         	call	_PIN_MANAGER_Initialize	;wreg free
  1909                           
  1910                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1911  0011B2  EC21  F009         	call	_OSCILLATOR_Initialize	;wreg free
  1912                           
  1913                           ;mcc.c: 117: EUSART1_Initialize();
  1914  0011B6  ECE8  F006         	call	_EUSART1_Initialize	;wreg free
  1915  0011BA  0012               	return		;funcret
  1916  0011BC                     __end_of_SYSTEM_Initialize:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           prodh	equ	0xFF4
  1923                           prodl	equ	0xFF3
  1924                           intcon	equ	0xFF2
  1925                           postinc0	equ	0xFEE
  1926                           plusw0	equ	0xFEB
  1927                           wreg	equ	0xFE8
  1928                           postdec1	equ	0xFE5
  1929                           plusw1	equ	0xFE3
  1930                           fsr1l	equ	0xFE1
  1931                           indf2	equ	0xFDF
  1932                           postinc2	equ	0xFDE
  1933                           postdec2	equ	0xFDD
  1934                           plusw2	equ	0xFDB
  1935                           fsr2h	equ	0xFDA
  1936                           fsr2l	equ	0xFD9
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _PIN_MANAGER_Initialize *****************
  1940 ;; Defined at:
  1941 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;		None
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1955 ;;      Params:         0       0       0       0       0       0       0
  1956 ;;      Locals:         0       0       0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0
  1958 ;;      Totals:         0       0       0       0       0       0       0
  1959 ;;Total ram usage:        0 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    5
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_SYSTEM_Initialize
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text9
  1970  00105C                     __ptext9:
  1971                           	opt stack 0
  1972  00105C                     _PIN_MANAGER_Initialize:
  1973                           	opt stack 24
  1974                           
  1975                           ;pin_manager.c: 57: LATA = 0x00;
  1976                           
  1977                           ;incstack = 0
  1978  00105C  0E00               	movlw	0
  1979  00105E  6E89               	movwf	3977,c	;volatile
  1980                           
  1981                           ;pin_manager.c: 58: LATB = 0x00;
  1982  001060  0E00               	movlw	0
  1983  001062  6E8A               	movwf	3978,c	;volatile
  1984                           
  1985                           ;pin_manager.c: 59: LATC = 0x00;
  1986  001064  0E00               	movlw	0
  1987  001066  6E8B               	movwf	3979,c	;volatile
  1988                           
  1989                           ;pin_manager.c: 64: TRISA = 0xFF;
  1990  001068  6892               	setf	3986,c	;volatile
  1991                           
  1992                           ;pin_manager.c: 65: TRISB = 0xFF;
  1993  00106A  6893               	setf	3987,c	;volatile
  1994                           
  1995                           ;pin_manager.c: 66: TRISC = 0xBF;
  1996  00106C  0EBF               	movlw	191
  1997  00106E  6E94               	movwf	3988,c	;volatile
  1998                           
  1999                           ;pin_manager.c: 71: ANSELC = 0x24;
  2000  001070  0E24               	movlw	36
  2001  001072  010F               	movlb	15	; () banked
  2002  001074  6F3A               	movwf	58,b	;volatile
  2003                           
  2004                           ;pin_manager.c: 72: ANSELB = 0x3F;
  2005  001076  0E3F               	movlw	63
  2006  001078  6F39               	movwf	57,b	;volatile
  2007                           
  2008                           ;pin_manager.c: 73: ANSELA = 0x2F;
  2009  00107A  0E2F               	movlw	47
  2010  00107C  6F38               	movwf	56,b	;volatile
  2011                           
  2012                           ;pin_manager.c: 78: WPUB = 0x00;
  2013  00107E  0E00               	movlw	0
  2014  001080  6E61               	movwf	3937,c	;volatile
  2015                           
  2016                           ; BSR set to: 15
  2017                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  2018  001082  8EF1               	bsf	intcon2,7,c	;volatile
  2019                           
  2020                           ; BSR set to: 15
  2021  001084  0012               	return		;funcret
  2022  001086                     __end_of_PIN_MANAGER_Initialize:
  2023                           	opt stack 0
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           prodh	equ	0xFF4
  2029                           prodl	equ	0xFF3
  2030                           intcon	equ	0xFF2
  2031                           intcon2	equ	0xFF1
  2032                           postinc0	equ	0xFEE
  2033                           plusw0	equ	0xFEB
  2034                           wreg	equ	0xFE8
  2035                           postdec1	equ	0xFE5
  2036                           plusw1	equ	0xFE3
  2037                           fsr1l	equ	0xFE1
  2038                           indf2	equ	0xFDF
  2039                           postinc2	equ	0xFDE
  2040                           postdec2	equ	0xFDD
  2041                           plusw2	equ	0xFDB
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046 ;; *************** function _OSCILLATOR_Initialize *****************
  2047 ;; Defined at:
  2048 ;;		line 120 in file "mcc_generated_files/mcc.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;		None
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;		None
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      void 
  2055 ;; Registers used:
  2056 ;;		wreg, status,2
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2062 ;;      Params:         0       0       0       0       0       0       0
  2063 ;;      Locals:         0       0       0       0       0       0       0
  2064 ;;      Temps:          0       0       0       0       0       0       0
  2065 ;;      Totals:         0       0       0       0       0       0       0
  2066 ;;Total ram usage:        0 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    5
  2069 ;; This function calls:
  2070 ;;		Nothing
  2071 ;; This function is called by:
  2072 ;;		_SYSTEM_Initialize
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text10
  2077  001242                     __ptext10:
  2078                           	opt stack 0
  2079  001242                     _OSCILLATOR_Initialize:
  2080                           	opt stack 24
  2081                           
  2082                           ;mcc.c: 123: OSCCON = 0x72;
  2083                           
  2084                           ; BSR set to: 15
  2085                           ;incstack = 0
  2086  001242  0E72               	movlw	114
  2087  001244  6ED3               	movwf	4051,c	;volatile
  2088                           
  2089                           ;mcc.c: 125: OSCCON2 = 0x04;
  2090  001246  0E04               	movlw	4
  2091  001248  6ED2               	movwf	4050,c	;volatile
  2092                           
  2093                           ;mcc.c: 127: OSCTUNE = 0x40;
  2094  00124A  0E40               	movlw	64
  2095  00124C  6E9B               	movwf	3995,c	;volatile
  2096  00124E  0012               	return		;funcret
  2097  001250                     __end_of_OSCILLATOR_Initialize:
  2098                           	opt stack 0
  2099                           tblptru	equ	0xFF8
  2100                           tblptrh	equ	0xFF7
  2101                           tblptrl	equ	0xFF6
  2102                           tablat	equ	0xFF5
  2103                           prodh	equ	0xFF4
  2104                           prodl	equ	0xFF3
  2105                           intcon	equ	0xFF2
  2106                           intcon2	equ	0xFF1
  2107                           postinc0	equ	0xFEE
  2108                           plusw0	equ	0xFEB
  2109                           wreg	equ	0xFE8
  2110                           postdec1	equ	0xFE5
  2111                           plusw1	equ	0xFE3
  2112                           fsr1l	equ	0xFE1
  2113                           indf2	equ	0xFDF
  2114                           postinc2	equ	0xFDE
  2115                           postdec2	equ	0xFDD
  2116                           plusw2	equ	0xFDB
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _INTERRUPT_Initialize *****************
  2122 ;; Defined at:
  2123 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		None
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2137 ;;      Params:         0       0       0       0       0       0       0
  2138 ;;      Locals:         0       0       0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0
  2140 ;;      Totals:         0       0       0       0       0       0       0
  2141 ;;Total ram usage:        0 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    5
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_SYSTEM_Initialize
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text11
  2152  00139A                     __ptext11:
  2153                           	opt stack 0
  2154  00139A                     _INTERRUPT_Initialize:
  2155                           	opt stack 24
  2156                           
  2157                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  2158                           
  2159                           ;incstack = 0
  2160  00139A  9ED0               	bcf	4048,7,c	;volatile
  2161  00139C  0012               	return		;funcret
  2162  00139E                     __end_of_INTERRUPT_Initialize:
  2163                           	opt stack 0
  2164                           tblptru	equ	0xFF8
  2165                           tblptrh	equ	0xFF7
  2166                           tblptrl	equ	0xFF6
  2167                           tablat	equ	0xFF5
  2168                           prodh	equ	0xFF4
  2169                           prodl	equ	0xFF3
  2170                           intcon	equ	0xFF2
  2171                           intcon2	equ	0xFF1
  2172                           postinc0	equ	0xFEE
  2173                           plusw0	equ	0xFEB
  2174                           wreg	equ	0xFE8
  2175                           postdec1	equ	0xFE5
  2176                           plusw1	equ	0xFE3
  2177                           fsr1l	equ	0xFE1
  2178                           indf2	equ	0xFDF
  2179                           postinc2	equ	0xFDE
  2180                           postdec2	equ	0xFDD
  2181                           plusw2	equ	0xFDB
  2182                           fsr2h	equ	0xFDA
  2183                           fsr2l	equ	0xFD9
  2184                           status	equ	0xFD8
  2185                           
  2186 ;; *************** function _EUSART1_Initialize *****************
  2187 ;; Defined at:
  2188 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;		None
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      void 
  2195 ;; Registers used:
  2196 ;;		wreg, status,2, status,0, cstack
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2202 ;;      Params:         0       0       0       0       0       0       0
  2203 ;;      Locals:         0       0       0       0       0       0       0
  2204 ;;      Temps:          0       0       0       0       0       0       0
  2205 ;;      Totals:         0       0       0       0       0       0       0
  2206 ;;Total ram usage:        0 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    6
  2209 ;; This function calls:
  2210 ;;		_EUSART1_SetRxInterruptHandler
  2211 ;;		_EUSART1_SetTxInterruptHandler
  2212 ;; This function is called by:
  2213 ;;		_SYSTEM_Initialize
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text12
  2218  000DD0                     __ptext12:
  2219                           	opt stack 0
  2220  000DD0                     _EUSART1_Initialize:
  2221                           	opt stack 23
  2222                           
  2223                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  2224                           
  2225                           ;incstack = 0
  2226  000DD0  9A9D               	bcf	3997,5,c	;volatile
  2227                           
  2228                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  2229  000DD2  989D               	bcf	3997,4,c	;volatile
  2230                           
  2231                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  2232  000DD4  0E02               	movlw	low _EUSART1_Transmit_ISR
  2233  000DD6  6E3A               	movwf	EUSART1_SetTxInterruptHandler@handler,c
  2234  000DD8  0E10               	movlw	high _EUSART1_Transmit_ISR
  2235  000DDA  6E3B               	movwf	EUSART1_SetTxInterruptHandler@handler+1,c
  2236  000DDC  EC78  F009         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  2237                           
  2238                           ;eusart1.c: 82: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  2239  000DE0  0E30               	movlw	low _EUSART1_Receive_ISR
  2240  000DE2  6E3A               	movwf	EUSART1_SetRxInterruptHandler@handler,c
  2241  000DE4  0E10               	movlw	high _EUSART1_Receive_ISR
  2242  000DE6  6E3B               	movwf	EUSART1_SetRxInterruptHandler@handler+1,c
  2243  000DE8  EC7D  F009         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  2244                           
  2245                           ;eusart1.c: 87: BAUDCON1 = 0x08;
  2246  000DEC  0E08               	movlw	8
  2247  000DEE  6EB8               	movwf	4024,c	;volatile
  2248                           
  2249                           ;eusart1.c: 90: RCSTA1 = 0x90;
  2250  000DF0  0E90               	movlw	144
  2251  000DF2  6EAB               	movwf	4011,c	;volatile
  2252                           
  2253                           ;eusart1.c: 93: TXSTA1 = 0x24;
  2254  000DF4  0E24               	movlw	36
  2255  000DF6  6EAC               	movwf	4012,c	;volatile
  2256                           
  2257                           ;eusart1.c: 96: SPBRG1 = 0x22;
  2258  000DF8  0E22               	movlw	34
  2259  000DFA  6EAF               	movwf	4015,c	;volatile
  2260                           
  2261                           ;eusart1.c: 99: SPBRGH1 = 0x00;
  2262  000DFC  0E00               	movlw	0
  2263  000DFE  6EB0               	movwf	4016,c	;volatile
  2264                           
  2265                           ;eusart1.c: 103: eusart1TxHead = 0;
  2266  000E00  0E00               	movlw	0
  2267  000E02  6E1C               	movwf	_eusart1TxHead,c	;volatile
  2268                           
  2269                           ;eusart1.c: 104: eusart1TxTail = 0;
  2270  000E04  0E00               	movlw	0
  2271  000E06  6E1B               	movwf	_eusart1TxTail,c	;volatile
  2272                           
  2273                           ;eusart1.c: 105: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2274  000E08  0E08               	movlw	8
  2275  000E0A  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  2276                           
  2277                           ;eusart1.c: 107: eusart1RxHead = 0;
  2278  000E0C  0E00               	movlw	0
  2279  000E0E  6E1A               	movwf	_eusart1RxHead,c	;volatile
  2280                           
  2281                           ;eusart1.c: 108: eusart1RxTail = 0;
  2282  000E10  0E00               	movlw	0
  2283  000E12  6E19               	movwf	_eusart1RxTail,c	;volatile
  2284                           
  2285                           ;eusart1.c: 109: eusart1RxCount = 0;
  2286  000E14  0E00               	movlw	0
  2287  000E16  6E18               	movwf	_eusart1RxCount,c	;volatile
  2288                           
  2289                           ;eusart1.c: 112: PIE1bits.RC1IE = 1;
  2290  000E18  8A9D               	bsf	3997,5,c	;volatile
  2291  000E1A  0012               	return		;funcret
  2292  000E1C                     __end_of_EUSART1_Initialize:
  2293                           	opt stack 0
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           prodh	equ	0xFF4
  2299                           prodl	equ	0xFF3
  2300                           intcon	equ	0xFF2
  2301                           intcon2	equ	0xFF1
  2302                           postinc0	equ	0xFEE
  2303                           plusw0	equ	0xFEB
  2304                           wreg	equ	0xFE8
  2305                           postdec1	equ	0xFE5
  2306                           plusw1	equ	0xFE3
  2307                           fsr1l	equ	0xFE1
  2308                           indf2	equ	0xFDF
  2309                           postinc2	equ	0xFDE
  2310                           postdec2	equ	0xFDD
  2311                           plusw2	equ	0xFDB
  2312                           fsr2h	equ	0xFDA
  2313                           fsr2l	equ	0xFD9
  2314                           status	equ	0xFD8
  2315                           
  2316 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  2317 ;; Defined at:
  2318 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  handler         2   20[COMRAM] PTR FTN()void 
  2321 ;;		 -> EUSART1_Transmit_ISR(1), 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2333 ;;      Params:         2       0       0       0       0       0       0
  2334 ;;      Locals:         0       0       0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0
  2336 ;;      Totals:         2       0       0       0       0       0       0
  2337 ;;Total ram usage:        2 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    5
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_EUSART1_Initialize
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text13
  2348  0012F0                     __ptext13:
  2349                           	opt stack 0
  2350  0012F0                     _EUSART1_SetTxInterruptHandler:
  2351                           	opt stack 23
  2352                           
  2353                           ;eusart1.c: 223: EUSART1_TxDefaultInterruptHandler = handler;
  2354                           
  2355                           ;incstack = 0
  2356  0012F0  C03A  F0E5         	movff	EUSART1_SetTxInterruptHandler@handler,_EUSART1_TxDefaultInterruptHandler
  2357  0012F4  C03B  F0E6         	movff	EUSART1_SetTxInterruptHandler@handler+1,_EUSART1_TxDefaultInterruptHandler+1
  2358  0012F8  0012               	return		;funcret
  2359  0012FA                     __end_of_EUSART1_SetTxInterruptHandler:
  2360                           	opt stack 0
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           intcon	equ	0xFF2
  2368                           intcon2	equ	0xFF1
  2369                           postinc0	equ	0xFEE
  2370                           plusw0	equ	0xFEB
  2371                           wreg	equ	0xFE8
  2372                           postdec1	equ	0xFE5
  2373                           plusw1	equ	0xFE3
  2374                           fsr1l	equ	0xFE1
  2375                           indf2	equ	0xFDF
  2376                           postinc2	equ	0xFDE
  2377                           postdec2	equ	0xFDD
  2378                           plusw2	equ	0xFDB
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  2384 ;; Defined at:
  2385 ;;		line 226 in file "mcc_generated_files/eusart1.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;  handler         2   20[COMRAM] PTR FTN()void 
  2388 ;;		 -> EUSART1_Receive_ISR(1), 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, status,2, status,0
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2400 ;;      Params:         2       0       0       0       0       0       0
  2401 ;;      Locals:         0       0       0       0       0       0       0
  2402 ;;      Temps:          0       0       0       0       0       0       0
  2403 ;;      Totals:         2       0       0       0       0       0       0
  2404 ;;Total ram usage:        2 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    5
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_EUSART1_Initialize
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text14
  2415  0012FA                     __ptext14:
  2416                           	opt stack 0
  2417  0012FA                     _EUSART1_SetRxInterruptHandler:
  2418                           	opt stack 23
  2419                           
  2420                           ;eusart1.c: 227: EUSART1_RxDefaultInterruptHandler = handler;
  2421                           
  2422                           ;incstack = 0
  2423  0012FA  C03A  F0E3         	movff	EUSART1_SetRxInterruptHandler@handler,_EUSART1_RxDefaultInterruptHandler
  2424  0012FE  C03B  F0E4         	movff	EUSART1_SetRxInterruptHandler@handler+1,_EUSART1_RxDefaultInterruptHandler+1
  2425  001302  0012               	return		;funcret
  2426  001304                     __end_of_EUSART1_SetRxInterruptHandler:
  2427                           	opt stack 0
  2428                           tblptru	equ	0xFF8
  2429                           tblptrh	equ	0xFF7
  2430                           tblptrl	equ	0xFF6
  2431                           tablat	equ	0xFF5
  2432                           prodh	equ	0xFF4
  2433                           prodl	equ	0xFF3
  2434                           intcon	equ	0xFF2
  2435                           intcon2	equ	0xFF1
  2436                           postinc0	equ	0xFEE
  2437                           plusw0	equ	0xFEB
  2438                           wreg	equ	0xFE8
  2439                           postdec1	equ	0xFE5
  2440                           plusw1	equ	0xFE3
  2441                           fsr1l	equ	0xFE1
  2442                           indf2	equ	0xFDF
  2443                           postinc2	equ	0xFDE
  2444                           postdec2	equ	0xFDD
  2445                           plusw2	equ	0xFDB
  2446                           fsr2h	equ	0xFDA
  2447                           fsr2l	equ	0xFD9
  2448                           status	equ	0xFD8
  2449                           
  2450 ;; *************** function _ACCELEROMETER_Initialize *****************
  2451 ;; Defined at:
  2452 ;;		line 4 in file "accelerometer.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2466 ;;      Params:         0       0       0       0       0       0       0
  2467 ;;      Locals:         0       0       0       0       0       0       0
  2468 ;;      Temps:          2       0       0       0       0       0       0
  2469 ;;      Totals:         2       0       0       0       0       0       0
  2470 ;;Total ram usage:        2 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:   13
  2473 ;; This function calls:
  2474 ;;		_read_register
  2475 ;;		_write_register
  2476 ;; This function is called by:
  2477 ;;		_main
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text15
  2482  000A98                     __ptext15:
  2483                           	opt stack 0
  2484  000A98                     _ACCELEROMETER_Initialize:
  2485                           	opt stack 17
  2486                           
  2487                           ;accelerometer.c: 6: write_register(0x2B, 0x40);
  2488                           
  2489                           ;incstack = 0
  2490  000A98  0E40               	movlw	64
  2491  000A9A  6E3F               	movwf	write_register@data,c
  2492  000A9C  0E2B               	movlw	43
  2493  000A9E  ECD1  F007         	call	_write_register
  2494                           
  2495                           ;accelerometer.c: 8: _delay((unsigned long)((100)*(16000000/4000.0)));
  2496  000AA2  0E03               	movlw	3
  2497  000AA4  6E42               	movwf	(??_ACCELEROMETER_Initialize+1)& (0+255),c
  2498  000AA6  0E08               	movlw	8
  2499  000AA8  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  2500  000AAA  0E77               	movlw	119
  2501  000AAC                     u2157:
  2502  000AAC  2EE8               	decfsz	wreg,f,c
  2503  000AAE  D7FE               	bra	u2157
  2504  000AB0  2E41               	decfsz	??_ACCELEROMETER_Initialize& (0+255),f,c
  2505  000AB2  D7FC               	bra	u2157
  2506  000AB4  2E42               	decfsz	(??_ACCELEROMETER_Initialize+1)& (0+255),f,c
  2507  000AB6  D7FA               	bra	u2157
  2508  000AB8  F000               	nop	
  2509  000ABA  0E2B               	movlw	43
  2510  000ABC  ECEA  F007         	call	_read_register
  2511  000AC0  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  2512  000AC2  BC41               	btfsc	??_ACCELEROMETER_Initialize,6,c
  2513  000AC4  D7FA               	goto	l636
  2514                           
  2515                           ;accelerometer.c: 14: write_register(0x0E, MMA8451_RANGE_4_G);
  2516  000AC6  0E01               	movlw	1
  2517  000AC8  6E3F               	movwf	write_register@data,c
  2518  000ACA  0E0E               	movlw	14
  2519  000ACC  ECD1  F007         	call	_write_register
  2520                           
  2521                           ;accelerometer.c: 16: write_register(0x2B, 0x02);
  2522  000AD0  0E02               	movlw	2
  2523  000AD2  6E3F               	movwf	write_register@data,c
  2524  000AD4  0E2B               	movlw	43
  2525  000AD6  ECD1  F007         	call	_write_register
  2526                           
  2527                           ;accelerometer.c: 18: write_register(0x2D, 0x01);
  2528  000ADA  0E01               	movlw	1
  2529  000ADC  6E3F               	movwf	write_register@data,c
  2530  000ADE  0E2D               	movlw	45
  2531  000AE0  ECD1  F007         	call	_write_register
  2532                           
  2533                           ;accelerometer.c: 19: write_register(0x2E, 0x01);
  2534  000AE4  0E01               	movlw	1
  2535  000AE6  6E3F               	movwf	write_register@data,c
  2536  000AE8  0E2E               	movlw	46
  2537  000AEA  ECD1  F007         	call	_write_register
  2538                           
  2539                           ;accelerometer.c: 22: write_register(0x11, 0x40);
  2540  000AEE  0E40               	movlw	64
  2541  000AF0  6E3F               	movwf	write_register@data,c
  2542  000AF2  0E11               	movlw	17
  2543  000AF4  ECD1  F007         	call	_write_register
  2544                           
  2545                           ;accelerometer.c: 25: write_register(0x2A, 0x01 | 0x04);
  2546  000AF8  0E05               	movlw	5
  2547  000AFA  6E3F               	movwf	write_register@data,c
  2548  000AFC  0E2A               	movlw	42
  2549  000AFE  ECD1  F007         	call	_write_register
  2550  000B02  0012               	return		;funcret
  2551  000B04                     __end_of_ACCELEROMETER_Initialize:
  2552                           	opt stack 0
  2553                           tblptru	equ	0xFF8
  2554                           tblptrh	equ	0xFF7
  2555                           tblptrl	equ	0xFF6
  2556                           tablat	equ	0xFF5
  2557                           prodh	equ	0xFF4
  2558                           prodl	equ	0xFF3
  2559                           intcon	equ	0xFF2
  2560                           intcon2	equ	0xFF1
  2561                           postinc0	equ	0xFEE
  2562                           plusw0	equ	0xFEB
  2563                           wreg	equ	0xFE8
  2564                           postdec1	equ	0xFE5
  2565                           plusw1	equ	0xFE3
  2566                           fsr1l	equ	0xFE1
  2567                           indf2	equ	0xFDF
  2568                           postinc2	equ	0xFDE
  2569                           postdec2	equ	0xFDD
  2570                           plusw2	equ	0xFDB
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function _write_register *****************
  2576 ;; Defined at:
  2577 ;;		line 29 in file "accelerometer.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  reg             1    wreg     unsigned char 
  2580 ;;  data            1   25[COMRAM] unsigned char 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  reg             1   26[COMRAM] unsigned char 
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2592 ;;      Params:         1       0       0       0       0       0       0
  2593 ;;      Locals:         1       0       0       0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0
  2595 ;;      Totals:         2       0       0       0       0       0       0
  2596 ;;Total ram usage:        2 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:   12
  2599 ;; This function calls:
  2600 ;;		_i2c_close
  2601 ;;		_i2c_masterWrite
  2602 ;;		_i2c_open
  2603 ;;		_i2c_setBuffer
  2604 ;; This function is called by:
  2605 ;;		_ACCELEROMETER_Initialize
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text16
  2610  000FA2                     __ptext16:
  2611                           	opt stack 0
  2612  000FA2                     _write_register:
  2613                           	opt stack 17
  2614                           
  2615                           ;incstack = 0
  2616                           ;write_register@reg stored from wreg
  2617  000FA2  6E40               	movwf	write_register@reg,c
  2618                           
  2619                           ;accelerometer.c: 30: static i2c_error_t status;
  2620                           ;accelerometer.c: 31: static uint8_t buffer[2];
  2621                           ;accelerometer.c: 34: buffer[0] = reg;
  2622  000FA4  C040  F023         	movff	write_register@reg,write_register@buffer
  2623                           
  2624                           ;accelerometer.c: 35: buffer[1] = data;
  2625  000FA8  C03F  F024         	movff	write_register@data,write_register@buffer+1
  2626                           
  2627                           ;accelerometer.c: 36: i2c_open(0x1D);
  2628  000FAC  0E1D               	movlw	29
  2629  000FAE  ECAC  F003         	call	_i2c_open
  2630                           
  2631                           ;accelerometer.c: 37: i2c_setBuffer(buffer, 2);
  2632  000FB2  0E23               	movlw	low write_register@buffer
  2633  000FB4  6E3A               	movwf	i2c_setBuffer@buffer,c
  2634  000FB6  0E00               	movlw	high write_register@buffer
  2635  000FB8  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2636  000FBA  0E00               	movlw	0
  2637  000FBC  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2638  000FBE  0E02               	movlw	2
  2639  000FC0  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2640  000FC2  EC64  F008         	call	_i2c_setBuffer	;wreg free
  2641                           
  2642                           ;accelerometer.c: 40: status = i2c_masterWrite();
  2643  000FC6  EC96  F009         	call	_i2c_masterWrite	;wreg free
  2644  000FCA  6E17               	movwf	write_register@status,c
  2645                           
  2646                           ;accelerometer.c: 41: status = i2c_close();
  2647  000FCC  EC55  F008         	call	_i2c_close	;wreg free
  2648  000FD0  6E17               	movwf	write_register@status,c
  2649  000FD2  0012               	return		;funcret
  2650  000FD4                     __end_of_write_register:
  2651                           	opt stack 0
  2652                           tblptru	equ	0xFF8
  2653                           tblptrh	equ	0xFF7
  2654                           tblptrl	equ	0xFF6
  2655                           tablat	equ	0xFF5
  2656                           prodh	equ	0xFF4
  2657                           prodl	equ	0xFF3
  2658                           intcon	equ	0xFF2
  2659                           intcon2	equ	0xFF1
  2660                           postinc0	equ	0xFEE
  2661                           plusw0	equ	0xFEB
  2662                           wreg	equ	0xFE8
  2663                           postdec1	equ	0xFE5
  2664                           plusw1	equ	0xFE3
  2665                           fsr1l	equ	0xFE1
  2666                           indf2	equ	0xFDF
  2667                           postinc2	equ	0xFDE
  2668                           postdec2	equ	0xFDD
  2669                           plusw2	equ	0xFDB
  2670                           fsr2h	equ	0xFDA
  2671                           fsr2l	equ	0xFD9
  2672                           status	equ	0xFD8
  2673                           
  2674 ;; *************** function _i2c_masterWrite *****************
  2675 ;; Defined at:
  2676 ;;		line 264 in file "mcc_generated_files/drivers/i2c_master.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;		None
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;		None
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  1    wreg      enum E6837
  2683 ;; Registers used:
  2684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2690 ;;      Params:         0       0       0       0       0       0       0
  2691 ;;      Locals:         0       0       0       0       0       0       0
  2692 ;;      Temps:          0       0       0       0       0       0       0
  2693 ;;      Totals:         0       0       0       0       0       0       0
  2694 ;;Total ram usage:        0 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:   11
  2697 ;; This function calls:
  2698 ;;		_i2c_masterOperation
  2699 ;; This function is called by:
  2700 ;;		_write_register
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text17
  2705  00132C                     __ptext17:
  2706                           	opt stack 0
  2707  00132C                     _i2c_masterWrite:
  2708                           	opt stack 17
  2709                           
  2710                           ;i2c_master.c: 266: return i2c_masterOperation(OPERATIONWRITE);
  2711                           
  2712                           ;incstack = 0
  2713  00132C  0E02               	movlw	2
  2714  00132E  EC0E  F007         	call	_i2c_masterOperation
  2715  001332  0012               	return	
  2716  001334                     __end_of_i2c_masterWrite:
  2717                           	opt stack 0
  2718                           tblptru	equ	0xFF8
  2719                           tblptrh	equ	0xFF7
  2720                           tblptrl	equ	0xFF6
  2721                           tablat	equ	0xFF5
  2722                           prodh	equ	0xFF4
  2723                           prodl	equ	0xFF3
  2724                           intcon	equ	0xFF2
  2725                           intcon2	equ	0xFF1
  2726                           postinc0	equ	0xFEE
  2727                           plusw0	equ	0xFEB
  2728                           wreg	equ	0xFE8
  2729                           postdec1	equ	0xFE5
  2730                           plusw1	equ	0xFE3
  2731                           fsr1l	equ	0xFE1
  2732                           indf2	equ	0xFDF
  2733                           postinc2	equ	0xFDE
  2734                           postdec2	equ	0xFDD
  2735                           plusw2	equ	0xFDB
  2736                           fsr2h	equ	0xFDA
  2737                           fsr2l	equ	0xFD9
  2738                           status	equ	0xFD8
  2739                           
  2740 ;; *************** function _read_register *****************
  2741 ;; Defined at:
  2742 ;;		line 46 in file "accelerometer.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  reg             1    wreg     unsigned char 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  reg             1   26[COMRAM] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      unsigned char 
  2749 ;; Registers used:
  2750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2756 ;;      Params:         0       0       0       0       0       0       0
  2757 ;;      Locals:         1       0       0       0       0       0       0
  2758 ;;      Temps:          0       0       0       0       0       0       0
  2759 ;;      Totals:         1       0       0       0       0       0       0
  2760 ;;Total ram usage:        1 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:   12
  2763 ;; This function calls:
  2764 ;;		_i2c_close
  2765 ;;		_i2c_masterAccelRead
  2766 ;;		_i2c_open
  2767 ;;		_i2c_setBuffer
  2768 ;; This function is called by:
  2769 ;;		_ACCELEROMETER_Initialize
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text18
  2774  000FD4                     __ptext18:
  2775                           	opt stack 0
  2776  000FD4                     _read_register:
  2777                           	opt stack 17
  2778                           
  2779                           ;incstack = 0
  2780                           ;read_register@reg stored from wreg
  2781  000FD4  6E40               	movwf	read_register@reg,c
  2782                           
  2783                           ;accelerometer.c: 47: static i2c_error_t status;
  2784                           ;accelerometer.c: 48: static volatile uint8_t receivebuffer[1];
  2785                           ;accelerometer.c: 51: i2c_open(0x1D);
  2786  000FD6  0E1D               	movlw	29
  2787  000FD8  ECAC  F003         	call	_i2c_open
  2788                           
  2789                           ;accelerometer.c: 55: i2c_setBuffer(receivebuffer, 1);
  2790  000FDC  0E25               	movlw	low read_register@receivebuffer
  2791  000FDE  6E3A               	movwf	i2c_setBuffer@buffer,c
  2792  000FE0  0E00               	movlw	high read_register@receivebuffer
  2793  000FE2  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2794  000FE4  0E00               	movlw	0
  2795  000FE6  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2796  000FE8  0E01               	movlw	1
  2797  000FEA  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2798  000FEC  EC64  F008         	call	_i2c_setBuffer	;wreg free
  2799                           
  2800                           ;accelerometer.c: 58: status = i2c_masterAccelRead(reg);
  2801  000FF0  5040               	movf	read_register@reg,w,c
  2802  000FF2  EC28  F009         	call	_i2c_masterAccelRead
  2803  000FF6  6E16               	movwf	read_register@status,c
  2804                           
  2805                           ;accelerometer.c: 61: status = i2c_close();
  2806  000FF8  EC55  F008         	call	_i2c_close	;wreg free
  2807  000FFC  6E16               	movwf	read_register@status,c
  2808                           
  2809                           ;accelerometer.c: 63: return receivebuffer[0];
  2810  000FFE  5025               	movf	read_register@receivebuffer,w,c	;volatile
  2811  001000  0012               	return	
  2812  001002                     __end_of_read_register:
  2813                           	opt stack 0
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           prodh	equ	0xFF4
  2819                           prodl	equ	0xFF3
  2820                           intcon	equ	0xFF2
  2821                           intcon2	equ	0xFF1
  2822                           postinc0	equ	0xFEE
  2823                           plusw0	equ	0xFEB
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           plusw1	equ	0xFE3
  2827                           fsr1l	equ	0xFE1
  2828                           indf2	equ	0xFDF
  2829                           postinc2	equ	0xFDE
  2830                           postdec2	equ	0xFDD
  2831                           plusw2	equ	0xFDB
  2832                           fsr2h	equ	0xFDA
  2833                           fsr2l	equ	0xFD9
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function _i2c_setBuffer *****************
  2837 ;; Defined at:
  2838 ;;		line 192 in file "mcc_generated_files/drivers/i2c_master.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  buffer          2   20[COMRAM] PTR void 
  2841 ;;		 -> read_xyzvalues@readbuffer(6), read_register@receivebuffer(1), write_register@buffer(2), 
  2842 ;;  bufferSize      2   22[COMRAM] unsigned int 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2854 ;;      Params:         4       0       0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0
  2857 ;;      Totals:         4       0       0       0       0       0       0
  2858 ;;Total ram usage:        4 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    5
  2861 ;; This function calls:
  2862 ;;		Nothing
  2863 ;; This function is called by:
  2864 ;;		_write_register
  2865 ;;		_read_register
  2866 ;;		_read_xyzvalues
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           	psect	text19
  2871  0010C8                     __ptext19:
  2872                           	opt stack 0
  2873  0010C8                     _i2c_setBuffer:
  2874                           	opt stack 24
  2875                           
  2876                           ;i2c_master.c: 194: if(i2c_status.bufferFree)
  2877                           
  2878                           ;incstack = 0
  2879  0010C8  0100               	movlb	0	; () banked
  2880  0010CA  A59A               	btfss	_i2c_status& (0+255),2,b
  2881  0010CC  0012               	return	
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;i2c_master.c: 195: {
  2885                           ;i2c_master.c: 196: i2c_status.data_ptr = buffer;
  2886  0010CE  C03A  F09C         	movff	i2c_setBuffer@buffer,_i2c_status+2
  2887  0010D2  C03B  F09D         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;i2c_master.c: 197: i2c_status.data_length = bufferSize;
  2891  0010D6  C03C  F09E         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  2892  0010DA  C03D  F09F         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;i2c_master.c: 198: i2c_status.bufferFree = 0;
  2896  0010DE  959A               	bcf	_i2c_status& (0+255),2,b
  2897  0010E0  0012               	return	
  2898  0010E2                     __end_of_i2c_setBuffer:
  2899                           	opt stack 0
  2900                           tblptru	equ	0xFF8
  2901                           tblptrh	equ	0xFF7
  2902                           tblptrl	equ	0xFF6
  2903                           tablat	equ	0xFF5
  2904                           prodh	equ	0xFF4
  2905                           prodl	equ	0xFF3
  2906                           intcon	equ	0xFF2
  2907                           intcon2	equ	0xFF1
  2908                           postinc0	equ	0xFEE
  2909                           plusw0	equ	0xFEB
  2910                           wreg	equ	0xFE8
  2911                           postdec1	equ	0xFE5
  2912                           plusw1	equ	0xFE3
  2913                           fsr1l	equ	0xFE1
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           postdec2	equ	0xFDD
  2917                           plusw2	equ	0xFDB
  2918                           fsr2h	equ	0xFDA
  2919                           fsr2l	equ	0xFD9
  2920                           status	equ	0xFD8
  2921                           
  2922 ;; *************** function _i2c_open *****************
  2923 ;; Defined at:
  2924 ;;		line 124 in file "mcc_generated_files/drivers/i2c_master.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  address         1    wreg     unsigned char 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  address         1   23[COMRAM] unsigned char 
  2929 ;;  ret             1   22[COMRAM] enum E6837
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      enum E6837
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2939 ;;      Params:         0       0       0       0       0       0       0
  2940 ;;      Locals:         2       0       0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0
  2942 ;;      Totals:         2       0       0       0       0       0       0
  2943 ;;Total ram usage:        2 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    6
  2946 ;; This function calls:
  2947 ;;		_i2c1_driver_open
  2948 ;;		_i2c1_driver_setBusCollisionISR
  2949 ;;		_i2c1_driver_setI2cISR
  2950 ;;		_mssp1_clearIRQ
  2951 ;; This function is called by:
  2952 ;;		_write_register
  2953 ;;		_read_register
  2954 ;;		_read_xyzvalues
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text20
  2959  000758                     __ptext20:
  2960                           	opt stack 0
  2961  000758                     _i2c_open:
  2962                           	opt stack 23
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;incstack = 0
  2966                           ;i2c_open@address stored from wreg
  2967  000758  6E3D               	movwf	i2c_open@address,c
  2968                           
  2969                           ;i2c_master.c: 126: i2c_error_t ret = I2C_BUSY;
  2970  00075A  0E01               	movlw	1
  2971  00075C  6E3C               	movwf	i2c_open@ret,c
  2972                           
  2973                           ;i2c_master.c: 128: if(!i2c_status.inUse)
  2974  00075E  0100               	movlb	0	; () banked
  2975  000760  B39A               	btfsc	_i2c_status& (0+255),1,b
  2976  000762  0012               	return	
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;i2c_master.c: 129: {
  2980                           ;i2c_master.c: 130: i2c_status.address = address;
  2981  000764  C03D  F09B         	movff	i2c_open@address,_i2c_status+1
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;i2c_master.c: 131: i2c_status.busy = 0;
  2985  000768  919A               	bcf	_i2c_status& (0+255),0,b
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;i2c_master.c: 132: i2c_status.inUse = 1;
  2989  00076A  839A               	bsf	_i2c_status& (0+255),1,b
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;i2c_master.c: 133: i2c_status.addressNACKCheck = 0;
  2993  00076C  979A               	bcf	_i2c_status& (0+255),3,b
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;i2c_master.c: 134: i2c_status.state = I2C_RESET;
  2997  00076E  0E0E               	movlw	14
  2998  000770  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;i2c_master.c: 135: i2c_status.time_out_value = 500;
  3002  000772  0E01               	movlw	1
  3003  000774  6FA3               	movwf	(_i2c_status+9)& (0+255),b
  3004  000776  0EF4               	movlw	244
  3005  000778  6FA2               	movwf	(_i2c_status+8)& (0+255),b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;i2c_master.c: 136: i2c_status.bufferFree = 1;
  3009  00077A  859A               	bsf	_i2c_status& (0+255),2,b
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  3013  00077C  0E22               	movlw	low _returnStop
  3014  00077E  6FA6               	movwf	(_i2c_status+12)& (0+255),b
  3015  000780  0E13               	movlw	high _returnStop
  3016  000782  6FA7               	movwf	(_i2c_status+13)& (0+255),b
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  3020  000784  0E00               	movlw	0
  3021  000786  6FB2               	movwf	(_i2c_status+24)& (0+255),b
  3022  000788  0E00               	movlw	0
  3023  00078A  6FB3               	movwf	(_i2c_status+25)& (0+255),b
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;i2c_master.c: 141: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  3027  00078C  0E22               	movlw	low _returnStop
  3028  00078E  6FA8               	movwf	(_i2c_status+14)& (0+255),b
  3029  000790  0E13               	movlw	high _returnStop
  3030  000792  6FA9               	movwf	(_i2c_status+15)& (0+255),b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;i2c_master.c: 142: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  3034  000794  0E00               	movlw	0
  3035  000796  6FB4               	movwf	(_i2c_status+26)& (0+255),b
  3036  000798  0E00               	movlw	0
  3037  00079A  6FB5               	movwf	(_i2c_status+27)& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;i2c_master.c: 143: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  3041  00079C  0E22               	movlw	low _returnStop
  3042  00079E  6FAA               	movwf	(_i2c_status+16)& (0+255),b
  3043  0007A0  0E13               	movlw	high _returnStop
  3044  0007A2  6FAB               	movwf	(_i2c_status+17)& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;i2c_master.c: 144: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  3048  0007A4  0E00               	movlw	0
  3049  0007A6  6FB6               	movwf	(_i2c_status+28)& (0+255),b
  3050  0007A8  0E00               	movlw	0
  3051  0007AA  6FB7               	movwf	(_i2c_status+29)& (0+255),b
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;i2c_master.c: 145: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  3055  0007AC  0E22               	movlw	low _returnStop
  3056  0007AE  6FAC               	movwf	(_i2c_status+18)& (0+255),b
  3057  0007B0  0E13               	movlw	high _returnStop
  3058  0007B2  6FAD               	movwf	(_i2c_status+19)& (0+255),b
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;i2c_master.c: 146: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  3062  0007B4  0E00               	movlw	0
  3063  0007B6  6FB8               	movwf	(_i2c_status+30)& (0+255),b
  3064  0007B8  0E00               	movlw	0
  3065  0007BA  6FB9               	movwf	(_i2c_status+31)& (0+255),b
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;i2c_master.c: 147: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  3069  0007BC  0E18               	movlw	low _returnReset
  3070  0007BE  6FAE               	movwf	(_i2c_status+20)& (0+255),b
  3071  0007C0  0E13               	movlw	high _returnReset
  3072  0007C2  6FAF               	movwf	(_i2c_status+21)& (0+255),b
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;i2c_master.c: 148: i2c_status.callbackPayload[i2c_timeOut] = (0);
  3076  0007C4  0E00               	movlw	0
  3077  0007C6  6FBA               	movwf	(_i2c_status+32)& (0+255),b
  3078  0007C8  0E00               	movlw	0
  3079  0007CA  6FBB               	movwf	(_i2c_status+33)& (0+255),b
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;i2c_master.c: 150: i2c1_driver_open();
  3083  0007CC  EC7E  F008         	call	_i2c1_driver_open	;wreg free
  3084                           
  3085                           ;i2c_master.c: 151: mssp1_clearIRQ();
  3086  0007D0  ECDD  F009         	call	_mssp1_clearIRQ	;wreg free
  3087                           
  3088                           ;i2c_master.c: 153: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  3089  0007D4  0E94               	movlw	low _i2c_busCollisionISR
  3090  0007D6  6E3A               	movwf	i2c1_driver_setBusCollisionISR@f,c
  3091  0007D8  0E13               	movlw	high _i2c_busCollisionISR
  3092  0007DA  6E3B               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  3093  0007DC  EC87  F009         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  3094                           
  3095                           ;i2c_master.c: 154: i2c1_driver_setI2cISR(i2c_ISR);
  3096  0007E0  0E34               	movlw	low _i2c_ISR
  3097  0007E2  6E3A               	movwf	i2c1_driver_setI2cISR@f,c
  3098  0007E4  0E0D               	movlw	high _i2c_ISR
  3099  0007E6  6E3B               	movwf	i2c1_driver_setI2cISR@f+1,c
  3100  0007E8  EC82  F009         	call	_i2c1_driver_setI2cISR	;wreg free
  3101                           
  3102                           ;i2c_master.c: 159: ret = I2C_NOERR;
  3103  0007EC  0E00               	movlw	0
  3104  0007EE  6E3C               	movwf	i2c_open@ret,c
  3105  0007F0  0012               	return	
  3106  0007F2                     __end_of_i2c_open:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           prodh	equ	0xFF4
  3113                           prodl	equ	0xFF3
  3114                           intcon	equ	0xFF2
  3115                           intcon2	equ	0xFF1
  3116                           postinc0	equ	0xFEE
  3117                           plusw0	equ	0xFEB
  3118                           wreg	equ	0xFE8
  3119                           postdec1	equ	0xFE5
  3120                           plusw1	equ	0xFE3
  3121                           fsr1l	equ	0xFE1
  3122                           indf2	equ	0xFDF
  3123                           postinc2	equ	0xFDE
  3124                           postdec2	equ	0xFDD
  3125                           plusw2	equ	0xFDB
  3126                           fsr2h	equ	0xFDA
  3127                           fsr2l	equ	0xFD9
  3128                           status	equ	0xFD8
  3129                           
  3130 ;; *************** function _i2c1_driver_setI2cISR *****************
  3131 ;; Defined at:
  3132 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  f               2   20[COMRAM] PTR FTN()void 
  3135 ;;		 -> i2c_ISR(1), 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3147 ;;      Params:         2       0       0       0       0       0       0
  3148 ;;      Locals:         0       0       0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0       0
  3150 ;;      Totals:         2       0       0       0       0       0       0
  3151 ;;Total ram usage:        2 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    5
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_i2c_open
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text21
  3162  001304                     __ptext21:
  3163                           	opt stack 0
  3164  001304                     _i2c1_driver_setI2cISR:
  3165                           	opt stack 23
  3166                           
  3167                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  3168                           
  3169                           ;incstack = 0
  3170  001304  C03A  F011         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  3171  001308  C03B  F012         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  3172  00130C  0012               	return		;funcret
  3173  00130E                     __end_of_i2c1_driver_setI2cISR:
  3174                           	opt stack 0
  3175                           tblptru	equ	0xFF8
  3176                           tblptrh	equ	0xFF7
  3177                           tblptrl	equ	0xFF6
  3178                           tablat	equ	0xFF5
  3179                           prodh	equ	0xFF4
  3180                           prodl	equ	0xFF3
  3181                           intcon	equ	0xFF2
  3182                           intcon2	equ	0xFF1
  3183                           postinc0	equ	0xFEE
  3184                           plusw0	equ	0xFEB
  3185                           wreg	equ	0xFE8
  3186                           postdec1	equ	0xFE5
  3187                           plusw1	equ	0xFE3
  3188                           fsr1l	equ	0xFE1
  3189                           indf2	equ	0xFDF
  3190                           postinc2	equ	0xFDE
  3191                           postdec2	equ	0xFDD
  3192                           plusw2	equ	0xFDB
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  3198 ;; Defined at:
  3199 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  f               2   20[COMRAM] PTR FTN()void 
  3202 ;;		 -> i2c_busCollisionISR(1), 
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;		None
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		wreg, status,2, status,0
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3214 ;;      Params:         2       0       0       0       0       0       0
  3215 ;;      Locals:         0       0       0       0       0       0       0
  3216 ;;      Temps:          0       0       0       0       0       0       0
  3217 ;;      Totals:         2       0       0       0       0       0       0
  3218 ;;Total ram usage:        2 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    5
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_i2c_open
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text22
  3229  00130E                     __ptext22:
  3230                           	opt stack 0
  3231  00130E                     _i2c1_driver_setBusCollisionISR:
  3232                           	opt stack 23
  3233                           
  3234                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  3235                           
  3236                           ;incstack = 0
  3237  00130E  C03A  F013         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  3238  001312  C03B  F014         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  3239  001316  0012               	return		;funcret
  3240  001318                     __end_of_i2c1_driver_setBusCollisionISR:
  3241                           	opt stack 0
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           intcon2	equ	0xFF1
  3250                           postinc0	equ	0xFEE
  3251                           plusw0	equ	0xFEB
  3252                           wreg	equ	0xFE8
  3253                           postdec1	equ	0xFE5
  3254                           plusw1	equ	0xFE3
  3255                           fsr1l	equ	0xFE1
  3256                           indf2	equ	0xFDF
  3257                           postinc2	equ	0xFDE
  3258                           postdec2	equ	0xFDD
  3259                           plusw2	equ	0xFDB
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function _i2c1_driver_open *****************
  3265 ;; Defined at:
  3266 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;		None
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;		None
  3271 ;; Return value:  Size  Location     Type
  3272 ;;		None               void
  3273 ;; Registers used:
  3274 ;;		wreg, status,2
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3280 ;;      Params:         0       0       0       0       0       0       0
  3281 ;;      Locals:         0       0       0       0       0       0       0
  3282 ;;      Temps:          0       0       0       0       0       0       0
  3283 ;;      Totals:         0       0       0       0       0       0       0
  3284 ;;Total ram usage:        0 bytes
  3285 ;; Hardware stack levels used:    1
  3286 ;; Hardware stack levels required when called:    5
  3287 ;; This function calls:
  3288 ;;		Nothing
  3289 ;; This function is called by:
  3290 ;;		_i2c_open
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           	psect	text23
  3295  0010FC                     __ptext23:
  3296                           	opt stack 0
  3297  0010FC                     _i2c1_driver_open:
  3298                           	opt stack 23
  3299                           
  3300                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  3301                           
  3302                           ;incstack = 0
  3303  0010FC  BAC6               	btfsc	4038,5,c	;volatile
  3304  0010FE  0012               	return	
  3305                           
  3306                           ;i2c1_driver.c: 86: {
  3307                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  3308  001100  0E00               	movlw	0
  3309  001102  6EC7               	movwf	4039,c	;volatile
  3310                           
  3311                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  3312  001104  0E28               	movlw	40
  3313  001106  6EC6               	movwf	4038,c	;volatile
  3314                           
  3315                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  3316  001108  0E00               	movlw	0
  3317  00110A  6EC5               	movwf	4037,c	;volatile
  3318                           
  3319                           ;i2c1_driver.c: 90: SSP1ADD = 0x27;
  3320  00110C  0E27               	movlw	39
  3321  00110E  6EC8               	movwf	4040,c	;volatile
  3322                           
  3323                           ;i2c1_driver.c: 93: else
  3324                           ;i2c1_driver.c: 94: return 0;
  3325                           ;	Return value of _i2c1_driver_open is never used
  3326                           
  3327                           ;i2c1_driver.c: 92: }
  3328                           
  3329                           ;i2c1_driver.c: 91: return 1;
  3330                           ;	Return value of _i2c1_driver_open is never used
  3331  001110  0012               	return	
  3332  001112                     __end_of_i2c1_driver_open:
  3333                           	opt stack 0
  3334                           tblptru	equ	0xFF8
  3335                           tblptrh	equ	0xFF7
  3336                           tblptrl	equ	0xFF6
  3337                           tablat	equ	0xFF5
  3338                           prodh	equ	0xFF4
  3339                           prodl	equ	0xFF3
  3340                           intcon	equ	0xFF2
  3341                           intcon2	equ	0xFF1
  3342                           postinc0	equ	0xFEE
  3343                           plusw0	equ	0xFEB
  3344                           wreg	equ	0xFE8
  3345                           postdec1	equ	0xFE5
  3346                           plusw1	equ	0xFE3
  3347                           fsr1l	equ	0xFE1
  3348                           indf2	equ	0xFDF
  3349                           postinc2	equ	0xFDE
  3350                           postdec2	equ	0xFDD
  3351                           plusw2	equ	0xFDB
  3352                           fsr2h	equ	0xFDA
  3353                           fsr2l	equ	0xFD9
  3354                           status	equ	0xFD8
  3355                           
  3356 ;; *************** function _i2c_masterAccelRead *****************
  3357 ;; Defined at:
  3358 ;;		line 249 in file "mcc_generated_files/drivers/i2c_master.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  reg             1    wreg     unsigned char 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  reg             1   25[COMRAM] unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      enum E6837
  3365 ;; Registers used:
  3366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3372 ;;      Params:         0       0       0       0       0       0       0
  3373 ;;      Locals:         1       0       0       0       0       0       0
  3374 ;;      Temps:          0       0       0       0       0       0       0
  3375 ;;      Totals:         1       0       0       0       0       0       0
  3376 ;;Total ram usage:        1 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:   11
  3379 ;; This function calls:
  3380 ;;		_i2c_masterOperation
  3381 ;; This function is called by:
  3382 ;;		_read_register
  3383 ;;		_read_xyzvalues
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           	psect	text24
  3388  001250                     __ptext24:
  3389                           	opt stack 0
  3390  001250                     _i2c_masterAccelRead:
  3391                           	opt stack 18
  3392                           
  3393                           ;incstack = 0
  3394                           ;i2c_masterAccelRead@reg stored from wreg
  3395  001250  6E3F               	movwf	i2c_masterAccelRead@reg,c
  3396                           
  3397                           ;i2c_master.c: 252: i2c_status.register_address = reg;
  3398  001252  C03F  F0BE         	movff	i2c_masterAccelRead@reg,_i2c_status+36
  3399                           
  3400                           ;i2c_master.c: 254: return i2c_masterOperation(OPERATIONACCELREAD);
  3401  001256  0E01               	movlw	1
  3402  001258  EC0E  F007         	call	_i2c_masterOperation
  3403  00125C  0012               	return	
  3404  00125E                     __end_of_i2c_masterAccelRead:
  3405                           	opt stack 0
  3406                           tblptru	equ	0xFF8
  3407                           tblptrh	equ	0xFF7
  3408                           tblptrl	equ	0xFF6
  3409                           tablat	equ	0xFF5
  3410                           prodh	equ	0xFF4
  3411                           prodl	equ	0xFF3
  3412                           intcon	equ	0xFF2
  3413                           intcon2	equ	0xFF1
  3414                           postinc0	equ	0xFEE
  3415                           plusw0	equ	0xFEB
  3416                           wreg	equ	0xFE8
  3417                           postdec1	equ	0xFE5
  3418                           plusw1	equ	0xFE3
  3419                           fsr1l	equ	0xFE1
  3420                           indf2	equ	0xFDF
  3421                           postinc2	equ	0xFDE
  3422                           postdec2	equ	0xFDD
  3423                           plusw2	equ	0xFDB
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _i2c_masterOperation *****************
  3429 ;; Defined at:
  3430 ;;		line 210 in file "mcc_generated_files/drivers/i2c_master.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  operation       1    wreg     enum E6863
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  operation       1   23[COMRAM] enum E6863
  3435 ;;  ret             1   24[COMRAM] enum E6837
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      enum E6837
  3438 ;; Registers used:
  3439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3445 ;;      Params:         0       0       0       0       0       0       0
  3446 ;;      Locals:         2       0       0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0
  3448 ;;      Totals:         2       0       0       0       0       0       0
  3449 ;;Total ram usage:        2 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:   10
  3452 ;; This function calls:
  3453 ;;		_i2c1_driver_start
  3454 ;;		_i2c_poller
  3455 ;;		_mssp1_IRQisEnabled
  3456 ;; This function is called by:
  3457 ;;		_i2c_masterAccelRead
  3458 ;;		_i2c_masterWrite
  3459 ;;		_i2c_masterRead
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text25
  3464  000E1C                     __ptext25:
  3465                           	opt stack 0
  3466  000E1C                     _i2c_masterOperation:
  3467                           	opt stack 18
  3468                           
  3469                           ;incstack = 0
  3470                           ;i2c_masterOperation@operation stored from wreg
  3471  000E1C  6E3D               	movwf	i2c_masterOperation@operation,c
  3472                           
  3473                           ;i2c_master.c: 212: i2c_error_t ret = I2C_BUSY;
  3474  000E1E  0E01               	movlw	1
  3475  000E20  6E3E               	movwf	i2c_masterOperation@ret,c
  3476                           
  3477                           ;i2c_master.c: 213: if(!i2c_status.busy)
  3478  000E22  0100               	movlb	0	; () banked
  3479  000E24  B19A               	btfsc	_i2c_status& (0+255),0,b
  3480  000E26  D01C               	goto	l100
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;i2c_master.c: 214: {
  3484                           ;i2c_master.c: 215: i2c_status.busy = 1;
  3485  000E28  819A               	bsf	_i2c_status& (0+255),0,b
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;i2c_master.c: 216: ret = I2C_NOERR;
  3489  000E2A  0E00               	movlw	0
  3490  000E2C  6E3E               	movwf	i2c_masterOperation@ret,c
  3491                           
  3492                           ;i2c_master.c: 218: switch(operation) {
  3493  000E2E  D007               	goto	l95
  3494  000E30                     
  3495                           ; BSR set to: 0
  3496                           ;i2c_master.c: 220: i2c_status.state = I2C_SEND_ADR_READ;
  3497                           
  3498                           ; BSR set to: 0
  3499  000E30  0E01               	movlw	1
  3500  000E32  D003               	goto	L2
  3501  000E34                     
  3502                           ; BSR set to: 0
  3503                           ;i2c_master.c: 224: i2c_status.state = I2C_SEND_INITIAL_READ;
  3504                           
  3505                           ; BSR set to: 0
  3506  000E34  0E10               	movlw	16
  3507  000E36  D001               	goto	L2
  3508  000E38                     
  3509                           ; BSR set to: 0
  3510                           ;i2c_master.c: 228: i2c_status.state = I2C_SEND_ADR_WRITE;
  3511                           
  3512                           ; BSR set to: 0
  3513  000E38  0E02               	movlw	2
  3514  000E3A                     L2:
  3515  000E3A  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;i2c_master.c: 230: }
  3519                           
  3520                           ;i2c_master.c: 229: break;
  3521  000E3C  D00A               	goto	l97
  3522  000E3E                     l95:
  3523                           
  3524                           ; BSR set to: 0
  3525                           
  3526                           ; BSR set to: 0
  3527  000E3E  503D               	movf	i2c_masterOperation@operation,w,c
  3528                           
  3529                           ; Switch size 1, requested type "space"
  3530                           ; Number of cases is 3, Range of values is 0 to 2
  3531                           ; switch strategies available:
  3532                           ; Name         Instructions Cycles
  3533                           ; simple_byte           10     6 (average)
  3534                           ;	Chosen strategy is simple_byte
  3535  000E40  0A00               	xorlw	0	; case 0
  3536  000E42  B4D8               	btfsc	status,2,c
  3537  000E44  D7F5               	goto	l96
  3538  000E46  0A01               	xorlw	1	; case 1
  3539  000E48  B4D8               	btfsc	status,2,c
  3540  000E4A  D7F4               	goto	l98
  3541  000E4C  0A03               	xorlw	3	; case 2
  3542  000E4E  B4D8               	btfsc	status,2,c
  3543  000E50  D7F3               	goto	l99
  3544  000E52                     l97:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;i2c_master.c: 241: i2c1_driver_start();
  3548                           
  3549                           ; BSR set to: 0
  3550  000E52  ECD9  F009         	call	_i2c1_driver_start	;wreg free
  3551                           
  3552                           ;i2c_master.c: 243: if(! mssp1_IRQisEnabled())
  3553  000E56  ECF9  F008         	call	_mssp1_IRQisEnabled	;wreg free
  3554  000E5A  A0D8               	btfss	status,0,c
  3555                           
  3556                           ;i2c_master.c: 244: i2c_poller();
  3557  000E5C  EC71  F008         	call	_i2c_poller	;wreg free
  3558  000E60                     l100:
  3559                           
  3560                           ;i2c_master.c: 245: }
  3561                           ;i2c_master.c: 246: return ret;
  3562  000E60  503E               	movf	i2c_masterOperation@ret,w,c
  3563  000E62  0012               	return	
  3564  000E64                     __end_of_i2c_masterOperation:
  3565                           	opt stack 0
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           intcon	equ	0xFF2
  3573                           intcon2	equ	0xFF1
  3574                           postinc0	equ	0xFEE
  3575                           plusw0	equ	0xFEB
  3576                           wreg	equ	0xFE8
  3577                           postdec1	equ	0xFE5
  3578                           plusw1	equ	0xFE3
  3579                           fsr1l	equ	0xFE1
  3580                           indf2	equ	0xFDF
  3581                           postinc2	equ	0xFDE
  3582                           postdec2	equ	0xFDD
  3583                           plusw2	equ	0xFDB
  3584                           fsr2h	equ	0xFDA
  3585                           fsr2l	equ	0xFD9
  3586                           status	equ	0xFD8
  3587                           
  3588 ;; *************** function _mssp1_IRQisEnabled *****************
  3589 ;; Defined at:
  3590 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;		None
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;		None
  3595 ;; Return value:  Size  Location     Type
  3596 ;;		None               void
  3597 ;; Registers used:
  3598 ;;		wreg, status,0
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3604 ;;      Params:         0       0       0       0       0       0       0
  3605 ;;      Locals:         0       0       0       0       0       0       0
  3606 ;;      Temps:          1       0       0       0       0       0       0
  3607 ;;      Totals:         1       0       0       0       0       0       0
  3608 ;;Total ram usage:        1 bytes
  3609 ;; Hardware stack levels used:    1
  3610 ;; Hardware stack levels required when called:    5
  3611 ;; This function calls:
  3612 ;;		Nothing
  3613 ;; This function is called by:
  3614 ;;		_i2c_masterOperation
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           	psect	text26
  3619  0011F2                     __ptext26:
  3620                           	opt stack 0
  3621  0011F2                     _mssp1_IRQisEnabled:
  3622                           	opt stack 22
  3623                           
  3624                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
  3625                           
  3626                           ;incstack = 0
  3627  0011F2  A69D               	btfss	3997,3,c	;volatile
  3628  0011F4  D003               	goto	u1580
  3629  0011F6  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  3630  0011F8  2A3A               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  3631  0011FA  D001               	goto	u1588
  3632  0011FC                     u1580:
  3633  0011FC  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  3634  0011FE                     u1588:
  3635  0011FE  303A               	rrcf	??_mssp1_IRQisEnabled,w,c
  3636  001200  0012               	return	
  3637  001202                     __end_of_mssp1_IRQisEnabled:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           prodh	equ	0xFF4
  3644                           prodl	equ	0xFF3
  3645                           intcon	equ	0xFF2
  3646                           intcon2	equ	0xFF1
  3647                           postinc0	equ	0xFEE
  3648                           plusw0	equ	0xFEB
  3649                           wreg	equ	0xFE8
  3650                           postdec1	equ	0xFE5
  3651                           plusw1	equ	0xFE3
  3652                           fsr1l	equ	0xFE1
  3653                           indf2	equ	0xFDF
  3654                           postinc2	equ	0xFDE
  3655                           postdec2	equ	0xFDD
  3656                           plusw2	equ	0xFDB
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _i2c_poller *****************
  3662 ;; Defined at:
  3663 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3677 ;;      Params:         0       0       0       0       0       0       0
  3678 ;;      Locals:         0       0       0       0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0       0       0
  3680 ;;      Totals:         0       0       0       0       0       0       0
  3681 ;;Total ram usage:        0 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    9
  3684 ;; This function calls:
  3685 ;;		_i2c_ISR
  3686 ;;		_mssp1_waitForEvent
  3687 ;; This function is called by:
  3688 ;;		_i2c_masterOperation
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text27
  3693  0010E2                     __ptext27:
  3694                           	opt stack 0
  3695  0010E2                     _i2c_poller:
  3696                           	opt stack 18
  3697                           
  3698                           ;i2c_master.c: 274: while(i2c_status.busy)
  3699                           
  3700                           ;incstack = 0
  3701  0010E2  D008               	goto	l113
  3702  0010E4                     
  3703                           ;i2c_master.c: 275: {
  3704                           ;i2c_master.c: 276: mssp1_waitForEvent((0));
  3705  0010E4  0E00               	movlw	0
  3706  0010E6  6E3A               	movwf	mssp1_waitForEvent@timeout,c
  3707  0010E8  0E00               	movlw	0
  3708  0010EA  6E3B               	movwf	mssp1_waitForEvent@timeout+1,c
  3709  0010EC  ECDE  F008         	call	_mssp1_waitForEvent	;wreg free
  3710                           
  3711                           ;i2c_master.c: 277: i2c_ISR();
  3712  0010F0  EC9A  F006         	call	_i2c_ISR	;wreg free
  3713  0010F4                     l113:
  3714  0010F4  0100               	movlb	0	; () banked
  3715  0010F6  A19A               	btfss	_i2c_status& (0+255),0,b
  3716  0010F8  0012               	return	
  3717  0010FA  D7F4               	goto	l114
  3718  0010FC                     __end_of_i2c_poller:
  3719                           	opt stack 0
  3720                           tblptru	equ	0xFF8
  3721                           tblptrh	equ	0xFF7
  3722                           tblptrl	equ	0xFF6
  3723                           tablat	equ	0xFF5
  3724                           prodh	equ	0xFF4
  3725                           prodl	equ	0xFF3
  3726                           intcon	equ	0xFF2
  3727                           intcon2	equ	0xFF1
  3728                           postinc0	equ	0xFEE
  3729                           plusw0	equ	0xFEB
  3730                           wreg	equ	0xFE8
  3731                           postdec1	equ	0xFE5
  3732                           plusw1	equ	0xFE3
  3733                           fsr1l	equ	0xFE1
  3734                           indf2	equ	0xFDF
  3735                           postinc2	equ	0xFDE
  3736                           postdec2	equ	0xFDD
  3737                           plusw2	equ	0xFDB
  3738                           fsr2h	equ	0xFDA
  3739                           fsr2l	equ	0xFD9
  3740                           status	equ	0xFD8
  3741                           
  3742 ;; *************** function _mssp1_waitForEvent *****************
  3743 ;; Defined at:
  3744 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  timeout         2   20[COMRAM] PTR unsigned int 
  3747 ;;		 -> NULL(0), 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;		None
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      void 
  3752 ;; Registers used:
  3753 ;;		wreg
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3759 ;;      Params:         2       0       0       0       0       0       0
  3760 ;;      Locals:         0       0       0       0       0       0       0
  3761 ;;      Temps:          0       0       0       0       0       0       0
  3762 ;;      Totals:         2       0       0       0       0       0       0
  3763 ;;Total ram usage:        2 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; Hardware stack levels required when called:    5
  3766 ;; This function calls:
  3767 ;;		Nothing
  3768 ;; This function is called by:
  3769 ;;		_i2c_poller
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text28
  3774  0011BC                     __ptext28:
  3775                           	opt stack 0
  3776  0011BC                     _mssp1_waitForEvent:
  3777                           	opt stack 21
  3778                           
  3779                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;incstack = 0
  3783  0011BC  B69E               	btfsc	3998,3,c	;volatile
  3784  0011BE  0012               	return	
  3785  0011C0                     u1530:
  3786                           
  3787                           ;i2c1_driver.c: 76: {
  3788                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
  3789                           
  3790                           ;i2c1_driver.c: 74: {
  3791                           ;i2c1_driver.c: 75: while(1)
  3792  0011C0  B69E               	btfsc	3998,3,c	;volatile
  3793  0011C2  0012               	return	
  3794                           
  3795                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3796  0011C4  0E85               	movlw	133
  3797  0011C6                     u2167:
  3798  0011C6  2EE8               	decfsz	wreg,f,c
  3799  0011C8  D7FE               	bra	u2167
  3800  0011CA  F000               	nop	
  3801  0011CC  D7F9               	goto	u1530
  3802  0011CE                     __end_of_mssp1_waitForEvent:
  3803                           	opt stack 0
  3804                           tblptru	equ	0xFF8
  3805                           tblptrh	equ	0xFF7
  3806                           tblptrl	equ	0xFF6
  3807                           tablat	equ	0xFF5
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           intcon	equ	0xFF2
  3811                           intcon2	equ	0xFF1
  3812                           postinc0	equ	0xFEE
  3813                           plusw0	equ	0xFEB
  3814                           wreg	equ	0xFE8
  3815                           postdec1	equ	0xFE5
  3816                           plusw1	equ	0xFE3
  3817                           fsr1l	equ	0xFE1
  3818                           indf2	equ	0xFDF
  3819                           postinc2	equ	0xFDE
  3820                           postdec2	equ	0xFDD
  3821                           plusw2	equ	0xFDB
  3822                           fsr2h	equ	0xFDA
  3823                           fsr2l	equ	0xFD9
  3824                           status	equ	0xFD8
  3825                           
  3826 ;; *************** function _i2c_ISR *****************
  3827 ;; Defined at:
  3828 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      void 
  3835 ;; Registers used:
  3836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3842 ;;      Params:         0       0       0       0       0       0       0
  3843 ;;      Locals:         0       0       0       0       0       0       0
  3844 ;;      Temps:          0       0       0       0       0       0       0
  3845 ;;      Totals:         0       0       0       0       0       0       0
  3846 ;;Total ram usage:        0 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    8
  3849 ;; This function calls:
  3850 ;;		_do_I2C_DO_ACK
  3851 ;;		_do_I2C_DO_ADDRESS_NACK
  3852 ;;		_do_I2C_DO_NACK_RESTART
  3853 ;;		_do_I2C_DO_NACK_STOP
  3854 ;;		_do_I2C_IDLE
  3855 ;;		_do_I2C_RCEN
  3856 ;;		_do_I2C_RESET
  3857 ;;		_do_I2C_RX
  3858 ;;		_do_I2C_SEND_ADR_READ
  3859 ;;		_do_I2C_SEND_ADR_WRITE
  3860 ;;		_do_I2C_SEND_INITIAL_READ
  3861 ;;		_do_I2C_SEND_RESTART
  3862 ;;		_do_I2C_SEND_RESTART_READ
  3863 ;;		_do_I2C_SEND_RESTART_WRITE
  3864 ;;		_do_I2C_SEND_STOP
  3865 ;;		_do_I2C_TX
  3866 ;;		_do_I2C_TX_EMPTY
  3867 ;;		_do_I2C_TX_REGISTER
  3868 ;;		_i2c1_driver_isNACK
  3869 ;;		_mssp1_clearIRQ
  3870 ;; This function is called by:
  3871 ;;		_i2c_open
  3872 ;;		_i2c_poller
  3873 ;;		_INTERRUPT_InterruptManager
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text29
  3878  000D34                     __ptext29:
  3879                           	opt stack 0
  3880  000D34                     _i2c_ISR:
  3881                           	opt stack 0
  3882                           
  3883                           ;Skip over the trampoline to the duplicate function for level 2
  3884  000D34  B24A               	btfsc	btemp,1,c
  3885  000D36  EF32  F007         	goto	i2_i2c_ISR
  3886  000D3A                     _i2c_ISR$intlevel0:
  3887                           	opt stack 18
  3888                           
  3889                           ;i2c_master.c: 486: mssp1_clearIRQ();
  3890                           
  3891                           ;incstack = 0
  3892  000D3A  ECDD  F009         	call	_mssp1_clearIRQ	;wreg free
  3893                           
  3894                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  3895  000D3E  0100               	movlb	0	; () banked
  3896  000D40  A79A               	btfss	_i2c_status& (0+255),3,b
  3897  000D42  D007               	goto	l209
  3898                           
  3899                           ; BSR set to: 0
  3900  000D44  ECB5  F008         	call	_i2c1_driver_isNACK	;wreg free
  3901  000D48  A0D8               	btfss	status,0,c
  3902  000D4A  D003               	goto	l209
  3903                           
  3904                           ;i2c_master.c: 493: {
  3905                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  3906  000D4C  0E0F               	movlw	15
  3907  000D4E  0100               	movlb	0	; () banked
  3908  000D50  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  3909  000D52                     l209:
  3910                           
  3911                           ;i2c_master.c: 495: }
  3912                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  3913                           
  3914                           ; BSR set to: 0
  3915  000D52  0100               	movlb	0	; () banked
  3916  000D54  51A4               	movf	(_i2c_status+10)& (0+255),w,b
  3917  000D56  0D02               	mullw	2
  3918  000D58  0EBF               	movlw	low _fsmStateTable
  3919  000D5A  24F3               	addwf	prodl,w,c
  3920  000D5C  6ED9               	movwf	fsr2l,c
  3921  000D5E  0E00               	movlw	high _fsmStateTable
  3922  000D60  20F4               	addwfc	prodh,w,c
  3923  000D62  6EDA               	movwf	fsr2h,c
  3924  000D64  D801               	call	u1578
  3925  000D66  D00A               	goto	u1579
  3926  000D68                     u1578:
  3927  000D68  0005               	push	
  3928  000D6A  6EFA               	movwf	pclath,c
  3929  000D6C  50DE               	movf	postinc2,w,c
  3930  000D6E  6EFD               	movwf	tosl,c
  3931  000D70  50DE               	movf	postinc2,w,c
  3932  000D72  6EFE               	movwf	tosh,c
  3933  000D74  50F8               	movf	tblptru,w,c
  3934  000D76  6EFF               	movwf	tosu,c
  3935  000D78  50FA               	movf	pclath,w,c
  3936  000D7A  0012               	return		;indir
  3937  000D7C                     u1579:
  3938  000D7C  0100               	movlb	0	; () banked
  3939  000D7E  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  3940                           
  3941                           ; BSR set to: 0
  3942  000D80  0012               	return		;funcret
  3943  000D82                     __end_of_i2c_ISR:
  3944                           	opt stack 0
  3945                           tosu	equ	0xFFF
  3946                           tosh	equ	0xFFE
  3947                           tosl	equ	0xFFD
  3948                           pclath	equ	0xFFA
  3949                           tblptru	equ	0xFF8
  3950                           tblptrh	equ	0xFF7
  3951                           tblptrl	equ	0xFF6
  3952                           tablat	equ	0xFF5
  3953                           prodh	equ	0xFF4
  3954                           prodl	equ	0xFF3
  3955                           intcon	equ	0xFF2
  3956                           intcon2	equ	0xFF1
  3957                           postinc0	equ	0xFEE
  3958                           plusw0	equ	0xFEB
  3959                           wreg	equ	0xFE8
  3960                           postdec1	equ	0xFE5
  3961                           plusw1	equ	0xFE3
  3962                           fsr1l	equ	0xFE1
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           plusw2	equ	0xFDB
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _do_I2C_TX_EMPTY *****************
  3972 ;; Defined at:
  3973 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      enum E7019
  3980 ;; Registers used:
  3981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3987 ;;      Params:         0       0       0       0       0       0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0
  3990 ;;      Totals:         0       0       0       0       0       0       0
  3991 ;;Total ram usage:        0 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    7
  3994 ;; This function calls:
  3995 ;;		_do_I2C_SEND_RESTART
  3996 ;;		_do_I2C_SEND_STOP
  3997 ;;		_mssp1_setIRQ
  3998 ;;		_returnReset
  3999 ;;		_returnStop
  4000 ;; This function is called by:
  4001 ;;		_i2c_ISR
  4002 ;;		i2_i2c_ISR
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text30
  4007  000C2C                     __ptext30:
  4008                           	opt stack 0
  4009  000C2C                     _do_I2C_TX_EMPTY:
  4010                           	opt stack 0
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;Skip over the trampoline to the duplicate function for level 2
  4014  000C2C  B24A               	btfsc	btemp,1,c
  4015  000C2E  EF45  F006         	goto	i2_do_I2C_TX_EMPTY
  4016  000C32                     _do_I2C_TX_EMPTY$intlevel0:
  4017                           	opt stack 18
  4018                           
  4019                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  4020                           
  4021                           ;incstack = 0
  4022  000C32  0100               	movlb	0	; () banked
  4023  000C34  859A               	bsf	_i2c_status& (0+255),2,b
  4024                           
  4025                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  4026  000C36  D00A               	goto	l197
  4027  000C38                     
  4028                           ;i2c_master.c: 448: case i2c_restart_write:
  4029                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  4030                           
  4031                           ; BSR set to: 0
  4032                           
  4033                           ; BSR set to: 0
  4034  000C38  EC4B  F009         	call	_do_I2C_SEND_RESTART	;wreg free
  4035  000C3C  0012               	return	
  4036  000C3E                     
  4037                           ;i2c_master.c: 451: mssp1_setIRQ();
  4038  000C3E  ECCF  F009         	call	_mssp1_setIRQ	;wreg free
  4039                           
  4040                           ;i2c_master.c: 452: return I2C_TX;
  4041  000C42  0E03               	movlw	3
  4042  000C44  0012               	return	
  4043  000C46                     
  4044                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  4045                           
  4046                           ;i2c_master.c: 454: case i2c_stop:
  4047  000C46  EC44  F009         	call	_do_I2C_SEND_STOP	;wreg free
  4048                           
  4049                           ;i2c_master.c: 456: }
  4050  000C4A  0012               	return	
  4051  000C4C                     l197:
  4052  000C4C  C0B2  F03A         	movff	_i2c_status+24,returnReset@p
  4053  000C50  C0B3  F03B         	movff	_i2c_status+25,returnReset@p+1
  4054  000C54  EE20  F0A6         	lfsr	2,_i2c_status+12
  4055  000C58  D801               	call	u1528
  4056  000C5A  D00A               	goto	u1529
  4057  000C5C                     u1528:
  4058  000C5C  0005               	push	
  4059  000C5E  6EFA               	movwf	pclath,c
  4060  000C60  50DE               	movf	postinc2,w,c
  4061  000C62  6EFD               	movwf	tosl,c
  4062  000C64  50DE               	movf	postinc2,w,c
  4063  000C66  6EFE               	movwf	tosh,c
  4064  000C68  50F8               	movf	tblptru,w,c
  4065  000C6A  6EFF               	movwf	tosu,c
  4066  000C6C  50FA               	movf	pclath,w,c
  4067  000C6E  0012               	return		;indir
  4068  000C70                     u1529:
  4069                           
  4070                           ; Switch size 1, requested type "space"
  4071                           ; Number of cases is 4, Range of values is 1 to 4
  4072                           ; switch strategies available:
  4073                           ; Name         Instructions Cycles
  4074                           ; simple_byte           13     7 (average)
  4075                           ;	Chosen strategy is simple_byte
  4076  000C70  0A01               	xorlw	1	; case 1
  4077  000C72  B4D8               	btfsc	status,2,c
  4078  000C74  D7E8               	goto	l202
  4079  000C76  0A03               	xorlw	3	; case 2
  4080  000C78  B4D8               	btfsc	status,2,c
  4081  000C7A  D7DE               	goto	l198
  4082  000C7C  0A01               	xorlw	1	; case 3
  4083  000C7E  B4D8               	btfsc	status,2,c
  4084  000C80  D7DB               	goto	l198
  4085  000C82  0A07               	xorlw	7	; case 4
  4086  000C84  B4D8               	btfsc	status,2,c
  4087  000C86  D7DB               	goto	l201
  4088  000C88  D7DE               	goto	l202
  4089  000C8A                     __end_of_do_I2C_TX_EMPTY:
  4090                           	opt stack 0
  4091                           tosu	equ	0xFFF
  4092                           tosh	equ	0xFFE
  4093                           tosl	equ	0xFFD
  4094                           pclath	equ	0xFFA
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           prodh	equ	0xFF4
  4100                           prodl	equ	0xFF3
  4101                           intcon	equ	0xFF2
  4102                           intcon2	equ	0xFF1
  4103                           postinc0	equ	0xFEE
  4104                           plusw0	equ	0xFEB
  4105                           wreg	equ	0xFE8
  4106                           postdec1	equ	0xFE5
  4107                           plusw1	equ	0xFE3
  4108                           fsr1l	equ	0xFE1
  4109                           indf2	equ	0xFDF
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           plusw2	equ	0xFDB
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function _do_I2C_RX *****************
  4118 ;; Defined at:
  4119 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;		None
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;		None
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      enum E7019
  4126 ;; Registers used:
  4127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4133 ;;      Params:         0       0       0       0       0       0       0
  4134 ;;      Locals:         0       0       0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0
  4136 ;;      Totals:         0       0       0       0       0       0       0
  4137 ;;Total ram usage:        0 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    7
  4140 ;; This function calls:
  4141 ;;		_do_I2C_DO_NACK_RESTART
  4142 ;;		_do_I2C_DO_NACK_STOP
  4143 ;;		_i2c1_driver_getRXData
  4144 ;;		_i2c1_driver_sendACK
  4145 ;;		_returnReset
  4146 ;;		_returnStop
  4147 ;; This function is called by:
  4148 ;;		_i2c_ISR
  4149 ;;		i2_i2c_ISR
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text31
  4154  0009AA                     __ptext31:
  4155                           	opt stack 0
  4156  0009AA                     _do_I2C_RX:
  4157                           	opt stack 0
  4158                           
  4159                           ;Skip over the trampoline to the duplicate function for level 2
  4160  0009AA  B24A               	btfsc	btemp,1,c
  4161  0009AC  EF12  F005         	goto	i2_do_I2C_RX
  4162  0009B0                     _do_I2C_RX$intlevel0:
  4163                           	opt stack 18
  4164                           
  4165                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  4166                           
  4167                           ;incstack = 0
  4168  0009B0  ECD1  F009         	call	_i2c1_driver_getRXData	;wreg free
  4169  0009B4  C09C  FFD9         	movff	_i2c_status+2,fsr2l
  4170  0009B8  C09D  FFDA         	movff	_i2c_status+3,fsr2h
  4171  0009BC  6EDF               	movwf	indf2,c
  4172  0009BE  0100               	movlb	0	; () banked
  4173  0009C0  4B9C               	infsnz	(_i2c_status+2)& (0+255),f,b
  4174  0009C2  2B9D               	incf	(_i2c_status+3)& (0+255),f,b
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  4178  0009C4  079E               	decf	(_i2c_status+4)& (0+255),f,b
  4179  0009C6  A0D8               	btfss	status,0,c
  4180  0009C8  079F               	decf	(_i2c_status+5)& (0+255),f,b
  4181  0009CA  519E               	movf	(_i2c_status+4)& (0+255),w,b
  4182  0009CC  119F               	iorwf	(_i2c_status+5)& (0+255),w,b
  4183  0009CE  B4D8               	btfsc	status,2,c
  4184  0009D0  D004               	goto	l185
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;i2c_master.c: 421: {
  4188                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  4189  0009D2  ECC1  F009         	call	_i2c1_driver_sendACK	;wreg free
  4190                           
  4191                           ;i2c_master.c: 423: return I2C_RCEN;
  4192  0009D6  0E05               	movlw	5
  4193                           
  4194                           ;i2c_master.c: 424: }
  4195  0009D8  0012               	return	
  4196  0009DA                     l185:
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;i2c_master.c: 425: else
  4200                           ;i2c_master.c: 426: {
  4201                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  4202  0009DA  859A               	bsf	_i2c_status& (0+255),2,b
  4203                           
  4204                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  4205  0009DC  D006               	goto	l188
  4206  0009DE                     
  4207                           ;i2c_master.c: 431: case i2c_restart_read:
  4208                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  4209                           
  4210                           ; BSR set to: 0
  4211                           
  4212                           ; BSR set to: 0
  4213  0009DE  EC2F  F009         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  4214  0009E2  0012               	return	
  4215  0009E4                     
  4216                           ;i2c_master.c: 435: case i2c_stop:
  4217                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  4218                           
  4219                           ;i2c_master.c: 434: case i2c_continue:
  4220  0009E4  EC36  F009         	call	_do_I2C_DO_NACK_STOP	;wreg free
  4221                           
  4222                           ;i2c_master.c: 437: }
  4223  0009E8  0012               	return	
  4224  0009EA                     l188:
  4225  0009EA  C0B2  F03A         	movff	_i2c_status+24,returnReset@p
  4226  0009EE  C0B3  F03B         	movff	_i2c_status+25,returnReset@p+1
  4227  0009F2  EE20  F0A6         	lfsr	2,_i2c_status+12
  4228  0009F6  D801               	call	u1518
  4229  0009F8  D00A               	goto	u1519
  4230  0009FA                     u1518:
  4231  0009FA  0005               	push	
  4232  0009FC  6EFA               	movwf	pclath,c
  4233  0009FE  50DE               	movf	postinc2,w,c
  4234  000A00  6EFD               	movwf	tosl,c
  4235  000A02  50DE               	movf	postinc2,w,c
  4236  000A04  6EFE               	movwf	tosh,c
  4237  000A06  50F8               	movf	tblptru,w,c
  4238  000A08  6EFF               	movwf	tosu,c
  4239  000A0A  50FA               	movf	pclath,w,c
  4240  000A0C  0012               	return		;indir
  4241  000A0E                     u1519:
  4242                           
  4243                           ; Switch size 1, requested type "space"
  4244                           ; Number of cases is 4, Range of values is 1 to 4
  4245                           ; switch strategies available:
  4246                           ; Name         Instructions Cycles
  4247                           ; simple_byte           13     7 (average)
  4248                           ;	Chosen strategy is simple_byte
  4249  000A0E  0A01               	xorlw	1	; case 1
  4250  000A10  B4D8               	btfsc	status,2,c
  4251  000A12  D7E8               	goto	l191
  4252  000A14  0A03               	xorlw	3	; case 2
  4253  000A16  B4D8               	btfsc	status,2,c
  4254  000A18  D7E2               	goto	l189
  4255  000A1A  0A01               	xorlw	1	; case 3
  4256  000A1C  B4D8               	btfsc	status,2,c
  4257  000A1E  D7DF               	goto	l189
  4258  000A20  0A07               	xorlw	7	; case 4
  4259  000A22  D7E0               	goto	l191
  4260  000A24                     __end_of_do_I2C_RX:
  4261                           	opt stack 0
  4262                           tosu	equ	0xFFF
  4263                           tosh	equ	0xFFE
  4264                           tosl	equ	0xFFD
  4265                           pclath	equ	0xFFA
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           intcon2	equ	0xFF1
  4274                           postinc0	equ	0xFEE
  4275                           plusw0	equ	0xFEB
  4276                           wreg	equ	0xFE8
  4277                           postdec1	equ	0xFE5
  4278                           plusw1	equ	0xFE3
  4279                           fsr1l	equ	0xFE1
  4280                           indf2	equ	0xFDF
  4281                           postinc2	equ	0xFDE
  4282                           postdec2	equ	0xFDD
  4283                           plusw2	equ	0xFDB
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _do_I2C_TX *****************
  4289 ;; Defined at:
  4290 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;		None
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;		None
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  1    wreg      enum E7019
  4297 ;; Registers used:
  4298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4304 ;;      Params:         0       0       0       0       0       0       0
  4305 ;;      Locals:         2       0       0       0       0       0       0
  4306 ;;      Temps:          0       0       0       0       0       0       0
  4307 ;;      Totals:         2       0       0       0       0       0       0
  4308 ;;Total ram usage:        2 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    7
  4311 ;; This function calls:
  4312 ;;		_do_I2C_SEND_RESTART_READ
  4313 ;;		_do_I2C_SEND_RESTART_WRITE
  4314 ;;		_do_I2C_SEND_STOP
  4315 ;;		_i2c1_driver_TXData
  4316 ;;		_i2c1_driver_isNACK
  4317 ;;		_returnReset
  4318 ;;		_returnStop
  4319 ;; This function is called by:
  4320 ;;		_i2c_ISR
  4321 ;;		i2_i2c_ISR
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text32
  4326  0007F2                     __ptext32:
  4327                           	opt stack 0
  4328  0007F2                     _do_I2C_TX:
  4329                           	opt stack 0
  4330                           
  4331                           ;Skip over the trampoline to the duplicate function for level 2
  4332  0007F2  B24A               	btfsc	btemp,1,c
  4333  0007F4  EF8D  F004         	goto	i2_do_I2C_TX
  4334  0007F8                     _do_I2C_TX$intlevel0:
  4335                           	opt stack 18
  4336                           
  4337                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  4338                           
  4339                           ;incstack = 0
  4340  0007F8  ECB5  F008         	call	_i2c1_driver_isNACK	;wreg free
  4341  0007FC  B0D8               	btfsc	status,0,c
  4342  0007FE  D00A               	goto	l170
  4343  000800  D026               	goto	l169
  4344  000802                     
  4345                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  4346  000802  EC59  F009         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  4347  000806  0012               	return	
  4348  000808                     
  4349                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  4350  000808  EC52  F009         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  4351  00080C  0012               	return	
  4352  00080E                     
  4353                           ;i2c_master.c: 405: case i2c_stop:
  4354                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  4355                           
  4356                           ;i2c_master.c: 404: case i2c_continue:
  4357  00080E  EC44  F009         	call	_do_I2C_SEND_STOP	;wreg free
  4358                           
  4359                           ;i2c_master.c: 407: }
  4360  000812  0012               	return	
  4361  000814                     l170:
  4362  000814  C0B8  F03A         	movff	_i2c_status+30,returnReset@p
  4363  000818  C0B9  F03B         	movff	_i2c_status+31,returnReset@p+1
  4364  00081C  EE20  F0AC         	lfsr	2,_i2c_status+18
  4365  000820  D801               	call	u1488
  4366  000822  D00A               	goto	u1489
  4367  000824                     u1488:
  4368  000824  0005               	push	
  4369  000826  6EFA               	movwf	pclath,c
  4370  000828  50DE               	movf	postinc2,w,c
  4371  00082A  6EFD               	movwf	tosl,c
  4372  00082C  50DE               	movf	postinc2,w,c
  4373  00082E  6EFE               	movwf	tosh,c
  4374  000830  50F8               	movf	tblptru,w,c
  4375  000832  6EFF               	movwf	tosu,c
  4376  000834  50FA               	movf	pclath,w,c
  4377  000836  0012               	return		;indir
  4378  000838                     u1489:
  4379                           
  4380                           ; Switch size 1, requested type "space"
  4381                           ; Number of cases is 4, Range of values is 1 to 4
  4382                           ; switch strategies available:
  4383                           ; Name         Instructions Cycles
  4384                           ; simple_byte           13     7 (average)
  4385                           ;	Chosen strategy is simple_byte
  4386  000838  0A01               	xorlw	1	; case 1
  4387  00083A  B4D8               	btfsc	status,2,c
  4388  00083C  D7E8               	goto	l174
  4389  00083E  0A03               	xorlw	3	; case 2
  4390  000840  B4D8               	btfsc	status,2,c
  4391  000842  D7DF               	goto	l171
  4392  000844  0A01               	xorlw	1	; case 3
  4393  000846  B4D8               	btfsc	status,2,c
  4394  000848  D7DF               	goto	l173
  4395  00084A  0A07               	xorlw	7	; case 4
  4396  00084C  D7E0               	goto	l174
  4397  00084E                     l169:
  4398                           
  4399                           ;i2c_master.c: 409: else
  4400                           ;i2c_master.c: 410: {
  4401                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  4402  00084E  0100               	movlb	0	; () banked
  4403  000850  979A               	bcf	_i2c_status& (0+255),3,b
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  4407  000852  C09C  FFD9         	movff	_i2c_status+2,fsr2l
  4408  000856  C09D  FFDA         	movff	_i2c_status+3,fsr2h
  4409  00085A  4B9C               	infsnz	(_i2c_status+2)& (0+255),f,b
  4410  00085C  2B9D               	incf	(_i2c_status+3)& (0+255),f,b
  4411  00085E  50DF               	movf	indf2,w,c
  4412  000860  EC9A  F009         	call	_i2c1_driver_TXData
  4413                           
  4414                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  4415  000864  0100               	movlb	0	; () banked
  4416  000866  079E               	decf	(_i2c_status+4)& (0+255),f,b
  4417  000868  A0D8               	btfss	status,0,c
  4418  00086A  079F               	decf	(_i2c_status+5)& (0+255),f,b
  4419  00086C  519E               	movf	(_i2c_status+4)& (0+255),w,b
  4420  00086E  119F               	iorwf	(_i2c_status+5)& (0+255),w,b
  4421  000870  A4D8               	btfss	status,2,c
  4422  000872  D004               	goto	l180
  4423                           
  4424                           ; BSR set to: 0
  4425  000874  0E00               	movlw	0
  4426  000876  6E3C               	movwf	_do_I2C_TX$315+1,c
  4427  000878  0E06               	movlw	6
  4428  00087A  D003               	goto	L3
  4429  00087C                     l180:
  4430                           
  4431                           ; BSR set to: 0
  4432                           
  4433                           ; BSR set to: 0
  4434  00087C  0E00               	movlw	0
  4435  00087E  6E3C               	movwf	_do_I2C_TX$315+1,c
  4436  000880  0E03               	movlw	3
  4437  000882                     L3:
  4438  000882  6E3B               	movwf	_do_I2C_TX$315,c
  4439                           
  4440                           ; BSR set to: 0
  4441  000884  503B               	movf	_do_I2C_TX$315,w,c
  4442                           
  4443                           ; BSR set to: 0
  4444  000886  0012               	return	
  4445  000888                     __end_of_do_I2C_TX:
  4446                           	opt stack 0
  4447                           tosu	equ	0xFFF
  4448                           tosh	equ	0xFFE
  4449                           tosl	equ	0xFFD
  4450                           pclath	equ	0xFFA
  4451                           tblptru	equ	0xFF8
  4452                           tblptrh	equ	0xFF7
  4453                           tblptrl	equ	0xFF6
  4454                           tablat	equ	0xFF5
  4455                           prodh	equ	0xFF4
  4456                           prodl	equ	0xFF3
  4457                           intcon	equ	0xFF2
  4458                           intcon2	equ	0xFF1
  4459                           postinc0	equ	0xFEE
  4460                           plusw0	equ	0xFEB
  4461                           wreg	equ	0xFE8
  4462                           postdec1	equ	0xFE5
  4463                           plusw1	equ	0xFE3
  4464                           fsr1l	equ	0xFE1
  4465                           indf2	equ	0xFDF
  4466                           postinc2	equ	0xFDE
  4467                           postdec2	equ	0xFDD
  4468                           plusw2	equ	0xFDB
  4469                           fsr2h	equ	0xFDA
  4470                           fsr2l	equ	0xFD9
  4471                           status	equ	0xFD8
  4472                           
  4473 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  4474 ;; Defined at:
  4475 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;		None
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      enum E7019
  4482 ;; Registers used:
  4483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4489 ;;      Params:         0       0       0       0       0       0       0
  4490 ;;      Locals:         0       0       0       0       0       0       0
  4491 ;;      Temps:          0       0       0       0       0       0       0
  4492 ;;      Totals:         0       0       0       0       0       0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_do_I2C_SEND_RESTART
  4498 ;;		_do_I2C_SEND_STOP
  4499 ;;		_returnReset
  4500 ;;		_returnStop
  4501 ;; This function is called by:
  4502 ;;		_i2c_ISR
  4503 ;;		i2_i2c_ISR
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           	psect	text33
  4508  000D82                     __ptext33:
  4509                           	opt stack 0
  4510  000D82                     _do_I2C_DO_ADDRESS_NACK:
  4511                           	opt stack 0
  4512                           
  4513                           ;Skip over the trampoline to the duplicate function for level 2
  4514  000D82  B24A               	btfsc	btemp,1,c
  4515  000D84  EF56  F007         	goto	i2_do_I2C_DO_ADDRESS_NACK
  4516  000D88                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  4517                           	opt stack 18
  4518                           
  4519                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  4520                           
  4521                           ;incstack = 0
  4522  000D88  0100               	movlb	0	; () banked
  4523  000D8A  979A               	bcf	_i2c_status& (0+255),3,b
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  4527  000D8C  0E02               	movlw	2
  4528  000D8E  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  4529                           
  4530                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  4531  000D90  D006               	goto	l161
  4532  000D92                     
  4533                           ;i2c_master.c: 386: case i2c_restart_write:
  4534                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  4535                           
  4536                           ; BSR set to: 0
  4537                           
  4538                           ; BSR set to: 0
  4539  000D92  EC4B  F009         	call	_do_I2C_SEND_RESTART	;wreg free
  4540  000D96  0012               	return	
  4541  000D98                     
  4542                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  4543  000D98  EC44  F009         	call	_do_I2C_SEND_STOP	;wreg free
  4544                           
  4545                           ;i2c_master.c: 390: }
  4546  000D9C  0012               	return	
  4547  000D9E                     l161:
  4548  000D9E  C0B6  F03A         	movff	_i2c_status+28,returnReset@p
  4549  000DA2  C0B7  F03B         	movff	_i2c_status+29,returnReset@p+1
  4550  000DA6  EE20  F0AA         	lfsr	2,_i2c_status+16
  4551  000DAA  D801               	call	u1468
  4552  000DAC  D00A               	goto	u1469
  4553  000DAE                     u1468:
  4554  000DAE  0005               	push	
  4555  000DB0  6EFA               	movwf	pclath,c
  4556  000DB2  50DE               	movf	postinc2,w,c
  4557  000DB4  6EFD               	movwf	tosl,c
  4558  000DB6  50DE               	movf	postinc2,w,c
  4559  000DB8  6EFE               	movwf	tosh,c
  4560  000DBA  50F8               	movf	tblptru,w,c
  4561  000DBC  6EFF               	movwf	tosu,c
  4562  000DBE  50FA               	movf	pclath,w,c
  4563  000DC0  0012               	return		;indir
  4564  000DC2                     u1469:
  4565                           
  4566                           ; Switch size 1, requested type "space"
  4567                           ; Number of cases is 2, Range of values is 2 to 3
  4568                           ; switch strategies available:
  4569                           ; Name         Instructions Cycles
  4570                           ; simple_byte            7     4 (average)
  4571                           ;	Chosen strategy is simple_byte
  4572  000DC2  0A02               	xorlw	2	; case 2
  4573  000DC4  B4D8               	btfsc	status,2,c
  4574  000DC6  D7E5               	goto	l162
  4575  000DC8  0A01               	xorlw	1	; case 3
  4576  000DCA  B4D8               	btfsc	status,2,c
  4577  000DCC  D7E2               	goto	l162
  4578  000DCE  D7E4               	goto	l165
  4579  000DD0                     __end_of_do_I2C_DO_ADDRESS_NACK:
  4580                           	opt stack 0
  4581                           tosu	equ	0xFFF
  4582                           tosh	equ	0xFFE
  4583                           tosl	equ	0xFFD
  4584                           pclath	equ	0xFFA
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon	equ	0xFF2
  4592                           intcon2	equ	0xFF1
  4593                           postinc0	equ	0xFEE
  4594                           plusw0	equ	0xFEB
  4595                           wreg	equ	0xFE8
  4596                           postdec1	equ	0xFE5
  4597                           plusw1	equ	0xFE3
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           plusw2	equ	0xFDB
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  4608 ;; Defined at:
  4609 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      enum E7019
  4616 ;; Registers used:
  4617 ;;		wreg, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4623 ;;      Params:         0       0       0       0       0       0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0
  4626 ;;      Totals:         0       0       0       0       0       0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    6
  4630 ;; This function calls:
  4631 ;;		_i2c1_driver_sendNACK
  4632 ;; This function is called by:
  4633 ;;		_do_I2C_RX
  4634 ;;		_i2c_ISR
  4635 ;;		i2_i2c_ISR
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text34
  4640  00125E                     __ptext34:
  4641                           	opt stack 0
  4642  00125E                     _do_I2C_DO_NACK_RESTART:
  4643                           	opt stack 0
  4644                           
  4645                           ;Skip over the trampoline to the duplicate function for level 2
  4646  00125E  B24A               	btfsc	btemp,1,c
  4647  001260  EF9E  F009         	goto	i2_do_I2C_DO_NACK_RESTART
  4648  001264                     _do_I2C_DO_NACK_RESTART$intlevel0:
  4649                           	opt stack 18
  4650                           
  4651                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  4652                           
  4653                           ;incstack = 0
  4654  001264  ECBE  F009         	call	_i2c1_driver_sendNACK	;wreg free
  4655                           
  4656                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  4657  001268  0E09               	movlw	9
  4658  00126A  0012               	return	
  4659  00126C                     __end_of_do_I2C_DO_NACK_RESTART:
  4660                           	opt stack 0
  4661                           tosu	equ	0xFFF
  4662                           tosh	equ	0xFFE
  4663                           tosl	equ	0xFFD
  4664                           pclath	equ	0xFFA
  4665                           tblptru	equ	0xFF8
  4666                           tblptrh	equ	0xFF7
  4667                           tblptrl	equ	0xFF6
  4668                           tablat	equ	0xFF5
  4669                           prodh	equ	0xFF4
  4670                           prodl	equ	0xFF3
  4671                           intcon	equ	0xFF2
  4672                           intcon2	equ	0xFF1
  4673                           postinc0	equ	0xFEE
  4674                           plusw0	equ	0xFEB
  4675                           wreg	equ	0xFE8
  4676                           postdec1	equ	0xFE5
  4677                           plusw1	equ	0xFE3
  4678                           fsr1l	equ	0xFE1
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           plusw2	equ	0xFDB
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  4688 ;; Defined at:
  4689 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      enum E7019
  4696 ;; Registers used:
  4697 ;;		wreg, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4703 ;;      Params:         0       0       0       0       0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    6
  4710 ;; This function calls:
  4711 ;;		_i2c1_driver_sendNACK
  4712 ;; This function is called by:
  4713 ;;		_do_I2C_RX
  4714 ;;		_i2c_ISR
  4715 ;;		i2_i2c_ISR
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text35
  4720  00126C                     __ptext35:
  4721                           	opt stack 0
  4722  00126C                     _do_I2C_DO_NACK_STOP:
  4723                           	opt stack 0
  4724                           
  4725                           ;Skip over the trampoline to the duplicate function for level 2
  4726  00126C  B24A               	btfsc	btemp,1,c
  4727  00126E  EFA2  F009         	goto	i2_do_I2C_DO_NACK_STOP
  4728  001272                     _do_I2C_DO_NACK_STOP$intlevel0:
  4729                           	opt stack 18
  4730                           
  4731                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  4732                           
  4733                           ;incstack = 0
  4734  001272  ECBE  F009         	call	_i2c1_driver_sendNACK	;wreg free
  4735                           
  4736                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  4737  001276  0E0A               	movlw	10
  4738  001278  0012               	return	
  4739  00127A                     __end_of_do_I2C_DO_NACK_STOP:
  4740                           	opt stack 0
  4741                           tosu	equ	0xFFF
  4742                           tosh	equ	0xFFE
  4743                           tosl	equ	0xFFD
  4744                           pclath	equ	0xFFA
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           intcon2	equ	0xFF1
  4753                           postinc0	equ	0xFEE
  4754                           plusw0	equ	0xFEB
  4755                           wreg	equ	0xFE8
  4756                           postdec1	equ	0xFE5
  4757                           plusw1	equ	0xFE3
  4758                           fsr1l	equ	0xFE1
  4759                           indf2	equ	0xFDF
  4760                           postinc2	equ	0xFDE
  4761                           postdec2	equ	0xFDD
  4762                           plusw2	equ	0xFDB
  4763                           fsr2h	equ	0xFDA
  4764                           fsr2l	equ	0xFD9
  4765                           status	equ	0xFD8
  4766                           
  4767 ;; *************** function _do_I2C_DO_ACK *****************
  4768 ;; Defined at:
  4769 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;		None
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;		None
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  1    wreg      enum E7019
  4776 ;; Registers used:
  4777 ;;		wreg, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4783 ;;      Params:         0       0       0       0       0       0       0
  4784 ;;      Locals:         0       0       0       0       0       0       0
  4785 ;;      Temps:          0       0       0       0       0       0       0
  4786 ;;      Totals:         0       0       0       0       0       0       0
  4787 ;;Total ram usage:        0 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    6
  4790 ;; This function calls:
  4791 ;;		_i2c1_driver_sendACK
  4792 ;; This function is called by:
  4793 ;;		_i2c_ISR
  4794 ;;		i2_i2c_ISR
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text36
  4799  00127A                     __ptext36:
  4800                           	opt stack 0
  4801  00127A                     _do_I2C_DO_ACK:
  4802                           	opt stack 0
  4803                           
  4804                           ;Skip over the trampoline to the duplicate function for level 2
  4805  00127A  B24A               	btfsc	btemp,1,c
  4806  00127C  EFA6  F009         	goto	i2_do_I2C_DO_ACK
  4807  001280                     _do_I2C_DO_ACK$intlevel0:
  4808                           	opt stack 19
  4809                           
  4810                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  4811                           
  4812                           ;incstack = 0
  4813  001280  ECC1  F009         	call	_i2c1_driver_sendACK	;wreg free
  4814                           
  4815                           ;i2c_master.c: 362: return I2C_RCEN;
  4816  001284  0E05               	movlw	5
  4817  001286  0012               	return	
  4818  001288                     __end_of_do_I2C_DO_ACK:
  4819                           	opt stack 0
  4820                           tosu	equ	0xFFF
  4821                           tosh	equ	0xFFE
  4822                           tosl	equ	0xFFD
  4823                           pclath	equ	0xFFA
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           prodh	equ	0xFF4
  4829                           prodl	equ	0xFF3
  4830                           intcon	equ	0xFF2
  4831                           intcon2	equ	0xFF1
  4832                           postinc0	equ	0xFEE
  4833                           plusw0	equ	0xFEB
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           plusw1	equ	0xFE3
  4837                           fsr1l	equ	0xFE1
  4838                           indf2	equ	0xFDF
  4839                           postinc2	equ	0xFDE
  4840                           postdec2	equ	0xFDD
  4841                           plusw2	equ	0xFDB
  4842                           fsr2h	equ	0xFDA
  4843                           fsr2l	equ	0xFD9
  4844                           status	equ	0xFD8
  4845                           
  4846 ;; *************** function _do_I2C_RCEN *****************
  4847 ;; Defined at:
  4848 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;		None
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  1    wreg      enum E7019
  4855 ;; Registers used:
  4856 ;;		wreg, cstack
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4862 ;;      Params:         0       0       0       0       0       0       0
  4863 ;;      Locals:         0       0       0       0       0       0       0
  4864 ;;      Temps:          0       0       0       0       0       0       0
  4865 ;;      Totals:         0       0       0       0       0       0       0
  4866 ;;Total ram usage:        0 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    6
  4869 ;; This function calls:
  4870 ;;		_i2c1_driver_startRX
  4871 ;; This function is called by:
  4872 ;;		_i2c_ISR
  4873 ;;		i2_i2c_ISR
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text37
  4878  0011CE                     __ptext37:
  4879                           	opt stack 0
  4880  0011CE                     _do_I2C_RCEN:
  4881                           	opt stack 0
  4882                           
  4883                           ;Skip over the trampoline to the duplicate function for level 2
  4884  0011CE  B24A               	btfsc	btemp,1,c
  4885  0011D0  EF67  F009         	goto	i2_do_I2C_RCEN
  4886  0011D4                     _do_I2C_RCEN$intlevel0:
  4887                           	opt stack 19
  4888                           
  4889                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  4890                           
  4891                           ;incstack = 0
  4892  0011D4  0100               	movlb	0	; () banked
  4893  0011D6  979A               	bcf	_i2c_status& (0+255),3,b
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;i2c_master.c: 355: i2c1_driver_startRX();
  4897  0011D8  ECD3  F009         	call	_i2c1_driver_startRX	;wreg free
  4898                           
  4899                           ;i2c_master.c: 356: return I2C_RX;
  4900  0011DC  0E04               	movlw	4
  4901  0011DE  0012               	return	
  4902  0011E0                     __end_of_do_I2C_RCEN:
  4903                           	opt stack 0
  4904                           tosu	equ	0xFFF
  4905                           tosh	equ	0xFFE
  4906                           tosl	equ	0xFFD
  4907                           pclath	equ	0xFFA
  4908                           tblptru	equ	0xFF8
  4909                           tblptrh	equ	0xFF7
  4910                           tblptrl	equ	0xFF6
  4911                           tablat	equ	0xFF5
  4912                           prodh	equ	0xFF4
  4913                           prodl	equ	0xFF3
  4914                           intcon	equ	0xFF2
  4915                           intcon2	equ	0xFF1
  4916                           postinc0	equ	0xFEE
  4917                           plusw0	equ	0xFEB
  4918                           wreg	equ	0xFE8
  4919                           postdec1	equ	0xFE5
  4920                           plusw1	equ	0xFE3
  4921                           fsr1l	equ	0xFE1
  4922                           indf2	equ	0xFDF
  4923                           postinc2	equ	0xFDE
  4924                           postdec2	equ	0xFDD
  4925                           plusw2	equ	0xFDB
  4926                           fsr2h	equ	0xFDA
  4927                           fsr2l	equ	0xFD9
  4928                           status	equ	0xFD8
  4929                           
  4930 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  4931 ;; Defined at:
  4932 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;		None
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      enum E7019
  4939 ;; Registers used:
  4940 ;;		wreg, status,2, status,0, cstack
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4946 ;;      Params:         0       0       0       0       0       0       0
  4947 ;;      Locals:         0       0       0       0       0       0       0
  4948 ;;      Temps:          0       0       0       0       0       0       0
  4949 ;;      Totals:         0       0       0       0       0       0       0
  4950 ;;Total ram usage:        0 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    6
  4953 ;; This function calls:
  4954 ;;		_i2c1_driver_TXData
  4955 ;; This function is called by:
  4956 ;;		_i2c_ISR
  4957 ;;		i2_i2c_ISR
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text38
  4962  001112                     __ptext38:
  4963                           	opt stack 0
  4964  001112                     _do_I2C_SEND_ADR_WRITE:
  4965                           	opt stack 0
  4966                           
  4967                           ;Skip over the trampoline to the duplicate function for level 2
  4968  001112  B24A               	btfsc	btemp,1,c
  4969  001114  EF01  F009         	goto	i2_do_I2C_SEND_ADR_WRITE
  4970  001118                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  4971                           	opt stack 19
  4972                           
  4973                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  4974                           
  4975                           ;incstack = 0
  4976  001118  0100               	movlb	0	; () banked
  4977  00111A  879A               	bsf	_i2c_status& (0+255),3,b
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  4981  00111C  519B               	movf	(_i2c_status+1)& (0+255),w,b
  4982  00111E  259B               	addwf	(_i2c_status+1)& (0+255),w,b
  4983  001120  EC9A  F009         	call	_i2c1_driver_TXData
  4984                           
  4985                           ;i2c_master.c: 349: return I2C_TX;
  4986  001124  0E03               	movlw	3
  4987  001126  0012               	return	
  4988  001128                     __end_of_do_I2C_SEND_ADR_WRITE:
  4989                           	opt stack 0
  4990                           tosu	equ	0xFFF
  4991                           tosh	equ	0xFFE
  4992                           tosl	equ	0xFFD
  4993                           pclath	equ	0xFFA
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           intcon	equ	0xFF2
  5001                           intcon2	equ	0xFF1
  5002                           postinc0	equ	0xFEE
  5003                           plusw0	equ	0xFEB
  5004                           wreg	equ	0xFE8
  5005                           postdec1	equ	0xFE5
  5006                           plusw1	equ	0xFE3
  5007                           fsr1l	equ	0xFE1
  5008                           indf2	equ	0xFDF
  5009                           postinc2	equ	0xFDE
  5010                           postdec2	equ	0xFDD
  5011                           plusw2	equ	0xFDB
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function _do_I2C_SEND_INITIAL_READ *****************
  5017 ;; Defined at:
  5018 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;		None
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      enum E7019
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5032 ;;      Params:         0       0       0       0       0       0       0
  5033 ;;      Locals:         0       0       0       0       0       0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0
  5035 ;;      Totals:         0       0       0       0       0       0       0
  5036 ;;Total ram usage:        0 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    6
  5039 ;; This function calls:
  5040 ;;		_i2c1_driver_TXData
  5041 ;; This function is called by:
  5042 ;;		_i2c_ISR
  5043 ;;		i2_i2c_ISR
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text39
  5048  001128                     __ptext39:
  5049                           	opt stack 0
  5050  001128                     _do_I2C_SEND_INITIAL_READ:
  5051                           	opt stack 0
  5052                           
  5053                           ;Skip over the trampoline to the duplicate function for level 2
  5054  001128  B24A               	btfsc	btemp,1,c
  5055  00112A  EF09  F009         	goto	i2_do_I2C_SEND_INITIAL_READ
  5056  00112E                     _do_I2C_SEND_INITIAL_READ$intlevel0:
  5057                           	opt stack 19
  5058                           
  5059                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  5060                           
  5061                           ;incstack = 0
  5062  00112E  0100               	movlb	0	; () banked
  5063  001130  879A               	bsf	_i2c_status& (0+255),3,b
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  5067  001132  519B               	movf	(_i2c_status+1)& (0+255),w,b
  5068  001134  259B               	addwf	(_i2c_status+1)& (0+255),w,b
  5069  001136  EC9A  F009         	call	_i2c1_driver_TXData
  5070                           
  5071                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  5072  00113A  0E11               	movlw	17
  5073  00113C  0012               	return	
  5074  00113E                     __end_of_do_I2C_SEND_INITIAL_READ:
  5075                           	opt stack 0
  5076                           tosu	equ	0xFFF
  5077                           tosh	equ	0xFFE
  5078                           tosl	equ	0xFFD
  5079                           pclath	equ	0xFFA
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           intcon	equ	0xFF2
  5087                           intcon2	equ	0xFF1
  5088                           postinc0	equ	0xFEE
  5089                           plusw0	equ	0xFEB
  5090                           wreg	equ	0xFE8
  5091                           postdec1	equ	0xFE5
  5092                           plusw1	equ	0xFE3
  5093                           fsr1l	equ	0xFE1
  5094                           indf2	equ	0xFDF
  5095                           postinc2	equ	0xFDE
  5096                           postdec2	equ	0xFDD
  5097                           plusw2	equ	0xFDB
  5098                           fsr2h	equ	0xFDA
  5099                           fsr2l	equ	0xFD9
  5100                           status	equ	0xFD8
  5101                           
  5102 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  5103 ;; Defined at:
  5104 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      enum E7019
  5111 ;; Registers used:
  5112 ;;		wreg, status,0, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5118 ;;      Params:         0       0       0       0       0       0       0
  5119 ;;      Locals:         0       0       0       0       0       0       0
  5120 ;;      Temps:          0       0       0       0       0       0       0
  5121 ;;      Totals:         0       0       0       0       0       0       0
  5122 ;;Total ram usage:        0 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    6
  5125 ;; This function calls:
  5126 ;;		_i2c1_driver_TXData
  5127 ;; This function is called by:
  5128 ;;		_i2c_ISR
  5129 ;;		i2_i2c_ISR
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text40
  5134  00113E                     __ptext40:
  5135                           	opt stack 0
  5136  00113E                     _do_I2C_SEND_ADR_READ:
  5137                           	opt stack 0
  5138                           
  5139                           ;Skip over the trampoline to the duplicate function for level 2
  5140  00113E  B24A               	btfsc	btemp,1,c
  5141  001140  EF11  F009         	goto	i2_do_I2C_SEND_ADR_READ
  5142  001144                     _do_I2C_SEND_ADR_READ$intlevel0:
  5143                           	opt stack 19
  5144                           
  5145                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  5146                           
  5147                           ;incstack = 0
  5148  001144  0100               	movlb	0	; () banked
  5149  001146  879A               	bsf	_i2c_status& (0+255),3,b
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  5153  001148  80D8               	bsf	status,0,c
  5154  00114A  359B               	rlcf	(_i2c_status+1)& (0+255),w,b
  5155  00114C  EC9A  F009         	call	_i2c1_driver_TXData
  5156                           
  5157                           ;i2c_master.c: 325: return I2C_RCEN;
  5158  001150  0E05               	movlw	5
  5159  001152  0012               	return	
  5160  001154                     __end_of_do_I2C_SEND_ADR_READ:
  5161                           	opt stack 0
  5162                           tosu	equ	0xFFF
  5163                           tosh	equ	0xFFE
  5164                           tosl	equ	0xFFD
  5165                           pclath	equ	0xFFA
  5166                           tblptru	equ	0xFF8
  5167                           tblptrh	equ	0xFF7
  5168                           tblptrl	equ	0xFF6
  5169                           tablat	equ	0xFF5
  5170                           prodh	equ	0xFF4
  5171                           prodl	equ	0xFF3
  5172                           intcon	equ	0xFF2
  5173                           intcon2	equ	0xFF1
  5174                           postinc0	equ	0xFEE
  5175                           plusw0	equ	0xFEB
  5176                           wreg	equ	0xFE8
  5177                           postdec1	equ	0xFE5
  5178                           plusw1	equ	0xFE3
  5179                           fsr1l	equ	0xFE1
  5180                           indf2	equ	0xFDF
  5181                           postinc2	equ	0xFDE
  5182                           postdec2	equ	0xFDD
  5183                           plusw2	equ	0xFDB
  5184                           fsr2h	equ	0xFDA
  5185                           fsr2l	equ	0xFD9
  5186                           status	equ	0xFD8
  5187                           
  5188 ;; *************** function _do_I2C_SEND_STOP *****************
  5189 ;; Defined at:
  5190 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;		None
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;		None
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      enum E7019
  5197 ;; Registers used:
  5198 ;;		wreg, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5204 ;;      Params:         0       0       0       0       0       0       0
  5205 ;;      Locals:         0       0       0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0       0       0
  5207 ;;      Totals:         0       0       0       0       0       0       0
  5208 ;;Total ram usage:        0 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    6
  5211 ;; This function calls:
  5212 ;;		_i2c1_driver_stop
  5213 ;; This function is called by:
  5214 ;;		_do_I2C_DO_ADDRESS_NACK
  5215 ;;		_do_I2C_TX
  5216 ;;		_do_I2C_TX_EMPTY
  5217 ;;		_i2c_ISR
  5218 ;;		i2_i2c_ISR
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text41
  5223  001288                     __ptext41:
  5224                           	opt stack 0
  5225  001288                     _do_I2C_SEND_STOP:
  5226                           	opt stack 0
  5227                           
  5228                           ;Skip over the trampoline to the duplicate function for level 2
  5229  001288  B24A               	btfsc	btemp,1,c
  5230  00128A  EFAA  F009         	goto	i2_do_I2C_SEND_STOP
  5231  00128E                     _do_I2C_SEND_STOP$intlevel0:
  5232                           	opt stack 18
  5233                           
  5234                           ;i2c_master.c: 316: i2c1_driver_stop();
  5235                           
  5236                           ;incstack = 0
  5237  00128E  ECD5  F009         	call	_i2c1_driver_stop	;wreg free
  5238                           
  5239                           ;i2c_master.c: 317: return I2C_IDLE;
  5240  001292  0E00               	movlw	0
  5241  001294  0012               	return	
  5242  001296                     __end_of_do_I2C_SEND_STOP:
  5243                           	opt stack 0
  5244                           tosu	equ	0xFFF
  5245                           tosh	equ	0xFFE
  5246                           tosl	equ	0xFFD
  5247                           pclath	equ	0xFFA
  5248                           tblptru	equ	0xFF8
  5249                           tblptrh	equ	0xFF7
  5250                           tblptrl	equ	0xFF6
  5251                           tablat	equ	0xFF5
  5252                           prodh	equ	0xFF4
  5253                           prodl	equ	0xFF3
  5254                           intcon	equ	0xFF2
  5255                           intcon2	equ	0xFF1
  5256                           postinc0	equ	0xFEE
  5257                           plusw0	equ	0xFEB
  5258                           wreg	equ	0xFE8
  5259                           postdec1	equ	0xFE5
  5260                           plusw1	equ	0xFE3
  5261                           fsr1l	equ	0xFE1
  5262                           indf2	equ	0xFDF
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           plusw2	equ	0xFDB
  5266                           fsr2h	equ	0xFDA
  5267                           fsr2l	equ	0xFD9
  5268                           status	equ	0xFD8
  5269                           
  5270 ;; *************** function _do_I2C_SEND_RESTART *****************
  5271 ;; Defined at:
  5272 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;		None
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;		None
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      enum E7019
  5279 ;; Registers used:
  5280 ;;		wreg, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5286 ;;      Params:         0       0       0       0       0       0       0
  5287 ;;      Locals:         0       0       0       0       0       0       0
  5288 ;;      Temps:          0       0       0       0       0       0       0
  5289 ;;      Totals:         0       0       0       0       0       0       0
  5290 ;;Total ram usage:        0 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    6
  5293 ;; This function calls:
  5294 ;;		_i2c1_driver_restart
  5295 ;; This function is called by:
  5296 ;;		_do_I2C_DO_ADDRESS_NACK
  5297 ;;		_do_I2C_TX_EMPTY
  5298 ;;		_i2c_ISR
  5299 ;;		i2_i2c_ISR
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text42
  5304  001296                     __ptext42:
  5305                           	opt stack 0
  5306  001296                     _do_I2C_SEND_RESTART:
  5307                           	opt stack 0
  5308                           
  5309                           ;Skip over the trampoline to the duplicate function for level 2
  5310  001296  B24A               	btfsc	btemp,1,c
  5311  001298  EFAE  F009         	goto	i2_do_I2C_SEND_RESTART
  5312  00129C                     _do_I2C_SEND_RESTART$intlevel0:
  5313                           	opt stack 18
  5314                           
  5315                           ;i2c_master.c: 310: i2c1_driver_restart();
  5316                           
  5317                           ;incstack = 0
  5318  00129C  ECD7  F009         	call	_i2c1_driver_restart	;wreg free
  5319                           
  5320                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  5321  0012A0  0E01               	movlw	1
  5322  0012A2  0012               	return	
  5323  0012A4                     __end_of_do_I2C_SEND_RESTART:
  5324                           	opt stack 0
  5325                           tosu	equ	0xFFF
  5326                           tosh	equ	0xFFE
  5327                           tosl	equ	0xFFD
  5328                           pclath	equ	0xFFA
  5329                           tblptru	equ	0xFF8
  5330                           tblptrh	equ	0xFF7
  5331                           tblptrl	equ	0xFF6
  5332                           tablat	equ	0xFF5
  5333                           prodh	equ	0xFF4
  5334                           prodl	equ	0xFF3
  5335                           intcon	equ	0xFF2
  5336                           intcon2	equ	0xFF1
  5337                           postinc0	equ	0xFEE
  5338                           plusw0	equ	0xFEB
  5339                           wreg	equ	0xFE8
  5340                           postdec1	equ	0xFE5
  5341                           plusw1	equ	0xFE3
  5342                           fsr1l	equ	0xFE1
  5343                           indf2	equ	0xFDF
  5344                           postinc2	equ	0xFDE
  5345                           postdec2	equ	0xFDD
  5346                           plusw2	equ	0xFDB
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  5352 ;; Defined at:
  5353 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;		None
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      enum E7019
  5360 ;; Registers used:
  5361 ;;		wreg, cstack
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5367 ;;      Params:         0       0       0       0       0       0       0
  5368 ;;      Locals:         0       0       0       0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0
  5370 ;;      Totals:         0       0       0       0       0       0       0
  5371 ;;Total ram usage:        0 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    6
  5374 ;; This function calls:
  5375 ;;		_i2c1_driver_restart
  5376 ;; This function is called by:
  5377 ;;		_do_I2C_TX
  5378 ;;		_i2c_ISR
  5379 ;;		i2_i2c_ISR
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text43
  5384  0012A4                     __ptext43:
  5385                           	opt stack 0
  5386  0012A4                     _do_I2C_SEND_RESTART_WRITE:
  5387                           	opt stack 0
  5388                           
  5389                           ;Skip over the trampoline to the duplicate function for level 2
  5390  0012A4  B24A               	btfsc	btemp,1,c
  5391  0012A6  EFB2  F009         	goto	i2_do_I2C_SEND_RESTART_WRITE
  5392  0012AA                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  5393                           	opt stack 18
  5394                           
  5395                           ;i2c_master.c: 304: i2c1_driver_restart();
  5396                           
  5397                           ;incstack = 0
  5398  0012AA  ECD7  F009         	call	_i2c1_driver_restart	;wreg free
  5399                           
  5400                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  5401  0012AE  0E02               	movlw	2
  5402  0012B0  0012               	return	
  5403  0012B2                     __end_of_do_I2C_SEND_RESTART_WRITE:
  5404                           	opt stack 0
  5405                           tosu	equ	0xFFF
  5406                           tosh	equ	0xFFE
  5407                           tosl	equ	0xFFD
  5408                           pclath	equ	0xFFA
  5409                           tblptru	equ	0xFF8
  5410                           tblptrh	equ	0xFF7
  5411                           tblptrl	equ	0xFF6
  5412                           tablat	equ	0xFF5
  5413                           prodh	equ	0xFF4
  5414                           prodl	equ	0xFF3
  5415                           intcon	equ	0xFF2
  5416                           intcon2	equ	0xFF1
  5417                           postinc0	equ	0xFEE
  5418                           plusw0	equ	0xFEB
  5419                           wreg	equ	0xFE8
  5420                           postdec1	equ	0xFE5
  5421                           plusw1	equ	0xFE3
  5422                           fsr1l	equ	0xFE1
  5423                           indf2	equ	0xFDF
  5424                           postinc2	equ	0xFDE
  5425                           postdec2	equ	0xFDD
  5426                           plusw2	equ	0xFDB
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8
  5430                           
  5431 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  5432 ;; Defined at:
  5433 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      enum E7019
  5440 ;; Registers used:
  5441 ;;		wreg, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5447 ;;      Params:         0       0       0       0       0       0       0
  5448 ;;      Locals:         0       0       0       0       0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0
  5450 ;;      Totals:         0       0       0       0       0       0       0
  5451 ;;Total ram usage:        0 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    6
  5454 ;; This function calls:
  5455 ;;		_i2c1_driver_restart
  5456 ;; This function is called by:
  5457 ;;		_do_I2C_TX
  5458 ;;		_i2c_ISR
  5459 ;;		i2_i2c_ISR
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text44
  5464  0012B2                     __ptext44:
  5465                           	opt stack 0
  5466  0012B2                     _do_I2C_SEND_RESTART_READ:
  5467                           	opt stack 0
  5468                           
  5469                           ;Skip over the trampoline to the duplicate function for level 2
  5470  0012B2  B24A               	btfsc	btemp,1,c
  5471  0012B4  EFB6  F009         	goto	i2_do_I2C_SEND_RESTART_READ
  5472  0012B8                     _do_I2C_SEND_RESTART_READ$intlevel0:
  5473                           	opt stack 18
  5474                           
  5475                           ;i2c_master.c: 298: i2c1_driver_restart();
  5476                           
  5477                           ;incstack = 0
  5478  0012B8  ECD7  F009         	call	_i2c1_driver_restart	;wreg free
  5479                           
  5480                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  5481  0012BC  0E01               	movlw	1
  5482  0012BE  0012               	return	
  5483  0012C0                     __end_of_do_I2C_SEND_RESTART_READ:
  5484                           	opt stack 0
  5485                           tosu	equ	0xFFF
  5486                           tosh	equ	0xFFE
  5487                           tosl	equ	0xFFD
  5488                           pclath	equ	0xFFA
  5489                           tblptru	equ	0xFF8
  5490                           tblptrh	equ	0xFF7
  5491                           tblptrl	equ	0xFF6
  5492                           tablat	equ	0xFF5
  5493                           prodh	equ	0xFF4
  5494                           prodl	equ	0xFF3
  5495                           intcon	equ	0xFF2
  5496                           intcon2	equ	0xFF1
  5497                           postinc0	equ	0xFEE
  5498                           plusw0	equ	0xFEB
  5499                           wreg	equ	0xFE8
  5500                           postdec1	equ	0xFE5
  5501                           plusw1	equ	0xFE3
  5502                           fsr1l	equ	0xFE1
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           plusw2	equ	0xFDB
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function _do_I2C_IDLE *****************
  5512 ;; Defined at:
  5513 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;		None
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;		None
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      enum E7019
  5520 ;; Registers used:
  5521 ;;		wreg, status,2
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5527 ;;      Params:         0       0       0       0       0       0       0
  5528 ;;      Locals:         0       0       0       0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0       0       0
  5530 ;;      Totals:         0       0       0       0       0       0       0
  5531 ;;Total ram usage:        0 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    5
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		_i2c_ISR
  5538 ;;		i2_i2c_ISR
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text45
  5543  0011E0                     __ptext45:
  5544                           	opt stack 0
  5545  0011E0                     _do_I2C_IDLE:
  5546                           	opt stack 0
  5547                           
  5548                           ;Skip over the trampoline to the duplicate function for level 2
  5549  0011E0  B24A               	btfsc	btemp,1,c
  5550  0011E2  EF6D  F009         	goto	i2_do_I2C_IDLE
  5551  0011E6                     _do_I2C_IDLE$intlevel0:
  5552                           	opt stack 20
  5553                           
  5554                           ;i2c_master.c: 291: i2c_status.busy = 0;
  5555                           
  5556                           ;incstack = 0
  5557  0011E6  0100               	movlb	0	; () banked
  5558  0011E8  919A               	bcf	_i2c_status& (0+255),0,b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  5562  0011EA  0E00               	movlw	0
  5563  0011EC  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;i2c_master.c: 293: return I2C_RESET;
  5567  0011EE  0E0E               	movlw	14
  5568  0011F0  0012               	return	
  5569  0011F2                     __end_of_do_I2C_IDLE:
  5570                           	opt stack 0
  5571                           tosu	equ	0xFFF
  5572                           tosh	equ	0xFFE
  5573                           tosl	equ	0xFFD
  5574                           pclath	equ	0xFFA
  5575                           tblptru	equ	0xFF8
  5576                           tblptrh	equ	0xFF7
  5577                           tblptrl	equ	0xFF6
  5578                           tablat	equ	0xFF5
  5579                           prodh	equ	0xFF4
  5580                           prodl	equ	0xFF3
  5581                           intcon	equ	0xFF2
  5582                           intcon2	equ	0xFF1
  5583                           postinc0	equ	0xFEE
  5584                           plusw0	equ	0xFEB
  5585                           wreg	equ	0xFE8
  5586                           postdec1	equ	0xFE5
  5587                           plusw1	equ	0xFE3
  5588                           fsr1l	equ	0xFE1
  5589                           indf2	equ	0xFDF
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           plusw2	equ	0xFDB
  5593                           fsr2h	equ	0xFDA
  5594                           fsr2l	equ	0xFD9
  5595                           status	equ	0xFD8
  5596                           
  5597 ;; *************** function _do_I2C_RESET *****************
  5598 ;; Defined at:
  5599 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;		None
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;		None
  5604 ;; Return value:  Size  Location     Type
  5605 ;;                  1    wreg      enum E7019
  5606 ;; Registers used:
  5607 ;;		wreg, status,2, cstack
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5613 ;;      Params:         0       0       0       0       0       0       0
  5614 ;;      Locals:         0       0       0       0       0       0       0
  5615 ;;      Temps:          0       0       0       0       0       0       0
  5616 ;;      Totals:         0       0       0       0       0       0       0
  5617 ;;Total ram usage:        0 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    6
  5620 ;; This function calls:
  5621 ;;		_i2c1_driver_resetBus
  5622 ;; This function is called by:
  5623 ;;		_i2c_ISR
  5624 ;;		i2_i2c_ISR
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text46
  5629  001154                     __ptext46:
  5630                           	opt stack 0
  5631  001154                     _do_I2C_RESET:
  5632                           	opt stack 0
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;Skip over the trampoline to the duplicate function for level 2
  5636  001154  B24A               	btfsc	btemp,1,c
  5637  001156  EF19  F009         	goto	i2_do_I2C_RESET
  5638  00115A                     _do_I2C_RESET$intlevel0:
  5639                           	opt stack 19
  5640                           
  5641                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  5642                           
  5643                           ;incstack = 0
  5644  00115A  ECF1  F009         	call	_i2c1_driver_resetBus	;wreg free
  5645                           
  5646                           ;i2c_master.c: 284: i2c_status.busy = 0;
  5647  00115E  0100               	movlb	0	; () banked
  5648  001160  919A               	bcf	_i2c_status& (0+255),0,b
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  5652  001162  0E00               	movlw	0
  5653  001164  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;i2c_master.c: 286: return I2C_RESET;
  5657  001166  0E0E               	movlw	14
  5658  001168  0012               	return	
  5659  00116A                     __end_of_do_I2C_RESET:
  5660                           	opt stack 0
  5661                           tosu	equ	0xFFF
  5662                           tosh	equ	0xFFE
  5663                           tosl	equ	0xFFD
  5664                           pclath	equ	0xFFA
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           prodh	equ	0xFF4
  5670                           prodl	equ	0xFF3
  5671                           intcon	equ	0xFF2
  5672                           intcon2	equ	0xFF1
  5673                           postinc0	equ	0xFEE
  5674                           plusw0	equ	0xFEB
  5675                           wreg	equ	0xFE8
  5676                           postdec1	equ	0xFE5
  5677                           plusw1	equ	0xFE3
  5678                           fsr1l	equ	0xFE1
  5679                           indf2	equ	0xFDF
  5680                           postinc2	equ	0xFDE
  5681                           postdec2	equ	0xFDD
  5682                           plusw2	equ	0xFDB
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _do_I2C_TX_REGISTER *****************
  5688 ;; Defined at:
  5689 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      enum E7019
  5696 ;; Registers used:
  5697 ;;		wreg, status,2, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5703 ;;      Params:         0       0       0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0
  5706 ;;      Totals:         0       0       0       0       0       0       0
  5707 ;;Total ram usage:        0 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    6
  5710 ;; This function calls:
  5711 ;;		_i2c1_driver_TXData
  5712 ;; This function is called by:
  5713 ;;		_i2c_ISR
  5714 ;;		i2_i2c_ISR
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text47
  5719  001196                     __ptext47:
  5720                           	opt stack 0
  5721  001196                     _do_I2C_TX_REGISTER:
  5722                           	opt stack 0
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;Skip over the trampoline to the duplicate function for level 2
  5726  001196  B24A               	btfsc	btemp,1,c
  5727  001198  EF60  F009         	goto	i2_do_I2C_TX_REGISTER
  5728  00119C                     _do_I2C_TX_REGISTER$intlevel0:
  5729                           	opt stack 19
  5730                           
  5731                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  5732                           
  5733                           ;incstack = 0
  5734  00119C  0100               	movlb	0	; () banked
  5735  00119E  879A               	bsf	_i2c_status& (0+255),3,b
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  5739  0011A0  51BE               	movf	(_i2c_status+36)& (0+255),w,b
  5740  0011A2  EC9A  F009         	call	_i2c1_driver_TXData
  5741                           
  5742                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  5743  0011A6  0E07               	movlw	7
  5744  0011A8  0012               	return	
  5745  0011AA                     __end_of_do_I2C_TX_REGISTER:
  5746                           	opt stack 0
  5747                           tosu	equ	0xFFF
  5748                           tosh	equ	0xFFE
  5749                           tosl	equ	0xFFD
  5750                           pclath	equ	0xFFA
  5751                           tblptru	equ	0xFF8
  5752                           tblptrh	equ	0xFF7
  5753                           tblptrl	equ	0xFF6
  5754                           tablat	equ	0xFF5
  5755                           prodh	equ	0xFF4
  5756                           prodl	equ	0xFF3
  5757                           intcon	equ	0xFF2
  5758                           intcon2	equ	0xFF1
  5759                           postinc0	equ	0xFEE
  5760                           plusw0	equ	0xFEB
  5761                           wreg	equ	0xFE8
  5762                           postdec1	equ	0xFE5
  5763                           plusw1	equ	0xFE3
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           postdec2	equ	0xFDD
  5768                           plusw2	equ	0xFDB
  5769                           fsr2h	equ	0xFDA
  5770                           fsr2l	equ	0xFD9
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _mssp1_setIRQ *****************
  5774 ;; Defined at:
  5775 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		None
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5789 ;;      Params:         0       0       0       0       0       0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0
  5792 ;;      Totals:         0       0       0       0       0       0       0
  5793 ;;Total ram usage:        0 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    5
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_do_I2C_TX_EMPTY
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text48
  5804  00139E                     __ptext48:
  5805                           	opt stack 0
  5806  00139E                     _mssp1_setIRQ:
  5807                           	opt stack 19
  5808                           
  5809                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  5810                           
  5811                           ;incstack = 0
  5812  00139E  869E               	bsf	3998,3,c	;volatile
  5813  0013A0  0012               	return		;funcret
  5814  0013A2                     __end_of_mssp1_setIRQ:
  5815                           	opt stack 0
  5816                           tosu	equ	0xFFF
  5817                           tosh	equ	0xFFE
  5818                           tosl	equ	0xFFD
  5819                           pclath	equ	0xFFA
  5820                           tblptru	equ	0xFF8
  5821                           tblptrh	equ	0xFF7
  5822                           tblptrl	equ	0xFF6
  5823                           tablat	equ	0xFF5
  5824                           prodh	equ	0xFF4
  5825                           prodl	equ	0xFF3
  5826                           intcon	equ	0xFF2
  5827                           intcon2	equ	0xFF1
  5828                           postinc0	equ	0xFEE
  5829                           plusw0	equ	0xFEB
  5830                           wreg	equ	0xFE8
  5831                           postdec1	equ	0xFE5
  5832                           plusw1	equ	0xFE3
  5833                           fsr1l	equ	0xFE1
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           plusw2	equ	0xFDB
  5838                           fsr2h	equ	0xFDA
  5839                           fsr2l	equ	0xFD9
  5840                           status	equ	0xFD8
  5841                           
  5842 ;; *************** function _i2c1_driver_isNACK *****************
  5843 ;; Defined at:
  5844 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;		None
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;		None               void
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5858 ;;      Params:         0       0       0       0       0       0       0
  5859 ;;      Locals:         0       0       0       0       0       0       0
  5860 ;;      Temps:          1       0       0       0       0       0       0
  5861 ;;      Totals:         1       0       0       0       0       0       0
  5862 ;;Total ram usage:        1 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    5
  5865 ;; This function calls:
  5866 ;;		Nothing
  5867 ;; This function is called by:
  5868 ;;		_do_I2C_TX
  5869 ;;		_i2c_ISR
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text49
  5874  00116A                     __ptext49:
  5875                           	opt stack 0
  5876  00116A                     _i2c1_driver_isNACK:
  5877                           	opt stack 20
  5878                           
  5879                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  5880                           
  5881                           ;incstack = 0
  5882  00116A  50C5               	movf	4037,w,c	;volatile
  5883  00116C  0BBF               	andlw	-65
  5884  00116E  0940               	iorlw	64
  5885  001170  6EC5               	movwf	4037,c	;volatile
  5886  001172  38C5               	swapf	4037,w,c	;volatile
  5887  001174  32E8               	rrcf	wreg,f,c
  5888  001176  32E8               	rrcf	wreg,f,c
  5889  001178  0B01               	andlw	1
  5890  00117A  6E3A               	movwf	??_i2c1_driver_isNACK& (0+255),c
  5891  00117C  303A               	rrcf	??_i2c1_driver_isNACK,w,c
  5892  00117E  0012               	return	
  5893  001180                     __end_of_i2c1_driver_isNACK:
  5894                           	opt stack 0
  5895                           tosu	equ	0xFFF
  5896                           tosh	equ	0xFFE
  5897                           tosl	equ	0xFFD
  5898                           pclath	equ	0xFFA
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           intcon	equ	0xFF2
  5906                           intcon2	equ	0xFF1
  5907                           postinc0	equ	0xFEE
  5908                           plusw0	equ	0xFEB
  5909                           wreg	equ	0xFE8
  5910                           postdec1	equ	0xFE5
  5911                           plusw1	equ	0xFE3
  5912                           fsr1l	equ	0xFE1
  5913                           indf2	equ	0xFDF
  5914                           postinc2	equ	0xFDE
  5915                           postdec2	equ	0xFDD
  5916                           plusw2	equ	0xFDB
  5917                           fsr2h	equ	0xFDA
  5918                           fsr2l	equ	0xFD9
  5919                           status	equ	0xFD8
  5920                           
  5921 ;; *************** function _i2c1_driver_TXData *****************
  5922 ;; Defined at:
  5923 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;  d               1    wreg     unsigned char 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  d               1   20[COMRAM] unsigned char 
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5937 ;;      Params:         0       0       0       0       0       0       0
  5938 ;;      Locals:         1       0       0       0       0       0       0
  5939 ;;      Temps:          0       0       0       0       0       0       0
  5940 ;;      Totals:         1       0       0       0       0       0       0
  5941 ;;Total ram usage:        1 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    5
  5944 ;; This function calls:
  5945 ;;		Nothing
  5946 ;; This function is called by:
  5947 ;;		_do_I2C_SEND_ADR_READ
  5948 ;;		_do_I2C_SEND_INITIAL_READ
  5949 ;;		_do_I2C_TX_REGISTER
  5950 ;;		_do_I2C_SEND_ADR_WRITE
  5951 ;;		_do_I2C_TX
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           	psect	text50
  5956  001334                     __ptext50:
  5957                           	opt stack 0
  5958  001334                     _i2c1_driver_TXData:
  5959                           	opt stack 19
  5960                           
  5961                           ;incstack = 0
  5962                           ;i2c1_driver_TXData@d stored from wreg
  5963  001334  6E3A               	movwf	i2c1_driver_TXData@d,c
  5964                           
  5965                           ;i2c1_driver.c: 188: SSP1BUF = d;
  5966  001336  C03A  FFC9         	movff	i2c1_driver_TXData@d,4041	;volatile
  5967  00133A  0012               	return		;funcret
  5968  00133C                     __end_of_i2c1_driver_TXData:
  5969                           	opt stack 0
  5970                           tosu	equ	0xFFF
  5971                           tosh	equ	0xFFE
  5972                           tosl	equ	0xFFD
  5973                           pclath	equ	0xFFA
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           intcon	equ	0xFF2
  5981                           intcon2	equ	0xFF1
  5982                           postinc0	equ	0xFEE
  5983                           plusw0	equ	0xFEB
  5984                           wreg	equ	0xFE8
  5985                           postdec1	equ	0xFE5
  5986                           plusw1	equ	0xFE3
  5987                           fsr1l	equ	0xFE1
  5988                           indf2	equ	0xFDF
  5989                           postinc2	equ	0xFDE
  5990                           postdec2	equ	0xFDD
  5991                           plusw2	equ	0xFDB
  5992                           fsr2h	equ	0xFDA
  5993                           fsr2l	equ	0xFD9
  5994                           status	equ	0xFD8
  5995                           
  5996 ;; *************** function _i2c1_driver_getRXData *****************
  5997 ;; Defined at:
  5998 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;		None
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  1    wreg      unsigned char 
  6005 ;; Registers used:
  6006 ;;		wreg, status,2
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6012 ;;      Params:         0       0       0       0       0       0       0
  6013 ;;      Locals:         0       0       0       0       0       0       0
  6014 ;;      Temps:          0       0       0       0       0       0       0
  6015 ;;      Totals:         0       0       0       0       0       0       0
  6016 ;;Total ram usage:        0 bytes
  6017 ;; Hardware stack levels used:    1
  6018 ;; Hardware stack levels required when called:    5
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		_do_I2C_RX
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           	psect	text51
  6027  0013A2                     __ptext51:
  6028                           	opt stack 0
  6029  0013A2                     _i2c1_driver_getRXData:
  6030                           	opt stack 19
  6031                           
  6032                           ;i2c1_driver.c: 173: return SSP1BUF;
  6033                           
  6034                           ;incstack = 0
  6035  0013A2  50C9               	movf	4041,w,c	;volatile
  6036  0013A4  0012               	return	
  6037  0013A6                     __end_of_i2c1_driver_getRXData:
  6038                           	opt stack 0
  6039                           tosu	equ	0xFFF
  6040                           tosh	equ	0xFFE
  6041                           tosl	equ	0xFFD
  6042                           pclath	equ	0xFFA
  6043                           tblptru	equ	0xFF8
  6044                           tblptrh	equ	0xFF7
  6045                           tblptrl	equ	0xFF6
  6046                           tablat	equ	0xFF5
  6047                           prodh	equ	0xFF4
  6048                           prodl	equ	0xFF3
  6049                           intcon	equ	0xFF2
  6050                           intcon2	equ	0xFF1
  6051                           postinc0	equ	0xFEE
  6052                           plusw0	equ	0xFEB
  6053                           wreg	equ	0xFE8
  6054                           postdec1	equ	0xFE5
  6055                           plusw1	equ	0xFE3
  6056                           fsr1l	equ	0xFE1
  6057                           indf2	equ	0xFDF
  6058                           postinc2	equ	0xFDE
  6059                           postdec2	equ	0xFDD
  6060                           plusw2	equ	0xFDB
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function _i2c1_driver_sendNACK *****************
  6066 ;; Defined at:
  6067 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  1    wreg      void 
  6074 ;; Registers used:
  6075 ;;		None
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6081 ;;      Params:         0       0       0       0       0       0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0
  6084 ;;      Totals:         0       0       0       0       0       0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    5
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_do_I2C_DO_NACK_STOP
  6092 ;;		_do_I2C_DO_NACK_RESTART
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           	psect	text52
  6097  00137C                     __ptext52:
  6098                           	opt stack 0
  6099  00137C                     _i2c1_driver_sendNACK:
  6100                           	opt stack 18
  6101                           
  6102                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  6103                           
  6104                           ;incstack = 0
  6105  00137C  8AC5               	bsf	4037,5,c	;volatile
  6106                           
  6107                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  6108  00137E  88C5               	bsf	4037,4,c	;volatile
  6109  001380  0012               	return		;funcret
  6110  001382                     __end_of_i2c1_driver_sendNACK:
  6111                           	opt stack 0
  6112                           tosu	equ	0xFFF
  6113                           tosh	equ	0xFFE
  6114                           tosl	equ	0xFFD
  6115                           pclath	equ	0xFFA
  6116                           tblptru	equ	0xFF8
  6117                           tblptrh	equ	0xFF7
  6118                           tblptrl	equ	0xFF6
  6119                           tablat	equ	0xFF5
  6120                           prodh	equ	0xFF4
  6121                           prodl	equ	0xFF3
  6122                           intcon	equ	0xFF2
  6123                           intcon2	equ	0xFF1
  6124                           postinc0	equ	0xFEE
  6125                           plusw0	equ	0xFEB
  6126                           wreg	equ	0xFE8
  6127                           postdec1	equ	0xFE5
  6128                           plusw1	equ	0xFE3
  6129                           fsr1l	equ	0xFE1
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           plusw2	equ	0xFDB
  6134                           fsr2h	equ	0xFDA
  6135                           fsr2l	equ	0xFD9
  6136                           status	equ	0xFD8
  6137                           
  6138 ;; *************** function _i2c1_driver_resetBus *****************
  6139 ;; Defined at:
  6140 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;		None
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		None
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6154 ;;      Params:         0       0       0       0       0       0       0
  6155 ;;      Locals:         0       0       0       0       0       0       0
  6156 ;;      Temps:          0       0       0       0       0       0       0
  6157 ;;      Totals:         0       0       0       0       0       0       0
  6158 ;;Total ram usage:        0 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    5
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_do_I2C_RESET
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           	psect	text53
  6169  0013E2                     __ptext53:
  6170                           	opt stack 0
  6171  0013E2                     _i2c1_driver_resetBus:
  6172                           	opt stack 19
  6173                           
  6174                           ;incstack = 0
  6175  0013E2  0012               	return		;funcret
  6176  0013E4                     __end_of_i2c1_driver_resetBus:
  6177                           	opt stack 0
  6178                           tosu	equ	0xFFF
  6179                           tosh	equ	0xFFE
  6180                           tosl	equ	0xFFD
  6181                           pclath	equ	0xFFA
  6182                           tblptru	equ	0xFF8
  6183                           tblptrh	equ	0xFF7
  6184                           tblptrl	equ	0xFF6
  6185                           tablat	equ	0xFF5
  6186                           prodh	equ	0xFF4
  6187                           prodl	equ	0xFF3
  6188                           intcon	equ	0xFF2
  6189                           intcon2	equ	0xFF1
  6190                           postinc0	equ	0xFEE
  6191                           plusw0	equ	0xFEB
  6192                           wreg	equ	0xFE8
  6193                           postdec1	equ	0xFE5
  6194                           plusw1	equ	0xFE3
  6195                           fsr1l	equ	0xFE1
  6196                           indf2	equ	0xFDF
  6197                           postinc2	equ	0xFDE
  6198                           postdec2	equ	0xFDD
  6199                           plusw2	equ	0xFDB
  6200                           fsr2h	equ	0xFDA
  6201                           fsr2l	equ	0xFD9
  6202                           status	equ	0xFD8
  6203                           
  6204 ;; *************** function _i2c1_driver_startRX *****************
  6205 ;; Defined at:
  6206 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;		None
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;		None
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  1    wreg      void 
  6213 ;; Registers used:
  6214 ;;		None
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6220 ;;      Params:         0       0       0       0       0       0       0
  6221 ;;      Locals:         0       0       0       0       0       0       0
  6222 ;;      Temps:          0       0       0       0       0       0       0
  6223 ;;      Totals:         0       0       0       0       0       0       0
  6224 ;;Total ram usage:        0 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    5
  6227 ;; This function calls:
  6228 ;;		Nothing
  6229 ;; This function is called by:
  6230 ;;		_do_I2C_RCEN
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           	psect	text54
  6235  0013A6                     __ptext54:
  6236                           	opt stack 0
  6237  0013A6                     _i2c1_driver_startRX:
  6238                           	opt stack 19
  6239                           
  6240                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  6241                           
  6242                           ;incstack = 0
  6243  0013A6  86C5               	bsf	4037,3,c	;volatile
  6244  0013A8  0012               	return		;funcret
  6245  0013AA                     __end_of_i2c1_driver_startRX:
  6246                           	opt stack 0
  6247                           tosu	equ	0xFFF
  6248                           tosh	equ	0xFFE
  6249                           tosl	equ	0xFFD
  6250                           pclath	equ	0xFFA
  6251                           tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           prodh	equ	0xFF4
  6256                           prodl	equ	0xFF3
  6257                           intcon	equ	0xFF2
  6258                           intcon2	equ	0xFF1
  6259                           postinc0	equ	0xFEE
  6260                           plusw0	equ	0xFEB
  6261                           wreg	equ	0xFE8
  6262                           postdec1	equ	0xFE5
  6263                           plusw1	equ	0xFE3
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           plusw2	equ	0xFDB
  6269                           fsr2h	equ	0xFDA
  6270                           fsr2l	equ	0xFD9
  6271                           status	equ	0xFD8
  6272                           
  6273 ;; *************** function _returnReset *****************
  6274 ;; Defined at:
  6275 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  p               2   20[COMRAM] PTR void 
  6278 ;;		 -> NULL(0), 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;		None
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      enum E6842
  6283 ;; Registers used:
  6284 ;;		wreg
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6290 ;;      Params:         2       0       0       0       0       0       0
  6291 ;;      Locals:         0       0       0       0       0       0       0
  6292 ;;      Temps:          0       0       0       0       0       0       0
  6293 ;;      Totals:         2       0       0       0       0       0       0
  6294 ;;Total ram usage:        2 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    5
  6297 ;; This function calls:
  6298 ;;		Nothing
  6299 ;; This function is called by:
  6300 ;;		_i2c_open
  6301 ;;		_do_I2C_DO_ADDRESS_NACK
  6302 ;;		_do_I2C_TX
  6303 ;;		_do_I2C_RX
  6304 ;;		_do_I2C_TX_EMPTY
  6305 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6306 ;;		i2_do_I2C_TX
  6307 ;;		i2_do_I2C_RX
  6308 ;;		i2_do_I2C_TX_EMPTY
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           	psect	text55
  6313  001318                     __ptext55:
  6314                           	opt stack 0
  6315  001318                     _returnReset:
  6316                           	opt stack 0
  6317                           
  6318                           ;Skip over the trampoline to the duplicate function for level 2
  6319  001318  B24A               	btfsc	btemp,1,c
  6320  00131A  EFE7  F009         	goto	i2_returnReset
  6321  00131E                     _returnReset$intlevel0:
  6322                           	opt stack 19
  6323                           
  6324                           ;i2c_master.c: 515: return i2c_reset_link;
  6325                           
  6326                           ;incstack = 0
  6327  00131E  0E05               	movlw	5
  6328  001320  0012               	return	
  6329  001322                     __end_of_returnReset:
  6330                           	opt stack 0
  6331                           tosu	equ	0xFFF
  6332                           tosh	equ	0xFFE
  6333                           tosl	equ	0xFFD
  6334                           pclath	equ	0xFFA
  6335                           tblptru	equ	0xFF8
  6336                           tblptrh	equ	0xFF7
  6337                           tblptrl	equ	0xFF6
  6338                           tablat	equ	0xFF5
  6339                           prodh	equ	0xFF4
  6340                           prodl	equ	0xFF3
  6341                           intcon	equ	0xFF2
  6342                           intcon2	equ	0xFF1
  6343                           postinc0	equ	0xFEE
  6344                           plusw0	equ	0xFEB
  6345                           wreg	equ	0xFE8
  6346                           postdec1	equ	0xFE5
  6347                           plusw1	equ	0xFE3
  6348                           fsr1l	equ	0xFE1
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           plusw2	equ	0xFDB
  6353                           fsr2h	equ	0xFDA
  6354                           fsr2l	equ	0xFD9
  6355                           status	equ	0xFD8
  6356                           
  6357 ;; *************** function _returnStop *****************
  6358 ;; Defined at:
  6359 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;  p               2   20[COMRAM] PTR void 
  6362 ;;		 -> NULL(0), 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      enum E6842
  6367 ;; Registers used:
  6368 ;;		wreg
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6374 ;;      Params:         2       0       0       0       0       0       0
  6375 ;;      Locals:         0       0       0       0       0       0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0
  6377 ;;      Totals:         2       0       0       0       0       0       0
  6378 ;;Total ram usage:        2 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    5
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		_i2c_open
  6385 ;;		_setCallBack
  6386 ;;		_do_I2C_DO_ADDRESS_NACK
  6387 ;;		_do_I2C_TX
  6388 ;;		_do_I2C_RX
  6389 ;;		_do_I2C_TX_EMPTY
  6390 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6391 ;;		i2_do_I2C_TX
  6392 ;;		i2_do_I2C_RX
  6393 ;;		i2_do_I2C_TX_EMPTY
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           	psect	text56
  6398  001322                     __ptext56:
  6399                           	opt stack 0
  6400  001322                     _returnStop:
  6401                           	opt stack 0
  6402                           
  6403                           ;Skip over the trampoline to the duplicate function for level 2
  6404  001322  B24A               	btfsc	btemp,1,c
  6405  001324  EFE9  F009         	goto	i2_returnStop
  6406  001328                     _returnStop$intlevel0:
  6407                           	opt stack 19
  6408                           
  6409                           ;i2c_master.c: 510: return i2c_stop;
  6410                           
  6411                           ;incstack = 0
  6412  001328  0E01               	movlw	1
  6413  00132A  0012               	return	
  6414  00132C                     __end_of_returnStop:
  6415                           	opt stack 0
  6416                           tosu	equ	0xFFF
  6417                           tosh	equ	0xFFE
  6418                           tosl	equ	0xFFD
  6419                           pclath	equ	0xFFA
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodh	equ	0xFF4
  6425                           prodl	equ	0xFF3
  6426                           intcon	equ	0xFF2
  6427                           intcon2	equ	0xFF1
  6428                           postinc0	equ	0xFEE
  6429                           plusw0	equ	0xFEB
  6430                           wreg	equ	0xFE8
  6431                           postdec1	equ	0xFE5
  6432                           plusw1	equ	0xFE3
  6433                           fsr1l	equ	0xFE1
  6434                           indf2	equ	0xFDF
  6435                           postinc2	equ	0xFDE
  6436                           postdec2	equ	0xFDD
  6437                           plusw2	equ	0xFDB
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function _i2c1_driver_stop *****************
  6443 ;; Defined at:
  6444 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;		None
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;		None
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1    wreg      void 
  6451 ;; Registers used:
  6452 ;;		None
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6458 ;;      Params:         0       0       0       0       0       0       0
  6459 ;;      Locals:         0       0       0       0       0       0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0
  6461 ;;      Totals:         0       0       0       0       0       0       0
  6462 ;;Total ram usage:        0 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    5
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_do_I2C_SEND_STOP
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text57
  6473  0013AA                     __ptext57:
  6474                           	opt stack 0
  6475  0013AA                     _i2c1_driver_stop:
  6476                           	opt stack 18
  6477                           
  6478                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  6479                           
  6480                           ;incstack = 0
  6481  0013AA  84C5               	bsf	4037,2,c	;volatile
  6482  0013AC  0012               	return		;funcret
  6483  0013AE                     __end_of_i2c1_driver_stop:
  6484                           	opt stack 0
  6485                           tosu	equ	0xFFF
  6486                           tosh	equ	0xFFE
  6487                           tosl	equ	0xFFD
  6488                           pclath	equ	0xFFA
  6489                           tblptru	equ	0xFF8
  6490                           tblptrh	equ	0xFF7
  6491                           tblptrl	equ	0xFF6
  6492                           tablat	equ	0xFF5
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           intcon	equ	0xFF2
  6496                           intcon2	equ	0xFF1
  6497                           postinc0	equ	0xFEE
  6498                           plusw0	equ	0xFEB
  6499                           wreg	equ	0xFE8
  6500                           postdec1	equ	0xFE5
  6501                           plusw1	equ	0xFE3
  6502                           fsr1l	equ	0xFE1
  6503                           indf2	equ	0xFDF
  6504                           postinc2	equ	0xFDE
  6505                           postdec2	equ	0xFDD
  6506                           plusw2	equ	0xFDB
  6507                           fsr2h	equ	0xFDA
  6508                           fsr2l	equ	0xFD9
  6509                           status	equ	0xFD8
  6510                           
  6511 ;; *************** function _i2c1_driver_restart *****************
  6512 ;; Defined at:
  6513 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  1    wreg      void 
  6520 ;; Registers used:
  6521 ;;		None
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6527 ;;      Params:         0       0       0       0       0       0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0
  6529 ;;      Temps:          0       0       0       0       0       0       0
  6530 ;;      Totals:         0       0       0       0       0       0       0
  6531 ;;Total ram usage:        0 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    5
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_do_I2C_SEND_RESTART_READ
  6538 ;;		_do_I2C_SEND_RESTART_WRITE
  6539 ;;		_do_I2C_SEND_RESTART
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text58
  6544  0013AE                     __ptext58:
  6545                           	opt stack 0
  6546  0013AE                     _i2c1_driver_restart:
  6547                           	opt stack 18
  6548                           
  6549                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  6550                           
  6551                           ;incstack = 0
  6552  0013AE  82C5               	bsf	4037,1,c	;volatile
  6553  0013B0  0012               	return		;funcret
  6554  0013B2                     __end_of_i2c1_driver_restart:
  6555                           	opt stack 0
  6556                           tosu	equ	0xFFF
  6557                           tosh	equ	0xFFE
  6558                           tosl	equ	0xFFD
  6559                           pclath	equ	0xFFA
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           intcon2	equ	0xFF1
  6568                           postinc0	equ	0xFEE
  6569                           plusw0	equ	0xFEB
  6570                           wreg	equ	0xFE8
  6571                           postdec1	equ	0xFE5
  6572                           plusw1	equ	0xFE3
  6573                           fsr1l	equ	0xFE1
  6574                           indf2	equ	0xFDF
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           plusw2	equ	0xFDB
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function _i2c1_driver_sendACK *****************
  6583 ;; Defined at:
  6584 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;		None
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;		None
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  1    wreg      void 
  6591 ;; Registers used:
  6592 ;;		None
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6598 ;;      Params:         0       0       0       0       0       0       0
  6599 ;;      Locals:         0       0       0       0       0       0       0
  6600 ;;      Temps:          0       0       0       0       0       0       0
  6601 ;;      Totals:         0       0       0       0       0       0       0
  6602 ;;Total ram usage:        0 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    5
  6605 ;; This function calls:
  6606 ;;		Nothing
  6607 ;; This function is called by:
  6608 ;;		_do_I2C_DO_ACK
  6609 ;;		_do_I2C_RX
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           	psect	text59
  6614  001382                     __ptext59:
  6615                           	opt stack 0
  6616  001382                     _i2c1_driver_sendACK:
  6617                           	opt stack 19
  6618                           
  6619                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  6620                           
  6621                           ;incstack = 0
  6622  001382  9AC5               	bcf	4037,5,c	;volatile
  6623                           
  6624                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  6625  001384  88C5               	bsf	4037,4,c	;volatile
  6626  001386  0012               	return		;funcret
  6627  001388                     __end_of_i2c1_driver_sendACK:
  6628                           	opt stack 0
  6629                           tosu	equ	0xFFF
  6630                           tosh	equ	0xFFE
  6631                           tosl	equ	0xFFD
  6632                           pclath	equ	0xFFA
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           intcon2	equ	0xFF1
  6641                           postinc0	equ	0xFEE
  6642                           plusw0	equ	0xFEB
  6643                           wreg	equ	0xFE8
  6644                           postdec1	equ	0xFE5
  6645                           plusw1	equ	0xFE3
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           postinc2	equ	0xFDE
  6649                           postdec2	equ	0xFDD
  6650                           plusw2	equ	0xFDB
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           
  6655 ;; *************** function _i2c1_driver_start *****************
  6656 ;; Defined at:
  6657 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;		None
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;		None
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      void 
  6664 ;; Registers used:
  6665 ;;		None
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6671 ;;      Params:         0       0       0       0       0       0       0
  6672 ;;      Locals:         0       0       0       0       0       0       0
  6673 ;;      Temps:          0       0       0       0       0       0       0
  6674 ;;      Totals:         0       0       0       0       0       0       0
  6675 ;;Total ram usage:        0 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    5
  6678 ;; This function calls:
  6679 ;;		Nothing
  6680 ;; This function is called by:
  6681 ;;		_i2c_masterOperation
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           	psect	text60
  6686  0013B2                     __ptext60:
  6687                           	opt stack 0
  6688  0013B2                     _i2c1_driver_start:
  6689                           	opt stack 22
  6690                           
  6691                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  6692                           
  6693                           ;incstack = 0
  6694  0013B2  80C5               	bsf	4037,0,c	;volatile
  6695  0013B4  0012               	return		;funcret
  6696  0013B6                     __end_of_i2c1_driver_start:
  6697                           	opt stack 0
  6698                           tosu	equ	0xFFF
  6699                           tosh	equ	0xFFE
  6700                           tosl	equ	0xFFD
  6701                           pclath	equ	0xFFA
  6702                           tblptru	equ	0xFF8
  6703                           tblptrh	equ	0xFF7
  6704                           tblptrl	equ	0xFF6
  6705                           tablat	equ	0xFF5
  6706                           prodh	equ	0xFF4
  6707                           prodl	equ	0xFF3
  6708                           intcon	equ	0xFF2
  6709                           intcon2	equ	0xFF1
  6710                           postinc0	equ	0xFEE
  6711                           plusw0	equ	0xFEB
  6712                           wreg	equ	0xFE8
  6713                           postdec1	equ	0xFE5
  6714                           plusw1	equ	0xFE3
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           plusw2	equ	0xFDB
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _i2c_close *****************
  6725 ;; Defined at:
  6726 ;;		line 170 in file "mcc_generated_files/drivers/i2c_master.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  ret             1   20[COMRAM] enum E6837
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      enum E6837
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6740 ;;      Params:         0       0       0       0       0       0       0
  6741 ;;      Locals:         1       0       0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0
  6743 ;;      Totals:         1       0       0       0       0       0       0
  6744 ;;Total ram usage:        1 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    6
  6747 ;; This function calls:
  6748 ;;		_mssp1_clearIRQ
  6749 ;;		_mssp1_disableIRQ
  6750 ;; This function is called by:
  6751 ;;		_write_register
  6752 ;;		_read_register
  6753 ;;		_read_xyzvalues
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text61
  6758  0010AA                     __ptext61:
  6759                           	opt stack 0
  6760  0010AA                     _i2c_close:
  6761                           	opt stack 23
  6762                           
  6763                           ;i2c_master.c: 172: i2c_error_t ret = I2C_BUSY;
  6764                           
  6765                           ;incstack = 0
  6766  0010AA  0E01               	movlw	1
  6767  0010AC  6E3A               	movwf	i2c_close@ret,c
  6768                           
  6769                           ;i2c_master.c: 173: if(!i2c_status.busy)
  6770  0010AE  0100               	movlb	0	; () banked
  6771  0010B0  B19A               	btfsc	_i2c_status& (0+255),0,b
  6772  0010B2  D008               	goto	l83
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;i2c_master.c: 174: {
  6776                           ;i2c_master.c: 175: i2c_status.inUse = 0;
  6777  0010B4  939A               	bcf	_i2c_status& (0+255),1,b
  6778                           
  6779                           ;i2c_master.c: 177: i2c_status.address = 0xff;
  6780  0010B6  699B               	setf	(_i2c_status+1)& (0+255),b
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;i2c_master.c: 178: mssp1_clearIRQ();
  6784  0010B8  ECDD  F009         	call	_mssp1_clearIRQ	;wreg free
  6785                           
  6786                           ;i2c_master.c: 179: mssp1_disableIRQ();
  6787  0010BC  ECDB  F009         	call	_mssp1_disableIRQ	;wreg free
  6788                           
  6789                           ;i2c_master.c: 180: ret = i2c_status.error;
  6790  0010C0  C0A5  F03A         	movff	_i2c_status+11,i2c_close@ret
  6791  0010C4                     l83:
  6792                           
  6793                           ;i2c_master.c: 181: }
  6794                           ;i2c_master.c: 182: return ret;
  6795  0010C4  503A               	movf	i2c_close@ret,w,c
  6796  0010C6  0012               	return	
  6797  0010C8                     __end_of_i2c_close:
  6798                           	opt stack 0
  6799                           tosu	equ	0xFFF
  6800                           tosh	equ	0xFFE
  6801                           tosl	equ	0xFFD
  6802                           pclath	equ	0xFFA
  6803                           tblptru	equ	0xFF8
  6804                           tblptrh	equ	0xFF7
  6805                           tblptrl	equ	0xFF6
  6806                           tablat	equ	0xFF5
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           intcon	equ	0xFF2
  6810                           intcon2	equ	0xFF1
  6811                           postinc0	equ	0xFEE
  6812                           plusw0	equ	0xFEB
  6813                           wreg	equ	0xFE8
  6814                           postdec1	equ	0xFE5
  6815                           plusw1	equ	0xFE3
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           plusw2	equ	0xFDB
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _mssp1_disableIRQ *****************
  6826 ;; Defined at:
  6827 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;		None
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      void 
  6834 ;; Registers used:
  6835 ;;		None
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6841 ;;      Params:         0       0       0       0       0       0       0
  6842 ;;      Locals:         0       0       0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0
  6844 ;;      Totals:         0       0       0       0       0       0       0
  6845 ;;Total ram usage:        0 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    5
  6848 ;; This function calls:
  6849 ;;		Nothing
  6850 ;; This function is called by:
  6851 ;;		_i2c_close
  6852 ;;		_i2c_setTimeOut
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           	psect	text62
  6857  0013B6                     __ptext62:
  6858                           	opt stack 0
  6859  0013B6                     _mssp1_disableIRQ:
  6860                           	opt stack 23
  6861                           
  6862                           ;i2c1_driver.c: 50: PIE1bits.SSP1IE = 0;
  6863                           
  6864                           ;incstack = 0
  6865  0013B6  969D               	bcf	3997,3,c	;volatile
  6866  0013B8  0012               	return		;funcret
  6867  0013BA                     __end_of_mssp1_disableIRQ:
  6868                           	opt stack 0
  6869                           tosu	equ	0xFFF
  6870                           tosh	equ	0xFFE
  6871                           tosl	equ	0xFFD
  6872                           pclath	equ	0xFFA
  6873                           tblptru	equ	0xFF8
  6874                           tblptrh	equ	0xFF7
  6875                           tblptrl	equ	0xFF6
  6876                           tablat	equ	0xFF5
  6877                           prodh	equ	0xFF4
  6878                           prodl	equ	0xFF3
  6879                           intcon	equ	0xFF2
  6880                           intcon2	equ	0xFF1
  6881                           postinc0	equ	0xFEE
  6882                           plusw0	equ	0xFEB
  6883                           wreg	equ	0xFE8
  6884                           postdec1	equ	0xFE5
  6885                           plusw1	equ	0xFE3
  6886                           fsr1l	equ	0xFE1
  6887                           indf2	equ	0xFDF
  6888                           postinc2	equ	0xFDE
  6889                           postdec2	equ	0xFDD
  6890                           plusw2	equ	0xFDB
  6891                           fsr2h	equ	0xFDA
  6892                           fsr2l	equ	0xFD9
  6893                           status	equ	0xFD8
  6894                           
  6895 ;; *************** function _mssp1_clearIRQ *****************
  6896 ;; Defined at:
  6897 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;		None
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;		None
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  1    wreg      void 
  6904 ;; Registers used:
  6905 ;;		None
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6911 ;;      Params:         0       0       0       0       0       0       0
  6912 ;;      Locals:         0       0       0       0       0       0       0
  6913 ;;      Temps:          0       0       0       0       0       0       0
  6914 ;;      Totals:         0       0       0       0       0       0       0
  6915 ;;Total ram usage:        0 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    5
  6918 ;; This function calls:
  6919 ;;		Nothing
  6920 ;; This function is called by:
  6921 ;;		_i2c_open
  6922 ;;		_i2c_close
  6923 ;;		_i2c_ISR
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           	psect	text63
  6928  0013BA                     __ptext63:
  6929                           	opt stack 0
  6930  0013BA                     _mssp1_clearIRQ:
  6931                           	opt stack 23
  6932                           
  6933                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6934                           
  6935                           ;incstack = 0
  6936  0013BA  969E               	bcf	3998,3,c	;volatile
  6937  0013BC  0012               	return		;funcret
  6938  0013BE                     __end_of_mssp1_clearIRQ:
  6939                           	opt stack 0
  6940                           tosu	equ	0xFFF
  6941                           tosh	equ	0xFFE
  6942                           tosl	equ	0xFFD
  6943                           pclath	equ	0xFFA
  6944                           tblptru	equ	0xFF8
  6945                           tblptrh	equ	0xFF7
  6946                           tblptrl	equ	0xFF6
  6947                           tablat	equ	0xFF5
  6948                           prodh	equ	0xFF4
  6949                           prodl	equ	0xFF3
  6950                           intcon	equ	0xFF2
  6951                           intcon2	equ	0xFF1
  6952                           postinc0	equ	0xFEE
  6953                           plusw0	equ	0xFEB
  6954                           wreg	equ	0xFE8
  6955                           postdec1	equ	0xFE5
  6956                           plusw1	equ	0xFE3
  6957                           fsr1l	equ	0xFE1
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           plusw2	equ	0xFDB
  6962                           fsr2h	equ	0xFDA
  6963                           fsr2l	equ	0xFD9
  6964                           status	equ	0xFD8
  6965                           
  6966 ;; *************** function _INTERRUPT_InterruptManager *****************
  6967 ;; Defined at:
  6968 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;		None
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;		None
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  1    wreg      void 
  6975 ;; Registers used:
  6976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6982 ;;      Params:         0       0       0       0       0       0       0
  6983 ;;      Locals:         0       0       0       0       0       0       0
  6984 ;;      Temps:         18       0       0       0       0       0       0
  6985 ;;      Totals:        18       0       0       0       0       0       0
  6986 ;;Total ram usage:       18 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    4
  6989 ;; This function calls:
  6990 ;;		Absolute function
  6991 ;;		_EUSART1_Receive_ISR
  6992 ;;		_EUSART1_Transmit_ISR
  6993 ;;		_i2c_busCollisionISR
  6994 ;;		i2_i2c_ISR
  6995 ;; This function is called by:
  6996 ;;		Interrupt level 2
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	intcode
  7001  000008                     __pintcode:
  7002                           	opt stack 0
  7003  000008                     _INTERRUPT_InterruptManager:
  7004                           	opt stack 17
  7005                           
  7006                           ;incstack = 0
  7007  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7008  00000A  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
  7009  00000E  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7010  000012  CFE9 F02A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7011  000016  CFEA F02B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7012  00001A  CFE1 F02C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7013  00001E  CFE2 F02D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7014  000022  CFD9 F02E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7015  000026  CFDA F02F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7016  00002A  CFF3 F030          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7017  00002E  CFF4 F031          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7018  000032  CFF6 F032          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7019  000036  CFF7 F033          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7020  00003A  CFF8 F034          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7021  00003E  CFF5 F035          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7022  000042  C04A  F036         	movff	btemp,??_INTERRUPT_InterruptManager+14
  7023  000046  C04B  F037         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  7024  00004A  C04C  F038         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  7025  00004E  C04D  F039         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  7026                           
  7027                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  7028  000052  ACF2               	btfss	intcon,6,c	;volatile
  7029  000054  D032               	goto	i2u211_49
  7030                           
  7031                           ;interrupt_manager.c: 61: {
  7032                           ;interrupt_manager.c: 62: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  7033  000056  B6A0               	btfsc	4000,3,c	;volatile
  7034  000058  A6A1               	btfss	4001,3,c	;volatile
  7035  00005A  D008               	goto	i2l567
  7036                           
  7037                           ;interrupt_manager.c: 63: {
  7038                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  7039  00005C  D801               	call	i2u202_48
  7040  00005E  D02D               	goto	i2u211_49
  7041  000060                     i2u202_48:
  7042  000060  0005               	push	
  7043  000062  6EFA               	movwf	pclath,c
  7044  000064  5013               	movf	_i2c1_driver_busCollisionISR,w,c
  7045  000066  6EFD               	movwf	tosl,c
  7046  000068  5014               	movf	_i2c1_driver_busCollisionISR+1,w,c
  7047  00006A  D022               	goto	L6
  7048  00006C                     i2l567:
  7049                           
  7050                           ;interrupt_manager.c: 66: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  7051  00006C  B69D               	btfsc	3997,3,c	;volatile
  7052  00006E  A69E               	btfss	3998,3,c	;volatile
  7053  000070  D008               	goto	i2l569
  7054                           
  7055                           ;interrupt_manager.c: 67: {
  7056                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  7057  000072  D801               	call	i2u205_48
  7058  000074  D022               	goto	i2u211_49
  7059  000076                     i2u205_48:
  7060  000076  0005               	push	
  7061  000078  6EFA               	movwf	pclath,c
  7062  00007A  5011               	movf	_i2c1_driver_i2cISR,w,c
  7063  00007C  6EFD               	movwf	tosl,c
  7064  00007E  5012               	movf	_i2c1_driver_i2cISR+1,w,c
  7065  000080  D017               	goto	L6
  7066  000082                     i2l569:
  7067                           
  7068                           ;interrupt_manager.c: 70: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7069  000082  B89D               	btfsc	3997,4,c	;volatile
  7070  000084  A89E               	btfss	3998,4,c	;volatile
  7071  000086  D009               	goto	i2l571
  7072                           
  7073                           ;interrupt_manager.c: 71: {
  7074                           ;interrupt_manager.c: 72: EUSART1_TxDefaultInterruptHandler();
  7075  000088  D801               	call	i2u208_48
  7076  00008A  D017               	goto	i2u211_49
  7077  00008C                     i2u208_48:
  7078  00008C  0005               	push	
  7079  00008E  0100               	movlb	0	; () banked
  7080  000090  6EFA               	movwf	pclath,c
  7081  000092  51E5               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
  7082  000094  6EFD               	movwf	tosl,c
  7083  000096  51E6               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
  7084  000098  D00B               	goto	L6
  7085  00009A                     i2l571:
  7086                           
  7087                           ;interrupt_manager.c: 74: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7088  00009A  BA9D               	btfsc	3997,5,c	;volatile
  7089  00009C  AA9E               	btfss	3998,5,c	;volatile
  7090  00009E  D00D               	goto	i2u211_49
  7091                           
  7092                           ;interrupt_manager.c: 75: {
  7093                           ;interrupt_manager.c: 76: EUSART1_RxDefaultInterruptHandler();
  7094  0000A0  D801               	call	i2u211_48
  7095  0000A2  D00B               	goto	i2u211_49
  7096  0000A4                     i2u211_48:
  7097  0000A4  0005               	push	
  7098  0000A6  0100               	movlb	0	; () banked
  7099  0000A8  6EFA               	movwf	pclath,c
  7100  0000AA  51E3               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
  7101  0000AC  6EFD               	movwf	tosl,c
  7102  0000AE  51E4               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
  7103  0000B0                     L6:
  7104  0000B0  6EFE               	movwf	tosh,c
  7105  0000B2  50F8               	movf	tblptru,w,c
  7106  0000B4  6EFF               	movwf	tosu,c
  7107  0000B6  50FA               	movf	pclath,w,c
  7108  0000B8  0012               	return		;indir
  7109  0000BA                     i2u211_49:
  7110                           
  7111                           ;interrupt_manager.c: 83: else
  7112                           ;interrupt_manager.c: 84: {
  7113                           
  7114                           ;interrupt_manager.c: 81: }
  7115                           ;interrupt_manager.c: 82: }
  7116                           
  7117                           ;interrupt_manager.c: 78: else
  7118                           ;interrupt_manager.c: 79: {
  7119                           
  7120                           ;interrupt_manager.c: 77: }
  7121  0000BA  C039  F04D         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  7122  0000BE  C038  F04C         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  7123  0000C2  C037  F04B         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  7124  0000C6  C036  F04A         	movff	??_INTERRUPT_InterruptManager+14,btemp
  7125  0000CA  C035  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7126  0000CE  C034  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7127  0000D2  C033  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7128  0000D6  C032  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7129  0000DA  C031  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7130  0000DE  C030  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7131  0000E2  C02F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7132  0000E6  C02E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7133  0000EA  C02D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7134  0000EE  C02C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7135  0000F2  C02B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7136  0000F6  C02A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7137  0000FA  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7138  0000FE  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7139  000102  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7140  000104  0011               	retfie		f
  7141  000106                     __end_of_INTERRUPT_InterruptManager:
  7142                           	opt stack 0
  7143                           tosu	equ	0xFFF
  7144                           tosh	equ	0xFFE
  7145                           tosl	equ	0xFFD
  7146                           pclatu	equ	0xFFB
  7147                           pclath	equ	0xFFA
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           prodh	equ	0xFF4
  7153                           prodl	equ	0xFF3
  7154                           intcon	equ	0xFF2
  7155                           intcon2	equ	0xFF1
  7156                           postinc0	equ	0xFEE
  7157                           plusw0	equ	0xFEB
  7158                           fsr0h	equ	0xFEA
  7159                           fsr0l	equ	0xFE9
  7160                           wreg	equ	0xFE8
  7161                           postdec1	equ	0xFE5
  7162                           plusw1	equ	0xFE3
  7163                           fsr1h	equ	0xFE2
  7164                           fsr1l	equ	0xFE1
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           plusw2	equ	0xFDB
  7169                           fsr2h	equ	0xFDA
  7170                           fsr2l	equ	0xFD9
  7171                           status	equ	0xFD8
  7172                           
  7173 ;; *************** function i2_i2c_ISR *****************
  7174 ;; Defined at:
  7175 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;		None
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;		None
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      void 
  7182 ;; Registers used:
  7183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7189 ;;      Params:         0       0       0       0       0       0       0
  7190 ;;      Locals:         0       0       0       0       0       0       0
  7191 ;;      Temps:          0       0       0       0       0       0       0
  7192 ;;      Totals:         0       0       0       0       0       0       0
  7193 ;;Total ram usage:        0 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:    3
  7196 ;; This function calls:
  7197 ;;		i2_do_I2C_DO_ACK
  7198 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7199 ;;		i2_do_I2C_DO_NACK_RESTART
  7200 ;;		i2_do_I2C_DO_NACK_STOP
  7201 ;;		i2_do_I2C_IDLE
  7202 ;;		i2_do_I2C_RCEN
  7203 ;;		i2_do_I2C_RESET
  7204 ;;		i2_do_I2C_RX
  7205 ;;		i2_do_I2C_SEND_ADR_READ
  7206 ;;		i2_do_I2C_SEND_ADR_WRITE
  7207 ;;		i2_do_I2C_SEND_INITIAL_READ
  7208 ;;		i2_do_I2C_SEND_RESTART
  7209 ;;		i2_do_I2C_SEND_RESTART_READ
  7210 ;;		i2_do_I2C_SEND_RESTART_WRITE
  7211 ;;		i2_do_I2C_SEND_STOP
  7212 ;;		i2_do_I2C_TX
  7213 ;;		i2_do_I2C_TX_EMPTY
  7214 ;;		i2_do_I2C_TX_REGISTER
  7215 ;;		i2_i2c1_driver_isNACK
  7216 ;;		i2_mssp1_clearIRQ
  7217 ;; This function is called by:
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text65
  7222  000E64                     __ptext65:
  7223                           	opt stack 0
  7224  000E64                     i2_i2c_ISR:
  7225                           	opt stack 17
  7226                           
  7227                           ;i2c_master.c: 486: mssp1_clearIRQ();
  7228                           
  7229                           ;incstack = 0
  7230  000E64  ECDF  F009         	call	i2_mssp1_clearIRQ	;wreg free
  7231                           
  7232                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  7233  000E68  0100               	movlb	0	; () banked
  7234  000E6A  A79A               	btfss	_i2c_status& (0+255),3,b
  7235  000E6C  D007               	goto	i2l209
  7236                           
  7237                           ; BSR set to: 0
  7238  000E6E  ECC0  F008         	call	i2_i2c1_driver_isNACK	;wreg free
  7239  000E72  A0D8               	btfss	status,0,c
  7240  000E74  D003               	goto	i2l209
  7241                           
  7242                           ;i2c_master.c: 493: {
  7243                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  7244  000E76  0E0F               	movlw	15
  7245  000E78  0100               	movlb	0	; () banked
  7246  000E7A  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  7247  000E7C                     i2l209:
  7248                           
  7249                           ;i2c_master.c: 495: }
  7250                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  7251                           
  7252                           ; BSR set to: 0
  7253  000E7C  0100               	movlb	0	; () banked
  7254  000E7E  51A4               	movf	(_i2c_status+10)& (0+255),w,b
  7255  000E80  0D02               	mullw	2
  7256  000E82  0EBF               	movlw	low _fsmStateTable
  7257  000E84  24F3               	addwf	prodl,w,c
  7258  000E86  6ED9               	movwf	fsr2l,c
  7259  000E88  0E00               	movlw	high _fsmStateTable
  7260  000E8A  20F4               	addwfc	prodh,w,c
  7261  000E8C  6EDA               	movwf	fsr2h,c
  7262  000E8E  D801               	call	i2u197_48
  7263  000E90  D00A               	goto	i2u197_49
  7264  000E92                     i2u197_48:
  7265  000E92  0005               	push	
  7266  000E94  6EFA               	movwf	pclath,c
  7267  000E96  50DE               	movf	postinc2,w,c
  7268  000E98  6EFD               	movwf	tosl,c
  7269  000E9A  50DE               	movf	postinc2,w,c
  7270  000E9C  6EFE               	movwf	tosh,c
  7271  000E9E  50F8               	movf	tblptru,w,c
  7272  000EA0  6EFF               	movwf	tosu,c
  7273  000EA2  50FA               	movf	pclath,w,c
  7274  000EA4  0012               	return		;indir
  7275  000EA6                     i2u197_49:
  7276  000EA6  0100               	movlb	0	; () banked
  7277  000EA8  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  7278                           
  7279                           ; BSR set to: 0
  7280  000EAA  0012               	return		;funcret
  7281  000EAC                     __end_ofi2_i2c_ISR:
  7282                           	opt stack 0
  7283                           tosu	equ	0xFFF
  7284                           tosh	equ	0xFFE
  7285                           tosl	equ	0xFFD
  7286                           pclatu	equ	0xFFB
  7287                           pclath	equ	0xFFA
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           intcon2	equ	0xFF1
  7296                           postinc0	equ	0xFEE
  7297                           plusw0	equ	0xFEB
  7298                           fsr0h	equ	0xFEA
  7299                           fsr0l	equ	0xFE9
  7300                           wreg	equ	0xFE8
  7301                           postdec1	equ	0xFE5
  7302                           plusw1	equ	0xFE3
  7303                           fsr1h	equ	0xFE2
  7304                           fsr1l	equ	0xFE1
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           plusw2	equ	0xFDB
  7309                           fsr2h	equ	0xFDA
  7310                           fsr2l	equ	0xFD9
  7311                           status	equ	0xFD8
  7312                           
  7313 ;; *************** function i2_mssp1_clearIRQ *****************
  7314 ;; Defined at:
  7315 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;		None
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;		None
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      void 
  7322 ;; Registers used:
  7323 ;;		None
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7329 ;;      Params:         0       0       0       0       0       0       0
  7330 ;;      Locals:         0       0       0       0       0       0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0
  7332 ;;      Totals:         0       0       0       0       0       0       0
  7333 ;;Total ram usage:        0 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; This function calls:
  7336 ;;		Nothing
  7337 ;; This function is called by:
  7338 ;;		i2_i2c_ISR
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text66
  7343  0013BE                     __ptext66:
  7344                           	opt stack 0
  7345  0013BE                     i2_mssp1_clearIRQ:
  7346                           	opt stack 19
  7347                           
  7348                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;incstack = 0
  7352  0013BE  969E               	bcf	3998,3,c	;volatile
  7353  0013C0  0012               	return		;funcret
  7354  0013C2                     __end_ofi2_mssp1_clearIRQ:
  7355                           	opt stack 0
  7356                           tosu	equ	0xFFF
  7357                           tosh	equ	0xFFE
  7358                           tosl	equ	0xFFD
  7359                           pclatu	equ	0xFFB
  7360                           pclath	equ	0xFFA
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           intcon	equ	0xFF2
  7368                           intcon2	equ	0xFF1
  7369                           postinc0	equ	0xFEE
  7370                           plusw0	equ	0xFEB
  7371                           fsr0h	equ	0xFEA
  7372                           fsr0l	equ	0xFE9
  7373                           wreg	equ	0xFE8
  7374                           postdec1	equ	0xFE5
  7375                           plusw1	equ	0xFE3
  7376                           fsr1h	equ	0xFE2
  7377                           fsr1l	equ	0xFE1
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           plusw2	equ	0xFDB
  7382                           fsr2h	equ	0xFDA
  7383                           fsr2l	equ	0xFD9
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function i2_do_I2C_TX_EMPTY *****************
  7387 ;; Defined at:
  7388 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;		None
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;		None
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  1    wreg      enum E7019
  7395 ;; Registers used:
  7396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7402 ;;      Params:         0       0       0       0       0       0       0
  7403 ;;      Locals:         0       0       0       0       0       0       0
  7404 ;;      Temps:          0       0       0       0       0       0       0
  7405 ;;      Totals:         0       0       0       0       0       0       0
  7406 ;;Total ram usage:        0 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    2
  7409 ;; This function calls:
  7410 ;;		i2_do_I2C_SEND_RESTART
  7411 ;;		i2_do_I2C_SEND_STOP
  7412 ;;		i2_mssp1_setIRQ
  7413 ;;		i2_returnReset
  7414 ;;		i2_returnStop
  7415 ;; This function is called by:
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text67
  7420  000C8A                     __ptext67:
  7421                           	opt stack 0
  7422  000C8A                     i2_do_I2C_TX_EMPTY:
  7423                           	opt stack 17
  7424                           
  7425                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  7426                           
  7427                           ;incstack = 0
  7428  000C8A  0100               	movlb	0	; () banked
  7429  000C8C  859A               	bsf	_i2c_status& (0+255),2,b
  7430                           
  7431                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7432  000C8E  D00A               	goto	i2l197
  7433  000C90                     
  7434                           ;i2c_master.c: 448: case i2c_restart_write:
  7435                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  7436                           
  7437                           ; BSR set to: 0
  7438                           
  7439                           ; BSR set to: 0
  7440  000C90  ECAE  F009         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7441  000C94  0012               	return	
  7442  000C96                     
  7443                           ;i2c_master.c: 451: mssp1_setIRQ();
  7444  000C96  ECE1  F009         	call	i2_mssp1_setIRQ	;wreg free
  7445                           
  7446                           ;i2c_master.c: 452: return I2C_TX;
  7447  000C9A  0E03               	movlw	3
  7448  000C9C  0012               	return	
  7449  000C9E                     
  7450                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  7451                           
  7452                           ;i2c_master.c: 454: case i2c_stop:
  7453  000C9E  ECAA  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
  7454                           
  7455                           ;i2c_master.c: 456: }
  7456  000CA2  0012               	return	
  7457  000CA4                     i2l197:
  7458  000CA4  C0B2  F026         	movff	_i2c_status+24,i2returnReset@p
  7459  000CA8  C0B3  F027         	movff	_i2c_status+25,i2returnReset@p+1
  7460  000CAC  EE20  F0A6         	lfsr	2,_i2c_status+12
  7461  000CB0  D801               	call	i2u181_48
  7462  000CB2  D00A               	goto	i2u181_49
  7463  000CB4                     i2u181_48:
  7464  000CB4  0005               	push	
  7465  000CB6  6EFA               	movwf	pclath,c
  7466  000CB8  50DE               	movf	postinc2,w,c
  7467  000CBA  6EFD               	movwf	tosl,c
  7468  000CBC  50DE               	movf	postinc2,w,c
  7469  000CBE  6EFE               	movwf	tosh,c
  7470  000CC0  50F8               	movf	tblptru,w,c
  7471  000CC2  6EFF               	movwf	tosu,c
  7472  000CC4  50FA               	movf	pclath,w,c
  7473  000CC6  0012               	return		;indir
  7474  000CC8                     i2u181_49:
  7475                           
  7476                           ; Switch size 1, requested type "space"
  7477                           ; Number of cases is 4, Range of values is 1 to 4
  7478                           ; switch strategies available:
  7479                           ; Name         Instructions Cycles
  7480                           ; simple_byte           13     7 (average)
  7481                           ;	Chosen strategy is simple_byte
  7482  000CC8  0A01               	xorlw	1	; case 1
  7483  000CCA  B4D8               	btfsc	status,2,c
  7484  000CCC  D7E8               	goto	i2l202
  7485  000CCE  0A03               	xorlw	3	; case 2
  7486  000CD0  B4D8               	btfsc	status,2,c
  7487  000CD2  D7DE               	goto	i2l198
  7488  000CD4  0A01               	xorlw	1	; case 3
  7489  000CD6  B4D8               	btfsc	status,2,c
  7490  000CD8  D7DB               	goto	i2l198
  7491  000CDA  0A07               	xorlw	7	; case 4
  7492  000CDC  B4D8               	btfsc	status,2,c
  7493  000CDE  D7DB               	goto	i2l201
  7494  000CE0  D7DE               	goto	i2l202
  7495  000CE2                     __end_ofi2_do_I2C_TX_EMPTY:
  7496                           	opt stack 0
  7497                           tosu	equ	0xFFF
  7498                           tosh	equ	0xFFE
  7499                           tosl	equ	0xFFD
  7500                           pclatu	equ	0xFFB
  7501                           pclath	equ	0xFFA
  7502                           tblptru	equ	0xFF8
  7503                           tblptrh	equ	0xFF7
  7504                           tblptrl	equ	0xFF6
  7505                           tablat	equ	0xFF5
  7506                           prodh	equ	0xFF4
  7507                           prodl	equ	0xFF3
  7508                           intcon	equ	0xFF2
  7509                           intcon2	equ	0xFF1
  7510                           postinc0	equ	0xFEE
  7511                           plusw0	equ	0xFEB
  7512                           fsr0h	equ	0xFEA
  7513                           fsr0l	equ	0xFE9
  7514                           wreg	equ	0xFE8
  7515                           postdec1	equ	0xFE5
  7516                           plusw1	equ	0xFE3
  7517                           fsr1h	equ	0xFE2
  7518                           fsr1l	equ	0xFE1
  7519                           indf2	equ	0xFDF
  7520                           postinc2	equ	0xFDE
  7521                           postdec2	equ	0xFDD
  7522                           plusw2	equ	0xFDB
  7523                           fsr2h	equ	0xFDA
  7524                           fsr2l	equ	0xFD9
  7525                           status	equ	0xFD8
  7526                           
  7527 ;; *************** function i2_do_I2C_RX *****************
  7528 ;; Defined at:
  7529 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;		None
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;		None
  7534 ;; Return value:  Size  Location     Type
  7535 ;;                  1    wreg      enum E7019
  7536 ;; Registers used:
  7537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7538 ;; Tracked objects:
  7539 ;;		On entry : 0/0
  7540 ;;		On exit  : 0/0
  7541 ;;		Unchanged: 0/0
  7542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7543 ;;      Params:         0       0       0       0       0       0       0
  7544 ;;      Locals:         0       0       0       0       0       0       0
  7545 ;;      Temps:          0       0       0       0       0       0       0
  7546 ;;      Totals:         0       0       0       0       0       0       0
  7547 ;;Total ram usage:        0 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    2
  7550 ;; This function calls:
  7551 ;;		i2_do_I2C_DO_NACK_RESTART
  7552 ;;		i2_do_I2C_DO_NACK_STOP
  7553 ;;		i2_i2c1_driver_getRXData
  7554 ;;		i2_i2c1_driver_sendACK
  7555 ;;		i2_returnReset
  7556 ;;		i2_returnStop
  7557 ;; This function is called by:
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           	psect	text68
  7562  000A24                     __ptext68:
  7563                           	opt stack 0
  7564  000A24                     i2_do_I2C_RX:
  7565                           	opt stack 17
  7566                           
  7567                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  7568                           
  7569                           ;incstack = 0
  7570  000A24  ECE3  F009         	call	i2_i2c1_driver_getRXData	;wreg free
  7571  000A28  C09C  FFD9         	movff	_i2c_status+2,fsr2l
  7572  000A2C  C09D  FFDA         	movff	_i2c_status+3,fsr2h
  7573  000A30  6EDF               	movwf	indf2,c
  7574  000A32  0100               	movlb	0	; () banked
  7575  000A34  4B9C               	infsnz	(_i2c_status+2)& (0+255),f,b
  7576  000A36  2B9D               	incf	(_i2c_status+3)& (0+255),f,b
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  7580  000A38  079E               	decf	(_i2c_status+4)& (0+255),f,b
  7581  000A3A  A0D8               	btfss	status,0,c
  7582  000A3C  079F               	decf	(_i2c_status+5)& (0+255),f,b
  7583  000A3E  519E               	movf	(_i2c_status+4)& (0+255),w,b
  7584  000A40  119F               	iorwf	(_i2c_status+5)& (0+255),w,b
  7585  000A42  B4D8               	btfsc	status,2,c
  7586  000A44  D004               	goto	i2l185
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;i2c_master.c: 421: {
  7590                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  7591  000A46  ECC7  F009         	call	i2_i2c1_driver_sendACK	;wreg free
  7592                           
  7593                           ;i2c_master.c: 423: return I2C_RCEN;
  7594  000A4A  0E05               	movlw	5
  7595                           
  7596                           ;i2c_master.c: 424: }
  7597  000A4C  0012               	return	
  7598  000A4E                     i2l185:
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;i2c_master.c: 425: else
  7602                           ;i2c_master.c: 426: {
  7603                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  7604  000A4E  859A               	bsf	_i2c_status& (0+255),2,b
  7605                           
  7606                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7607  000A50  D006               	goto	i2l188
  7608  000A52                     
  7609                           ;i2c_master.c: 431: case i2c_restart_read:
  7610                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  7611                           
  7612                           ; BSR set to: 0
  7613                           
  7614                           ; BSR set to: 0
  7615  000A52  EC9E  F009         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  7616  000A56  0012               	return	
  7617  000A58                     
  7618                           ;i2c_master.c: 435: case i2c_stop:
  7619                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  7620                           
  7621                           ;i2c_master.c: 434: case i2c_continue:
  7622  000A58  ECA2  F009         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  7623                           
  7624                           ;i2c_master.c: 437: }
  7625  000A5C  0012               	return	
  7626  000A5E                     i2l188:
  7627  000A5E  C0B2  F026         	movff	_i2c_status+24,i2returnReset@p
  7628  000A62  C0B3  F027         	movff	_i2c_status+25,i2returnReset@p+1
  7629  000A66  EE20  F0A6         	lfsr	2,_i2c_status+12
  7630  000A6A  D801               	call	i2u180_48
  7631  000A6C  D00A               	goto	i2u180_49
  7632  000A6E                     i2u180_48:
  7633  000A6E  0005               	push	
  7634  000A70  6EFA               	movwf	pclath,c
  7635  000A72  50DE               	movf	postinc2,w,c
  7636  000A74  6EFD               	movwf	tosl,c
  7637  000A76  50DE               	movf	postinc2,w,c
  7638  000A78  6EFE               	movwf	tosh,c
  7639  000A7A  50F8               	movf	tblptru,w,c
  7640  000A7C  6EFF               	movwf	tosu,c
  7641  000A7E  50FA               	movf	pclath,w,c
  7642  000A80  0012               	return		;indir
  7643  000A82                     i2u180_49:
  7644                           
  7645                           ; Switch size 1, requested type "space"
  7646                           ; Number of cases is 4, Range of values is 1 to 4
  7647                           ; switch strategies available:
  7648                           ; Name         Instructions Cycles
  7649                           ; simple_byte           13     7 (average)
  7650                           ;	Chosen strategy is simple_byte
  7651  000A82  0A01               	xorlw	1	; case 1
  7652  000A84  B4D8               	btfsc	status,2,c
  7653  000A86  D7E8               	goto	i2l191
  7654  000A88  0A03               	xorlw	3	; case 2
  7655  000A8A  B4D8               	btfsc	status,2,c
  7656  000A8C  D7E2               	goto	i2l189
  7657  000A8E  0A01               	xorlw	1	; case 3
  7658  000A90  B4D8               	btfsc	status,2,c
  7659  000A92  D7DF               	goto	i2l189
  7660  000A94  0A07               	xorlw	7	; case 4
  7661  000A96  D7E0               	goto	i2l191
  7662  000A98                     __end_ofi2_do_I2C_RX:
  7663                           	opt stack 0
  7664                           tosu	equ	0xFFF
  7665                           tosh	equ	0xFFE
  7666                           tosl	equ	0xFFD
  7667                           pclatu	equ	0xFFB
  7668                           pclath	equ	0xFFA
  7669                           tblptru	equ	0xFF8
  7670                           tblptrh	equ	0xFF7
  7671                           tblptrl	equ	0xFF6
  7672                           tablat	equ	0xFF5
  7673                           prodh	equ	0xFF4
  7674                           prodl	equ	0xFF3
  7675                           intcon	equ	0xFF2
  7676                           intcon2	equ	0xFF1
  7677                           postinc0	equ	0xFEE
  7678                           plusw0	equ	0xFEB
  7679                           fsr0h	equ	0xFEA
  7680                           fsr0l	equ	0xFE9
  7681                           wreg	equ	0xFE8
  7682                           postdec1	equ	0xFE5
  7683                           plusw1	equ	0xFE3
  7684                           fsr1h	equ	0xFE2
  7685                           fsr1l	equ	0xFE1
  7686                           indf2	equ	0xFDF
  7687                           postinc2	equ	0xFDE
  7688                           postdec2	equ	0xFDD
  7689                           plusw2	equ	0xFDB
  7690                           fsr2h	equ	0xFDA
  7691                           fsr2l	equ	0xFD9
  7692                           status	equ	0xFD8
  7693                           
  7694 ;; *************** function i2_do_I2C_TX *****************
  7695 ;; Defined at:
  7696 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;		None
  7699 ;; Auto vars:     Size  Location     Type
  7700 ;;		None
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  1    wreg      enum E7019
  7703 ;; Registers used:
  7704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7710 ;;      Params:         0       0       0       0       0       0       0
  7711 ;;      Locals:         2       0       0       0       0       0       0
  7712 ;;      Temps:          0       0       0       0       0       0       0
  7713 ;;      Totals:         2       0       0       0       0       0       0
  7714 ;;Total ram usage:        2 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    2
  7717 ;; This function calls:
  7718 ;;		i2_do_I2C_SEND_RESTART_READ
  7719 ;;		i2_do_I2C_SEND_RESTART_WRITE
  7720 ;;		i2_do_I2C_SEND_STOP
  7721 ;;		i2_i2c1_driver_TXData
  7722 ;;		i2_i2c1_driver_isNACK
  7723 ;;		i2_returnReset
  7724 ;;		i2_returnStop
  7725 ;; This function is called by:
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           	psect	text69
  7730  00091A                     __ptext69:
  7731                           	opt stack 0
  7732  00091A                     i2_do_I2C_TX:
  7733                           	opt stack 17
  7734                           
  7735                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  7736                           
  7737                           ;incstack = 0
  7738  00091A  ECC0  F008         	call	i2_i2c1_driver_isNACK	;wreg free
  7739  00091E  B0D8               	btfsc	status,0,c
  7740  000920  D00A               	goto	i2l170
  7741  000922  D026               	goto	i2l169
  7742  000924                     
  7743                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  7744  000924  ECB6  F009         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  7745  000928  0012               	return	
  7746  00092A                     
  7747                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  7748  00092A  ECB2  F009         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  7749  00092E  0012               	return	
  7750  000930                     
  7751                           ;i2c_master.c: 405: case i2c_stop:
  7752                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  7753                           
  7754                           ;i2c_master.c: 404: case i2c_continue:
  7755  000930  ECAA  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
  7756                           
  7757                           ;i2c_master.c: 407: }
  7758  000934  0012               	return	
  7759  000936                     i2l170:
  7760  000936  C0B8  F026         	movff	_i2c_status+30,i2returnReset@p
  7761  00093A  C0B9  F027         	movff	_i2c_status+31,i2returnReset@p+1
  7762  00093E  EE20  F0AC         	lfsr	2,_i2c_status+18
  7763  000942  D801               	call	i2u177_48
  7764  000944  D00A               	goto	i2u177_49
  7765  000946                     i2u177_48:
  7766  000946  0005               	push	
  7767  000948  6EFA               	movwf	pclath,c
  7768  00094A  50DE               	movf	postinc2,w,c
  7769  00094C  6EFD               	movwf	tosl,c
  7770  00094E  50DE               	movf	postinc2,w,c
  7771  000950  6EFE               	movwf	tosh,c
  7772  000952  50F8               	movf	tblptru,w,c
  7773  000954  6EFF               	movwf	tosu,c
  7774  000956  50FA               	movf	pclath,w,c
  7775  000958  0012               	return		;indir
  7776  00095A                     i2u177_49:
  7777                           
  7778                           ; Switch size 1, requested type "space"
  7779                           ; Number of cases is 4, Range of values is 1 to 4
  7780                           ; switch strategies available:
  7781                           ; Name         Instructions Cycles
  7782                           ; simple_byte           13     7 (average)
  7783                           ;	Chosen strategy is simple_byte
  7784  00095A  0A01               	xorlw	1	; case 1
  7785  00095C  B4D8               	btfsc	status,2,c
  7786  00095E  D7E8               	goto	i2l174
  7787  000960  0A03               	xorlw	3	; case 2
  7788  000962  B4D8               	btfsc	status,2,c
  7789  000964  D7DF               	goto	i2l171
  7790  000966  0A01               	xorlw	1	; case 3
  7791  000968  B4D8               	btfsc	status,2,c
  7792  00096A  D7DF               	goto	i2l173
  7793  00096C  0A07               	xorlw	7	; case 4
  7794  00096E  D7E0               	goto	i2l174
  7795  000970                     i2l169:
  7796                           
  7797                           ;i2c_master.c: 409: else
  7798                           ;i2c_master.c: 410: {
  7799                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  7800  000970  0100               	movlb	0	; () banked
  7801  000972  979A               	bcf	_i2c_status& (0+255),3,b
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  7805  000974  C09C  FFD9         	movff	_i2c_status+2,fsr2l
  7806  000978  C09D  FFDA         	movff	_i2c_status+3,fsr2h
  7807  00097C  4B9C               	infsnz	(_i2c_status+2)& (0+255),f,b
  7808  00097E  2B9D               	incf	(_i2c_status+3)& (0+255),f,b
  7809  000980  50DF               	movf	indf2,w,c
  7810  000982  ECBA  F009         	call	i2_i2c1_driver_TXData
  7811                           
  7812                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7813  000986  0100               	movlb	0	; () banked
  7814  000988  079E               	decf	(_i2c_status+4)& (0+255),f,b
  7815  00098A  A0D8               	btfss	status,0,c
  7816  00098C  079F               	decf	(_i2c_status+5)& (0+255),f,b
  7817  00098E  519E               	movf	(_i2c_status+4)& (0+255),w,b
  7818  000990  119F               	iorwf	(_i2c_status+5)& (0+255),w,b
  7819  000992  A4D8               	btfss	status,2,c
  7820  000994  D004               	goto	i2l180
  7821                           
  7822                           ; BSR set to: 0
  7823  000996  0E00               	movlw	0
  7824  000998  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7825  00099A  0E06               	movlw	6
  7826  00099C  D003               	goto	L7
  7827  00099E                     i2l180:
  7828                           
  7829                           ; BSR set to: 0
  7830                           
  7831                           ; BSR set to: 0
  7832  00099E  0E00               	movlw	0
  7833  0009A0  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7834  0009A2  0E03               	movlw	3
  7835  0009A4                     L7:
  7836  0009A4  6E26               	movwf	i2_do_I2C_TX$315,c
  7837                           
  7838                           ; BSR set to: 0
  7839  0009A6  5026               	movf	i2_do_I2C_TX$315,w,c
  7840                           
  7841                           ; BSR set to: 0
  7842  0009A8  0012               	return	
  7843  0009AA                     __end_ofi2_do_I2C_TX:
  7844                           	opt stack 0
  7845                           tosu	equ	0xFFF
  7846                           tosh	equ	0xFFE
  7847                           tosl	equ	0xFFD
  7848                           pclatu	equ	0xFFB
  7849                           pclath	equ	0xFFA
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           intcon	equ	0xFF2
  7857                           intcon2	equ	0xFF1
  7858                           postinc0	equ	0xFEE
  7859                           plusw0	equ	0xFEB
  7860                           fsr0h	equ	0xFEA
  7861                           fsr0l	equ	0xFE9
  7862                           wreg	equ	0xFE8
  7863                           postdec1	equ	0xFE5
  7864                           plusw1	equ	0xFE3
  7865                           fsr1h	equ	0xFE2
  7866                           fsr1l	equ	0xFE1
  7867                           indf2	equ	0xFDF
  7868                           postinc2	equ	0xFDE
  7869                           postdec2	equ	0xFDD
  7870                           plusw2	equ	0xFDB
  7871                           fsr2h	equ	0xFDA
  7872                           fsr2l	equ	0xFD9
  7873                           status	equ	0xFD8
  7874                           
  7875 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  7876 ;; Defined at:
  7877 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;		None
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;		None
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      enum E7019
  7884 ;; Registers used:
  7885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7891 ;;      Params:         0       0       0       0       0       0       0
  7892 ;;      Locals:         0       0       0       0       0       0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0
  7894 ;;      Totals:         0       0       0       0       0       0       0
  7895 ;;Total ram usage:        0 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; Hardware stack levels required when called:    2
  7898 ;; This function calls:
  7899 ;;		i2_do_I2C_SEND_RESTART
  7900 ;;		i2_do_I2C_SEND_STOP
  7901 ;;		i2_returnReset
  7902 ;;		i2_returnStop
  7903 ;; This function is called by:
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           	psect	text70
  7908  000EAC                     __ptext70:
  7909                           	opt stack 0
  7910  000EAC                     i2_do_I2C_DO_ADDRESS_NACK:
  7911                           	opt stack 17
  7912                           
  7913                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  7914                           
  7915                           ;incstack = 0
  7916  000EAC  0100               	movlb	0	; () banked
  7917  000EAE  979A               	bcf	_i2c_status& (0+255),3,b
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  7921  000EB0  0E02               	movlw	2
  7922  000EB2  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  7923                           
  7924                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7925  000EB4  D006               	goto	i2l161
  7926  000EB6                     
  7927                           ;i2c_master.c: 386: case i2c_restart_write:
  7928                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  7929                           
  7930                           ; BSR set to: 0
  7931                           
  7932                           ; BSR set to: 0
  7933  000EB6  ECAE  F009         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7934  000EBA  0012               	return	
  7935  000EBC                     
  7936                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  7937  000EBC  ECAA  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
  7938                           
  7939                           ;i2c_master.c: 390: }
  7940  000EC0  0012               	return	
  7941  000EC2                     i2l161:
  7942  000EC2  C0B6  F026         	movff	_i2c_status+28,i2returnReset@p
  7943  000EC6  C0B7  F027         	movff	_i2c_status+29,i2returnReset@p+1
  7944  000ECA  EE20  F0AA         	lfsr	2,_i2c_status+16
  7945  000ECE  D801               	call	i2u175_48
  7946  000ED0  D00A               	goto	i2u175_49
  7947  000ED2                     i2u175_48:
  7948  000ED2  0005               	push	
  7949  000ED4  6EFA               	movwf	pclath,c
  7950  000ED6  50DE               	movf	postinc2,w,c
  7951  000ED8  6EFD               	movwf	tosl,c
  7952  000EDA  50DE               	movf	postinc2,w,c
  7953  000EDC  6EFE               	movwf	tosh,c
  7954  000EDE  50F8               	movf	tblptru,w,c
  7955  000EE0  6EFF               	movwf	tosu,c
  7956  000EE2  50FA               	movf	pclath,w,c
  7957  000EE4  0012               	return		;indir
  7958  000EE6                     i2u175_49:
  7959                           
  7960                           ; Switch size 1, requested type "space"
  7961                           ; Number of cases is 2, Range of values is 2 to 3
  7962                           ; switch strategies available:
  7963                           ; Name         Instructions Cycles
  7964                           ; simple_byte            7     4 (average)
  7965                           ;	Chosen strategy is simple_byte
  7966  000EE6  0A02               	xorlw	2	; case 2
  7967  000EE8  B4D8               	btfsc	status,2,c
  7968  000EEA  D7E5               	goto	i2l162
  7969  000EEC  0A01               	xorlw	1	; case 3
  7970  000EEE  B4D8               	btfsc	status,2,c
  7971  000EF0  D7E2               	goto	i2l162
  7972  000EF2  D7E4               	goto	i2l165
  7973  000EF4                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  7974                           	opt stack 0
  7975                           tosu	equ	0xFFF
  7976                           tosh	equ	0xFFE
  7977                           tosl	equ	0xFFD
  7978                           pclatu	equ	0xFFB
  7979                           pclath	equ	0xFFA
  7980                           tblptru	equ	0xFF8
  7981                           tblptrh	equ	0xFF7
  7982                           tblptrl	equ	0xFF6
  7983                           tablat	equ	0xFF5
  7984                           prodh	equ	0xFF4
  7985                           prodl	equ	0xFF3
  7986                           intcon	equ	0xFF2
  7987                           intcon2	equ	0xFF1
  7988                           postinc0	equ	0xFEE
  7989                           plusw0	equ	0xFEB
  7990                           fsr0h	equ	0xFEA
  7991                           fsr0l	equ	0xFE9
  7992                           wreg	equ	0xFE8
  7993                           postdec1	equ	0xFE5
  7994                           plusw1	equ	0xFE3
  7995                           fsr1h	equ	0xFE2
  7996                           fsr1l	equ	0xFE1
  7997                           indf2	equ	0xFDF
  7998                           postinc2	equ	0xFDE
  7999                           postdec2	equ	0xFDD
  8000                           plusw2	equ	0xFDB
  8001                           fsr2h	equ	0xFDA
  8002                           fsr2l	equ	0xFD9
  8003                           status	equ	0xFD8
  8004                           
  8005 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  8006 ;; Defined at:
  8007 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;		None
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;		None
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  1    wreg      enum E7019
  8014 ;; Registers used:
  8015 ;;		wreg, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8021 ;;      Params:         0       0       0       0       0       0       0
  8022 ;;      Locals:         0       0       0       0       0       0       0
  8023 ;;      Temps:          0       0       0       0       0       0       0
  8024 ;;      Totals:         0       0       0       0       0       0       0
  8025 ;;Total ram usage:        0 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    1
  8028 ;; This function calls:
  8029 ;;		i2_i2c1_driver_sendNACK
  8030 ;; This function is called by:
  8031 ;;		i2_do_I2C_RX
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           	psect	text71
  8036  00133C                     __ptext71:
  8037                           	opt stack 0
  8038  00133C                     i2_do_I2C_DO_NACK_RESTART:
  8039                           	opt stack 17
  8040                           
  8041                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  8042                           
  8043                           ;incstack = 0
  8044  00133C  ECC4  F009         	call	i2_i2c1_driver_sendNACK	;wreg free
  8045                           
  8046                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  8047  001340  0E09               	movlw	9
  8048  001342  0012               	return	
  8049  001344                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  8050                           	opt stack 0
  8051                           tosu	equ	0xFFF
  8052                           tosh	equ	0xFFE
  8053                           tosl	equ	0xFFD
  8054                           pclatu	equ	0xFFB
  8055                           pclath	equ	0xFFA
  8056                           tblptru	equ	0xFF8
  8057                           tblptrh	equ	0xFF7
  8058                           tblptrl	equ	0xFF6
  8059                           tablat	equ	0xFF5
  8060                           prodh	equ	0xFF4
  8061                           prodl	equ	0xFF3
  8062                           intcon	equ	0xFF2
  8063                           intcon2	equ	0xFF1
  8064                           postinc0	equ	0xFEE
  8065                           plusw0	equ	0xFEB
  8066                           fsr0h	equ	0xFEA
  8067                           fsr0l	equ	0xFE9
  8068                           wreg	equ	0xFE8
  8069                           postdec1	equ	0xFE5
  8070                           plusw1	equ	0xFE3
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           postdec2	equ	0xFDD
  8076                           plusw2	equ	0xFDB
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  8082 ;; Defined at:
  8083 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  1    wreg      enum E7019
  8090 ;; Registers used:
  8091 ;;		wreg, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8097 ;;      Params:         0       0       0       0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0       0       0
  8100 ;;      Totals:         0       0       0       0       0       0       0
  8101 ;;Total ram usage:        0 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    1
  8104 ;; This function calls:
  8105 ;;		i2_i2c1_driver_sendNACK
  8106 ;; This function is called by:
  8107 ;;		i2_do_I2C_RX
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           	psect	text72
  8112  001344                     __ptext72:
  8113                           	opt stack 0
  8114  001344                     i2_do_I2C_DO_NACK_STOP:
  8115                           	opt stack 17
  8116                           
  8117                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  8118                           
  8119                           ;incstack = 0
  8120  001344  ECC4  F009         	call	i2_i2c1_driver_sendNACK	;wreg free
  8121                           
  8122                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  8123  001348  0E0A               	movlw	10
  8124  00134A  0012               	return	
  8125  00134C                     __end_ofi2_do_I2C_DO_NACK_STOP:
  8126                           	opt stack 0
  8127                           tosu	equ	0xFFF
  8128                           tosh	equ	0xFFE
  8129                           tosl	equ	0xFFD
  8130                           pclatu	equ	0xFFB
  8131                           pclath	equ	0xFFA
  8132                           tblptru	equ	0xFF8
  8133                           tblptrh	equ	0xFF7
  8134                           tblptrl	equ	0xFF6
  8135                           tablat	equ	0xFF5
  8136                           prodh	equ	0xFF4
  8137                           prodl	equ	0xFF3
  8138                           intcon	equ	0xFF2
  8139                           intcon2	equ	0xFF1
  8140                           postinc0	equ	0xFEE
  8141                           plusw0	equ	0xFEB
  8142                           fsr0h	equ	0xFEA
  8143                           fsr0l	equ	0xFE9
  8144                           wreg	equ	0xFE8
  8145                           postdec1	equ	0xFE5
  8146                           plusw1	equ	0xFE3
  8147                           fsr1h	equ	0xFE2
  8148                           fsr1l	equ	0xFE1
  8149                           indf2	equ	0xFDF
  8150                           postinc2	equ	0xFDE
  8151                           postdec2	equ	0xFDD
  8152                           plusw2	equ	0xFDB
  8153                           fsr2h	equ	0xFDA
  8154                           fsr2l	equ	0xFD9
  8155                           status	equ	0xFD8
  8156                           
  8157 ;; *************** function i2_do_I2C_DO_ACK *****************
  8158 ;; Defined at:
  8159 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;		None
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;		None
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      enum E7019
  8166 ;; Registers used:
  8167 ;;		wreg, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8173 ;;      Params:         0       0       0       0       0       0       0
  8174 ;;      Locals:         0       0       0       0       0       0       0
  8175 ;;      Temps:          0       0       0       0       0       0       0
  8176 ;;      Totals:         0       0       0       0       0       0       0
  8177 ;;Total ram usage:        0 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    1
  8180 ;; This function calls:
  8181 ;;		i2_i2c1_driver_sendACK
  8182 ;; This function is called by:
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           	psect	text73
  8187  00134C                     __ptext73:
  8188                           	opt stack 0
  8189  00134C                     i2_do_I2C_DO_ACK:
  8190                           	opt stack 18
  8191                           
  8192                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  8193                           
  8194                           ;incstack = 0
  8195  00134C  ECC7  F009         	call	i2_i2c1_driver_sendACK	;wreg free
  8196                           
  8197                           ;i2c_master.c: 362: return I2C_RCEN;
  8198  001350  0E05               	movlw	5
  8199  001352  0012               	return	
  8200  001354                     __end_ofi2_do_I2C_DO_ACK:
  8201                           	opt stack 0
  8202                           tosu	equ	0xFFF
  8203                           tosh	equ	0xFFE
  8204                           tosl	equ	0xFFD
  8205                           pclatu	equ	0xFFB
  8206                           pclath	equ	0xFFA
  8207                           tblptru	equ	0xFF8
  8208                           tblptrh	equ	0xFF7
  8209                           tblptrl	equ	0xFF6
  8210                           tablat	equ	0xFF5
  8211                           prodh	equ	0xFF4
  8212                           prodl	equ	0xFF3
  8213                           intcon	equ	0xFF2
  8214                           intcon2	equ	0xFF1
  8215                           postinc0	equ	0xFEE
  8216                           plusw0	equ	0xFEB
  8217                           fsr0h	equ	0xFEA
  8218                           fsr0l	equ	0xFE9
  8219                           wreg	equ	0xFE8
  8220                           postdec1	equ	0xFE5
  8221                           plusw1	equ	0xFE3
  8222                           fsr1h	equ	0xFE2
  8223                           fsr1l	equ	0xFE1
  8224                           indf2	equ	0xFDF
  8225                           postinc2	equ	0xFDE
  8226                           postdec2	equ	0xFDD
  8227                           plusw2	equ	0xFDB
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function i2_do_I2C_RCEN *****************
  8233 ;; Defined at:
  8234 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;		None
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      enum E7019
  8241 ;; Registers used:
  8242 ;;		wreg, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8248 ;;      Params:         0       0       0       0       0       0       0
  8249 ;;      Locals:         0       0       0       0       0       0       0
  8250 ;;      Temps:          0       0       0       0       0       0       0
  8251 ;;      Totals:         0       0       0       0       0       0       0
  8252 ;;Total ram usage:        0 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    1
  8255 ;; This function calls:
  8256 ;;		i2_i2c1_driver_startRX
  8257 ;; This function is called by:
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           	psect	text74
  8262  0012CE                     __ptext74:
  8263                           	opt stack 0
  8264  0012CE                     i2_do_I2C_RCEN:
  8265                           	opt stack 18
  8266                           
  8267                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  8268                           
  8269                           ;incstack = 0
  8270  0012CE  0100               	movlb	0	; () banked
  8271  0012D0  979A               	bcf	_i2c_status& (0+255),3,b
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;i2c_master.c: 355: i2c1_driver_startRX();
  8275  0012D2  ECE5  F009         	call	i2_i2c1_driver_startRX	;wreg free
  8276                           
  8277                           ;i2c_master.c: 356: return I2C_RX;
  8278  0012D6  0E04               	movlw	4
  8279  0012D8  0012               	return	
  8280  0012DA                     __end_ofi2_do_I2C_RCEN:
  8281                           	opt stack 0
  8282                           tosu	equ	0xFFF
  8283                           tosh	equ	0xFFE
  8284                           tosl	equ	0xFFD
  8285                           pclatu	equ	0xFFB
  8286                           pclath	equ	0xFFA
  8287                           tblptru	equ	0xFF8
  8288                           tblptrh	equ	0xFF7
  8289                           tblptrl	equ	0xFF6
  8290                           tablat	equ	0xFF5
  8291                           prodh	equ	0xFF4
  8292                           prodl	equ	0xFF3
  8293                           intcon	equ	0xFF2
  8294                           intcon2	equ	0xFF1
  8295                           postinc0	equ	0xFEE
  8296                           plusw0	equ	0xFEB
  8297                           fsr0h	equ	0xFEA
  8298                           fsr0l	equ	0xFE9
  8299                           wreg	equ	0xFE8
  8300                           postdec1	equ	0xFE5
  8301                           plusw1	equ	0xFE3
  8302                           fsr1h	equ	0xFE2
  8303                           fsr1l	equ	0xFE1
  8304                           indf2	equ	0xFDF
  8305                           postinc2	equ	0xFDE
  8306                           postdec2	equ	0xFDD
  8307                           plusw2	equ	0xFDB
  8308                           fsr2h	equ	0xFDA
  8309                           fsr2l	equ	0xFD9
  8310                           status	equ	0xFD8
  8311                           
  8312 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  8313 ;; Defined at:
  8314 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;		None
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;		None
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  1    wreg      enum E7019
  8321 ;; Registers used:
  8322 ;;		wreg, status,2, status,0, cstack
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8328 ;;      Params:         0       0       0       0       0       0       0
  8329 ;;      Locals:         0       0       0       0       0       0       0
  8330 ;;      Temps:          0       0       0       0       0       0       0
  8331 ;;      Totals:         0       0       0       0       0       0       0
  8332 ;;Total ram usage:        0 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:    1
  8335 ;; This function calls:
  8336 ;;		i2_i2c1_driver_TXData
  8337 ;; This function is called by:
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	text75
  8342  001202                     __ptext75:
  8343                           	opt stack 0
  8344  001202                     i2_do_I2C_SEND_ADR_WRITE:
  8345                           	opt stack 18
  8346                           
  8347                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  8348                           
  8349                           ;incstack = 0
  8350  001202  0100               	movlb	0	; () banked
  8351  001204  879A               	bsf	_i2c_status& (0+255),3,b
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  8355  001206  519B               	movf	(_i2c_status+1)& (0+255),w,b
  8356  001208  259B               	addwf	(_i2c_status+1)& (0+255),w,b
  8357  00120A  ECBA  F009         	call	i2_i2c1_driver_TXData
  8358                           
  8359                           ;i2c_master.c: 349: return I2C_TX;
  8360  00120E  0E03               	movlw	3
  8361  001210  0012               	return	
  8362  001212                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  8363                           	opt stack 0
  8364                           tosu	equ	0xFFF
  8365                           tosh	equ	0xFFE
  8366                           tosl	equ	0xFFD
  8367                           pclatu	equ	0xFFB
  8368                           pclath	equ	0xFFA
  8369                           tblptru	equ	0xFF8
  8370                           tblptrh	equ	0xFF7
  8371                           tblptrl	equ	0xFF6
  8372                           tablat	equ	0xFF5
  8373                           prodh	equ	0xFF4
  8374                           prodl	equ	0xFF3
  8375                           intcon	equ	0xFF2
  8376                           intcon2	equ	0xFF1
  8377                           postinc0	equ	0xFEE
  8378                           plusw0	equ	0xFEB
  8379                           fsr0h	equ	0xFEA
  8380                           fsr0l	equ	0xFE9
  8381                           wreg	equ	0xFE8
  8382                           postdec1	equ	0xFE5
  8383                           plusw1	equ	0xFE3
  8384                           fsr1h	equ	0xFE2
  8385                           fsr1l	equ	0xFE1
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           plusw2	equ	0xFDB
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function i2_do_I2C_SEND_INITIAL_READ *****************
  8395 ;; Defined at:
  8396 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;		None
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      enum E7019
  8403 ;; Registers used:
  8404 ;;		wreg, status,2, status,0, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8410 ;;      Params:         0       0       0       0       0       0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0
  8412 ;;      Temps:          0       0       0       0       0       0       0
  8413 ;;      Totals:         0       0       0       0       0       0       0
  8414 ;;Total ram usage:        0 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    1
  8417 ;; This function calls:
  8418 ;;		i2_i2c1_driver_TXData
  8419 ;; This function is called by:
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           	psect	text76
  8424  001212                     __ptext76:
  8425                           	opt stack 0
  8426  001212                     i2_do_I2C_SEND_INITIAL_READ:
  8427                           	opt stack 18
  8428                           
  8429                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  8430                           
  8431                           ;incstack = 0
  8432  001212  0100               	movlb	0	; () banked
  8433  001214  879A               	bsf	_i2c_status& (0+255),3,b
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  8437  001216  519B               	movf	(_i2c_status+1)& (0+255),w,b
  8438  001218  259B               	addwf	(_i2c_status+1)& (0+255),w,b
  8439  00121A  ECBA  F009         	call	i2_i2c1_driver_TXData
  8440                           
  8441                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  8442  00121E  0E11               	movlw	17
  8443  001220  0012               	return	
  8444  001222                     __end_ofi2_do_I2C_SEND_INITIAL_READ:
  8445                           	opt stack 0
  8446                           tosu	equ	0xFFF
  8447                           tosh	equ	0xFFE
  8448                           tosl	equ	0xFFD
  8449                           pclatu	equ	0xFFB
  8450                           pclath	equ	0xFFA
  8451                           tblptru	equ	0xFF8
  8452                           tblptrh	equ	0xFF7
  8453                           tblptrl	equ	0xFF6
  8454                           tablat	equ	0xFF5
  8455                           prodh	equ	0xFF4
  8456                           prodl	equ	0xFF3
  8457                           intcon	equ	0xFF2
  8458                           intcon2	equ	0xFF1
  8459                           postinc0	equ	0xFEE
  8460                           plusw0	equ	0xFEB
  8461                           fsr0h	equ	0xFEA
  8462                           fsr0l	equ	0xFE9
  8463                           wreg	equ	0xFE8
  8464                           postdec1	equ	0xFE5
  8465                           plusw1	equ	0xFE3
  8466                           fsr1h	equ	0xFE2
  8467                           fsr1l	equ	0xFE1
  8468                           indf2	equ	0xFDF
  8469                           postinc2	equ	0xFDE
  8470                           postdec2	equ	0xFDD
  8471                           plusw2	equ	0xFDB
  8472                           fsr2h	equ	0xFDA
  8473                           fsr2l	equ	0xFD9
  8474                           status	equ	0xFD8
  8475                           
  8476 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  8477 ;; Defined at:
  8478 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;		None
  8481 ;; Auto vars:     Size  Location     Type
  8482 ;;		None
  8483 ;; Return value:  Size  Location     Type
  8484 ;;                  1    wreg      enum E7019
  8485 ;; Registers used:
  8486 ;;		wreg, status,0, cstack
  8487 ;; Tracked objects:
  8488 ;;		On entry : 0/0
  8489 ;;		On exit  : 0/0
  8490 ;;		Unchanged: 0/0
  8491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8492 ;;      Params:         0       0       0       0       0       0       0
  8493 ;;      Locals:         0       0       0       0       0       0       0
  8494 ;;      Temps:          0       0       0       0       0       0       0
  8495 ;;      Totals:         0       0       0       0       0       0       0
  8496 ;;Total ram usage:        0 bytes
  8497 ;; Hardware stack levels used:    1
  8498 ;; Hardware stack levels required when called:    1
  8499 ;; This function calls:
  8500 ;;		i2_i2c1_driver_TXData
  8501 ;; This function is called by:
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           	psect	text77
  8506  001222                     __ptext77:
  8507                           	opt stack 0
  8508  001222                     i2_do_I2C_SEND_ADR_READ:
  8509                           	opt stack 18
  8510                           
  8511                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  8512                           
  8513                           ;incstack = 0
  8514  001222  0100               	movlb	0	; () banked
  8515  001224  879A               	bsf	_i2c_status& (0+255),3,b
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  8519  001226  80D8               	bsf	status,0,c
  8520  001228  359B               	rlcf	(_i2c_status+1)& (0+255),w,b
  8521  00122A  ECBA  F009         	call	i2_i2c1_driver_TXData
  8522                           
  8523                           ;i2c_master.c: 325: return I2C_RCEN;
  8524  00122E  0E05               	movlw	5
  8525  001230  0012               	return	
  8526  001232                     __end_ofi2_do_I2C_SEND_ADR_READ:
  8527                           	opt stack 0
  8528                           tosu	equ	0xFFF
  8529                           tosh	equ	0xFFE
  8530                           tosl	equ	0xFFD
  8531                           pclatu	equ	0xFFB
  8532                           pclath	equ	0xFFA
  8533                           tblptru	equ	0xFF8
  8534                           tblptrh	equ	0xFF7
  8535                           tblptrl	equ	0xFF6
  8536                           tablat	equ	0xFF5
  8537                           prodh	equ	0xFF4
  8538                           prodl	equ	0xFF3
  8539                           intcon	equ	0xFF2
  8540                           intcon2	equ	0xFF1
  8541                           postinc0	equ	0xFEE
  8542                           plusw0	equ	0xFEB
  8543                           fsr0h	equ	0xFEA
  8544                           fsr0l	equ	0xFE9
  8545                           wreg	equ	0xFE8
  8546                           postdec1	equ	0xFE5
  8547                           plusw1	equ	0xFE3
  8548                           fsr1h	equ	0xFE2
  8549                           fsr1l	equ	0xFE1
  8550                           indf2	equ	0xFDF
  8551                           postinc2	equ	0xFDE
  8552                           postdec2	equ	0xFDD
  8553                           plusw2	equ	0xFDB
  8554                           fsr2h	equ	0xFDA
  8555                           fsr2l	equ	0xFD9
  8556                           status	equ	0xFD8
  8557                           
  8558 ;; *************** function i2_do_I2C_SEND_STOP *****************
  8559 ;; Defined at:
  8560 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;		None
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;		None
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  1    wreg      enum E7019
  8567 ;; Registers used:
  8568 ;;		wreg, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8574 ;;      Params:         0       0       0       0       0       0       0
  8575 ;;      Locals:         0       0       0       0       0       0       0
  8576 ;;      Temps:          0       0       0       0       0       0       0
  8577 ;;      Totals:         0       0       0       0       0       0       0
  8578 ;;Total ram usage:        0 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    1
  8581 ;; This function calls:
  8582 ;;		i2_i2c1_driver_stop
  8583 ;; This function is called by:
  8584 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8585 ;;		i2_do_I2C_TX
  8586 ;;		i2_do_I2C_TX_EMPTY
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text78
  8591  001354                     __ptext78:
  8592                           	opt stack 0
  8593  001354                     i2_do_I2C_SEND_STOP:
  8594                           	opt stack 17
  8595                           
  8596                           ;i2c_master.c: 316: i2c1_driver_stop();
  8597                           
  8598                           ;incstack = 0
  8599  001354  ECEB  F009         	call	i2_i2c1_driver_stop	;wreg free
  8600                           
  8601                           ;i2c_master.c: 317: return I2C_IDLE;
  8602  001358  0E00               	movlw	0
  8603  00135A  0012               	return	
  8604  00135C                     __end_ofi2_do_I2C_SEND_STOP:
  8605                           	opt stack 0
  8606                           tosu	equ	0xFFF
  8607                           tosh	equ	0xFFE
  8608                           tosl	equ	0xFFD
  8609                           pclatu	equ	0xFFB
  8610                           pclath	equ	0xFFA
  8611                           tblptru	equ	0xFF8
  8612                           tblptrh	equ	0xFF7
  8613                           tblptrl	equ	0xFF6
  8614                           tablat	equ	0xFF5
  8615                           prodh	equ	0xFF4
  8616                           prodl	equ	0xFF3
  8617                           intcon	equ	0xFF2
  8618                           intcon2	equ	0xFF1
  8619                           postinc0	equ	0xFEE
  8620                           plusw0	equ	0xFEB
  8621                           fsr0h	equ	0xFEA
  8622                           fsr0l	equ	0xFE9
  8623                           wreg	equ	0xFE8
  8624                           postdec1	equ	0xFE5
  8625                           plusw1	equ	0xFE3
  8626                           fsr1h	equ	0xFE2
  8627                           fsr1l	equ	0xFE1
  8628                           indf2	equ	0xFDF
  8629                           postinc2	equ	0xFDE
  8630                           postdec2	equ	0xFDD
  8631                           plusw2	equ	0xFDB
  8632                           fsr2h	equ	0xFDA
  8633                           fsr2l	equ	0xFD9
  8634                           status	equ	0xFD8
  8635                           
  8636 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  8637 ;; Defined at:
  8638 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;		None
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      enum E7019
  8645 ;; Registers used:
  8646 ;;		wreg, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8652 ;;      Params:         0       0       0       0       0       0       0
  8653 ;;      Locals:         0       0       0       0       0       0       0
  8654 ;;      Temps:          0       0       0       0       0       0       0
  8655 ;;      Totals:         0       0       0       0       0       0       0
  8656 ;;Total ram usage:        0 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    1
  8659 ;; This function calls:
  8660 ;;		i2_i2c1_driver_restart
  8661 ;; This function is called by:
  8662 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8663 ;;		i2_do_I2C_TX_EMPTY
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           	psect	text79
  8668  00135C                     __ptext79:
  8669                           	opt stack 0
  8670  00135C                     i2_do_I2C_SEND_RESTART:
  8671                           	opt stack 17
  8672                           
  8673                           ;i2c_master.c: 310: i2c1_driver_restart();
  8674                           
  8675                           ;incstack = 0
  8676  00135C  ECED  F009         	call	i2_i2c1_driver_restart	;wreg free
  8677                           
  8678                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  8679  001360  0E01               	movlw	1
  8680  001362  0012               	return	
  8681  001364                     __end_ofi2_do_I2C_SEND_RESTART:
  8682                           	opt stack 0
  8683                           tosu	equ	0xFFF
  8684                           tosh	equ	0xFFE
  8685                           tosl	equ	0xFFD
  8686                           pclatu	equ	0xFFB
  8687                           pclath	equ	0xFFA
  8688                           tblptru	equ	0xFF8
  8689                           tblptrh	equ	0xFF7
  8690                           tblptrl	equ	0xFF6
  8691                           tablat	equ	0xFF5
  8692                           prodh	equ	0xFF4
  8693                           prodl	equ	0xFF3
  8694                           intcon	equ	0xFF2
  8695                           intcon2	equ	0xFF1
  8696                           postinc0	equ	0xFEE
  8697                           plusw0	equ	0xFEB
  8698                           fsr0h	equ	0xFEA
  8699                           fsr0l	equ	0xFE9
  8700                           wreg	equ	0xFE8
  8701                           postdec1	equ	0xFE5
  8702                           plusw1	equ	0xFE3
  8703                           fsr1h	equ	0xFE2
  8704                           fsr1l	equ	0xFE1
  8705                           indf2	equ	0xFDF
  8706                           postinc2	equ	0xFDE
  8707                           postdec2	equ	0xFDD
  8708                           plusw2	equ	0xFDB
  8709                           fsr2h	equ	0xFDA
  8710                           fsr2l	equ	0xFD9
  8711                           status	equ	0xFD8
  8712                           
  8713 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  8714 ;; Defined at:
  8715 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;		None
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;		None
  8720 ;; Return value:  Size  Location     Type
  8721 ;;                  1    wreg      enum E7019
  8722 ;; Registers used:
  8723 ;;		wreg, cstack
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8729 ;;      Params:         0       0       0       0       0       0       0
  8730 ;;      Locals:         0       0       0       0       0       0       0
  8731 ;;      Temps:          0       0       0       0       0       0       0
  8732 ;;      Totals:         0       0       0       0       0       0       0
  8733 ;;Total ram usage:        0 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:    1
  8736 ;; This function calls:
  8737 ;;		i2_i2c1_driver_restart
  8738 ;; This function is called by:
  8739 ;;		i2_do_I2C_TX
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           	psect	text80
  8744  001364                     __ptext80:
  8745                           	opt stack 0
  8746  001364                     i2_do_I2C_SEND_RESTART_WRITE:
  8747                           	opt stack 17
  8748                           
  8749                           ;i2c_master.c: 304: i2c1_driver_restart();
  8750                           
  8751                           ;incstack = 0
  8752  001364  ECED  F009         	call	i2_i2c1_driver_restart	;wreg free
  8753                           
  8754                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  8755  001368  0E02               	movlw	2
  8756  00136A  0012               	return	
  8757  00136C                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  8758                           	opt stack 0
  8759                           tosu	equ	0xFFF
  8760                           tosh	equ	0xFFE
  8761                           tosl	equ	0xFFD
  8762                           pclatu	equ	0xFFB
  8763                           pclath	equ	0xFFA
  8764                           tblptru	equ	0xFF8
  8765                           tblptrh	equ	0xFF7
  8766                           tblptrl	equ	0xFF6
  8767                           tablat	equ	0xFF5
  8768                           prodh	equ	0xFF4
  8769                           prodl	equ	0xFF3
  8770                           intcon	equ	0xFF2
  8771                           intcon2	equ	0xFF1
  8772                           postinc0	equ	0xFEE
  8773                           plusw0	equ	0xFEB
  8774                           fsr0h	equ	0xFEA
  8775                           fsr0l	equ	0xFE9
  8776                           wreg	equ	0xFE8
  8777                           postdec1	equ	0xFE5
  8778                           plusw1	equ	0xFE3
  8779                           fsr1h	equ	0xFE2
  8780                           fsr1l	equ	0xFE1
  8781                           indf2	equ	0xFDF
  8782                           postinc2	equ	0xFDE
  8783                           postdec2	equ	0xFDD
  8784                           plusw2	equ	0xFDB
  8785                           fsr2h	equ	0xFDA
  8786                           fsr2l	equ	0xFD9
  8787                           status	equ	0xFD8
  8788                           
  8789 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  8790 ;; Defined at:
  8791 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  8792 ;; Parameters:    Size  Location     Type
  8793 ;;		None
  8794 ;; Auto vars:     Size  Location     Type
  8795 ;;		None
  8796 ;; Return value:  Size  Location     Type
  8797 ;;                  1    wreg      enum E7019
  8798 ;; Registers used:
  8799 ;;		wreg, cstack
  8800 ;; Tracked objects:
  8801 ;;		On entry : 0/0
  8802 ;;		On exit  : 0/0
  8803 ;;		Unchanged: 0/0
  8804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8805 ;;      Params:         0       0       0       0       0       0       0
  8806 ;;      Locals:         0       0       0       0       0       0       0
  8807 ;;      Temps:          0       0       0       0       0       0       0
  8808 ;;      Totals:         0       0       0       0       0       0       0
  8809 ;;Total ram usage:        0 bytes
  8810 ;; Hardware stack levels used:    1
  8811 ;; Hardware stack levels required when called:    1
  8812 ;; This function calls:
  8813 ;;		i2_i2c1_driver_restart
  8814 ;; This function is called by:
  8815 ;;		i2_do_I2C_TX
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           	psect	text81
  8820  00136C                     __ptext81:
  8821                           	opt stack 0
  8822  00136C                     i2_do_I2C_SEND_RESTART_READ:
  8823                           	opt stack 17
  8824                           
  8825                           ;i2c_master.c: 298: i2c1_driver_restart();
  8826                           
  8827                           ;incstack = 0
  8828  00136C  ECED  F009         	call	i2_i2c1_driver_restart	;wreg free
  8829                           
  8830                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  8831  001370  0E01               	movlw	1
  8832  001372  0012               	return	
  8833  001374                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  8834                           	opt stack 0
  8835                           tosu	equ	0xFFF
  8836                           tosh	equ	0xFFE
  8837                           tosl	equ	0xFFD
  8838                           pclatu	equ	0xFFB
  8839                           pclath	equ	0xFFA
  8840                           tblptru	equ	0xFF8
  8841                           tblptrh	equ	0xFF7
  8842                           tblptrl	equ	0xFF6
  8843                           tablat	equ	0xFF5
  8844                           prodh	equ	0xFF4
  8845                           prodl	equ	0xFF3
  8846                           intcon	equ	0xFF2
  8847                           intcon2	equ	0xFF1
  8848                           postinc0	equ	0xFEE
  8849                           plusw0	equ	0xFEB
  8850                           fsr0h	equ	0xFEA
  8851                           fsr0l	equ	0xFE9
  8852                           wreg	equ	0xFE8
  8853                           postdec1	equ	0xFE5
  8854                           plusw1	equ	0xFE3
  8855                           fsr1h	equ	0xFE2
  8856                           fsr1l	equ	0xFE1
  8857                           indf2	equ	0xFDF
  8858                           postinc2	equ	0xFDE
  8859                           postdec2	equ	0xFDD
  8860                           plusw2	equ	0xFDB
  8861                           fsr2h	equ	0xFDA
  8862                           fsr2l	equ	0xFD9
  8863                           status	equ	0xFD8
  8864                           
  8865 ;; *************** function i2_do_I2C_IDLE *****************
  8866 ;; Defined at:
  8867 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;		None
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;		None
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      enum E7019
  8874 ;; Registers used:
  8875 ;;		wreg, status,2
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8881 ;;      Params:         0       0       0       0       0       0       0
  8882 ;;      Locals:         0       0       0       0       0       0       0
  8883 ;;      Temps:          0       0       0       0       0       0       0
  8884 ;;      Totals:         0       0       0       0       0       0       0
  8885 ;;Total ram usage:        0 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; This function calls:
  8888 ;;		Nothing
  8889 ;; This function is called by:
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           	psect	text82
  8894  0012DA                     __ptext82:
  8895                           	opt stack 0
  8896  0012DA                     i2_do_I2C_IDLE:
  8897                           	opt stack 19
  8898                           
  8899                           ;i2c_master.c: 291: i2c_status.busy = 0;
  8900                           
  8901                           ;incstack = 0
  8902  0012DA  0100               	movlb	0	; () banked
  8903  0012DC  919A               	bcf	_i2c_status& (0+255),0,b
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  8907  0012DE  0E00               	movlw	0
  8908  0012E0  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;i2c_master.c: 293: return I2C_RESET;
  8912  0012E2  0E0E               	movlw	14
  8913  0012E4  0012               	return	
  8914  0012E6                     __end_ofi2_do_I2C_IDLE:
  8915                           	opt stack 0
  8916                           tosu	equ	0xFFF
  8917                           tosh	equ	0xFFE
  8918                           tosl	equ	0xFFD
  8919                           pclatu	equ	0xFFB
  8920                           pclath	equ	0xFFA
  8921                           tblptru	equ	0xFF8
  8922                           tblptrh	equ	0xFF7
  8923                           tblptrl	equ	0xFF6
  8924                           tablat	equ	0xFF5
  8925                           prodh	equ	0xFF4
  8926                           prodl	equ	0xFF3
  8927                           intcon	equ	0xFF2
  8928                           intcon2	equ	0xFF1
  8929                           postinc0	equ	0xFEE
  8930                           plusw0	equ	0xFEB
  8931                           fsr0h	equ	0xFEA
  8932                           fsr0l	equ	0xFE9
  8933                           wreg	equ	0xFE8
  8934                           postdec1	equ	0xFE5
  8935                           plusw1	equ	0xFE3
  8936                           fsr1h	equ	0xFE2
  8937                           fsr1l	equ	0xFE1
  8938                           indf2	equ	0xFDF
  8939                           postinc2	equ	0xFDE
  8940                           postdec2	equ	0xFDD
  8941                           plusw2	equ	0xFDB
  8942                           fsr2h	equ	0xFDA
  8943                           fsr2l	equ	0xFD9
  8944                           status	equ	0xFD8
  8945                           
  8946 ;; *************** function i2_do_I2C_RESET *****************
  8947 ;; Defined at:
  8948 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;		None
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;		None
  8953 ;; Return value:  Size  Location     Type
  8954 ;;                  1    wreg      enum E7019
  8955 ;; Registers used:
  8956 ;;		wreg, status,2, cstack
  8957 ;; Tracked objects:
  8958 ;;		On entry : 0/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8962 ;;      Params:         0       0       0       0       0       0       0
  8963 ;;      Locals:         0       0       0       0       0       0       0
  8964 ;;      Temps:          0       0       0       0       0       0       0
  8965 ;;      Totals:         0       0       0       0       0       0       0
  8966 ;;Total ram usage:        0 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    1
  8969 ;; This function calls:
  8970 ;;		i2_i2c1_driver_resetBus
  8971 ;; This function is called by:
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           	psect	text83
  8976  001232                     __ptext83:
  8977                           	opt stack 0
  8978  001232                     i2_do_I2C_RESET:
  8979                           	opt stack 18
  8980                           
  8981                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;incstack = 0
  8985  001232  ECF2  F009         	call	i2_i2c1_driver_resetBus	;wreg free
  8986                           
  8987                           ;i2c_master.c: 284: i2c_status.busy = 0;
  8988  001236  0100               	movlb	0	; () banked
  8989  001238  919A               	bcf	_i2c_status& (0+255),0,b
  8990                           
  8991                           ; BSR set to: 0
  8992                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  8993  00123A  0E00               	movlw	0
  8994  00123C  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;i2c_master.c: 286: return I2C_RESET;
  8998  00123E  0E0E               	movlw	14
  8999  001240  0012               	return	
  9000  001242                     __end_ofi2_do_I2C_RESET:
  9001                           	opt stack 0
  9002                           tosu	equ	0xFFF
  9003                           tosh	equ	0xFFE
  9004                           tosl	equ	0xFFD
  9005                           pclatu	equ	0xFFB
  9006                           pclath	equ	0xFFA
  9007                           tblptru	equ	0xFF8
  9008                           tblptrh	equ	0xFF7
  9009                           tblptrl	equ	0xFF6
  9010                           tablat	equ	0xFF5
  9011                           prodh	equ	0xFF4
  9012                           prodl	equ	0xFF3
  9013                           intcon	equ	0xFF2
  9014                           intcon2	equ	0xFF1
  9015                           postinc0	equ	0xFEE
  9016                           plusw0	equ	0xFEB
  9017                           fsr0h	equ	0xFEA
  9018                           fsr0l	equ	0xFE9
  9019                           wreg	equ	0xFE8
  9020                           postdec1	equ	0xFE5
  9021                           plusw1	equ	0xFE3
  9022                           fsr1h	equ	0xFE2
  9023                           fsr1l	equ	0xFE1
  9024                           indf2	equ	0xFDF
  9025                           postinc2	equ	0xFDE
  9026                           postdec2	equ	0xFDD
  9027                           plusw2	equ	0xFDB
  9028                           fsr2h	equ	0xFDA
  9029                           fsr2l	equ	0xFD9
  9030                           status	equ	0xFD8
  9031                           
  9032 ;; *************** function i2_do_I2C_TX_REGISTER *****************
  9033 ;; Defined at:
  9034 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;		None
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  1    wreg      enum E7019
  9041 ;; Registers used:
  9042 ;;		wreg, status,2, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9048 ;;      Params:         0       0       0       0       0       0       0
  9049 ;;      Locals:         0       0       0       0       0       0       0
  9050 ;;      Temps:          0       0       0       0       0       0       0
  9051 ;;      Totals:         0       0       0       0       0       0       0
  9052 ;;Total ram usage:        0 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    1
  9055 ;; This function calls:
  9056 ;;		i2_i2c1_driver_TXData
  9057 ;; This function is called by:
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           	psect	text84
  9062  0012C0                     __ptext84:
  9063                           	opt stack 0
  9064  0012C0                     i2_do_I2C_TX_REGISTER:
  9065                           	opt stack 18
  9066                           
  9067                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;incstack = 0
  9071  0012C0  0100               	movlb	0	; () banked
  9072  0012C2  879A               	bsf	_i2c_status& (0+255),3,b
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  9076  0012C4  51BE               	movf	(_i2c_status+36)& (0+255),w,b
  9077  0012C6  ECBA  F009         	call	i2_i2c1_driver_TXData
  9078                           
  9079                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  9080  0012CA  0E07               	movlw	7
  9081  0012CC  0012               	return	
  9082  0012CE                     __end_ofi2_do_I2C_TX_REGISTER:
  9083                           	opt stack 0
  9084                           tosu	equ	0xFFF
  9085                           tosh	equ	0xFFE
  9086                           tosl	equ	0xFFD
  9087                           pclatu	equ	0xFFB
  9088                           pclath	equ	0xFFA
  9089                           tblptru	equ	0xFF8
  9090                           tblptrh	equ	0xFF7
  9091                           tblptrl	equ	0xFF6
  9092                           tablat	equ	0xFF5
  9093                           prodh	equ	0xFF4
  9094                           prodl	equ	0xFF3
  9095                           intcon	equ	0xFF2
  9096                           intcon2	equ	0xFF1
  9097                           postinc0	equ	0xFEE
  9098                           plusw0	equ	0xFEB
  9099                           fsr0h	equ	0xFEA
  9100                           fsr0l	equ	0xFE9
  9101                           wreg	equ	0xFE8
  9102                           postdec1	equ	0xFE5
  9103                           plusw1	equ	0xFE3
  9104                           fsr1h	equ	0xFE2
  9105                           fsr1l	equ	0xFE1
  9106                           indf2	equ	0xFDF
  9107                           postinc2	equ	0xFDE
  9108                           postdec2	equ	0xFDD
  9109                           plusw2	equ	0xFDB
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function i2_mssp1_setIRQ *****************
  9115 ;; Defined at:
  9116 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;		None
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      void 
  9123 ;; Registers used:
  9124 ;;		None
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9130 ;;      Params:         0       0       0       0       0       0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0
  9133 ;;      Totals:         0       0       0       0       0       0       0
  9134 ;;Total ram usage:        0 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; This function calls:
  9137 ;;		Nothing
  9138 ;; This function is called by:
  9139 ;;		i2_do_I2C_TX_EMPTY
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	text85
  9144  0013C2                     __ptext85:
  9145                           	opt stack 0
  9146  0013C2                     i2_mssp1_setIRQ:
  9147                           	opt stack 18
  9148                           
  9149                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  9150                           
  9151                           ;incstack = 0
  9152  0013C2  869E               	bsf	3998,3,c	;volatile
  9153  0013C4  0012               	return		;funcret
  9154  0013C6                     __end_ofi2_mssp1_setIRQ:
  9155                           	opt stack 0
  9156                           tosu	equ	0xFFF
  9157                           tosh	equ	0xFFE
  9158                           tosl	equ	0xFFD
  9159                           pclatu	equ	0xFFB
  9160                           pclath	equ	0xFFA
  9161                           tblptru	equ	0xFF8
  9162                           tblptrh	equ	0xFF7
  9163                           tblptrl	equ	0xFF6
  9164                           tablat	equ	0xFF5
  9165                           prodh	equ	0xFF4
  9166                           prodl	equ	0xFF3
  9167                           intcon	equ	0xFF2
  9168                           intcon2	equ	0xFF1
  9169                           postinc0	equ	0xFEE
  9170                           plusw0	equ	0xFEB
  9171                           fsr0h	equ	0xFEA
  9172                           fsr0l	equ	0xFE9
  9173                           wreg	equ	0xFE8
  9174                           postdec1	equ	0xFE5
  9175                           plusw1	equ	0xFE3
  9176                           fsr1h	equ	0xFE2
  9177                           fsr1l	equ	0xFE1
  9178                           indf2	equ	0xFDF
  9179                           postinc2	equ	0xFDE
  9180                           postdec2	equ	0xFDD
  9181                           plusw2	equ	0xFDB
  9182                           fsr2h	equ	0xFDA
  9183                           fsr2l	equ	0xFD9
  9184                           status	equ	0xFD8
  9185                           
  9186 ;; *************** function i2_i2c1_driver_isNACK *****************
  9187 ;; Defined at:
  9188 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;		None
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;		None
  9193 ;; Return value:  Size  Location     Type
  9194 ;;		None               void
  9195 ;; Registers used:
  9196 ;;		wreg, status,2, status,0
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : 0/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9202 ;;      Params:         0       0       0       0       0       0       0
  9203 ;;      Locals:         0       0       0       0       0       0       0
  9204 ;;      Temps:          1       0       0       0       0       0       0
  9205 ;;      Totals:         1       0       0       0       0       0       0
  9206 ;;Total ram usage:        1 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		i2_do_I2C_TX
  9212 ;;		i2_i2c_ISR
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           	psect	text86
  9217  001180                     __ptext86:
  9218                           	opt stack 0
  9219  001180                     i2_i2c1_driver_isNACK:
  9220                           	opt stack 19
  9221                           
  9222                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  9223                           
  9224                           ;incstack = 0
  9225  001180  50C5               	movf	4037,w,c	;volatile
  9226  001182  0BBF               	andlw	-65
  9227  001184  0940               	iorlw	64
  9228  001186  6EC5               	movwf	4037,c	;volatile
  9229  001188  38C5               	swapf	4037,w,c	;volatile
  9230  00118A  32E8               	rrcf	wreg,f,c
  9231  00118C  32E8               	rrcf	wreg,f,c
  9232  00118E  0B01               	andlw	1
  9233  001190  6E26               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
  9234  001192  3026               	rrcf	??i2_i2c1_driver_isNACK,w,c
  9235  001194  0012               	return	
  9236  001196                     __end_ofi2_i2c1_driver_isNACK:
  9237                           	opt stack 0
  9238                           tosu	equ	0xFFF
  9239                           tosh	equ	0xFFE
  9240                           tosl	equ	0xFFD
  9241                           pclatu	equ	0xFFB
  9242                           pclath	equ	0xFFA
  9243                           tblptru	equ	0xFF8
  9244                           tblptrh	equ	0xFF7
  9245                           tblptrl	equ	0xFF6
  9246                           tablat	equ	0xFF5
  9247                           prodh	equ	0xFF4
  9248                           prodl	equ	0xFF3
  9249                           intcon	equ	0xFF2
  9250                           intcon2	equ	0xFF1
  9251                           postinc0	equ	0xFEE
  9252                           plusw0	equ	0xFEB
  9253                           fsr0h	equ	0xFEA
  9254                           fsr0l	equ	0xFE9
  9255                           wreg	equ	0xFE8
  9256                           postdec1	equ	0xFE5
  9257                           plusw1	equ	0xFE3
  9258                           fsr1h	equ	0xFE2
  9259                           fsr1l	equ	0xFE1
  9260                           indf2	equ	0xFDF
  9261                           postinc2	equ	0xFDE
  9262                           postdec2	equ	0xFDD
  9263                           plusw2	equ	0xFDB
  9264                           fsr2h	equ	0xFDA
  9265                           fsr2l	equ	0xFD9
  9266                           status	equ	0xFD8
  9267                           
  9268 ;; *************** function i2_i2c1_driver_TXData *****************
  9269 ;; Defined at:
  9270 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;  d               1    wreg     unsigned char 
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  d               1    0[COMRAM] unsigned char 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  1    wreg      void 
  9277 ;; Registers used:
  9278 ;;		wreg
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9284 ;;      Params:         0       0       0       0       0       0       0
  9285 ;;      Locals:         1       0       0       0       0       0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0
  9287 ;;      Totals:         1       0       0       0       0       0       0
  9288 ;;Total ram usage:        1 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; This function calls:
  9291 ;;		Nothing
  9292 ;; This function is called by:
  9293 ;;		i2_do_I2C_SEND_ADR_READ
  9294 ;;		i2_do_I2C_SEND_INITIAL_READ
  9295 ;;		i2_do_I2C_TX_REGISTER
  9296 ;;		i2_do_I2C_SEND_ADR_WRITE
  9297 ;;		i2_do_I2C_TX
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           	psect	text87
  9302  001374                     __ptext87:
  9303                           	opt stack 0
  9304  001374                     i2_i2c1_driver_TXData:
  9305                           	opt stack 18
  9306                           
  9307                           ;incstack = 0
  9308                           ;i2i2c1_driver_TXData@d stored from wreg
  9309  001374  6E26               	movwf	i2i2c1_driver_TXData@d,c
  9310                           
  9311                           ;i2c1_driver.c: 188: SSP1BUF = d;
  9312  001376  C026  FFC9         	movff	i2i2c1_driver_TXData@d,4041	;volatile
  9313  00137A  0012               	return		;funcret
  9314  00137C                     __end_ofi2_i2c1_driver_TXData:
  9315                           	opt stack 0
  9316                           tosu	equ	0xFFF
  9317                           tosh	equ	0xFFE
  9318                           tosl	equ	0xFFD
  9319                           pclatu	equ	0xFFB
  9320                           pclath	equ	0xFFA
  9321                           tblptru	equ	0xFF8
  9322                           tblptrh	equ	0xFF7
  9323                           tblptrl	equ	0xFF6
  9324                           tablat	equ	0xFF5
  9325                           prodh	equ	0xFF4
  9326                           prodl	equ	0xFF3
  9327                           intcon	equ	0xFF2
  9328                           intcon2	equ	0xFF1
  9329                           postinc0	equ	0xFEE
  9330                           plusw0	equ	0xFEB
  9331                           fsr0h	equ	0xFEA
  9332                           fsr0l	equ	0xFE9
  9333                           wreg	equ	0xFE8
  9334                           postdec1	equ	0xFE5
  9335                           plusw1	equ	0xFE3
  9336                           fsr1h	equ	0xFE2
  9337                           fsr1l	equ	0xFE1
  9338                           indf2	equ	0xFDF
  9339                           postinc2	equ	0xFDE
  9340                           postdec2	equ	0xFDD
  9341                           plusw2	equ	0xFDB
  9342                           fsr2h	equ	0xFDA
  9343                           fsr2l	equ	0xFD9
  9344                           status	equ	0xFD8
  9345                           
  9346 ;; *************** function i2_i2c1_driver_getRXData *****************
  9347 ;; Defined at:
  9348 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;		None
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;		None
  9353 ;; Return value:  Size  Location     Type
  9354 ;;                  1    wreg      unsigned char 
  9355 ;; Registers used:
  9356 ;;		wreg, status,2
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9362 ;;      Params:         0       0       0       0       0       0       0
  9363 ;;      Locals:         0       0       0       0       0       0       0
  9364 ;;      Temps:          0       0       0       0       0       0       0
  9365 ;;      Totals:         0       0       0       0       0       0       0
  9366 ;;Total ram usage:        0 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; This function calls:
  9369 ;;		Nothing
  9370 ;; This function is called by:
  9371 ;;		i2_do_I2C_RX
  9372 ;; This function uses a non-reentrant model
  9373 ;;
  9374                           
  9375                           	psect	text88
  9376  0013C6                     __ptext88:
  9377                           	opt stack 0
  9378  0013C6                     i2_i2c1_driver_getRXData:
  9379                           	opt stack 18
  9380                           
  9381                           ;i2c1_driver.c: 173: return SSP1BUF;
  9382                           
  9383                           ;incstack = 0
  9384  0013C6  50C9               	movf	4041,w,c	;volatile
  9385  0013C8  0012               	return	
  9386  0013CA                     __end_ofi2_i2c1_driver_getRXData:
  9387                           	opt stack 0
  9388                           tosu	equ	0xFFF
  9389                           tosh	equ	0xFFE
  9390                           tosl	equ	0xFFD
  9391                           pclatu	equ	0xFFB
  9392                           pclath	equ	0xFFA
  9393                           tblptru	equ	0xFF8
  9394                           tblptrh	equ	0xFF7
  9395                           tblptrl	equ	0xFF6
  9396                           tablat	equ	0xFF5
  9397                           prodh	equ	0xFF4
  9398                           prodl	equ	0xFF3
  9399                           intcon	equ	0xFF2
  9400                           intcon2	equ	0xFF1
  9401                           postinc0	equ	0xFEE
  9402                           plusw0	equ	0xFEB
  9403                           fsr0h	equ	0xFEA
  9404                           fsr0l	equ	0xFE9
  9405                           wreg	equ	0xFE8
  9406                           postdec1	equ	0xFE5
  9407                           plusw1	equ	0xFE3
  9408                           fsr1h	equ	0xFE2
  9409                           fsr1l	equ	0xFE1
  9410                           indf2	equ	0xFDF
  9411                           postinc2	equ	0xFDE
  9412                           postdec2	equ	0xFDD
  9413                           plusw2	equ	0xFDB
  9414                           fsr2h	equ	0xFDA
  9415                           fsr2l	equ	0xFD9
  9416                           status	equ	0xFD8
  9417                           
  9418 ;; *************** function i2_i2c1_driver_sendNACK *****************
  9419 ;; Defined at:
  9420 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;		None
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;		None
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      void 
  9427 ;; Registers used:
  9428 ;;		None
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9434 ;;      Params:         0       0       0       0       0       0       0
  9435 ;;      Locals:         0       0       0       0       0       0       0
  9436 ;;      Temps:          0       0       0       0       0       0       0
  9437 ;;      Totals:         0       0       0       0       0       0       0
  9438 ;;Total ram usage:        0 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; This function calls:
  9441 ;;		Nothing
  9442 ;; This function is called by:
  9443 ;;		i2_do_I2C_DO_NACK_STOP
  9444 ;;		i2_do_I2C_DO_NACK_RESTART
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           	psect	text89
  9449  001388                     __ptext89:
  9450                           	opt stack 0
  9451  001388                     i2_i2c1_driver_sendNACK:
  9452                           	opt stack 17
  9453                           
  9454                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  9455                           
  9456                           ;incstack = 0
  9457  001388  8AC5               	bsf	4037,5,c	;volatile
  9458                           
  9459                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  9460  00138A  88C5               	bsf	4037,4,c	;volatile
  9461  00138C  0012               	return		;funcret
  9462  00138E                     __end_ofi2_i2c1_driver_sendNACK:
  9463                           	opt stack 0
  9464                           tosu	equ	0xFFF
  9465                           tosh	equ	0xFFE
  9466                           tosl	equ	0xFFD
  9467                           pclatu	equ	0xFFB
  9468                           pclath	equ	0xFFA
  9469                           tblptru	equ	0xFF8
  9470                           tblptrh	equ	0xFF7
  9471                           tblptrl	equ	0xFF6
  9472                           tablat	equ	0xFF5
  9473                           prodh	equ	0xFF4
  9474                           prodl	equ	0xFF3
  9475                           intcon	equ	0xFF2
  9476                           intcon2	equ	0xFF1
  9477                           postinc0	equ	0xFEE
  9478                           plusw0	equ	0xFEB
  9479                           fsr0h	equ	0xFEA
  9480                           fsr0l	equ	0xFE9
  9481                           wreg	equ	0xFE8
  9482                           postdec1	equ	0xFE5
  9483                           plusw1	equ	0xFE3
  9484                           fsr1h	equ	0xFE2
  9485                           fsr1l	equ	0xFE1
  9486                           indf2	equ	0xFDF
  9487                           postinc2	equ	0xFDE
  9488                           postdec2	equ	0xFDD
  9489                           plusw2	equ	0xFDB
  9490                           fsr2h	equ	0xFDA
  9491                           fsr2l	equ	0xFD9
  9492                           status	equ	0xFD8
  9493                           
  9494 ;; *************** function i2_i2c1_driver_resetBus *****************
  9495 ;; Defined at:
  9496 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  9497 ;; Parameters:    Size  Location     Type
  9498 ;;		None
  9499 ;; Auto vars:     Size  Location     Type
  9500 ;;		None
  9501 ;; Return value:  Size  Location     Type
  9502 ;;                  1    wreg      void 
  9503 ;; Registers used:
  9504 ;;		None
  9505 ;; Tracked objects:
  9506 ;;		On entry : 0/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9510 ;;      Params:         0       0       0       0       0       0       0
  9511 ;;      Locals:         0       0       0       0       0       0       0
  9512 ;;      Temps:          0       0       0       0       0       0       0
  9513 ;;      Totals:         0       0       0       0       0       0       0
  9514 ;;Total ram usage:        0 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; This function calls:
  9517 ;;		Nothing
  9518 ;; This function is called by:
  9519 ;;		i2_do_I2C_RESET
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           	psect	text90
  9524  0013E4                     __ptext90:
  9525                           	opt stack 0
  9526  0013E4                     i2_i2c1_driver_resetBus:
  9527                           	opt stack 18
  9528                           
  9529                           ;incstack = 0
  9530  0013E4  0012               	return		;funcret
  9531  0013E6                     __end_ofi2_i2c1_driver_resetBus:
  9532                           	opt stack 0
  9533                           tosu	equ	0xFFF
  9534                           tosh	equ	0xFFE
  9535                           tosl	equ	0xFFD
  9536                           pclatu	equ	0xFFB
  9537                           pclath	equ	0xFFA
  9538                           tblptru	equ	0xFF8
  9539                           tblptrh	equ	0xFF7
  9540                           tblptrl	equ	0xFF6
  9541                           tablat	equ	0xFF5
  9542                           prodh	equ	0xFF4
  9543                           prodl	equ	0xFF3
  9544                           intcon	equ	0xFF2
  9545                           intcon2	equ	0xFF1
  9546                           postinc0	equ	0xFEE
  9547                           plusw0	equ	0xFEB
  9548                           fsr0h	equ	0xFEA
  9549                           fsr0l	equ	0xFE9
  9550                           wreg	equ	0xFE8
  9551                           postdec1	equ	0xFE5
  9552                           plusw1	equ	0xFE3
  9553                           fsr1h	equ	0xFE2
  9554                           fsr1l	equ	0xFE1
  9555                           indf2	equ	0xFDF
  9556                           postinc2	equ	0xFDE
  9557                           postdec2	equ	0xFDD
  9558                           plusw2	equ	0xFDB
  9559                           fsr2h	equ	0xFDA
  9560                           fsr2l	equ	0xFD9
  9561                           status	equ	0xFD8
  9562                           
  9563 ;; *************** function i2_i2c1_driver_startRX *****************
  9564 ;; Defined at:
  9565 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;		None
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;		None
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  1    wreg      void 
  9572 ;; Registers used:
  9573 ;;		None
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9579 ;;      Params:         0       0       0       0       0       0       0
  9580 ;;      Locals:         0       0       0       0       0       0       0
  9581 ;;      Temps:          0       0       0       0       0       0       0
  9582 ;;      Totals:         0       0       0       0       0       0       0
  9583 ;;Total ram usage:        0 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; This function calls:
  9586 ;;		Nothing
  9587 ;; This function is called by:
  9588 ;;		i2_do_I2C_RCEN
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           	psect	text91
  9593  0013CA                     __ptext91:
  9594                           	opt stack 0
  9595  0013CA                     i2_i2c1_driver_startRX:
  9596                           	opt stack 18
  9597                           
  9598                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  9599                           
  9600                           ;incstack = 0
  9601  0013CA  86C5               	bsf	4037,3,c	;volatile
  9602  0013CC  0012               	return		;funcret
  9603  0013CE                     __end_ofi2_i2c1_driver_startRX:
  9604                           	opt stack 0
  9605                           tosu	equ	0xFFF
  9606                           tosh	equ	0xFFE
  9607                           tosl	equ	0xFFD
  9608                           pclatu	equ	0xFFB
  9609                           pclath	equ	0xFFA
  9610                           tblptru	equ	0xFF8
  9611                           tblptrh	equ	0xFF7
  9612                           tblptrl	equ	0xFF6
  9613                           tablat	equ	0xFF5
  9614                           prodh	equ	0xFF4
  9615                           prodl	equ	0xFF3
  9616                           intcon	equ	0xFF2
  9617                           intcon2	equ	0xFF1
  9618                           postinc0	equ	0xFEE
  9619                           plusw0	equ	0xFEB
  9620                           fsr0h	equ	0xFEA
  9621                           fsr0l	equ	0xFE9
  9622                           wreg	equ	0xFE8
  9623                           postdec1	equ	0xFE5
  9624                           plusw1	equ	0xFE3
  9625                           fsr1h	equ	0xFE2
  9626                           fsr1l	equ	0xFE1
  9627                           indf2	equ	0xFDF
  9628                           postinc2	equ	0xFDE
  9629                           postdec2	equ	0xFDD
  9630                           plusw2	equ	0xFDB
  9631                           fsr2h	equ	0xFDA
  9632                           fsr2l	equ	0xFD9
  9633                           status	equ	0xFD8
  9634                           
  9635 ;; *************** function i2_returnReset *****************
  9636 ;; Defined at:
  9637 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;  p               2    0[COMRAM] PTR void 
  9640 ;;		 -> NULL(0), 
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;		None
  9643 ;; Return value:  Size  Location     Type
  9644 ;;                  1    wreg      enum E6842
  9645 ;; Registers used:
  9646 ;;		wreg
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9652 ;;      Params:         2       0       0       0       0       0       0
  9653 ;;      Locals:         0       0       0       0       0       0       0
  9654 ;;      Temps:          0       0       0       0       0       0       0
  9655 ;;      Totals:         2       0       0       0       0       0       0
  9656 ;;Total ram usage:        2 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; This function calls:
  9659 ;;		Nothing
  9660 ;; This function is called by:
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           	psect	text92
  9665  0013CE                     __ptext92:
  9666                           	opt stack 0
  9667  0013CE                     i2_returnReset:
  9668                           	opt stack 18
  9669                           
  9670                           ;i2c_master.c: 515: return i2c_reset_link;
  9671                           
  9672                           ;incstack = 0
  9673  0013CE  0E05               	movlw	5
  9674  0013D0  0012               	return	
  9675  0013D2                     __end_ofi2_returnReset:
  9676                           	opt stack 0
  9677                           tosu	equ	0xFFF
  9678                           tosh	equ	0xFFE
  9679                           tosl	equ	0xFFD
  9680                           pclatu	equ	0xFFB
  9681                           pclath	equ	0xFFA
  9682                           tblptru	equ	0xFF8
  9683                           tblptrh	equ	0xFF7
  9684                           tblptrl	equ	0xFF6
  9685                           tablat	equ	0xFF5
  9686                           prodh	equ	0xFF4
  9687                           prodl	equ	0xFF3
  9688                           intcon	equ	0xFF2
  9689                           intcon2	equ	0xFF1
  9690                           postinc0	equ	0xFEE
  9691                           plusw0	equ	0xFEB
  9692                           fsr0h	equ	0xFEA
  9693                           fsr0l	equ	0xFE9
  9694                           wreg	equ	0xFE8
  9695                           postdec1	equ	0xFE5
  9696                           plusw1	equ	0xFE3
  9697                           fsr1h	equ	0xFE2
  9698                           fsr1l	equ	0xFE1
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           plusw2	equ	0xFDB
  9703                           fsr2h	equ	0xFDA
  9704                           fsr2l	equ	0xFD9
  9705                           status	equ	0xFD8
  9706                           
  9707 ;; *************** function i2_returnStop *****************
  9708 ;; Defined at:
  9709 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  9710 ;; Parameters:    Size  Location     Type
  9711 ;;  p               2    0[COMRAM] PTR void 
  9712 ;;		 -> NULL(0), 
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;		None
  9715 ;; Return value:  Size  Location     Type
  9716 ;;                  1    wreg      enum E6842
  9717 ;; Registers used:
  9718 ;;		wreg
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9724 ;;      Params:         2       0       0       0       0       0       0
  9725 ;;      Locals:         0       0       0       0       0       0       0
  9726 ;;      Temps:          0       0       0       0       0       0       0
  9727 ;;      Totals:         2       0       0       0       0       0       0
  9728 ;;Total ram usage:        2 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           	psect	text93
  9737  0013D2                     __ptext93:
  9738                           	opt stack 0
  9739  0013D2                     i2_returnStop:
  9740                           	opt stack 18
  9741                           
  9742                           ;i2c_master.c: 510: return i2c_stop;
  9743                           
  9744                           ;incstack = 0
  9745  0013D2  0E01               	movlw	1
  9746  0013D4  0012               	return	
  9747  0013D6                     __end_ofi2_returnStop:
  9748                           	opt stack 0
  9749                           tosu	equ	0xFFF
  9750                           tosh	equ	0xFFE
  9751                           tosl	equ	0xFFD
  9752                           pclatu	equ	0xFFB
  9753                           pclath	equ	0xFFA
  9754                           tblptru	equ	0xFF8
  9755                           tblptrh	equ	0xFF7
  9756                           tblptrl	equ	0xFF6
  9757                           tablat	equ	0xFF5
  9758                           prodh	equ	0xFF4
  9759                           prodl	equ	0xFF3
  9760                           intcon	equ	0xFF2
  9761                           intcon2	equ	0xFF1
  9762                           postinc0	equ	0xFEE
  9763                           plusw0	equ	0xFEB
  9764                           fsr0h	equ	0xFEA
  9765                           fsr0l	equ	0xFE9
  9766                           wreg	equ	0xFE8
  9767                           postdec1	equ	0xFE5
  9768                           plusw1	equ	0xFE3
  9769                           fsr1h	equ	0xFE2
  9770                           fsr1l	equ	0xFE1
  9771                           indf2	equ	0xFDF
  9772                           postinc2	equ	0xFDE
  9773                           postdec2	equ	0xFDD
  9774                           plusw2	equ	0xFDB
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function i2_i2c1_driver_stop *****************
  9780 ;; Defined at:
  9781 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		None
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9795 ;;      Params:         0       0       0       0       0       0       0
  9796 ;;      Locals:         0       0       0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0
  9798 ;;      Totals:         0       0       0       0       0       0       0
  9799 ;;Total ram usage:        0 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; This function calls:
  9802 ;;		Nothing
  9803 ;; This function is called by:
  9804 ;;		i2_do_I2C_SEND_STOP
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           	psect	text94
  9809  0013D6                     __ptext94:
  9810                           	opt stack 0
  9811  0013D6                     i2_i2c1_driver_stop:
  9812                           	opt stack 17
  9813                           
  9814                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  9815                           
  9816                           ;incstack = 0
  9817  0013D6  84C5               	bsf	4037,2,c	;volatile
  9818  0013D8  0012               	return		;funcret
  9819  0013DA                     __end_ofi2_i2c1_driver_stop:
  9820                           	opt stack 0
  9821                           tosu	equ	0xFFF
  9822                           tosh	equ	0xFFE
  9823                           tosl	equ	0xFFD
  9824                           pclatu	equ	0xFFB
  9825                           pclath	equ	0xFFA
  9826                           tblptru	equ	0xFF8
  9827                           tblptrh	equ	0xFF7
  9828                           tblptrl	equ	0xFF6
  9829                           tablat	equ	0xFF5
  9830                           prodh	equ	0xFF4
  9831                           prodl	equ	0xFF3
  9832                           intcon	equ	0xFF2
  9833                           intcon2	equ	0xFF1
  9834                           postinc0	equ	0xFEE
  9835                           plusw0	equ	0xFEB
  9836                           fsr0h	equ	0xFEA
  9837                           fsr0l	equ	0xFE9
  9838                           wreg	equ	0xFE8
  9839                           postdec1	equ	0xFE5
  9840                           plusw1	equ	0xFE3
  9841                           fsr1h	equ	0xFE2
  9842                           fsr1l	equ	0xFE1
  9843                           indf2	equ	0xFDF
  9844                           postinc2	equ	0xFDE
  9845                           postdec2	equ	0xFDD
  9846                           plusw2	equ	0xFDB
  9847                           fsr2h	equ	0xFDA
  9848                           fsr2l	equ	0xFD9
  9849                           status	equ	0xFD8
  9850                           
  9851 ;; *************** function i2_i2c1_driver_restart *****************
  9852 ;; Defined at:
  9853 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;		None
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;		None
  9858 ;; Return value:  Size  Location     Type
  9859 ;;                  1    wreg      void 
  9860 ;; Registers used:
  9861 ;;		None
  9862 ;; Tracked objects:
  9863 ;;		On entry : 0/0
  9864 ;;		On exit  : 0/0
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9867 ;;      Params:         0       0       0       0       0       0       0
  9868 ;;      Locals:         0       0       0       0       0       0       0
  9869 ;;      Temps:          0       0       0       0       0       0       0
  9870 ;;      Totals:         0       0       0       0       0       0       0
  9871 ;;Total ram usage:        0 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; This function calls:
  9874 ;;		Nothing
  9875 ;; This function is called by:
  9876 ;;		i2_do_I2C_SEND_RESTART_READ
  9877 ;;		i2_do_I2C_SEND_RESTART_WRITE
  9878 ;;		i2_do_I2C_SEND_RESTART
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text95
  9883  0013DA                     __ptext95:
  9884                           	opt stack 0
  9885  0013DA                     i2_i2c1_driver_restart:
  9886                           	opt stack 17
  9887                           
  9888                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  9889                           
  9890                           ;incstack = 0
  9891  0013DA  82C5               	bsf	4037,1,c	;volatile
  9892  0013DC  0012               	return		;funcret
  9893  0013DE                     __end_ofi2_i2c1_driver_restart:
  9894                           	opt stack 0
  9895                           tosu	equ	0xFFF
  9896                           tosh	equ	0xFFE
  9897                           tosl	equ	0xFFD
  9898                           pclatu	equ	0xFFB
  9899                           pclath	equ	0xFFA
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           intcon2	equ	0xFF1
  9908                           postinc0	equ	0xFEE
  9909                           plusw0	equ	0xFEB
  9910                           fsr0h	equ	0xFEA
  9911                           fsr0l	equ	0xFE9
  9912                           wreg	equ	0xFE8
  9913                           postdec1	equ	0xFE5
  9914                           plusw1	equ	0xFE3
  9915                           fsr1h	equ	0xFE2
  9916                           fsr1l	equ	0xFE1
  9917                           indf2	equ	0xFDF
  9918                           postinc2	equ	0xFDE
  9919                           postdec2	equ	0xFDD
  9920                           plusw2	equ	0xFDB
  9921                           fsr2h	equ	0xFDA
  9922                           fsr2l	equ	0xFD9
  9923                           status	equ	0xFD8
  9924                           
  9925 ;; *************** function i2_i2c1_driver_sendACK *****************
  9926 ;; Defined at:
  9927 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  9928 ;; Parameters:    Size  Location     Type
  9929 ;;		None
  9930 ;; Auto vars:     Size  Location     Type
  9931 ;;		None
  9932 ;; Return value:  Size  Location     Type
  9933 ;;                  1    wreg      void 
  9934 ;; Registers used:
  9935 ;;		None
  9936 ;; Tracked objects:
  9937 ;;		On entry : 0/0
  9938 ;;		On exit  : 0/0
  9939 ;;		Unchanged: 0/0
  9940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9941 ;;      Params:         0       0       0       0       0       0       0
  9942 ;;      Locals:         0       0       0       0       0       0       0
  9943 ;;      Temps:          0       0       0       0       0       0       0
  9944 ;;      Totals:         0       0       0       0       0       0       0
  9945 ;;Total ram usage:        0 bytes
  9946 ;; Hardware stack levels used:    1
  9947 ;; This function calls:
  9948 ;;		Nothing
  9949 ;; This function is called by:
  9950 ;;		i2_do_I2C_DO_ACK
  9951 ;;		i2_do_I2C_RX
  9952 ;; This function uses a non-reentrant model
  9953 ;;
  9954                           
  9955                           	psect	text96
  9956  00138E                     __ptext96:
  9957                           	opt stack 0
  9958  00138E                     i2_i2c1_driver_sendACK:
  9959                           	opt stack 18
  9960                           
  9961                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  9962                           
  9963                           ;incstack = 0
  9964  00138E  9AC5               	bcf	4037,5,c	;volatile
  9965                           
  9966                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  9967  001390  88C5               	bsf	4037,4,c	;volatile
  9968  001392  0012               	return		;funcret
  9969  001394                     __end_ofi2_i2c1_driver_sendACK:
  9970                           	opt stack 0
  9971                           tosu	equ	0xFFF
  9972                           tosh	equ	0xFFE
  9973                           tosl	equ	0xFFD
  9974                           pclatu	equ	0xFFB
  9975                           pclath	equ	0xFFA
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           intcon	equ	0xFF2
  9983                           intcon2	equ	0xFF1
  9984                           postinc0	equ	0xFEE
  9985                           plusw0	equ	0xFEB
  9986                           fsr0h	equ	0xFEA
  9987                           fsr0l	equ	0xFE9
  9988                           wreg	equ	0xFE8
  9989                           postdec1	equ	0xFE5
  9990                           plusw1	equ	0xFE3
  9991                           fsr1h	equ	0xFE2
  9992                           fsr1l	equ	0xFE1
  9993                           indf2	equ	0xFDF
  9994                           postinc2	equ	0xFDE
  9995                           postdec2	equ	0xFDD
  9996                           plusw2	equ	0xFDB
  9997                           fsr2h	equ	0xFDA
  9998                           fsr2l	equ	0xFD9
  9999                           status	equ	0xFD8
 10000                           
 10001 ;; *************** function _i2c_busCollisionISR *****************
 10002 ;; Defined at:
 10003 ;;		line 500 in file "mcc_generated_files/drivers/i2c_master.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  1    wreg      void 
 10010 ;; Registers used:
 10011 ;;		cstack
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10017 ;;      Params:         0       0       0       0       0       0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0
 10019 ;;      Temps:          0       0       0       0       0       0       0
 10020 ;;      Totals:         0       0       0       0       0       0       0
 10021 ;;Total ram usage:        0 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:    1
 10024 ;; This function calls:
 10025 ;;		_i2c1_driver_clearBusCollision
 10026 ;; This function is called by:
 10027 ;;		_i2c_open
 10028 ;;		_INTERRUPT_InterruptManager
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           	psect	text97
 10033  001394                     __ptext97:
 10034                           	opt stack 0
 10035  001394                     _i2c_busCollisionISR:
 10036                           	opt stack 19
 10037                           
 10038                           ;i2c_master.c: 502: i2c1_driver_clearBusCollision();
 10039                           
 10040                           ;incstack = 0
 10041  001394  ECEF  F009         	call	_i2c1_driver_clearBusCollision	;wreg free
 10042  001398  0012               	return		;funcret
 10043  00139A                     __end_of_i2c_busCollisionISR:
 10044                           	opt stack 0
 10045                           tosu	equ	0xFFF
 10046                           tosh	equ	0xFFE
 10047                           tosl	equ	0xFFD
 10048                           pclatu	equ	0xFFB
 10049                           pclath	equ	0xFFA
 10050                           tblptru	equ	0xFF8
 10051                           tblptrh	equ	0xFF7
 10052                           tblptrl	equ	0xFF6
 10053                           tablat	equ	0xFF5
 10054                           prodh	equ	0xFF4
 10055                           prodl	equ	0xFF3
 10056                           intcon	equ	0xFF2
 10057                           intcon2	equ	0xFF1
 10058                           postinc0	equ	0xFEE
 10059                           plusw0	equ	0xFEB
 10060                           fsr0h	equ	0xFEA
 10061                           fsr0l	equ	0xFE9
 10062                           wreg	equ	0xFE8
 10063                           postdec1	equ	0xFE5
 10064                           plusw1	equ	0xFE3
 10065                           fsr1h	equ	0xFE2
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           plusw2	equ	0xFDB
 10071                           fsr2h	equ	0xFDA
 10072                           fsr2l	equ	0xFD9
 10073                           status	equ	0xFD8
 10074                           
 10075 ;; *************** function _i2c1_driver_clearBusCollision *****************
 10076 ;; Defined at:
 10077 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      void 
 10084 ;; Registers used:
 10085 ;;		None
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10091 ;;      Params:         0       0       0       0       0       0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0
 10094 ;;      Totals:         0       0       0       0       0       0       0
 10095 ;;Total ram usage:        0 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; This function calls:
 10098 ;;		Nothing
 10099 ;; This function is called by:
 10100 ;;		_i2c_busCollisionISR
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           	psect	text98
 10105  0013DE                     __ptext98:
 10106                           	opt stack 0
 10107  0013DE                     _i2c1_driver_clearBusCollision:
 10108                           	opt stack 19
 10109                           
 10110                           ;i2c1_driver.c: 255: PIR2bits.BCL1IF = 0;
 10111                           
 10112                           ;incstack = 0
 10113  0013DE  96A1               	bcf	4001,3,c	;volatile
 10114  0013E0  0012               	return		;funcret
 10115  0013E2                     __end_of_i2c1_driver_clearBusCollision:
 10116                           	opt stack 0
 10117                           tosu	equ	0xFFF
 10118                           tosh	equ	0xFFE
 10119                           tosl	equ	0xFFD
 10120                           pclatu	equ	0xFFB
 10121                           pclath	equ	0xFFA
 10122                           tblptru	equ	0xFF8
 10123                           tblptrh	equ	0xFF7
 10124                           tblptrl	equ	0xFF6
 10125                           tablat	equ	0xFF5
 10126                           prodh	equ	0xFF4
 10127                           prodl	equ	0xFF3
 10128                           intcon	equ	0xFF2
 10129                           intcon2	equ	0xFF1
 10130                           postinc0	equ	0xFEE
 10131                           plusw0	equ	0xFEB
 10132                           fsr0h	equ	0xFEA
 10133                           fsr0l	equ	0xFE9
 10134                           wreg	equ	0xFE8
 10135                           postdec1	equ	0xFE5
 10136                           plusw1	equ	0xFE3
 10137                           fsr1h	equ	0xFE2
 10138                           fsr1l	equ	0xFE1
 10139                           indf2	equ	0xFDF
 10140                           postinc2	equ	0xFDE
 10141                           postdec2	equ	0xFDD
 10142                           plusw2	equ	0xFDB
 10143                           fsr2h	equ	0xFDA
 10144                           fsr2l	equ	0xFD9
 10145                           status	equ	0xFD8
 10146                           
 10147 ;; *************** function _EUSART1_Transmit_ISR *****************
 10148 ;; Defined at:
 10149 ;;		line 183 in file "mcc_generated_files/eusart1.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;		None
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;		None
 10154 ;; Return value:  Size  Location     Type
 10155 ;;                  1    wreg      void 
 10156 ;; Registers used:
 10157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10158 ;; Tracked objects:
 10159 ;;		On entry : 0/0
 10160 ;;		On exit  : 0/0
 10161 ;;		Unchanged: 0/0
 10162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10163 ;;      Params:         0       0       0       0       0       0       0
 10164 ;;      Locals:         0       0       0       0       0       0       0
 10165 ;;      Temps:          0       0       0       0       0       0       0
 10166 ;;      Totals:         0       0       0       0       0       0       0
 10167 ;;Total ram usage:        0 bytes
 10168 ;; Hardware stack levels used:    1
 10169 ;; This function calls:
 10170 ;;		Nothing
 10171 ;; This function is called by:
 10172 ;;		_EUSART1_Initialize
 10173 ;;		_INTERRUPT_InterruptManager
 10174 ;; This function uses a non-reentrant model
 10175 ;;
 10176                           
 10177                           	psect	text99
 10178  001002                     __ptext99:
 10179                           	opt stack 0
 10180  001002                     _EUSART1_Transmit_ISR:
 10181                           	opt stack 20
 10182                           
 10183                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 10184                           
 10185                           ;incstack = 0
 10186  001002  0E08               	movlw	8
 10187  001004  6049               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 10188  001006  D012               	goto	i2l321
 10189                           
 10190                           ;eusart1.c: 188: {
 10191                           ;eusart1.c: 189: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 10192  001008  501B               	movf	_eusart1TxTail,w,c	;volatile
 10193  00100A  0D01               	mullw	1
 10194  00100C  0E09               	movlw	low _eusart1TxBuffer
 10195  00100E  24F3               	addwf	prodl,w,c
 10196  001010  6ED9               	movwf	fsr2l,c
 10197  001012  0E00               	movlw	high _eusart1TxBuffer
 10198  001014  20F4               	addwfc	prodh,w,c
 10199  001016  6EDA               	movwf	fsr2h,c
 10200  001018  50DF               	movf	indf2,w,c
 10201  00101A  6EAD               	movwf	4013,c	;volatile
 10202  00101C  2A1B               	incf	_eusart1TxTail,f,c	;volatile
 10203                           
 10204                           ;eusart1.c: 190: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 10205  00101E  0E07               	movlw	7
 10206  001020  641B               	cpfsgt	_eusart1TxTail,c	;volatile
 10207  001022  D002               	goto	i2l322
 10208                           
 10209                           ;eusart1.c: 191: {
 10210                           ;eusart1.c: 192: eusart1TxTail = 0;
 10211  001024  0E00               	movlw	0
 10212  001026  6E1B               	movwf	_eusart1TxTail,c	;volatile
 10213  001028                     i2l322:
 10214                           
 10215                           ;eusart1.c: 193: }
 10216                           ;eusart1.c: 194: eusart1TxBufferRemaining++;
 10217  001028  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 10218                           
 10219                           ;eusart1.c: 195: }
 10220  00102A  0012               	return	
 10221  00102C                     i2l321:
 10222                           
 10223                           ;eusart1.c: 196: else
 10224                           ;eusart1.c: 197: {
 10225                           ;eusart1.c: 198: PIE1bits.TX1IE = 0;
 10226  00102C  989D               	bcf	3997,4,c	;volatile
 10227  00102E  0012               	return	
 10228  001030                     __end_of_EUSART1_Transmit_ISR:
 10229                           	opt stack 0
 10230                           tosu	equ	0xFFF
 10231                           tosh	equ	0xFFE
 10232                           tosl	equ	0xFFD
 10233                           pclatu	equ	0xFFB
 10234                           pclath	equ	0xFFA
 10235                           tblptru	equ	0xFF8
 10236                           tblptrh	equ	0xFF7
 10237                           tblptrl	equ	0xFF6
 10238                           tablat	equ	0xFF5
 10239                           prodh	equ	0xFF4
 10240                           prodl	equ	0xFF3
 10241                           intcon	equ	0xFF2
 10242                           intcon2	equ	0xFF1
 10243                           postinc0	equ	0xFEE
 10244                           plusw0	equ	0xFEB
 10245                           fsr0h	equ	0xFEA
 10246                           fsr0l	equ	0xFE9
 10247                           wreg	equ	0xFE8
 10248                           postdec1	equ	0xFE5
 10249                           plusw1	equ	0xFE3
 10250                           fsr1h	equ	0xFE2
 10251                           fsr1l	equ	0xFE1
 10252                           indf2	equ	0xFDF
 10253                           postinc2	equ	0xFDE
 10254                           postdec2	equ	0xFDD
 10255                           plusw2	equ	0xFDB
 10256                           fsr2h	equ	0xFDA
 10257                           fsr2l	equ	0xFD9
 10258                           status	equ	0xFD8
 10259                           
 10260 ;; *************** function _EUSART1_Receive_ISR *****************
 10261 ;; Defined at:
 10262 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;		None
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;		None
 10267 ;; Return value:  Size  Location     Type
 10268 ;;                  1    wreg      void 
 10269 ;; Registers used:
 10270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10276 ;;      Params:         0       0       0       0       0       0       0
 10277 ;;      Locals:         0       0       0       0       0       0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0
 10279 ;;      Totals:         0       0       0       0       0       0       0
 10280 ;;Total ram usage:        0 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; This function calls:
 10283 ;;		Nothing
 10284 ;; This function is called by:
 10285 ;;		_EUSART1_Initialize
 10286 ;;		_INTERRUPT_InterruptManager
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           	psect	text100
 10291  001030                     __ptext100:
 10292                           	opt stack 0
 10293  001030                     _EUSART1_Receive_ISR:
 10294                           	opt stack 20
 10295                           
 10296                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 10297                           
 10298                           ;incstack = 0
 10299  001030  A2AB               	btfss	4011,1,c	;volatile
 10300  001032  D002               	goto	i2l327
 10301                           
 10302                           ;eusart1.c: 206: {
 10303                           ;eusart1.c: 209: RCSTA1bits.CREN = 0;
 10304  001034  98AB               	bcf	4011,4,c	;volatile
 10305                           
 10306                           ;eusart1.c: 210: RCSTA1bits.CREN = 1;
 10307  001036  88AB               	bsf	4011,4,c	;volatile
 10308  001038                     i2l327:
 10309                           
 10310                           ;eusart1.c: 211: }
 10311                           ;eusart1.c: 214: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 10312  001038  501A               	movf	_eusart1RxHead,w,c	;volatile
 10313  00103A  0D01               	mullw	1
 10314  00103C  0E01               	movlw	low _eusart1RxBuffer
 10315  00103E  24F3               	addwf	prodl,w,c
 10316  001040  6ED9               	movwf	fsr2l,c
 10317  001042  0E00               	movlw	high _eusart1RxBuffer
 10318  001044  20F4               	addwfc	prodh,w,c
 10319  001046  6EDA               	movwf	fsr2h,c
 10320  001048  CFAE FFDF          	movff	4014,indf2	;volatile
 10321  00104C  2A1A               	incf	_eusart1RxHead,f,c	;volatile
 10322                           
 10323                           ;eusart1.c: 215: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 10324  00104E  0E07               	movlw	7
 10325  001050  641A               	cpfsgt	_eusart1RxHead,c	;volatile
 10326  001052  D002               	goto	i2l328
 10327                           
 10328                           ;eusart1.c: 216: {
 10329                           ;eusart1.c: 217: eusart1RxHead = 0;
 10330  001054  0E00               	movlw	0
 10331  001056  6E1A               	movwf	_eusart1RxHead,c	;volatile
 10332  001058                     i2l328:
 10333                           
 10334                           ;eusart1.c: 218: }
 10335                           ;eusart1.c: 219: eusart1RxCount++;
 10336  001058  2A18               	incf	_eusart1RxCount,f,c	;volatile
 10337  00105A  0012               	return		;funcret
 10338  00105C                     __end_of_EUSART1_Receive_ISR:
 10339                           	opt stack 0
 10340                           tosu	equ	0xFFF
 10341                           tosh	equ	0xFFE
 10342                           tosl	equ	0xFFD
 10343                           pclatu	equ	0xFFB
 10344                           pclath	equ	0xFFA
 10345                           tblptru	equ	0xFF8
 10346                           tblptrh	equ	0xFF7
 10347                           tblptrl	equ	0xFF6
 10348                           tablat	equ	0xFF5
 10349                           prodh	equ	0xFF4
 10350                           prodl	equ	0xFF3
 10351                           intcon	equ	0xFF2
 10352                           intcon2	equ	0xFF1
 10353                           postinc0	equ	0xFEE
 10354                           plusw0	equ	0xFEB
 10355                           fsr0h	equ	0xFEA
 10356                           fsr0l	equ	0xFE9
 10357                           wreg	equ	0xFE8
 10358                           postdec1	equ	0xFE5
 10359                           plusw1	equ	0xFE3
 10360                           fsr1h	equ	0xFE2
 10361                           fsr1l	equ	0xFE1
 10362                           indf2	equ	0xFDF
 10363                           postinc2	equ	0xFDE
 10364                           postdec2	equ	0xFDD
 10365                           plusw2	equ	0xFDB
 10366                           fsr2h	equ	0xFDA
 10367                           fsr2l	equ	0xFD9
 10368                           status	equ	0xFD8
 10369                           tosu	equ	0xFFF
 10370                           tosh	equ	0xFFE
 10371                           tosl	equ	0xFFD
 10372                           pclatu	equ	0xFFB
 10373                           pclath	equ	0xFFA
 10374                           tblptru	equ	0xFF8
 10375                           tblptrh	equ	0xFF7
 10376                           tblptrl	equ	0xFF6
 10377                           tablat	equ	0xFF5
 10378                           prodh	equ	0xFF4
 10379                           prodl	equ	0xFF3
 10380                           intcon	equ	0xFF2
 10381                           intcon2	equ	0xFF1
 10382                           postinc0	equ	0xFEE
 10383                           plusw0	equ	0xFEB
 10384                           fsr0h	equ	0xFEA
 10385                           fsr0l	equ	0xFE9
 10386                           wreg	equ	0xFE8
 10387                           postdec1	equ	0xFE5
 10388                           plusw1	equ	0xFE3
 10389                           fsr1h	equ	0xFE2
 10390                           fsr1l	equ	0xFE1
 10391                           indf2	equ	0xFDF
 10392                           postinc2	equ	0xFDE
 10393                           postdec2	equ	0xFDD
 10394                           plusw2	equ	0xFDB
 10395                           fsr2h	equ	0xFDA
 10396                           fsr2l	equ	0xFD9
 10397                           status	equ	0xFD8
 10398                           
 10399                           	psect	text101
 10400  000000                     __ptext101:
 10401                           	opt stack 0
 10402                           tosu	equ	0xFFF
 10403                           tosh	equ	0xFFE
 10404                           tosl	equ	0xFFD
 10405                           pclatu	equ	0xFFB
 10406                           pclath	equ	0xFFA
 10407                           tblptru	equ	0xFF8
 10408                           tblptrh	equ	0xFF7
 10409                           tblptrl	equ	0xFF6
 10410                           tablat	equ	0xFF5
 10411                           prodh	equ	0xFF4
 10412                           prodl	equ	0xFF3
 10413                           intcon	equ	0xFF2
 10414                           intcon2	equ	0xFF1
 10415                           postinc0	equ	0xFEE
 10416                           plusw0	equ	0xFEB
 10417                           fsr0h	equ	0xFEA
 10418                           fsr0l	equ	0xFE9
 10419                           wreg	equ	0xFE8
 10420                           postdec1	equ	0xFE5
 10421                           plusw1	equ	0xFE3
 10422                           fsr1h	equ	0xFE2
 10423                           fsr1l	equ	0xFE1
 10424                           indf2	equ	0xFDF
 10425                           postinc2	equ	0xFDE
 10426                           postdec2	equ	0xFDD
 10427                           plusw2	equ	0xFDB
 10428                           fsr2h	equ	0xFDA
 10429                           fsr2l	equ	0xFD9
 10430                           status	equ	0xFD8
 10431                           
 10432                           	psect	rparam
 10433  0000                     tosu	equ	0xFFF
 10434                           tosh	equ	0xFFE
 10435                           tosl	equ	0xFFD
 10436                           pclatu	equ	0xFFB
 10437                           pclath	equ	0xFFA
 10438                           tblptru	equ	0xFF8
 10439                           tblptrh	equ	0xFF7
 10440                           tblptrl	equ	0xFF6
 10441                           tablat	equ	0xFF5
 10442                           prodh	equ	0xFF4
 10443                           prodl	equ	0xFF3
 10444                           intcon	equ	0xFF2
 10445                           intcon2	equ	0xFF1
 10446                           postinc0	equ	0xFEE
 10447                           plusw0	equ	0xFEB
 10448                           fsr0h	equ	0xFEA
 10449                           fsr0l	equ	0xFE9
 10450                           wreg	equ	0xFE8
 10451                           postdec1	equ	0xFE5
 10452                           plusw1	equ	0xFE3
 10453                           fsr1h	equ	0xFE2
 10454                           fsr1l	equ	0xFE1
 10455                           indf2	equ	0xFDF
 10456                           postinc2	equ	0xFDE
 10457                           postdec2	equ	0xFDD
 10458                           plusw2	equ	0xFDB
 10459                           fsr2h	equ	0xFDA
 10460                           fsr2l	equ	0xFD9
 10461                           status	equ	0xFD8
 10462                           
 10463                           	psect	temp
 10464  00004A                     btemp:
 10465                           	opt stack 0
 10466  00004A                     	ds	1
 10467  0000                     int$flags	set	btemp
 10468  0000                     wtemp6	set	btemp+1
 10469                           tosu	equ	0xFFF
 10470                           tosh	equ	0xFFE
 10471                           tosl	equ	0xFFD
 10472                           pclatu	equ	0xFFB
 10473                           pclath	equ	0xFFA
 10474                           tblptru	equ	0xFF8
 10475                           tblptrh	equ	0xFF7
 10476                           tblptrl	equ	0xFF6
 10477                           tablat	equ	0xFF5
 10478                           prodh	equ	0xFF4
 10479                           prodl	equ	0xFF3
 10480                           intcon	equ	0xFF2
 10481                           intcon2	equ	0xFF1
 10482                           postinc0	equ	0xFEE
 10483                           plusw0	equ	0xFEB
 10484                           fsr0h	equ	0xFEA
 10485                           fsr0l	equ	0xFE9
 10486                           wreg	equ	0xFE8
 10487                           postdec1	equ	0xFE5
 10488                           plusw1	equ	0xFE3
 10489                           fsr1h	equ	0xFE2
 10490                           fsr1l	equ	0xFE1
 10491                           indf2	equ	0xFDF
 10492                           postinc2	equ	0xFDE
 10493                           postdec2	equ	0xFDD
 10494                           plusw2	equ	0xFDB
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8


Data Sizes:
    Strings     34
    Constant    10
    Data        86
    BSS         74
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      73
    BANK0           160     58     135
    BANK1           256      0      50
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_ISR$2289	PTR const FTN()enum E7019 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$11$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[34]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    i2c1_driver_setI2cISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART1_SetRxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_SetTxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E7019[18] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    S53$callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S53$data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _read_xyzvalues->_i2c_masterAccelRead
    _printf->___lwmod
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _printString->_EUSART1_Write
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ACCELEROMETER_Initialize->_read_register
    _ACCELEROMETER_Initialize->_write_register
    _i2c_masterWrite->_i2c_masterOperation
    _read_register->_i2c_masterAccelRead
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterAccelRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_REGISTER->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_INITIAL_READ->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX

Critical Paths under _main in BANK0

    _main->_printString

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   10190
                                             33 COMRAM     2     2      0
                                             52 BANK0      6     6      0
           _ACCELEROMETER_Initialize
                  _SYSTEM_Initialize
                        _printString
                             _printf
                     _read_xyzvalues
 ---------------------------------------------------------------------------------
 (1) _read_xyzvalues                                      12     6      6    2685
                                             26 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    17      8    1579
                                             32 COMRAM     1     1      0
                                              0 BANK0     15     7      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             27 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             20 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printString                                         54    54      0     198
                                             21 COMRAM     2     2      0
                                              0 BANK0     52    52      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ACCELEROMETER_Initialize                             2     2      0    5384
                                             27 COMRAM     2     2      0
                      _read_register
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _write_register                                       2     1      1    3007
                                             25 COMRAM     2     1      1
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0    1390
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (2) _read_register                                        1     1      0    2377
                                             26 COMRAM     1     1      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4     602
                                             20 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     286
                                             22 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterAccelRead                                  1     1      0    1421
                                             25 COMRAM     1     1      0
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0    1390
                                             23 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0    1322
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0    1232
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
           _do_I2C_SEND_INITIAL_READ *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _do_I2C_TX_REGISTER *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_REGISTER                                   0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0     328
                                             21 COMRAM     2     2      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_INITIAL_READ                             0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0     260
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2     260
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            1     1      0      37
                                             20 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     563
                                              2 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (11) i2_i2c_ISR                                           0     0      0     563
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
         i2_do_I2C_SEND_INITIAL_READ *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_do_I2C_TX_REGISTER *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (12) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_REGISTER                                0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_EMPTY                                   0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                     i2_mssp1_setIRQ
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX                                         2     2      0     163
                                              0 COMRAM     2     2      0
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_INITIAL_READ                          0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RX                                         0     0      0     104
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_returnStop                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_returnReset                                       2     0      2     104
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (12) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACCELEROMETER_Initialize
     _read_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterAccelRead
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
     _write_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printString
     _EUSART1_Write
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _EUSART1_Write
   _read_xyzvalues
     _i2c_close
       _mssp1_clearIRQ
       _mssp1_disableIRQ
     _i2c_masterAccelRead
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _returnReset *
               _returnStop *
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               _do_I2C_DO_NACK_RESTART
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData
               _i2c1_driver_sendACK
               _returnReset *
               _returnStop *
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_INITIAL_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               _do_I2C_SEND_RESTART_READ
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _i2c1_driver_TXData
               _i2c1_driver_isNACK
               _returnReset *
               _returnStop *
             _do_I2C_TX_EMPTY *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _mssp1_setIRQ
               _returnReset *
               _returnStop *
             _do_I2C_TX_REGISTER *
               _i2c1_driver_TXData
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       i2_do_I2C_DO_NACK_RESTART
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData
       i2_i2c1_driver_sendACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_INITIAL_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       i2_do_I2C_SEND_RESTART_READ
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData
       i2_i2c1_driver_isNACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_EMPTY *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_mssp1_setIRQ
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_REGISTER *
       i2_i2c1_driver_TXData
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      32       6       19.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3A      87       4       84.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      49       1       77.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102       9        0.0%
DATA                 0      0     102      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 16 13:35:22 2018

                ??i2_i2c1_driver_startRX 0026             _do_I2C_TX_REGISTER$intlevel0 119C  
                           returnReset@p 003A                 _eusart1TxBufferRemaining 0049  
          _do_I2C_SEND_RESTART$intlevel0 129C                                       l83 10C4  
                                     l95 0E3E                                       l96 0E30  
                                     l97 0E52                                       l98 0E34  
                                     l99 0E38                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 1296                     __size_of_do_I2C_RCEN 0012  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                            __CFG_LVP$ON 000000                                      l100 0E60  
                                    l201 0C3E                                      l113 10F4  
                                    l202 0C46                                      l114 10E4  
                                    l310 0F6C                                      l311 0F6A  
                                    l161 0D9E                                      l209 0D52  
                                    l162 0D92                                      l170 0814  
                                    l171 0802                                      l180 087C  
                                    l165 0D98                                      l173 0808  
                                    l309 0F48                                      l174 080E  
                                    l191 09E4                                      l169 084E  
                                    l185 09DA                                      l188 09EA  
                                    l189 09DE                                      l197 0C4C  
                                    l613 0B7A                                      l198 0C38  
                                    l606 0BF8                                      l608 0C2A  
                                    l636 0ABA                                      l671 063A  
                                    l680 069E                                      l672 064A  
                                    l684 06E0                                      l685 0732  
                                    l686 06E6                                      l678 0676  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
        __end_ofi2_i2c1_driver_getRXData 13CA             __size_of_i2c_masterOperation 0048  
                   _returnStop$intlevel0 1328                    __size_of_do_I2C_RESET 0016  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8                               _TXSTA1bits 000FAC  
        i2c1_driver_setBusCollisionISR@f 003A                              i2_do_I2C_RX 0A24  
                            i2_do_I2C_TX 091A                                     l1103 0F0A  
                                   l1104 0F02                                     l1107 0F22  
                                   l1108 0F2C                                     l1093 0D00  
                                   l1094 0CF8                                     l1097 0D20  
                                   l1098 0D2A                                     l4013 06A2  
                                   l3711 0F38                                     l3935 0BE8  
                         i2_mssp1_setIRQ 13C2                   __size_ofi2_do_I2C_IDLE 000C  
                                   STR_1 060B                                     u2121 0B84  
                 __size_ofi2_do_I2C_RCEN 000C                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   u2137 0B96                                     u1530 11C0  
                                   u2147 0C14                                     u1700 0D04  
                                   u2157 0AAC                                     u1518 09FA  
                                   u1519 0A0E                                     u2167 11C6  
                                   u1528 0C5C                                     u1529 0C70  
                                   u1730 0F0E                                     u1468 0DAE  
                                   u1580 11FC                                     u1469 0DC2  
                                   u1821 0BD6                                     u1910 06CE  
                                   u1488 0824                                     u1489 0838  
                                   u1578 0D68                                     u1930 073C  
                                   u1579 0D7C                                     u1588 11FE  
                                   u1861 0910                     ?_do_I2C_SEND_RESTART 0026  
                                   _WPUB 000F61                            _EUSART1_Write 0F36  
      __size_of_do_I2C_SEND_RESTART_READ 000E                     __end_ofi2_returnStop 13D6  
              ?_do_I2C_SEND_RESTART_READ 0026                                     _main 0B6A  
              __size_of_do_I2C_SEND_STOP 000E                   __size_of_do_I2C_DO_ACK 000E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 004A  
                          __CFG_BORV$190 000000                             printString@i 0092  
                  ?_do_I2C_SEND_ADR_READ 0026                                     prodh 000FF4  
                                   prodl 000FF3          ??_i2c1_driver_clearBusCollision 0026  
                                   start 0106                            __CFG_IESO$OFF 000000  
                          _i2c_setBuffer 10C8                          __end_of_i2c_ISR 0D82  
                           ___param_bank 000000                 ??_do_I2C_DO_NACK_RESTART 003A  
              __size_of_mssp1_disableIRQ 0004                             _do_I2C_RESET 1154  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1250  
               __end_of_i2c1_driver_open 1112                                    ?_main 0026  
               __end_of_i2c1_driver_stop 13AE               __end_of_i2c1_driver_TXData 133C  
                         __CFG_DEBUG$OFF 000000                          __end_of___lwdiv 0D34  
                                  i2l201 0C96                          __end_of___lwmod 0F36  
                                  i2l202 0C9E                  __size_ofi2_do_I2C_RESET 0010  
                                  i2l321 102C                                    i2l161 0EC2  
                                  i2l209 0E7C                                    i2l322 1028  
                                  i2l162 0EB6                                    i2l170 0936  
                                  i2l171 0924                                    i2l180 099E  
                                  i2l165 0EBC                                    i2l173 092A  
                                  i2l174 0930                                    i2l327 1038  
                                  i2l191 0A58                                    i2l328 1058  
                                  i2l169 0970                                    i2l185 0A4E  
                                  i2l188 0A5E                                    i2l189 0A52  
                                  i2l197 0CA4                                    i2l198 0C90  
                                  i2l571 009A                                    i2l567 006C  
                                  i2l569 0082                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1002                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                            i2c_open@ret 003C                            __CFG_WRTB$OFF 000000  
                  __end_ofi2_returnReset 13D2                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                   __end_ofi2_mssp1_setIRQ 13C6  
                         __CFG_EBTRB$OFF 000000               __end_of_i2c1_driver_isNACK 1180  
                        __end_of_dpowers 060B                        write_register@reg 0040  
                     __size_ofi2_i2c_ISR 0048               ?_do_I2C_SEND_RESTART_WRITE 0026  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 12E6  
                  ??_do_I2C_SEND_RESTART 003A                            i2returnStop@p 0026  
 __end_of_i2c1_driver_setBusCollisionISR 1318  __size_of_i2c1_driver_setBusCollisionISR 000A  
         _i2c1_driver_setBusCollisionISR 130E                           ?_EUSART1_Write 0026  
                                  pclath 000FFA                                    tablat 000FF5  
                __size_of_mssp1_clearIRQ 0004                                    plusw0 000FEB  
                                  plusw1 000FE3                                    plusw2 000FDB  
                 ?_do_I2C_SEND_ADR_WRITE 0026                                    status 000FD8  
                                  wtemp6 004B                           __CFG_HFOFST$ON 000000  
        __size_ofi2_i2c1_driver_sendNACK 0006                           ?_i2c_setBuffer 003A  
                         __CFG_PBADEN$ON 000000          __size_ofi2_i2c1_driver_resetBus 0002  
                          _fsmStateTable 00BF                          __initialization 0B04  
                             _i2c_poller 10E2                               _i2c_status 009A  
             __end_of_EUSART1_Initialize 0E1C                             __end_of_main 0BCC  
                          i2_do_I2C_IDLE 12DA                            i2_do_I2C_RCEN 12CE  
                       __end_of_i2c_open 07F2              ?_INTERRUPT_InterruptManager 0026  
                       i2_mssp1_clearIRQ 13BE         __end_ofi2_do_I2C_DO_ADDRESS_NACK 0EF4  
                          _do_I2C_DO_ACK 127A                                   ??_main 0047  
                          _do_I2C_TX$315 003B            __size_of_i2c1_driver_sendNACK 0006  
                          __activetblptr 000002                             i2c_close@ret 003A  
                    _i2c_masterAccelRead 1250                    ?_EUSART1_Transmit_ISR 0026  
          __size_of_i2c1_driver_resetBus 0002                  ?_do_I2C_DO_ADDRESS_NACK 0026  
                        ?i2_mssp1_setIRQ 0026       __end_ofi2_do_I2C_SEND_RESTART_READ 1374  
             i2_do_I2C_SEND_RESTART_READ 136C                         ??_read_xyzvalues 0046  
                                 _ANSELA 000F38                                   ?_putch 0026  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
               __size_ofi2_do_I2C_DO_ACK 0008                         ??_write_register 0040  
                         __CFG_WDTEN$OFF 000000                                   _RCREG1 000FAE  
                                 _RCSTA1 000FAB                       __size_of_i2c_close 001E  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                i2_do_I2C_SEND_ADR_WRITE 1202                   ??_do_I2C_SEND_ADR_READ 003A  
          __size_ofi2_do_I2C_TX_REGISTER 000E                                ??_i2c_ISR 003D  
                                 _TXREG1 000FAD                                   _TXSTA1 000FAC  
                   ?_i2c_masterAccelRead 0026             i2c_masterOperation@operation 003D  
                ??i2_do_I2C_SEND_RESTART 0026              ?i2_do_I2C_SEND_INITIAL_READ 0026  
               _do_I2C_SEND_INITIAL_READ 1128                           __CFG_XINST$OFF 000000  
       __size_ofi2_i2c1_driver_getRXData 0004                    _i2c1_driver_getRXData 13A2  
                     i2_i2c1_driver_stop 13D6                      _do_I2C_RX$intlevel0 09B0  
      __size_of_ACCELEROMETER_Initialize 006C              __end_of_do_I2C_DO_NACK_STOP 127A  
              ?_ACCELEROMETER_Initialize 0026                           ?i2_do_I2C_IDLE 0026  
                        _i2c_masterWrite 132C                           ?i2_do_I2C_RCEN 0026  
  __end_of_i2c1_driver_clearBusCollision 13E2   __size_of_i2c1_driver_clearBusCollision 0004  
          _i2c1_driver_clearBusCollision 13DE                           __CFG_STVREN$ON 000000  
                      __end_ofi2_i2c_ISR 0EAC          __size_of_do_I2C_DO_NACK_RESTART 000E  
                              ??___lwdiv 003E                                ??___lwmod 0045  
                     write_register@data 003F                           i2returnReset@p 0026  
                                 clear_0 0B4A                                   clear_1 0B56  
                         ?_do_I2C_DO_ACK 0026                                   _printf 062E  
                    ?i2_i2c1_driver_stop 0026                   i2_i2c1_driver_sendNACK 1388  
                 i2c1_driver_setI2cISR@f 003A              __end_of_i2c1_driver_sendACK 1388  
         __end_of_do_I2C_DO_ADDRESS_NACK 0DD0                   i2_i2c1_driver_resetBus 13E4  
                           __mediumconst 0000     __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008  
            __end_of_i2c1_driver_restart 13B2                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                           ?_returnReset 003A            _do_I2C_DO_NACK_STOP$intlevel0 1272  
                  _i2c1_driver_setI2cISR 1304              __end_of_i2c1_driver_startRX 13AA  
                        ??_EUSART1_Write 003A                    __size_ofi2_returnStop 0004  
                        _eusart1RxBuffer 0001     EUSART1_SetTxInterruptHandler@handler 003A  
         __size_ofi2_do_I2C_DO_NACK_STOP 0008            __size_of_INTERRUPT_Initialize 0004  
          __end_ofi2_do_I2C_DO_NACK_STOP 134C                             ?_printString 0026  
                        _eusart1TxBuffer 0009                        _SYSTEM_Initialize 11AA  
                             __accesstop 0060                     ??i2_i2c1_driver_stop 0026  
                __end_of__initialization 0B5C                          ??_i2c_setBuffer 003E  
         _do_I2C_SEND_ADR_READ$intlevel0 1144                         _do_I2C_SEND_STOP 1288  
                     __size_of_do_I2C_RX 007A                       _do_I2C_TX_REGISTER 1196  
                     __size_of_do_I2C_TX 0096                   __size_of_read_register 002E  
                     ?_SYSTEM_Initialize 0026                    ??_i2c_masterAccelRead 003F  
                          ___rparam_used 000001               __end_of_mssp1_IRQisEnabled 1202  
                    _i2c_masterOperation 0E1C                 __size_of_do_I2C_TX_EMPTY 005E  
         __size_ofi2_i2c1_driver_sendACK 0006               __end_of_mssp1_waitForEvent 11CE  
          __end_ofi2_i2c1_driver_sendACK 1394                              ?_i2c_poller 0026  
                         __pcstackCOMRAM 0026                      ?_do_I2C_TX_REGISTER 0026  
                    _do_I2C_TX$intlevel0 07F8                             __pidataBANK0 1086  
                           __pidataBANK1 0F70                      ??_SYSTEM_Initialize 003C  
         __size_ofi2_i2c1_driver_restart 0004            __end_ofi2_i2c1_driver_restart 13DE  
                       _mssp1_disableIRQ 13B6           __size_ofi2_i2c1_driver_startRX 0004  
          __end_ofi2_i2c1_driver_startRX 13CE                            __end_of_putch 12F0  
                      __end_of_i2c_close 10C8                             i2_returnStop 13D2  
                         i2_do_I2C_RESET 1232                   ??_EUSART1_Transmit_ISR 0026  
                   ?_i2c_masterOperation 0026                 i2_do_I2C_DO_ADDRESS_NACK 0EAC  
            __end_of_EUSART1_Receive_ISR 105C                     ??_do_I2C_TX_REGISTER 003B  
                           ?i2_do_I2C_RX 0026                             ?i2_do_I2C_TX 0026  
      __size_ofi2_do_I2C_DO_NACK_RESTART 0008                ?i2_do_I2C_DO_NACK_RESTART 0026  
                 _do_I2C_DO_NACK_RESTART 125E                __end_of_SYSTEM_Initialize 11BC  
              ??i2_do_I2C_SEND_ADR_WRITE 0026                                  ??_putch 003B  
                          _eusart1RxHead 001A               __end_ofi2_do_I2C_SEND_STOP 135C  
                          _eusart1TxHead 001C                            _eusart1RxTail 0019  
                         _mssp1_clearIRQ 13BA                               __pbssBANK0 009A  
                          _eusart1TxTail 001B        _EUSART1_TxDefaultInterruptHandler 00E5  
        ??_EUSART1_SetRxInterruptHandler 003C            __size_ofi2_i2c1_driver_TXData 0008  
                        __CFG_PLLCFG$OFF 000000                                ?_i2c_open 0026  
                             __pnvCOMRAM 0049                  __end_of_i2c_masterWrite 1334  
                 ?_i2c1_driver_getRXData 0026                        ??i2_do_I2C_DO_ACK 0026  
          __size_ofi2_i2c1_driver_isNACK 0016                    _do_I2C_IDLE$intlevel0 11E6  
                      i2_do_I2C_TX_EMPTY 0C8A                          ??i2_do_I2C_IDLE 0026  
           __size_of_i2c_busCollisionISR 0006                          ??i2_do_I2C_RCEN 0026  
                     __CFG_CCP2MX$PORTC1 000000                            ??_do_I2C_IDLE 003A  
                          ??_do_I2C_RCEN 003A                       ?i2_do_I2C_TX_EMPTY 0026  
                     __CFG_CCP3MX$PORTB5 000000                          ??_do_I2C_DO_ACK 003A  
                 __end_ofi2_do_I2C_RESET 1242                      i2c_setBuffer@buffer 003A  
                                ?_printf 0060                            _read_register 0FD4  
         ?_i2c1_driver_clearBusCollision 0026                      ??i2_do_I2C_TX_EMPTY 0026  
                  ??_i2c_masterOperation 003D                        ?_i2c1_driver_open 0026  
                      __end_of_do_I2C_RX 0A24                        __end_of_do_I2C_TX 0888  
               ??i2_do_I2C_SEND_ADR_READ 0026                        ?_i2c1_driver_stop 0026  
                 ?_i2c1_driver_setI2cISR 003A                       ??_i2c1_driver_open 003A  
                     ??_i2c1_driver_stop 003A                                  _OSCCON2 000FD2  
                          ?_mssp1_setIRQ 0026                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9                   __end_of_mssp1_clearIRQ 13BE  
                                _SSP1MSK 000FCA      __size_ofi2_do_I2C_SEND_INITIAL_READ 0010  
                    __size_of_i2c_poller 001A                  ??_do_I2C_SEND_ADR_WRITE 003B  
    _do_I2C_SEND_RESTART_WRITE$intlevel0 12AA              ??_do_I2C_SEND_RESTART_WRITE 003A  
                     _i2c1_driver_TXData 1334                               ??_i2c_open 003C  
               __end_ofi2_mssp1_clearIRQ 13C2                       _i2c1_driver_i2cISR 0011  
                                _i2c_ISR 0D34                __end_ofi2_do_I2C_TX_EMPTY 0CE2  
                i2_i2c1_driver_getRXData 13C6                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                    _returnReset$intlevel0 131E  
                  _do_I2C_RCEN$intlevel0 11D4                       _i2c1_driver_isNACK 116A  
                    ?_i2c1_driver_TXData 0026                                  __Lparam 0000  
       _do_I2C_DO_ADDRESS_NACK$intlevel0 0D88                                  ___lwdiv 0CE2  
                                ___lwmod 0EF4                             __psmallconst 0600  
                      ??_do_I2C_TX_EMPTY 003A                      ?_i2c1_driver_isNACK 0026  
                        ?i2_do_I2C_RESET 0026                                  __pcinit 0B04  
                                __ramtop 0600                           ?_read_register 0026  
                                __ptext0 0B6A                                  __ptext1 0888  
                                __ptext2 062E                                  __ptext3 12E6  
                                __ptext4 0EF4                                  __ptext5 0CE2  
                                __ptext6 0BCC                                  __ptext7 0F36  
                                __ptext8 11AA                                  __ptext9 105C  
                    __end_of_do_I2C_IDLE 11F2                          __size_of_printf 012A  
                    __end_of_do_I2C_RCEN 11E0                         ??i2_mssp1_setIRQ 0026  
                                _dpowers 0601                    _OSCILLATOR_Initialize 1242  
            __end_of_do_I2C_SEND_RESTART 12A4                           ??_mssp1_setIRQ 003A  
                   ??_i2c1_driver_TXData 003A                       _EUSART1_Initialize 0DD0  
               ??_PIN_MANAGER_Initialize 003A                   i2c_masterOperation@ret 003E  
                        ?_mssp1_clearIRQ 0026               _do_I2C_SEND_STOP$intlevel0 128E  
            ?i2_do_I2C_SEND_RESTART_READ 0026                 _do_I2C_SEND_RESTART_READ 12B2  
             __size_of_SYSTEM_Initialize 0012                     __size_of_returnReset 000A  
                   end_of_initialization 0B5C               ??_do_I2C_SEND_INITIAL_READ 003B  
       __end_of_ACCELEROMETER_Initialize 0B04                     ??_i2c1_driver_isNACK 003A  
                    ?_EUSART1_Initialize 0026             __end_of_i2c1_driver_sendNACK 1382  
                          __Lmediumconst 0000                     __size_of_printString 0060  
                       ?_i2c_masterWrite 0026             __end_of_i2c1_driver_resetBus 13E4  
  __end_of_EUSART1_SetRxInterruptHandler 1304   __size_of_EUSART1_SetRxInterruptHandler 000A  
          _EUSART1_SetRxInterruptHandler 12FA           __size_ofi2_do_I2C_SEND_RESTART 0008  
                                printf@c 006E                                  printf@f 0060  
          __end_ofi2_do_I2C_SEND_RESTART 1364                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                   __size_ofi2_returnReset 0004  
           ?i2_do_I2C_SEND_RESTART_WRITE 0026                _do_I2C_SEND_RESTART_WRITE 12A4  
                ?i2_i2c1_driver_sendNACK 0026                     ??_EUSART1_Initialize 003C  
           __end_ofi2_do_I2C_TX_REGISTER 12CE                  ?i2_i2c1_driver_resetBus 0026  
                             _returnStop 1322                 __end_of_do_I2C_SEND_STOP 1296  
                              i2_i2c_ISR 0E64          __size_ofi2_do_I2C_SEND_ADR_READ 0010  
               read_xyzvalues@readbuffer 001D                              returnStop@p 003A  
                    EUSART1_Write@txData 003A                 __end_of_mssp1_disableIRQ 13BA  
                   __size_ofi2_do_I2C_RX 0074                     __size_ofi2_do_I2C_TX 0090  
              ??i2_i2c1_driver_getRXData 0026               __size_ofi2_do_I2C_TX_EMPTY 0058  
          __size_of_do_I2C_SEND_ADR_READ 0016                             ??_i2c_poller 003D  
         __end_ofi2_i2c1_driver_sendNACK 138E                              _do_I2C_IDLE 11E0  
                            _do_I2C_RCEN 11CE             __end_of_INTERRUPT_Initialize 139E  
                        ??_read_register 0040           __end_ofi2_i2c1_driver_resetBus 13E6  
                    read_register@status 0016               ??i2_do_I2C_DO_ADDRESS_NACK 0026  
       __end_ofi2_do_I2C_DO_NACK_RESTART 1344            ??i2_do_I2C_SEND_RESTART_WRITE 0026  
                     _mssp1_IRQisEnabled 11F2                   ?_OSCILLATOR_Initialize 0026  
                             ?i2_i2c_ISR 0026             __size_of_do_I2C_DO_NACK_STOP 000E  
               read_xyzvalues@sensorData 0060                           __end_of_printf 0758  
                     _mssp1_waitForEvent 11BC                  ?_do_I2C_DO_NACK_RESTART 0026  
                    start_initialization 0B04                                _i2c_close 10AA  
                    _i2c_busCollisionISR 1394          __size_of_PIN_MANAGER_Initialize 002A  
                    ?_mssp1_IRQisEnabled 0026                          i2_do_I2C_DO_ACK 134C  
                          i2_returnReset 13CE                          i2_do_I2C_TX$315 0026  
                    ?_mssp1_waitForEvent 003A              __end_of_i2c_masterAccelRead 125E  
                            putch@txData 003B                       __end_of_i2c_poller 10FC  
           __size_of_i2c1_driver_sendACK 0006                    __end_of_EUSART1_Write 0F70  
                        i2c_open@address 003D                       printString@welcome 0060  
                i2c_setBuffer@bufferSize 003C                  ??_i2c1_driver_getRXData 003A  
           __size_of_i2c1_driver_restart 0004              __size_ofi2_i2c1_driver_stop 0004  
           __size_of_i2c1_driver_startRX 0004                    i2_do_I2C_DO_NACK_STOP 1344  
                 i2_do_I2C_SEND_ADR_READ 1222                    __end_of_i2c_setBuffer 10E2  
               _ACCELEROMETER_Initialize 0A98                        __size_of_i2c_open 009A  
                   ?_i2c_busCollisionISR 0026                     __end_of_mssp1_setIRQ 13A2  
                   ??_mssp1_IRQisEnabled 003A                  __size_of_read_xyzvalues 0092  
                   read_xyzvalues@status 0015                  __size_of_write_register 0032  
                     i2_do_I2C_SEND_STOP 1354                     ??_mssp1_waitForEvent 003C  
         ?_EUSART1_SetRxInterruptHandler 003A                    i2_i2c1_driver_sendACK 138E  
                          ?_do_I2C_RESET 0026             __end_ofi2_i2c1_driver_TXData 137C  
                            __pdataBANK0 00BF                              __pdataBANK1 0100  
                  i2i2c1_driver_TXData@d 0026                _do_I2C_TX_EMPTY$intlevel0 0C32  
    __size_ofi2_do_I2C_SEND_RESTART_READ 0008                    i2_i2c1_driver_restart 13DA  
                            ?_returnStop 003A                                 ??_printf 0046  
                    ?i2_do_I2C_SEND_STOP 0026                  ??_i2c1_driver_setI2cISR 003C  
                  i2_i2c1_driver_startRX 13CA           __end_of_do_I2C_DO_NACK_RESTART 126C  
                         _eusart1RxCount 0018                     _i2c1_driver_sendNACK 137C  
           __end_ofi2_i2c1_driver_isNACK 1196                              __pbssCOMRAM 0001  
      _EUSART1_RxDefaultInterruptHandler 00E3                               ?_i2c_close 0026  
                   _i2c1_driver_resetBus 13E2            __size_of_EUSART1_Transmit_ISR 002E  
                          __pcstackBANK0 0060                           ?i2_returnReset 0026  
                              _do_I2C_RX 09AA                                _do_I2C_TX 07F2  
            __size_of_do_I2C_TX_REGISTER 0014         __end_of_do_I2C_SEND_INITIAL_READ 113E  
         __size_of_do_I2C_SEND_ADR_WRITE 0016          ??_EUSART1_SetTxInterruptHandler 003C  
          __end_of_do_I2C_SEND_ADR_WRITE 1128             __size_of_EUSART1_Receive_ISR 002C  
                   ??i2_do_I2C_SEND_STOP 0026                __size_of_i2c1_driver_open 0016  
                      ?i2_mssp1_clearIRQ 0026                     i2_do_I2C_TX_REGISTER 12C0  
              __size_of_i2c1_driver_stop 0004                                 ?_i2c_ISR 0026  
        _do_I2C_SEND_ADR_WRITE$intlevel0 1118                          _do_I2C_TX_EMPTY 0C2C  
                              __pnvBANK0 00E3                       ??i2_mssp1_clearIRQ 0026  
                  ??_i2c_busCollisionISR 0026                         ___lwdiv@dividend 003A  
                 _PIN_MANAGER_Initialize 105C                         ??i2_do_I2C_RESET 0026  
                              __pintcode 0008                    __end_ofi2_do_I2C_IDLE 12E6  
                  __end_ofi2_do_I2C_RCEN 12DA                           ??_do_I2C_RESET 003A  
                              __ptext100 1030                                __ptext101 0000  
            __end_of_i2c_masterOperation 0E64                                 ?___lwdiv 003A  
               ??_do_I2C_DO_ADDRESS_NACK 003A                                 ?___lwmod 0041  
            _i2c1_driver_busCollisionISR 0013                    __end_of_do_I2C_DO_ACK 1288  
           ??_INTERRUPT_InterruptManager 0028                         __CFG_PRICLKEN$ON 000000  
             ??_do_I2C_SEND_RESTART_READ 003A                    ?_i2c1_driver_sendNACK 0026  
                            ??i2_i2c_ISR 0028                  __end_ofi2_do_I2C_DO_ACK 1354  
                       ??_mssp1_clearIRQ 003A                              __smallconst 0600  
                               _BAUDCON1 000FB8                 i2_do_I2C_DO_NACK_RESTART 133C  
                  ?_i2c1_driver_resetBus 0026       __size_of_do_I2C_SEND_RESTART_WRITE 000E  
               ?i2_do_I2C_SEND_ADR_WRITE 0026                               ?_do_I2C_RX 0026  
                             ?_do_I2C_TX 0026                         ___lwdiv@quotient 003F  
                      _i2c1_driver_start 13B2               read_register@receivebuffer 0025  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 139A  
                      _i2c_ISR$intlevel0 0D3A                       ?_i2c1_driver_start 0026  
                 ?i2_do_I2C_DO_NACK_STOP 0026                    ?i2_do_I2C_TX_REGISTER 0026  
                    __size_of_returnStop 000A                                 _PIE1bits 000F9D  
                               _PIE2bits 000FA0       _do_I2C_SEND_INITIAL_READ$intlevel0 112E  
                    ??_i2c1_driver_start 003A                                 i2u202_48 0060  
                               i2u211_48 00A4                                 i2u211_49 00BA  
                               i2u205_48 0076      __size_of_INTERRUPT_InterruptManager 00FE  
                               i2u208_48 008C                                 i2u180_48 0A6E  
                               i2u180_49 0A82                                 i2u181_48 0CB4  
                               i2u181_49 0CC8                                 i2u175_48 0ED2  
                               i2u175_49 0EE6                                 _PIR1bits 000F9E  
                               i2u177_48 0946                                 i2u177_49 095A  
                               _PIR2bits 000FA1                                 i2u197_48 0E92  
                               i2u197_49 0EA6             ??i2_do_I2C_SEND_INITIAL_READ 0026  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                 ?i2_i2c1_driver_sendACK 0026                                 _SSP1CON1 000FC6  
                               _SSP1CON2 000FC5                                 _SSP1STAT 000FC7  
                 ?i2_i2c1_driver_restart 0026                   ?i2_i2c1_driver_startRX 0026  
                      ?_do_I2C_SEND_STOP 0026                               printf@flag 006A  
                             printf@prec 006B                          ??i2_returnReset 0028  
                            ??_i2c_close 003A                __end_of_i2c1_driver_start 13B6  
                          ??_returnReset 003C                       ??_do_I2C_SEND_STOP 003A  
            __size_of_i2c1_driver_TXData 0008        __end_of_do_I2C_SEND_RESTART_WRITE 12B2  
                __end_of_do_I2C_TX_EMPTY 0C8A                              _INTCON2bits 000FF1  
                              copy_data0 0B18                                copy_data1 0B38  
                  ?_INTERRUPT_Initialize 0026                            ??_printString 003B  
                      ?_mssp1_disableIRQ 0026             __size_of_do_I2C_SEND_RESTART 000E  
            __size_of_i2c1_driver_isNACK 0016                     i2_i2c1_driver_TXData 1374  
                _do_I2C_DO_ACK$intlevel0 1280                                 _i2c_open 0758  
                  __size_of_mssp1_setIRQ 0004                       ??_mssp1_disableIRQ 003A  
                    _do_I2C_DO_NACK_STOP 126C                         __size_of_i2c_ISR 004E  
  __end_of_EUSART1_SetTxInterruptHandler 12FA   __size_of_EUSART1_SetTxInterruptHandler 000A  
          _EUSART1_SetTxInterruptHandler 12F0                                 __Hrparam 0000  
                   i2_i2c1_driver_isNACK 1180                           _read_xyzvalues 0888  
                         _write_register 0FA2                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                             ?_do_I2C_IDLE 0026  
                           ?_do_I2C_RCEN 0026                        __CFG_P2BMX$PORTB5 000000  
      __size_of_do_I2C_SEND_INITIAL_READ 0016                  ??_OSCILLATOR_Initialize 003A  
              ?_do_I2C_SEND_INITIAL_READ 0026                      _i2c1_driver_sendACK 1382  
               __size_of_i2c_masterWrite 0008                    i2_do_I2C_SEND_RESTART 135C  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                      i2c1_driver_TXData@d 003A  
            __size_of_EUSART1_Initialize 004C                         __size_of___lwdiv 0052  
                 ??_i2c1_driver_sendNACK 003A                         __size_of___lwmod 0042  
        __end_ofi2_do_I2C_SEND_ADR_WRITE 1212         ??_i2c1_driver_setBusCollisionISR 003C  
        ?_i2c1_driver_setBusCollisionISR 003A                         read_register@reg 0040  
     _do_I2C_SEND_RESTART_READ$intlevel0 12B8                      _i2c1_driver_restart 13AE  
                          ?i2_returnStop 0026                     ?_do_I2C_DO_NACK_STOP 0026  
                    _i2c1_driver_startRX 13A6             __end_of_do_I2C_SEND_ADR_READ 1154  
                 ??_i2c1_driver_resetBus 003A                         ?i2_do_I2C_DO_ACK 0026  
                        ___lwdiv@divisor 003C                            ??i2_do_I2C_RX 0026  
                          ??i2_do_I2C_TX 0026                             _mssp1_setIRQ 139E  
                            ??_do_I2C_RX 003A                              ??_do_I2C_TX 003B  
                        ___lwdiv@counter 003E                                 __ptext10 1242  
                               __ptext11 139A                                 __ptext20 0758  
                               __ptext12 0DD0                                 __ptext21 1304  
                               __ptext13 12F0                                 __ptext30 0C2C  
                               __ptext22 130E                                 __ptext14 12FA  
                               __ptext31 09AA                                 __ptext23 10FC  
                               __ptext15 0A98                                 __ptext40 113E  
                               __ptext32 07F2                                 __ptext24 1250  
                               __ptext16 0FA2                                 __ptext41 1288  
                               __ptext33 0D82                                 __ptext25 0E1C  
                               __ptext17 132C                                 __ptext50 1334  
                               __ptext42 1296                                 __ptext34 125E  
                               __ptext26 11F2                                 __ptext18 0FD4  
                               __ptext51 13A2                                 __ptext43 12A4  
                               __ptext35 126C                                 __ptext27 10E2  
                               __ptext19 10C8                                 __ptext60 13B2  
                               __ptext52 137C                                 __ptext44 12B2  
                               __ptext36 127A                                 __ptext28 11BC  
                               __ptext61 10AA                                 __ptext53 13E2  
                               __ptext45 11E0                                 __ptext37 11CE  
                               __ptext29 0D34                                 __ptext70 0EAC  
                               __ptext62 13B6                                 __ptext54 13A6  
                               __ptext46 1154                                 __ptext38 1112  
                               __ptext71 133C                                 __ptext63 13BA  
                               __ptext55 1318                                 __ptext47 1196  
                               __ptext39 1128                                 __ptext80 1364  
                               __ptext72 1344                                 __ptext56 1322  
                               __ptext48 139E                                 __ptext81 136C  
                               __ptext73 134C                                 __ptext65 0E64  
                               __ptext57 13AA                                 __ptext49 116A  
                               __ptext90 13E4                                 __ptext82 12DA  
                               __ptext74 12CE                                 __ptext66 13BE  
                               __ptext58 13AE                                 __ptext91 13CA  
                               __ptext83 1232                                 __ptext75 1202  
                               __ptext67 0C8A                                 __ptext59 1382  
                               __ptext92 13CE                                 __ptext84 12C0  
                               __ptext76 1212                                 __ptext68 0A24  
                               __ptext93 13D2                                 __ptext85 13C2  
                               __ptext77 1222                                 __ptext69 091A  
                               __ptext94 13D6                                 __ptext86 1180  
                               __ptext78 1354                                 __ptext95 13DA  
                               __ptext87 1374                                 __ptext79 135C  
                               __ptext96 138E                                 __ptext88 13C6  
                               __ptext97 1394                                 __ptext89 1388  
                               __ptext98 13DE                                 __ptext99 1002  
                           _SSP1CON1bits 000FC6               ??_ACCELEROMETER_Initialize 0041  
                           _SSP1CON2bits 000FC5                     ?_i2c1_driver_sendACK 0026  
                   __end_of_do_I2C_RESET 116A                   ??i2_do_I2C_TX_REGISTER 0026  
                  ?i2_i2c1_driver_TXData 0026                  ?i2_do_I2C_SEND_ADR_READ 0026  
                __size_ofi2_mssp1_setIRQ 0004                     write_register@buffer 0023  
                   ?_i2c1_driver_restart 0026                      __end_of_returnReset 1322  
                       _i2c1_driver_open 10FC                         _i2c1_driver_stop 13AA  
                          __size_of_main 0062                     ?_i2c1_driver_startRX 0026  
         __size_of_i2c1_driver_getRXData 0004                   __end_of_read_xyzvalues 091A  
                   write_register@status 0017            __end_of_i2c1_driver_getRXData 13A6  
                 __end_of_write_register 0FD4                   i2c_masterAccelRead@reg 003F  
                  ?i2_i2c1_driver_isNACK 0026                      __end_of_printString 0C2C  
                       printString@F7170 0100                                 int$flags 004A  
   EUSART1_SetRxInterruptHandler@handler 003A       __end_of_INTERRUPT_InterruptManager 0106  
             _INTERRUPT_InterruptManager 0008                                 main@data 0094  
                              printf@val 006C                             _SSP1STATbits 000FC7  
                         ??i2_returnStop 0028         __end_of_do_I2C_SEND_RESTART_READ 12C0  
                  __end_of_read_register 1002                             ??_returnStop 003C  
                    _EUSART1_Receive_ISR 1030                    ??_do_I2C_DO_NACK_STOP 003A  
              mssp1_waitForEvent@timeout 003A           __size_of_i2c1_driver_setI2cISR 000A  
          __end_of_i2c1_driver_setI2cISR 130E                               _INTCONbits 000FF2  
             __size_of_i2c1_driver_start 0004                   ??_INTERRUPT_Initialize 003A  
               ?i2_i2c1_driver_getRXData 0026           __end_ofi2_do_I2C_SEND_ADR_READ 1232  
                  ??_i2c1_driver_sendACK 003A                         ?_do_I2C_TX_EMPTY 0026  
      __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048               __end_ofi2_i2c1_driver_stop 13DA  
              ?i2_do_I2C_DO_ADDRESS_NACK 0026                   _do_I2C_DO_ADDRESS_NACK 0D82  
                               intlevel2 0000                   _do_I2C_RESET$intlevel0 115A  
                  ??_i2c1_driver_restart 003A                     ?_EUSART1_Receive_ISR 0026  
                  ??_i2c1_driver_startRX 003A                         ___lwmod@dividend 0041  
                    __end_ofi2_do_I2C_RX 0A98                      __end_ofi2_do_I2C_TX 09AA  
                ?_PIN_MANAGER_Initialize 0026                          ?_read_xyzvalues 0040  
                             _RCSTA1bits 000FAB                          ?_write_register 003F  
                     __end_of_returnStop 132C             __end_of_EUSART1_Transmit_ISR 1030  
           __size_of_i2c_masterAccelRead 000E       __end_ofi2_do_I2C_SEND_INITIAL_READ 1222  
             i2_do_I2C_SEND_INITIAL_READ 1212              __size_of_mssp1_IRQisEnabled 0010  
    __end_ofi2_do_I2C_SEND_RESTART_WRITE 136C              i2_do_I2C_SEND_RESTART_WRITE 1364  
                               printf@ap 0068                   ?i2_do_I2C_SEND_RESTART 0026  
             ??i2_do_I2C_DO_NACK_RESTART 0026              __size_of_mssp1_waitForEvent 0012  
         ?_EUSART1_SetTxInterruptHandler 003A                __size_ofi2_mssp1_clearIRQ 0004  
                 __size_of_EUSART1_Write 003A                          ___lwmod@divisor 0043  
             __end_of_do_I2C_TX_REGISTER 11AA                        ??_i2c_masterWrite 003F  
                        ___lwmod@counter 0045                   __size_of_i2c_setBuffer 001A  
                      __CFG_T3CMX$PORTC0 000000                              _returnReset 1318  
       _do_I2C_DO_NACK_RESTART$intlevel0 1264                  ??i2_do_I2C_DO_NACK_STOP 0026  
                 ??i2_i2c1_driver_TXData 0026             ??i2_do_I2C_SEND_RESTART_READ 0026  
                  ??_EUSART1_Receive_ISR 0026           __end_of_PIN_MANAGER_Initialize 1086  
            __end_of_i2c_busCollisionISR 139A                              _printString 0BCC  
            __size_ofi2_do_I2C_SEND_STOP 0008                 ??i2_i2c1_driver_sendNACK 0026  
                      __CFG_FOSC$INTIO67 000000                   ??i2_i2c1_driver_isNACK 0026  
       __size_ofi2_do_I2C_SEND_ADR_WRITE 0010                    _do_I2C_SEND_ADR_WRITE 1112  
                ??i2_i2c1_driver_sendACK 0026                     _do_I2C_SEND_ADR_READ 113E  
               ??i2_i2c1_driver_resetBus 0026                  ??i2_i2c1_driver_restart 0026  
