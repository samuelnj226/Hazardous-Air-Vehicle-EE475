

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 26 15:17:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,inline
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,inline
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,inline
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,inline
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1,inline
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1,inline
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1,inline
    81                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1,inline
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1
   115                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   121                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   122  0000                     
   123                           ; Version 1.45
   124                           ; Generated 16/11/2017 GMT
   125                           ; 
   126                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   127                           ; All rights reserved.
   128                           ; 
   129                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   130                           ; 
   131                           ; Redistribution and use in source and binary forms, with or without modification, are
   132                           ; permitted provided that the following conditions are met:
   133                           ; 
   134                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   135                           ;        conditions and the following disclaimer.
   136                           ; 
   137                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   138                           ;        of conditions and the following disclaimer in the documentation and/or other
   139                           ;        materials provided with the distribution.
   140                           ; 
   141                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   142                           ;        software without specific prior written permission.
   143                           ; 
   144                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   145                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   146                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   147                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   148                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   149                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   150                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   151                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   152                           ; 
   153                           ; 
   154                           ; Code-generator required, PIC18F25K22 Definitions
   155                           ; 
   156                           ; SFR Addresses
   157  0000                     
   158                           	psect	idataBANK0
   159  00107C                     __pidataBANK0:
   160                           	opt stack 0
   161                           
   162                           ;initializer for _fsmStateTable
   163  00107C  D6                 	db	low _do_I2C_IDLE
   164  00107D  11                 	db	high _do_I2C_IDLE
   165  00107E  34                 	db	low _do_I2C_SEND_ADR_READ
   166  00107F  11                 	db	high _do_I2C_SEND_ADR_READ
   167  001080  08                 	db	low _do_I2C_SEND_ADR_WRITE
   168  001081  11                 	db	high _do_I2C_SEND_ADR_WRITE
   169  001082  DA                 	db	low _do_I2C_TX
   170  001083  07                 	db	high _do_I2C_TX
   171  001084  92                 	db	low _do_I2C_RX
   172  001085  09                 	db	high _do_I2C_RX
   173  001086  C4                 	db	low _do_I2C_RCEN
   174  001087  11                 	db	high _do_I2C_RCEN
   175  001088  22                 	db	low _do_I2C_TX_EMPTY
   176  001089  0C                 	db	high _do_I2C_TX_EMPTY
   177  00108A  A8                 	db	low _do_I2C_SEND_RESTART_READ
   178  00108B  12                 	db	high _do_I2C_SEND_RESTART_READ
   179  00108C  9A                 	db	low _do_I2C_SEND_RESTART_WRITE
   180  00108D  12                 	db	high _do_I2C_SEND_RESTART_WRITE
   181  00108E  8C                 	db	low _do_I2C_SEND_RESTART
   182  00108F  12                 	db	high _do_I2C_SEND_RESTART
   183  001090  7E                 	db	low _do_I2C_SEND_STOP
   184  001091  12                 	db	high _do_I2C_SEND_STOP
   185  001092  70                 	db	low _do_I2C_DO_ACK
   186  001093  12                 	db	high _do_I2C_DO_ACK
   187  001094  62                 	db	low _do_I2C_DO_NACK_STOP
   188  001095  12                 	db	high _do_I2C_DO_NACK_STOP
   189  001096  54                 	db	low _do_I2C_DO_NACK_RESTART
   190  001097  12                 	db	high _do_I2C_DO_NACK_RESTART
   191  001098  4A                 	db	low _do_I2C_RESET
   192  001099  11                 	db	high _do_I2C_RESET
   193  00109A  78                 	db	low _do_I2C_DO_ADDRESS_NACK
   194  00109B  0D                 	db	high _do_I2C_DO_ADDRESS_NACK
   195  00109C  1E                 	db	low _do_I2C_SEND_INITIAL_READ
   196  00109D  11                 	db	high _do_I2C_SEND_INITIAL_READ
   197  00109E  8C                 	db	low _do_I2C_TX_REGISTER
   198  00109F  11                 	db	high _do_I2C_TX_REGISTER
   199                           
   200                           	psect	idataBANK1
   201  000F66                     __pidataBANK1:
   202                           	opt stack 0
   203                           
   204                           ;initializer for printString@F7170
   205  000F66  0A                 	db	10
   206  000F67  0D                 	db	13
   207  000F68  47                 	db	71
   208  000F69  4F                 	db	79
   209  000F6A  54                 	db	84
   210  000F6B  20                 	db	32
   211  000F6C  48                 	db	72
   212  000F6D  45                 	db	69
   213  000F6E  52                 	db	82
   214  000F6F  45                 	db	69
   215  000F70  2E                 	db	46
   216  000F71  20                 	db	32
   217  000F72  0A                 	db	10
   218  000F73  0D                 	db	13
   219  000F74  00                 	db	0
   220  000F75  00                 	db	0
   221  000F76  00                 	db	0
   222  000F77  00                 	db	0
   223  000F78  00                 	db	0
   224  000F79  00                 	db	0
   225  000F7A  00                 	db	0
   226  000F7B  00                 	db	0
   227  000F7C  00                 	db	0
   228  000F7D  00                 	db	0
   229  000F7E  00                 	db	0
   230  000F7F  00                 	db	0
   231  000F80  00                 	db	0
   232  000F81  00                 	db	0
   233  000F82  00                 	db	0
   234  000F83  00                 	db	0
   235  000F84  00                 	db	0
   236  000F85  00                 	db	0
   237  000F86  00                 	db	0
   238  000F87  00                 	db	0
   239  000F88  00                 	db	0
   240  000F89  00                 	db	0
   241  000F8A  00                 	db	0
   242  000F8B  00                 	db	0
   243  000F8C  00                 	db	0
   244  000F8D  00                 	db	0
   245  000F8E  00                 	db	0
   246  000F8F  00                 	db	0
   247  000F90  00                 	db	0
   248  000F91  00                 	db	0
   249  000F92  00                 	db	0
   250  000F93  00                 	db	0
   251  000F94  00                 	db	0
   252  000F95  00                 	db	0
   253  000F96  00                 	db	0
   254  000F97  00                 	db	0
   255                           
   256                           	psect	smallconst
   257  000600                     __psmallconst:
   258                           	opt stack 0
   259  000600  00                 	db	0
   260  000601                     _dpowers:
   261                           	opt stack 0
   262  000601  0001               	dw	1
   263  000603  000A               	dw	10
   264  000605  0064               	dw	100
   265  000607  03E8               	dw	1000
   266  000609  2710               	dw	10000
   267  00060B                     __end_of_dpowers:
   268                           	opt stack 0
   269  00060B                     STR_1:
   270  00060B  25                 	db	37
   271  00060C  64                 	db	100	;'d'
   272  00060D  25                 	db	37
   273  00060E  64                 	db	100	;'d'
   274  00060F  25                 	db	37
   275  000610  64                 	db	100	;'d'
   276  000611  00                 	db	0
   277  000612                     STR_2:
   278  000612  0D                 	db	13
   279  000613  0A                 	db	10
   280  000614  00                 	db	0
   281                           
   282                           ; #config settings
   283  000615  00                 	db	0	; dummy byte at the end
   284  0000                     
   285                           	psect	nvCOMRAM
   286  000049                     __pnvCOMRAM:
   287                           	opt stack 0
   288  000049                     _eusart1TxBufferRemaining:
   289                           	opt stack 0
   290  000049                     	ds	1
   291                           
   292                           	psect	nvBANK0
   293  0000E3                     __pnvBANK0:
   294                           	opt stack 0
   295  0000E3                     _EUSART1_RxDefaultInterruptHandler:
   296                           	opt stack 0
   297  0000E3                     	ds	2
   298  0000E5                     _EUSART1_TxDefaultInterruptHandler:
   299                           	opt stack 0
   300  0000E5                     	ds	2
   301  0000                     _ANSELA	set	3896
   302  0000                     _ANSELB	set	3897
   303  0000                     _ANSELC	set	3898
   304  0000                     _PIE2bits	set	4000
   305  0000                     _INTCONbits	set	4082
   306  0000                     _RCONbits	set	4048
   307  0000                     _INTCON2bits	set	4081
   308  0000                     _WPUB	set	3937
   309  0000                     _TRISC	set	3988
   310  0000                     _TRISB	set	3987
   311  0000                     _TRISA	set	3986
   312  0000                     _LATC	set	3979
   313  0000                     _LATB	set	3978
   314  0000                     _LATA	set	3977
   315  0000                     _PIR2bits	set	4001
   316  0000                     _SSP1STATbits	set	4039
   317  0000                     _SSP1MSK	set	4042
   318  0000                     _SSP1BUF	set	4041
   319  0000                     _SSP1CON2bits	set	4037
   320  0000                     _SSP1ADD	set	4040
   321  0000                     _SSP1CON2	set	4037
   322  0000                     _SSP1CON1	set	4038
   323  0000                     _SSP1STAT	set	4039
   324  0000                     _PIR1bits	set	3998
   325  0000                     _SSP1CON1bits	set	4038
   326  0000                     _OSCTUNE	set	3995
   327  0000                     _OSCCON2	set	4050
   328  0000                     _OSCCON	set	4051
   329  0000                     _RCREG1	set	4014
   330  0000                     _RCSTA1bits	set	4011
   331  0000                     _TXREG1	set	4013
   332  0000                     _TXSTA1bits	set	4012
   333  0000                     _SPBRGH1	set	4016
   334  0000                     _SPBRG1	set	4015
   335  0000                     _TXSTA1	set	4012
   336  0000                     _RCSTA1	set	4011
   337  0000                     _BAUDCON1	set	4024
   338  0000                     _PIE1bits	set	3997
   339                           
   340                           	psect	cinit
   341  000B5C                     __pcinit:
   342                           	opt stack 0
   343  000B5C                     start_initialization:
   344                           	opt stack 0
   345  000B5C                     __initialization:
   346                           	opt stack 0
   347                           
   348                           ; Initialize objects allocated to BANK1 (50 bytes)
   349                           ; load TBLPTR registers with __pidataBANK1
   350  000B5C  0E66               	movlw	low __pidataBANK1
   351  000B5E  6EF6               	movwf	tblptrl,c
   352  000B60  0E0F               	movlw	high __pidataBANK1
   353  000B62  6EF7               	movwf	tblptrh,c
   354  000B64  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   355  000B66  6EF8               	movwf	tblptru,c
   356  000B68  EE01  F000         	lfsr	0,__pdataBANK1
   357  000B6C  EE10 F032          	lfsr	1,50
   358  000B70                     copy_data0:
   359  000B70  0009               	tblrd		*+
   360  000B72  CFF5 FFEE          	movff	tablat,postinc0
   361  000B76  50E5               	movf	postdec1,w,c
   362  000B78  50E1               	movf	fsr1l,w,c
   363  000B7A  E1FA               	bnz	copy_data0
   364                           
   365                           ; Initialize objects allocated to BANK0 (36 bytes)
   366                           ; load TBLPTR registers with __pidataBANK0
   367  000B7C  0E7C               	movlw	low __pidataBANK0
   368  000B7E  6EF6               	movwf	tblptrl,c
   369  000B80  0E10               	movlw	high __pidataBANK0
   370  000B82  6EF7               	movwf	tblptrh,c
   371  000B84  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   372  000B86  6EF8               	movwf	tblptru,c
   373  000B88  EE00  F0BF         	lfsr	0,__pdataBANK0
   374  000B8C  EE10 F024          	lfsr	1,36
   375  000B90                     copy_data1:
   376  000B90  0009               	tblrd		*+
   377  000B92  CFF5 FFEE          	movff	tablat,postinc0
   378  000B96  50E5               	movf	postdec1,w,c
   379  000B98  50E1               	movf	fsr1l,w,c
   380  000B9A  E1FA               	bnz	copy_data1
   381                           
   382                           ; Clear objects allocated to BANK0 (37 bytes)
   383  000B9C  EE00  F09A         	lfsr	0,__pbssBANK0
   384  000BA0  0E25               	movlw	37
   385  000BA2                     clear_0:
   386  000BA2  6AEE               	clrf	postinc0,c
   387  000BA4  06E8               	decf	wreg,f,c
   388  000BA6  E1FD               	bnz	clear_0
   389                           
   390                           ; Clear objects allocated to COMRAM (37 bytes)
   391  000BA8  EE00  F001         	lfsr	0,__pbssCOMRAM
   392  000BAC  0E25               	movlw	37
   393  000BAE                     clear_1:
   394  000BAE  6AEE               	clrf	postinc0,c
   395  000BB0  06E8               	decf	wreg,f,c
   396  000BB2  E1FD               	bnz	clear_1
   397  000BB4                     end_of_initialization:
   398                           	opt stack 0
   399  000BB4                     __end_of__initialization:
   400                           	opt stack 0
   401  000BB4  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   402  000BB6  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   403  000BB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   404  000BBA  6EF8               	movwf	tblptru,c
   405  000BBC  0100               	movlb	0
   406  000BBE  EF40  F005         	goto	_main	;jump to C main() function
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           postdec1	equ	0xFE5
   414                           fsr1l	equ	0xFE1
   415                           
   416                           	psect	bssCOMRAM
   417  000001                     __pbssCOMRAM:
   418                           	opt stack 0
   419  000001                     _eusart1RxBuffer:
   420                           	opt stack 0
   421  000001                     	ds	8
   422  000009                     _eusart1TxBuffer:
   423                           	opt stack 0
   424  000009                     	ds	8
   425  000011                     _i2c1_driver_i2cISR:
   426                           	opt stack 0
   427  000011                     	ds	2
   428  000013                     _i2c1_driver_busCollisionISR:
   429                           	opt stack 0
   430  000013                     	ds	2
   431  000015                     read_xyzvalues@status:
   432                           	opt stack 0
   433  000015                     	ds	1
   434  000016                     read_register@status:
   435                           	opt stack 0
   436  000016                     	ds	1
   437  000017                     write_register@status:
   438                           	opt stack 0
   439  000017                     	ds	1
   440  000018                     _eusart1RxCount:
   441                           	opt stack 0
   442  000018                     	ds	1
   443  000019                     _eusart1RxTail:
   444                           	opt stack 0
   445  000019                     	ds	1
   446  00001A                     _eusart1RxHead:
   447                           	opt stack 0
   448  00001A                     	ds	1
   449  00001B                     _eusart1TxTail:
   450                           	opt stack 0
   451  00001B                     	ds	1
   452  00001C                     _eusart1TxHead:
   453                           	opt stack 0
   454  00001C                     	ds	1
   455  00001D                     read_xyzvalues@readbuffer:
   456                           	opt stack 0
   457  00001D                     	ds	6
   458  000023                     write_register@buffer:
   459                           	opt stack 0
   460  000023                     	ds	2
   461  000025                     read_register@receivebuffer:
   462                           	opt stack 0
   463  000025                     	ds	1
   464                           tblptru	equ	0xFF8
   465                           tblptrh	equ	0xFF7
   466                           tblptrl	equ	0xFF6
   467                           tablat	equ	0xFF5
   468                           postinc0	equ	0xFEE
   469                           wreg	equ	0xFE8
   470                           postdec1	equ	0xFE5
   471                           fsr1l	equ	0xFE1
   472                           
   473                           	psect	bssBANK0
   474  00009A                     __pbssBANK0:
   475                           	opt stack 0
   476  00009A                     _i2c_status:
   477                           	opt stack 0
   478  00009A                     	ds	37
   479                           tblptru	equ	0xFF8
   480                           tblptrh	equ	0xFF7
   481                           tblptrl	equ	0xFF6
   482                           tablat	equ	0xFF5
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           postdec1	equ	0xFE5
   486                           fsr1l	equ	0xFE1
   487                           
   488                           	psect	dataBANK0
   489  0000BF                     __pdataBANK0:
   490                           	opt stack 0
   491  0000BF                     _fsmStateTable:
   492                           	opt stack 0
   493  0000BF                     	ds	36
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	dataBANK1
   504  000100                     __pdataBANK1:
   505                           	opt stack 0
   506  000100                     printString@F7170:
   507                           	opt stack 0
   508  000100                     	ds	50
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           postdec1	equ	0xFE5
   516                           fsr1l	equ	0xFE1
   517                           
   518                           	psect	cstackBANK0
   519  000060                     __pcstackBANK0:
   520                           	opt stack 0
   521  000060                     ?_printf:
   522                           	opt stack 0
   523  000060                     printf@f:
   524                           	opt stack 0
   525  000060                     read_xyzvalues@sensorData:
   526                           	opt stack 0
   527  000060                     printString@welcome:
   528                           	opt stack 0
   529                           
   530                           ; 50 bytes @ 0x0
   531  000060                     	ds	8
   532  000068                     printf@ap:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x8
   536  000068                     	ds	2
   537  00006A                     printf@flag:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0xA
   541  00006A                     	ds	1
   542  00006B                     printf@prec:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0xB
   546  00006B                     	ds	1
   547  00006C                     printf@val:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0xC
   551  00006C                     	ds	2
   552  00006E                     printf@c:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0xE
   556  00006E                     	ds	36
   557  000092                     printString@i:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x32
   561  000092                     	ds	2
   562  000094                     main@data:
   563                           	opt stack 0
   564                           
   565                           ; 6 bytes @ 0x34
   566  000094                     	ds	6
   567                           tblptru	equ	0xFF8
   568                           tblptrh	equ	0xFF7
   569                           tblptrl	equ	0xFF6
   570                           tablat	equ	0xFF5
   571                           postinc0	equ	0xFEE
   572                           wreg	equ	0xFE8
   573                           postdec1	equ	0xFE5
   574                           fsr1l	equ	0xFE1
   575                           
   576                           	psect	cstackCOMRAM
   577  000026                     __pcstackCOMRAM:
   578                           	opt stack 0
   579  000026                     ??i2_i2c1_driver_isNACK:
   580  000026                     i2i2c1_driver_TXData@d:
   581                           	opt stack 0
   582  000026                     i2_do_I2C_TX$315:
   583                           	opt stack 0
   584  000026                     i2returnReset@p:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x0
   588  000026                     	ds	2
   589  000028                     ??_INTERRUPT_InterruptManager:
   590  000028                     
   591                           ; 1 bytes @ 0x2
   592  000028                     	ds	18
   593  00003A                     ??_mssp1_IRQisEnabled:
   594  00003A                     ??_i2c1_driver_isNACK:
   595  00003A                     ?___lwdiv:
   596                           	opt stack 0
   597  00003A                     i2c_close@ret:
   598                           	opt stack 0
   599  00003A                     EUSART1_Write@txData:
   600                           	opt stack 0
   601  00003A                     i2c1_driver_TXData@d:
   602                           	opt stack 0
   603  00003A                     i2c_setBuffer@buffer:
   604                           	opt stack 0
   605  00003A                     returnReset@p:
   606                           	opt stack 0
   607  00003A                     EUSART1_SetTxInterruptHandler@handler:
   608                           	opt stack 0
   609  00003A                     EUSART1_SetRxInterruptHandler@handler:
   610                           	opt stack 0
   611  00003A                     mssp1_waitForEvent@timeout:
   612                           	opt stack 0
   613  00003A                     i2c1_driver_setBusCollisionISR@f:
   614                           	opt stack 0
   615  00003A                     i2c1_driver_setI2cISR@f:
   616                           	opt stack 0
   617  00003A                     ___lwdiv@dividend:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x14
   621  00003A                     	ds	1
   622  00003B                     ??_printString:
   623  00003B                     putch@txData:
   624                           	opt stack 0
   625  00003B                     _do_I2C_TX$315:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x15
   629  00003B                     	ds	1
   630  00003C                     i2c_open@ret:
   631                           	opt stack 0
   632  00003C                     i2c_setBuffer@bufferSize:
   633                           	opt stack 0
   634  00003C                     ___lwdiv@divisor:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x16
   638  00003C                     	ds	1
   639  00003D                     i2c_open@address:
   640                           	opt stack 0
   641  00003D                     i2c_masterOperation@operation:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x17
   645  00003D                     	ds	1
   646  00003E                     i2c_masterOperation@ret:
   647                           	opt stack 0
   648  00003E                     ___lwdiv@counter:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x18
   652  00003E                     	ds	1
   653  00003F                     i2c_masterAccelRead@reg:
   654                           	opt stack 0
   655  00003F                     write_register@data:
   656                           	opt stack 0
   657  00003F                     ___lwdiv@quotient:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x19
   661  00003F                     	ds	1
   662  000040                     ?_read_xyzvalues:
   663                           	opt stack 0
   664  000040                     write_register@reg:
   665                           	opt stack 0
   666  000040                     read_register@reg:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x1A
   670  000040                     	ds	1
   671  000041                     ??_ACCELEROMETER_Initialize:
   672  000041                     ?___lwmod:
   673                           	opt stack 0
   674  000041                     ___lwmod@dividend:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x1B
   678  000041                     	ds	2
   679  000043                     ___lwmod@divisor:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x1D
   683  000043                     	ds	2
   684  000045                     ___lwmod@counter:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x1F
   688  000045                     	ds	1
   689  000046                     ??_printf:
   690                           
   691                           ; 1 bytes @ 0x20
   692  000046                     	ds	1
   693  000047                     ??_main:
   694                           
   695                           ; 1 bytes @ 0x21
   696  000047                     	ds	2
   697                           tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           postdec1	equ	0xFE5
   704                           fsr1l	equ	0xFE1
   705                           
   706 ;;
   707 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   708 ;;
   709 ;; *************** function _main *****************
   710 ;; Defined at:
   711 ;;		line 70 in file "main.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  data            6   52[BANK0 ] struct .
   716 ;;  commandpart     1    0        unsigned char 
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   726 ;;      Params:         0       0       0       0       0       0       0
   727 ;;      Locals:         0       6       0       0       0       0       0
   728 ;;      Temps:          2       0       0       0       0       0       0
   729 ;;      Totals:         2       6       0       0       0       0       0
   730 ;;Total ram usage:        8 bytes
   731 ;; Hardware stack levels required when called:   14
   732 ;; This function calls:
   733 ;;		_ACCELEROMETER_Initialize
   734 ;;		_SYSTEM_Initialize
   735 ;;		_printString
   736 ;;		_printf
   737 ;;		_read_xyzvalues
   738 ;; This function is called by:
   739 ;;		Startup code after reset
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text0
   744  000A80                     __ptext0:
   745                           	opt stack 0
   746  000A80                     _main:
   747                           	opt stack 17
   748                           
   749                           ;main.c: 71: accelerometer_data_t data;
   750                           ;main.c: 74: SYSTEM_Initialize();
   751                           
   752                           ;incstack = 0
   753  000A80  ECD0  F008         	call	_SYSTEM_Initialize	;wreg free
   754                           
   755                           ;main.c: 77: (INTCONbits.GIE = 1);
   756  000A84  8EF2               	bsf	intcon,7,c	;volatile
   757                           
   758                           ;main.c: 80: (INTCONbits.PEIE = 1);
   759  000A86  8CF2               	bsf	intcon,6,c	;volatile
   760                           
   761                           ;main.c: 82: ACCELEROMETER_Initialize();
   762  000A88  EC78  F005         	call	_ACCELEROMETER_Initialize	;wreg free
   763                           
   764                           ;main.c: 84: printString();
   765  000A8C  ECE1  F005         	call	_printString	;wreg free
   766  000A90                     
   767                           ;main.c: 89: data = read_xyzvalues();
   768  000A90  EC38  F004         	call	_read_xyzvalues	;wreg free
   769  000A94  EE20  F094         	lfsr	2,main@data
   770  000A98  0E05               	movlw	5
   771  000A9A                     u2121:
   772  000A9A  CFEB FFDB          	movff	plusw0,plusw2
   773  000A9E  06E8               	decf	wreg,f,c
   774  000AA0  E2FC               	bc	u2121
   775                           
   776                           ;main.c: 90: _delay((unsigned long)((100)*(16000000/4000.0)));
   777  000AA2  0E03               	movlw	3
   778  000AA4  6E48               	movwf	(??_main+1)& (0+255),c
   779  000AA6  0E08               	movlw	8
   780  000AA8  6E47               	movwf	??_main& (0+255),c
   781  000AAA  0E77               	movlw	119
   782  000AAC                     u2137:
   783  000AAC  2EE8               	decfsz	wreg,f,c
   784  000AAE  D7FE               	bra	u2137
   785  000AB0  2E47               	decfsz	??_main& (0+255),f,c
   786  000AB2  D7FC               	bra	u2137
   787  000AB4  2E48               	decfsz	(??_main+1)& (0+255),f,c
   788  000AB6  D7FA               	bra	u2137
   789  000AB8  F000               	nop	
   790                           
   791                           ;main.c: 93: printf("%d%d%d", data.x, data.y, data.z);
   792  000ABA  0E0B               	movlw	low STR_1
   793  000ABC  0100               	movlb	0	; () banked
   794  000ABE  6F60               	movwf	printf@f& (0+255),b
   795  000AC0  0E06               	movlw	high STR_1
   796  000AC2  6F61               	movwf	(printf@f+1)& (0+255),b
   797  000AC4  C094  F062         	movff	main@data,?_printf+2
   798  000AC8  C095  F063         	movff	main@data+1,?_printf+3
   799  000ACC  C096  F064         	movff	main@data+2,?_printf+4
   800  000AD0  C097  F065         	movff	main@data+3,?_printf+5
   801  000AD4  C098  F066         	movff	main@data+4,?_printf+6
   802  000AD8  C099  F067         	movff	main@data+5,?_printf+7
   803  000ADC  EC0B  F003         	call	_printf	;wreg free
   804                           
   805                           ;main.c: 94: printf("\r\n");
   806  000AE0  0E12               	movlw	low STR_2
   807  000AE2  0100               	movlb	0	; () banked
   808  000AE4  6F60               	movwf	printf@f& (0+255),b
   809  000AE6  0E06               	movlw	high STR_2
   810  000AE8  6F61               	movwf	(printf@f+1)& (0+255),b
   811  000AEA  EC0B  F003         	call	_printf	;wreg free
   812  000AEE  D7D0               	goto	l613
   813  000AF0                     __end_of_main:
   814                           	opt stack 0
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           intcon	equ	0xFF2
   820                           postinc0	equ	0xFEE
   821                           plusw0	equ	0xFEB
   822                           wreg	equ	0xFE8
   823                           postdec1	equ	0xFE5
   824                           fsr1l	equ	0xFE1
   825                           plusw2	equ	0xFDB
   826                           
   827 ;; *************** function _read_xyzvalues *****************
   828 ;; Defined at:
   829 ;;		line 67 in file "accelerometer.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;		None
   832 ;; Auto vars:     Size  Location     Type
   833 ;;  sensorData      6    0[BANK0 ] struct .
   834 ;; Return value:  Size  Location     Type
   835 ;;                  6   26[COMRAM] struct .
   836 ;; Registers used:
   837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   843 ;;      Params:         6       0       0       0       0       0       0
   844 ;;      Locals:         0       6       0       0       0       0       0
   845 ;;      Temps:          0       0       0       0       0       0       0
   846 ;;      Totals:         6       6       0       0       0       0       0
   847 ;;Total ram usage:       12 bytes
   848 ;; Hardware stack levels used:    1
   849 ;; Hardware stack levels required when called:   12
   850 ;; This function calls:
   851 ;;		_i2c_close
   852 ;;		_i2c_masterAccelRead
   853 ;;		_i2c_open
   854 ;;		_i2c_setBuffer
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text1
   861  000870                     __ptext1:
   862                           	opt stack 0
   863  000870                     _read_xyzvalues:
   864                           	opt stack 18
   865                           
   866                           ;accelerometer.c: 68: static i2c_error_t status;
   867                           ;accelerometer.c: 69: static volatile uint8_t readbuffer[6];
   868                           ;accelerometer.c: 70: accelerometer_data_t sensorData;
   869                           ;accelerometer.c: 73: i2c_open(0x1D);
   870                           
   871                           ;incstack = 0
   872  000870  0E1D               	movlw	29
   873  000872  ECA0  F003         	call	_i2c_open
   874                           
   875                           ;accelerometer.c: 74: i2c_setBuffer(readbuffer, 6);
   876  000876  0E1D               	movlw	low read_xyzvalues@readbuffer
   877  000878  6E3A               	movwf	i2c_setBuffer@buffer,c
   878  00087A  0E00               	movlw	high read_xyzvalues@readbuffer
   879  00087C  6E3B               	movwf	i2c_setBuffer@buffer+1,c
   880  00087E  0E00               	movlw	0
   881  000880  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
   882  000882  0E06               	movlw	6
   883  000884  6E3C               	movwf	i2c_setBuffer@bufferSize,c
   884  000886  EC5F  F008         	call	_i2c_setBuffer	;wreg free
   885                           
   886                           ;accelerometer.c: 77: status = i2c_masterAccelRead(0x01);
   887  00088A  0E01               	movlw	1
   888  00088C  EC23  F009         	call	_i2c_masterAccelRead
   889  000890  6E15               	movwf	read_xyzvalues@status,c
   890                           
   891                           ;accelerometer.c: 80: status = i2c_close();
   892  000892  EC50  F008         	call	_i2c_close	;wreg free
   893  000896  6E15               	movwf	read_xyzvalues@status,c
   894                           
   895                           ;accelerometer.c: 82: sensorData.x = readbuffer[0];
   896  000898  C01D  F060         	movff	read_xyzvalues@readbuffer,read_xyzvalues@sensorData	;volatile
   897  00089C  0100               	movlb	0	; () banked
   898  00089E  6B61               	clrf	(read_xyzvalues@sensorData+1)& (0+255),b
   899                           
   900                           ; BSR set to: 0
   901                           ;accelerometer.c: 83: sensorData.x <<= 8;
   902  0008A0  5160               	movf	read_xyzvalues@sensorData& (0+255),w,b
   903  0008A2  6F61               	movwf	(read_xyzvalues@sensorData+1)& (0+255),b
   904  0008A4  6B60               	clrf	read_xyzvalues@sensorData& (0+255),b
   905                           
   906                           ; BSR set to: 0
   907                           ;accelerometer.c: 84: sensorData.x |= readbuffer[1];
   908  0008A6  501E               	movf	read_xyzvalues@readbuffer+1,w,c	;volatile
   909  0008A8  1360               	iorwf	read_xyzvalues@sensorData& (0+255),f,b
   910                           
   911                           ; BSR set to: 0
   912                           ;accelerometer.c: 85: sensorData.x >>= 2;
   913  0008AA  3561               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   914  0008AC  3361               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   915  0008AE  3360               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   916  0008B0  3561               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   917  0008B2  3361               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   918  0008B4  3360               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   919                           
   920                           ; BSR set to: 0
   921                           ;accelerometer.c: 87: sensorData.y = readbuffer[2];
   922  0008B6  C01F  F062         	movff	read_xyzvalues@readbuffer+2,read_xyzvalues@sensorData+2	;volatile
   923  0008BA  6B63               	clrf	(read_xyzvalues@sensorData+3)& (0+255),b
   924                           
   925                           ; BSR set to: 0
   926                           ;accelerometer.c: 88: sensorData.y <<= 8;
   927  0008BC  5162               	movf	(read_xyzvalues@sensorData+2)& (0+255),w,b
   928  0008BE  6F63               	movwf	(read_xyzvalues@sensorData+3)& (0+255),b
   929  0008C0  6B62               	clrf	(read_xyzvalues@sensorData+2)& (0+255),b
   930                           
   931                           ; BSR set to: 0
   932                           ;accelerometer.c: 89: sensorData.y |= readbuffer[3];
   933  0008C2  5020               	movf	read_xyzvalues@readbuffer+3,w,c	;volatile
   934  0008C4  1362               	iorwf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   935                           
   936                           ; BSR set to: 0
   937                           ;accelerometer.c: 90: sensorData.y >>= 2;
   938  0008C6  3563               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   939  0008C8  3363               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   940  0008CA  3362               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   941  0008CC  3563               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   942  0008CE  3363               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   943  0008D0  3362               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   944                           
   945                           ; BSR set to: 0
   946                           ;accelerometer.c: 92: sensorData.z = readbuffer[4];
   947  0008D2  C021  F064         	movff	read_xyzvalues@readbuffer+4,read_xyzvalues@sensorData+4	;volatile
   948  0008D6  6B65               	clrf	(read_xyzvalues@sensorData+5)& (0+255),b
   949                           
   950                           ; BSR set to: 0
   951                           ;accelerometer.c: 93: sensorData.z <<= 8;
   952  0008D8  5164               	movf	(read_xyzvalues@sensorData+4)& (0+255),w,b
   953  0008DA  6F65               	movwf	(read_xyzvalues@sensorData+5)& (0+255),b
   954  0008DC  6B64               	clrf	(read_xyzvalues@sensorData+4)& (0+255),b
   955                           
   956                           ; BSR set to: 0
   957                           ;accelerometer.c: 94: sensorData.z |= readbuffer[5];
   958  0008DE  5022               	movf	read_xyzvalues@readbuffer+5,w,c	;volatile
   959  0008E0  1364               	iorwf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   960                           
   961                           ; BSR set to: 0
   962                           ;accelerometer.c: 95: sensorData.z >>= 2;
   963  0008E2  3565               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   964  0008E4  3365               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   965  0008E6  3364               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   966  0008E8  3565               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   967  0008EA  3365               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   968  0008EC  3364               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   969                           
   970                           ; BSR set to: 0
   971                           ;accelerometer.c: 97: return sensorData;
   972  0008EE  EE20  F060         	lfsr	2,read_xyzvalues@sensorData
   973  0008F2  EE00  F040         	lfsr	0,?_read_xyzvalues
   974  0008F6  0E05               	movlw	5
   975  0008F8                     u1861:
   976  0008F8  CFDB FFEB          	movff	plusw2,plusw0
   977  0008FC  06E8               	decf	wreg,f,c
   978  0008FE  E2FC               	bc	u1861
   979  000900  0012               	return	
   980  000902                     __end_of_read_xyzvalues:
   981                           	opt stack 0
   982                           tblptru	equ	0xFF8
   983                           tblptrh	equ	0xFF7
   984                           tblptrl	equ	0xFF6
   985                           tablat	equ	0xFF5
   986                           intcon	equ	0xFF2
   987                           postinc0	equ	0xFEE
   988                           plusw0	equ	0xFEB
   989                           wreg	equ	0xFE8
   990                           postdec1	equ	0xFE5
   991                           fsr1l	equ	0xFE1
   992                           plusw2	equ	0xFDB
   993                           
   994 ;; *************** function _printf *****************
   995 ;; Defined at:
   996 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   999 ;;		 -> STR_2(3), STR_1(7), 
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;  tmpval          4    0        struct .
  1002 ;;  cp              3    0        PTR const unsigned char 
  1003 ;;  val             2   12[BANK0 ] unsigned int 
  1004 ;;  ap              2    8[BANK0 ] PTR void [1]
  1005 ;;		 -> ?_printf(2), 
  1006 ;;  len             2    0        unsigned int 
  1007 ;;  c               1   14[BANK0 ] char 
  1008 ;;  prec            1   11[BANK0 ] char 
  1009 ;;  flag            1   10[BANK0 ] unsigned char 
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  2    0[BANK0 ] int 
  1012 ;; Registers used:
  1013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1019 ;;      Params:         0       8       0       0       0       0       0
  1020 ;;      Locals:         0       7       0       0       0       0       0
  1021 ;;      Temps:          1       0       0       0       0       0       0
  1022 ;;      Totals:         1      15       0       0       0       0       0
  1023 ;;Total ram usage:       16 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    7
  1026 ;; This function calls:
  1027 ;;		___lwdiv
  1028 ;;		___lwmod
  1029 ;;		_putch
  1030 ;; This function is called by:
  1031 ;;		_main
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text2
  1036  000616                     __ptext2:
  1037                           	opt stack 0
  1038  000616                     _printf:
  1039                           	opt stack 23
  1040                           
  1041                           ;doprnt.c: 466: va_list ap;
  1042                           ;doprnt.c: 499: signed char c;
  1043                           ;doprnt.c: 506: signed char prec;
  1044                           ;doprnt.c: 508: unsigned char flag;
  1045                           ;doprnt.c: 523: union {
  1046                           ;doprnt.c: 524: unsigned long vd;
  1047                           ;doprnt.c: 525: double integ;
  1048                           ;doprnt.c: 526: } tmpval;
  1049                           ;doprnt.c: 528: unsigned int val;
  1050                           ;doprnt.c: 529: unsigned len;
  1051                           ;doprnt.c: 530: const char * cp;
  1052                           ;doprnt.c: 533: *ap = __va_start();
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;incstack = 0
  1056  000616  0E62               	movlw	low (?_printf+2)
  1057  000618  0100               	movlb	0	; () banked
  1058  00061A  6F68               	movwf	printf@ap& (0+255),b
  1059  00061C  0E00               	movlw	high (?_printf+2)
  1060  00061E  6F69               	movwf	(printf@ap+1)& (0+255),b
  1061                           
  1062                           ;doprnt.c: 536: while(c = *f++) {
  1063  000620  D081               	goto	u1930
  1064  000622                     
  1065                           ; BSR set to: 0
  1066                           ;doprnt.c: 538: if(c != '%')
  1067                           
  1068                           ; BSR set to: 0
  1069  000622  0E25               	movlw	37
  1070  000624  196E               	xorwf	printf@c& (0+255),w,b
  1071  000626  B4D8               	btfsc	status,2,c
  1072  000628  D004               	goto	l672
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;doprnt.c: 540: {
  1076                           ;doprnt.c: 541: (putch(c) );
  1077  00062A  516E               	movf	printf@c& (0+255),w,b
  1078  00062C  EC6E  F009         	call	_putch
  1079                           
  1080                           ;doprnt.c: 542: continue;
  1081  000630  D079               	goto	u1930
  1082  000632                     l672:
  1083                           
  1084                           ;doprnt.c: 543: }
  1085                           ;doprnt.c: 548: flag = 0;
  1086  000632  0E00               	movlw	0
  1087  000634  0100               	movlb	0	; () banked
  1088  000636  6F6A               	movwf	printf@flag& (0+255),b
  1089                           
  1090                           ; BSR set to: 0
  1091                           
  1092                           ; BSR set to: 0
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;doprnt.c: 822: }
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;doprnt.c: 813: continue;
  1099                           
  1100                           ;doprnt.c: 802: default:
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;doprnt.c: 698: case 'i':
  1104                           ;doprnt.c: 699: break;
  1105                           
  1106                           ; BSR set to: 0
  1107                           
  1108                           ;doprnt.c: 697: case 'd':
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;doprnt.c: 638: goto alldone;
  1112                           
  1113                           ;doprnt.c: 637: case 0:
  1114                           
  1115                           ;doprnt.c: 635: switch(c = *f++) {
  1116  000638  C060  FFF6         	movff	printf@f,tblptrl
  1117  00063C  C061  FFF7         	movff	printf@f+1,tblptrh
  1118  000640  4B60               	infsnz	printf@f& (0+255),f,b
  1119  000642  2B61               	incf	(printf@f+1)& (0+255),f,b
  1120  000644                     	if	0	;tblptru may be non-zero
  1121  000644                     	endif
  1122  000644                     	if	0	;tblptru may be non-zero
  1123  000644                     	endif
  1124  000644  0008               	tblrd		*
  1125  000646  CFF5 F06E          	movff	tablat,printf@c
  1126  00064A  516E               	movf	printf@c& (0+255),w,b
  1127                           
  1128                           ; Switch size 1, requested type "space"
  1129                           ; Number of cases is 3, Range of values is 0 to 105
  1130                           ; switch strategies available:
  1131                           ; Name         Instructions Cycles
  1132                           ; simple_byte           10     6 (average)
  1133                           ;	Chosen strategy is simple_byte
  1134  00064C  0A00               	xorlw	0	; case 0
  1135  00064E  B4D8               	btfsc	status,2,c
  1136  000650  0012               	return	
  1137  000652  0A64               	xorlw	100	; case 100
  1138  000654  B4D8               	btfsc	status,2,c
  1139  000656  D003               	goto	l678
  1140  000658  0A0D               	xorlw	13	; case 105
  1141  00065A  A4D8               	btfss	status,2,c
  1142  00065C  D063               	goto	u1930
  1143  00065E                     l678:
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;doprnt.c: 1253: {
  1147                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1148                           
  1149                           ; BSR set to: 0
  1150  00065E  C068  FFD9         	movff	printf@ap,fsr2l
  1151  000662  C069  FFDA         	movff	printf@ap+1,fsr2h
  1152  000666  CFDE F06C          	movff	postinc2,printf@val
  1153  00066A  CFDD F06D          	movff	postdec2,printf@val+1
  1154                           
  1155                           ; BSR set to: 0
  1156  00066E  0E02               	movlw	2
  1157  000670  2768               	addwf	printf@ap& (0+255),f,b
  1158  000672  0E00               	movlw	0
  1159  000674  2369               	addwfc	(printf@ap+1)& (0+255),f,b
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;doprnt.c: 1261: if((int)val < 0) {
  1163  000676  AF6D               	btfss	(printf@val+1)& (0+255),7,b
  1164  000678  D006               	goto	l680
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;doprnt.c: 1262: flag |= 0x03;
  1168  00067A  0E03               	movlw	3
  1169  00067C  136A               	iorwf	printf@flag& (0+255),f,b
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;doprnt.c: 1263: val = -val;
  1173  00067E  6D6C               	negf	printf@val& (0+255),b
  1174  000680  1F6D               	comf	(printf@val+1)& (0+255),f,b
  1175  000682  B0D8               	btfsc	status,0,c
  1176  000684  2B6D               	incf	(printf@val+1)& (0+255),f,b
  1177  000686                     l680:
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;doprnt.c: 1264: }
  1181                           ;doprnt.c: 1266: }
  1182                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1183                           
  1184                           ; BSR set to: 0
  1185  000686  0E01               	movlw	1
  1186  000688  6F6E               	movwf	printf@c& (0+255),b
  1187  00068A                     l4017:
  1188                           
  1189                           ; BSR set to: 0
  1190  00068A  0E05               	movlw	5
  1191  00068C  196E               	xorwf	printf@c& (0+255),w,b
  1192  00068E  B4D8               	btfsc	status,2,c
  1193  000690  D012               	goto	u1910
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;doprnt.c: 1306: if(val < dpowers[c])
  1197                           
  1198                           ; BSR set to: 0
  1199                           
  1200                           ; BSR set to: 0
  1201  000692  516E               	movf	printf@c& (0+255),w,b
  1202  000694  0D02               	mullw	2
  1203  000696  0E01               	movlw	low _dpowers
  1204  000698  24F3               	addwf	prodl,w,c
  1205  00069A  6EF6               	movwf	tblptrl,c
  1206  00069C  0E06               	movlw	high _dpowers
  1207  00069E  20F4               	addwfc	prodh,w,c
  1208  0006A0  6EF7               	movwf	tblptrh,c
  1209  0006A2                     	if	0	;There are less than 3 active tblptr bytes
  1210  0006A2                     	endif
  1211  0006A2  0009               	tblrd		*+
  1212  0006A4  50F5               	movf	tablat,w,c
  1213  0006A6  5D6C               	subwf	printf@val& (0+255),w,b
  1214  0006A8  0009               	tblrd		*+
  1215  0006AA  50F5               	movf	tablat,w,c
  1216  0006AC  596D               	subwfb	(printf@val+1)& (0+255),w,b
  1217  0006AE  A0D8               	btfss	status,0,c
  1218  0006B0  D002               	goto	u1910
  1219                           
  1220                           ; BSR set to: 0
  1221                           
  1222                           ; BSR set to: 0
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;doprnt.c: 1307: break;
  1226  0006B2  2B6E               	incf	printf@c& (0+255),f,b
  1227  0006B4  D7EA               	goto	l4017
  1228  0006B6                     u1910:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;doprnt.c: 1422: {
  1232                           ;doprnt.c: 1438: if(flag & 0x03)
  1233                           
  1234                           ; BSR set to: 0
  1235  0006B6  C06A  F046         	movff	printf@flag,??_printf
  1236  0006BA  0E03               	movlw	3
  1237  0006BC  1646               	andwf	??_printf,f,c
  1238  0006BE  B4D8               	btfsc	status,2,c
  1239  0006C0  D003               	goto	l684
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;doprnt.c: 1439: (putch('-') );
  1243  0006C2  0E2D               	movlw	45
  1244  0006C4  EC6E  F009         	call	_putch
  1245  0006C8                     l684:
  1246                           
  1247                           ;doprnt.c: 1469: }
  1248                           ;doprnt.c: 1472: prec = c;
  1249  0006C8  C06E  F06B         	movff	printf@c,printf@prec
  1250                           
  1251                           ;doprnt.c: 1474: while(prec--) {
  1252  0006CC  D026               	goto	l685
  1253  0006CE                     
  1254                           ;doprnt.c: 1478: {
  1255                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1256  0006CE  0100               	movlb	0	; () banked
  1257  0006D0  516B               	movf	printf@prec& (0+255),w,b
  1258  0006D2  0D02               	mullw	2
  1259  0006D4  0E01               	movlw	low _dpowers
  1260  0006D6  24F3               	addwf	prodl,w,c
  1261  0006D8  6EF6               	movwf	tblptrl,c
  1262  0006DA  0E06               	movlw	high _dpowers
  1263  0006DC  20F4               	addwfc	prodh,w,c
  1264  0006DE  6EF7               	movwf	tblptrh,c
  1265  0006E0                     	if	0	;There are less than 3 active tblptr bytes
  1266  0006E0                     	endif
  1267  0006E0  0009               	tblrd		*+
  1268  0006E2  CFF5 F03C          	movff	tablat,___lwdiv@divisor
  1269  0006E6  000A               	tblrd		*-
  1270  0006E8  CFF5 F03D          	movff	tablat,___lwdiv@divisor+1
  1271  0006EC  C06C  F03A         	movff	printf@val,___lwdiv@dividend
  1272  0006F0  C06D  F03B         	movff	printf@val+1,___lwdiv@dividend+1
  1273  0006F4  EC6C  F006         	call	___lwdiv	;wreg free
  1274  0006F8  C03A  F041         	movff	?___lwdiv,___lwmod@dividend
  1275  0006FC  C03B  F042         	movff	?___lwdiv+1,___lwmod@dividend+1
  1276  000700  0E00               	movlw	0
  1277  000702  6E44               	movwf	___lwmod@divisor+1,c
  1278  000704  0E0A               	movlw	10
  1279  000706  6E43               	movwf	___lwmod@divisor,c
  1280  000708  EC75  F007         	call	___lwmod	;wreg free
  1281  00070C  5041               	movf	?___lwmod,w,c
  1282  00070E  0F30               	addlw	48
  1283  000710  0100               	movlb	0	; () banked
  1284  000712  6F6E               	movwf	printf@c& (0+255),b
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;doprnt.c: 1523: }
  1288                           ;doprnt.c: 1524: (putch(c) );
  1289  000714  516E               	movf	printf@c& (0+255),w,b
  1290  000716  EC6E  F009         	call	_putch
  1291  00071A                     l685:
  1292  00071A  0100               	movlb	0	; () banked
  1293  00071C  076B               	decf	printf@prec& (0+255),f,b
  1294  00071E  296B               	incf	printf@prec& (0+255),w,b
  1295  000720  A4D8               	btfss	status,2,c
  1296  000722  D7D5               	goto	l686
  1297  000724                     u1930:
  1298                           
  1299                           ; BSR set to: 0
  1300                           
  1301                           ; BSR set to: 0
  1302  000724  C060  FFF6         	movff	printf@f,tblptrl
  1303  000728  C061  FFF7         	movff	printf@f+1,tblptrh
  1304  00072C  0100               	movlb	0	; () banked
  1305  00072E  4B60               	infsnz	printf@f& (0+255),f,b
  1306  000730  2B61               	incf	(printf@f+1)& (0+255),f,b
  1307  000732                     	if	0	;tblptru may be non-zero
  1308  000732                     	endif
  1309  000732                     	if	0	;tblptru may be non-zero
  1310  000732                     	endif
  1311  000732  0008               	tblrd		*
  1312  000734  CFF5 F06E          	movff	tablat,printf@c
  1313  000738  516E               	movf	printf@c& (0+255),w,b
  1314  00073A  B4D8               	btfsc	status,2,c
  1315  00073C  0012               	return	
  1316  00073E  D771               	goto	l671
  1317  000740                     __end_of_printf:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           prodh	equ	0xFF4
  1324                           prodl	equ	0xFF3
  1325                           intcon	equ	0xFF2
  1326                           postinc0	equ	0xFEE
  1327                           plusw0	equ	0xFEB
  1328                           wreg	equ	0xFE8
  1329                           postdec1	equ	0xFE5
  1330                           fsr1l	equ	0xFE1
  1331                           postinc2	equ	0xFDE
  1332                           postdec2	equ	0xFDD
  1333                           plusw2	equ	0xFDB
  1334                           fsr2h	equ	0xFDA
  1335                           fsr2l	equ	0xFD9
  1336                           status	equ	0xFD8
  1337                           
  1338 ;; *************** function _putch *****************
  1339 ;; Defined at:
  1340 ;;		line 178 in file "mcc_generated_files/eusart1.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;  txData          1    wreg     unsigned char 
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  txData          1   21[COMRAM] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1354 ;;      Params:         0       0       0       0       0       0       0
  1355 ;;      Locals:         1       0       0       0       0       0       0
  1356 ;;      Temps:          0       0       0       0       0       0       0
  1357 ;;      Totals:         1       0       0       0       0       0       0
  1358 ;;Total ram usage:        1 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; Hardware stack levels required when called:    6
  1361 ;; This function calls:
  1362 ;;		_EUSART1_Write
  1363 ;; This function is called by:
  1364 ;;		_printf
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text3
  1369  0012DC                     __ptext3:
  1370                           	opt stack 0
  1371  0012DC                     _putch:
  1372                           	opt stack 23
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;incstack = 0
  1376                           ;putch@txData stored from wreg
  1377  0012DC  6E3B               	movwf	putch@txData,c
  1378                           
  1379                           ;eusart1.c: 180: EUSART1_Write(txData);
  1380  0012DE  503B               	movf	putch@txData,w,c
  1381  0012E0  EC96  F007         	call	_EUSART1_Write
  1382  0012E4  0012               	return		;funcret
  1383  0012E6                     __end_of_putch:
  1384                           	opt stack 0
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           prodh	equ	0xFF4
  1390                           prodl	equ	0xFF3
  1391                           intcon	equ	0xFF2
  1392                           postinc0	equ	0xFEE
  1393                           plusw0	equ	0xFEB
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1l	equ	0xFE1
  1397                           postinc2	equ	0xFDE
  1398                           postdec2	equ	0xFDD
  1399                           plusw2	equ	0xFDB
  1400                           fsr2h	equ	0xFDA
  1401                           fsr2l	equ	0xFD9
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function ___lwmod *****************
  1405 ;; Defined at:
  1406 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  dividend        2   27[COMRAM] unsigned int 
  1409 ;;  divisor         2   29[COMRAM] unsigned int 
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;  counter         1   31[COMRAM] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  2   27[COMRAM] unsigned int 
  1414 ;; Registers used:
  1415 ;;		wreg, status,2, status,0
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1421 ;;      Params:         4       0       0       0       0       0       0
  1422 ;;      Locals:         1       0       0       0       0       0       0
  1423 ;;      Temps:          0       0       0       0       0       0       0
  1424 ;;      Totals:         5       0       0       0       0       0       0
  1425 ;;Total ram usage:        5 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    5
  1428 ;; This function calls:
  1429 ;;		Nothing
  1430 ;; This function is called by:
  1431 ;;		_printf
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           	psect	text4
  1436  000EEA                     __ptext4:
  1437                           	opt stack 0
  1438  000EEA                     ___lwmod:
  1439                           	opt stack 24
  1440                           
  1441                           ;incstack = 0
  1442  000EEA  5043               	movf	___lwmod@divisor,w,c
  1443  000EEC  1044               	iorwf	___lwmod@divisor+1,w,c
  1444  000EEE  B4D8               	btfsc	status,2,c
  1445  000EF0  D018               	goto	l1108
  1446  000EF2  0E01               	movlw	1
  1447  000EF4  6E45               	movwf	___lwmod@counter,c
  1448  000EF6  D004               	goto	l1103
  1449  000EF8  90D8               	bcf	status,0,c
  1450  000EFA  3643               	rlcf	___lwmod@divisor,f,c
  1451  000EFC  3644               	rlcf	___lwmod@divisor+1,f,c
  1452  000EFE  2A45               	incf	___lwmod@counter,f,c
  1453  000F00                     l1103:
  1454  000F00  AE44               	btfss	___lwmod@divisor+1,7,c
  1455  000F02  D7FA               	goto	l1104
  1456  000F04                     u1730:
  1457  000F04  5043               	movf	___lwmod@divisor,w,c
  1458  000F06  5C41               	subwf	___lwmod@dividend,w,c
  1459  000F08  5044               	movf	___lwmod@divisor+1,w,c
  1460  000F0A  5842               	subwfb	___lwmod@dividend+1,w,c
  1461  000F0C  A0D8               	btfss	status,0,c
  1462  000F0E  D004               	goto	l1107
  1463  000F10  5043               	movf	___lwmod@divisor,w,c
  1464  000F12  5E41               	subwf	___lwmod@dividend,f,c
  1465  000F14  5044               	movf	___lwmod@divisor+1,w,c
  1466  000F16  5A42               	subwfb	___lwmod@dividend+1,f,c
  1467  000F18                     l1107:
  1468  000F18  90D8               	bcf	status,0,c
  1469  000F1A  3244               	rrcf	___lwmod@divisor+1,f,c
  1470  000F1C  3243               	rrcf	___lwmod@divisor,f,c
  1471  000F1E  2E45               	decfsz	___lwmod@counter,f,c
  1472  000F20  D7F1               	goto	u1730
  1473  000F22                     l1108:
  1474  000F22  C041  F041         	movff	___lwmod@dividend,?___lwmod
  1475  000F26  C042  F042         	movff	___lwmod@dividend+1,?___lwmod+1
  1476  000F2A  0012               	return		;funcret
  1477  000F2C                     __end_of___lwmod:
  1478                           	opt stack 0
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           prodh	equ	0xFF4
  1484                           prodl	equ	0xFF3
  1485                           intcon	equ	0xFF2
  1486                           postinc0	equ	0xFEE
  1487                           plusw0	equ	0xFEB
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           postinc2	equ	0xFDE
  1492                           postdec2	equ	0xFDD
  1493                           plusw2	equ	0xFDB
  1494                           fsr2h	equ	0xFDA
  1495                           fsr2l	equ	0xFD9
  1496                           status	equ	0xFD8
  1497                           
  1498 ;; *************** function ___lwdiv *****************
  1499 ;; Defined at:
  1500 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;  dividend        2   20[COMRAM] unsigned int 
  1503 ;;  divisor         2   22[COMRAM] unsigned int 
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;  quotient        2   25[COMRAM] unsigned int 
  1506 ;;  counter         1   24[COMRAM] unsigned char 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  2   20[COMRAM] unsigned int 
  1509 ;; Registers used:
  1510 ;;		wreg, status,2, status,0
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1516 ;;      Params:         4       0       0       0       0       0       0
  1517 ;;      Locals:         3       0       0       0       0       0       0
  1518 ;;      Temps:          0       0       0       0       0       0       0
  1519 ;;      Totals:         7       0       0       0       0       0       0
  1520 ;;Total ram usage:        7 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    5
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_printf
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text5
  1531  000CD8                     __ptext5:
  1532                           	opt stack 0
  1533  000CD8                     ___lwdiv:
  1534                           	opt stack 24
  1535                           
  1536                           ;incstack = 0
  1537  000CD8  0E00               	movlw	0
  1538  000CDA  6E40               	movwf	___lwdiv@quotient+1,c
  1539  000CDC  0E00               	movlw	0
  1540  000CDE  6E3F               	movwf	___lwdiv@quotient,c
  1541  000CE0  503C               	movf	___lwdiv@divisor,w,c
  1542  000CE2  103D               	iorwf	___lwdiv@divisor+1,w,c
  1543  000CE4  B4D8               	btfsc	status,2,c
  1544  000CE6  D01C               	goto	l1098
  1545  000CE8  0E01               	movlw	1
  1546  000CEA  6E3E               	movwf	___lwdiv@counter,c
  1547  000CEC  D004               	goto	l1093
  1548  000CEE  90D8               	bcf	status,0,c
  1549  000CF0  363C               	rlcf	___lwdiv@divisor,f,c
  1550  000CF2  363D               	rlcf	___lwdiv@divisor+1,f,c
  1551  000CF4  2A3E               	incf	___lwdiv@counter,f,c
  1552  000CF6                     l1093:
  1553  000CF6  AE3D               	btfss	___lwdiv@divisor+1,7,c
  1554  000CF8  D7FA               	goto	l1094
  1555  000CFA                     u1700:
  1556  000CFA  90D8               	bcf	status,0,c
  1557  000CFC  363F               	rlcf	___lwdiv@quotient,f,c
  1558  000CFE  3640               	rlcf	___lwdiv@quotient+1,f,c
  1559  000D00  503C               	movf	___lwdiv@divisor,w,c
  1560  000D02  5C3A               	subwf	___lwdiv@dividend,w,c
  1561  000D04  503D               	movf	___lwdiv@divisor+1,w,c
  1562  000D06  583B               	subwfb	___lwdiv@dividend+1,w,c
  1563  000D08  A0D8               	btfss	status,0,c
  1564  000D0A  D005               	goto	l1097
  1565  000D0C  503C               	movf	___lwdiv@divisor,w,c
  1566  000D0E  5E3A               	subwf	___lwdiv@dividend,f,c
  1567  000D10  503D               	movf	___lwdiv@divisor+1,w,c
  1568  000D12  5A3B               	subwfb	___lwdiv@dividend+1,f,c
  1569  000D14  803F               	bsf	___lwdiv@quotient,0,c
  1570  000D16                     l1097:
  1571  000D16  90D8               	bcf	status,0,c
  1572  000D18  323D               	rrcf	___lwdiv@divisor+1,f,c
  1573  000D1A  323C               	rrcf	___lwdiv@divisor,f,c
  1574  000D1C  2E3E               	decfsz	___lwdiv@counter,f,c
  1575  000D1E  D7ED               	goto	u1700
  1576  000D20                     l1098:
  1577  000D20  C03F  F03A         	movff	___lwdiv@quotient,?___lwdiv
  1578  000D24  C040  F03B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1579  000D28  0012               	return		;funcret
  1580  000D2A                     __end_of___lwdiv:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           prodh	equ	0xFF4
  1587                           prodl	equ	0xFF3
  1588                           intcon	equ	0xFF2
  1589                           postinc0	equ	0xFEE
  1590                           plusw0	equ	0xFEB
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1l	equ	0xFE1
  1594                           postinc2	equ	0xFDE
  1595                           postdec2	equ	0xFDD
  1596                           plusw2	equ	0xFDB
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _printString *****************
  1602 ;; Defined at:
  1603 ;;		line 59 in file "main.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  i               2   50[BANK0 ] int 
  1608 ;;  welcome        50    0[BANK0 ] unsigned char [50]
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1618 ;;      Params:         0       0       0       0       0       0       0
  1619 ;;      Locals:         0      52       0       0       0       0       0
  1620 ;;      Temps:          2       0       0       0       0       0       0
  1621 ;;      Totals:         2      52       0       0       0       0       0
  1622 ;;Total ram usage:       54 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    6
  1625 ;; This function calls:
  1626 ;;		_EUSART1_Write
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text6
  1633  000BC2                     __ptext6:
  1634                           	opt stack 0
  1635  000BC2                     _printString:
  1636                           	opt stack 24
  1637                           
  1638                           ;main.c: 60: char welcome[50] = "\n\rGOT HERE. \n\r";
  1639                           
  1640                           ;incstack = 0
  1641  000BC2  EE21  F000         	lfsr	2,printString@F7170
  1642  000BC6  EE10  F060         	lfsr	1,printString@welcome
  1643  000BCA  0E31               	movlw	49
  1644  000BCC                     u1821:
  1645  000BCC  CFDB FFE3          	movff	plusw2,plusw1
  1646  000BD0  06E8               	decf	wreg,f,c
  1647  000BD2  E2FC               	bc	u1821
  1648                           
  1649                           ;main.c: 61: for (int i = 0; i < 50; i++ ) {
  1650  000BD4  0E00               	movlw	0
  1651  000BD6  0100               	movlb	0	; () banked
  1652  000BD8  6F93               	movwf	(printString@i+1)& (0+255),b
  1653  000BDA  0E00               	movlw	0
  1654  000BDC  6F92               	movwf	printString@i& (0+255),b
  1655  000BDE                     l3939:
  1656                           
  1657                           ; BSR set to: 0
  1658  000BDE  BF93               	btfsc	(printString@i+1)& (0+255),7,b
  1659  000BE0  D006               	goto	l606
  1660  000BE2  5193               	movf	(printString@i+1)& (0+255),w,b
  1661  000BE4  E11D               	bnz	l608
  1662  000BE6  0E32               	movlw	50
  1663  000BE8  5D92               	subwf	printString@i& (0+255),w,b
  1664  000BEA  B0D8               	btfsc	status,0,c
  1665  000BEC  0012               	return	
  1666  000BEE                     l606:
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 62: EUSART1_Write(welcome[i]);
  1670                           
  1671                           ; BSR set to: 0
  1672  000BEE  0E60               	movlw	low printString@welcome
  1673  000BF0  2592               	addwf	printString@i& (0+255),w,b
  1674  000BF2  6ED9               	movwf	fsr2l,c
  1675  000BF4  0E00               	movlw	high printString@welcome
  1676  000BF6  2193               	addwfc	(printString@i+1)& (0+255),w,b
  1677  000BF8  6EDA               	movwf	fsr2h,c
  1678  000BFA  50DF               	movf	indf2,w,c
  1679  000BFC  EC96  F007         	call	_EUSART1_Write
  1680                           
  1681                           ;main.c: 63: _delay((unsigned long)((100)*(16000000/4000.0)));
  1682  000C00  0E03               	movlw	3
  1683  000C02  6E3C               	movwf	(??_printString+1)& (0+255),c
  1684  000C04  0E08               	movlw	8
  1685  000C06  6E3B               	movwf	??_printString& (0+255),c
  1686  000C08  0E77               	movlw	119
  1687  000C0A                     u2147:
  1688  000C0A  2EE8               	decfsz	wreg,f,c
  1689  000C0C  D7FE               	bra	u2147
  1690  000C0E  2E3B               	decfsz	??_printString& (0+255),f,c
  1691  000C10  D7FC               	bra	u2147
  1692  000C12  2E3C               	decfsz	(??_printString+1)& (0+255),f,c
  1693  000C14  D7FA               	bra	u2147
  1694  000C16  F000               	nop	
  1695  000C18  0100               	movlb	0	; () banked
  1696  000C1A  4B92               	infsnz	printString@i& (0+255),f,b
  1697  000C1C  2B93               	incf	(printString@i+1)& (0+255),f,b
  1698  000C1E  D7DF               	goto	l3939
  1699  000C20                     l608:
  1700                           
  1701                           ; BSR set to: 0
  1702  000C20  0012               	return		;funcret
  1703  000C22                     __end_of_printString:
  1704                           	opt stack 0
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           prodh	equ	0xFF4
  1710                           prodl	equ	0xFF3
  1711                           intcon	equ	0xFF2
  1712                           postinc0	equ	0xFEE
  1713                           plusw0	equ	0xFEB
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           plusw1	equ	0xFE3
  1717                           fsr1l	equ	0xFE1
  1718                           indf2	equ	0xFDF
  1719                           postinc2	equ	0xFDE
  1720                           postdec2	equ	0xFDD
  1721                           plusw2	equ	0xFDB
  1722                           fsr2h	equ	0xFDA
  1723                           fsr2l	equ	0xFD9
  1724                           status	equ	0xFD8
  1725                           
  1726 ;; *************** function _EUSART1_Write *****************
  1727 ;; Defined at:
  1728 ;;		line 150 in file "mcc_generated_files/eusart1.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  txData          1    wreg     unsigned char 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  txData          1   20[COMRAM] unsigned char 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1742 ;;      Params:         0       0       0       0       0       0       0
  1743 ;;      Locals:         1       0       0       0       0       0       0
  1744 ;;      Temps:          0       0       0       0       0       0       0
  1745 ;;      Totals:         1       0       0       0       0       0       0
  1746 ;;Total ram usage:        1 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    5
  1749 ;; This function calls:
  1750 ;;		Nothing
  1751 ;; This function is called by:
  1752 ;;		_putch
  1753 ;;		_printString
  1754 ;;		_Send_UART
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text7
  1759  000F2C                     __ptext7:
  1760                           	opt stack 0
  1761  000F2C                     _EUSART1_Write:
  1762                           	opt stack 23
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;incstack = 0
  1766                           ;EUSART1_Write@txData stored from wreg
  1767  000F2C  6E3A               	movwf	EUSART1_Write@txData,c
  1768  000F2E                     
  1769                           ;eusart1.c: 153: {
  1770                           
  1771                           ;eusart1.c: 152: while(0 == eusart1TxBufferRemaining)
  1772  000F2E  5049               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  1773  000F30  B4D8               	btfsc	status,2,c
  1774  000F32  D7FD               	goto	l3715
  1775                           
  1776                           ;eusart1.c: 154: }
  1777                           ;eusart1.c: 156: if(0 == PIE1bits.TX1IE)
  1778  000F34  B89D               	btfsc	3997,4,c	;volatile
  1779  000F36  D003               	goto	l309
  1780                           
  1781                           ;eusart1.c: 157: {
  1782                           ;eusart1.c: 158: TXREG1 = txData;
  1783  000F38  C03A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1784                           
  1785                           ;eusart1.c: 159: }
  1786  000F3C  D012               	goto	l310
  1787  000F3E                     l309:
  1788                           
  1789                           ;eusart1.c: 160: else
  1790                           ;eusart1.c: 161: {
  1791                           ;eusart1.c: 162: PIE1bits.TX1IE = 0;
  1792  000F3E  989D               	bcf	3997,4,c	;volatile
  1793                           
  1794                           ;eusart1.c: 163: eusart1TxBuffer[eusart1TxHead++] = txData;
  1795  000F40  501C               	movf	_eusart1TxHead,w,c	;volatile
  1796  000F42  0D01               	mullw	1
  1797  000F44  0E09               	movlw	low _eusart1TxBuffer
  1798  000F46  24F3               	addwf	prodl,w,c
  1799  000F48  6ED9               	movwf	fsr2l,c
  1800  000F4A  0E00               	movlw	high _eusart1TxBuffer
  1801  000F4C  20F4               	addwfc	prodh,w,c
  1802  000F4E  6EDA               	movwf	fsr2h,c
  1803  000F50  C03A  FFDF         	movff	EUSART1_Write@txData,indf2
  1804  000F54  2A1C               	incf	_eusart1TxHead,f,c	;volatile
  1805                           
  1806                           ;eusart1.c: 164: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  1807  000F56  0E07               	movlw	7
  1808  000F58  641C               	cpfsgt	_eusart1TxHead,c	;volatile
  1809  000F5A  D002               	goto	l311
  1810                           
  1811                           ;eusart1.c: 165: {
  1812                           ;eusart1.c: 166: eusart1TxHead = 0;
  1813  000F5C  0E00               	movlw	0
  1814  000F5E  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1815  000F60                     l311:
  1816                           
  1817                           ;eusart1.c: 167: }
  1818                           ;eusart1.c: 168: eusart1TxBufferRemaining--;
  1819  000F60  0649               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1820  000F62                     l310:
  1821                           
  1822                           ;eusart1.c: 169: }
  1823                           ;eusart1.c: 170: PIE1bits.TX1IE = 1;
  1824  000F62  889D               	bsf	3997,4,c	;volatile
  1825  000F64  0012               	return		;funcret
  1826  000F66                     __end_of_EUSART1_Write:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           intcon	equ	0xFF2
  1835                           postinc0	equ	0xFEE
  1836                           plusw0	equ	0xFEB
  1837                           wreg	equ	0xFE8
  1838                           postdec1	equ	0xFE5
  1839                           plusw1	equ	0xFE3
  1840                           fsr1l	equ	0xFE1
  1841                           indf2	equ	0xFDF
  1842                           postinc2	equ	0xFDE
  1843                           postdec2	equ	0xFDD
  1844                           plusw2	equ	0xFDB
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _SYSTEM_Initialize *****************
  1850 ;; Defined at:
  1851 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1865 ;;      Params:         0       0       0       0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0
  1868 ;;      Totals:         0       0       0       0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    7
  1872 ;; This function calls:
  1873 ;;		_EUSART1_Initialize
  1874 ;;		_INTERRUPT_Initialize
  1875 ;;		_OSCILLATOR_Initialize
  1876 ;;		_PIN_MANAGER_Initialize
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text8
  1883  0011A0                     __ptext8:
  1884                           	opt stack 0
  1885  0011A0                     _SYSTEM_Initialize:
  1886                           	opt stack 23
  1887                           
  1888                           ;mcc.c: 114: INTERRUPT_Initialize();
  1889                           
  1890                           ;incstack = 0
  1891  0011A0  ECC8  F009         	call	_INTERRUPT_Initialize	;wreg free
  1892                           
  1893                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1894  0011A4  EC29  F008         	call	_PIN_MANAGER_Initialize	;wreg free
  1895                           
  1896                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1897  0011A8  EC1C  F009         	call	_OSCILLATOR_Initialize	;wreg free
  1898                           
  1899                           ;mcc.c: 117: EUSART1_Initialize();
  1900  0011AC  ECE3  F006         	call	_EUSART1_Initialize	;wreg free
  1901  0011B0  0012               	return		;funcret
  1902  0011B2                     __end_of_SYSTEM_Initialize:
  1903                           	opt stack 0
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           prodh	equ	0xFF4
  1909                           prodl	equ	0xFF3
  1910                           intcon	equ	0xFF2
  1911                           postinc0	equ	0xFEE
  1912                           plusw0	equ	0xFEB
  1913                           wreg	equ	0xFE8
  1914                           postdec1	equ	0xFE5
  1915                           plusw1	equ	0xFE3
  1916                           fsr1l	equ	0xFE1
  1917                           indf2	equ	0xFDF
  1918                           postinc2	equ	0xFDE
  1919                           postdec2	equ	0xFDD
  1920                           plusw2	equ	0xFDB
  1921                           fsr2h	equ	0xFDA
  1922                           fsr2l	equ	0xFD9
  1923                           status	equ	0xFD8
  1924                           
  1925 ;; *************** function _PIN_MANAGER_Initialize *****************
  1926 ;; Defined at:
  1927 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;		None
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;		None
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  1    wreg      void 
  1934 ;; Registers used:
  1935 ;;		wreg, status,2
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1941 ;;      Params:         0       0       0       0       0       0       0
  1942 ;;      Locals:         0       0       0       0       0       0       0
  1943 ;;      Temps:          0       0       0       0       0       0       0
  1944 ;;      Totals:         0       0       0       0       0       0       0
  1945 ;;Total ram usage:        0 bytes
  1946 ;; Hardware stack levels used:    1
  1947 ;; Hardware stack levels required when called:    5
  1948 ;; This function calls:
  1949 ;;		Nothing
  1950 ;; This function is called by:
  1951 ;;		_SYSTEM_Initialize
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           	psect	text9
  1956  001052                     __ptext9:
  1957                           	opt stack 0
  1958  001052                     _PIN_MANAGER_Initialize:
  1959                           	opt stack 24
  1960                           
  1961                           ;pin_manager.c: 57: LATA = 0x00;
  1962                           
  1963                           ;incstack = 0
  1964  001052  0E00               	movlw	0
  1965  001054  6E89               	movwf	3977,c	;volatile
  1966                           
  1967                           ;pin_manager.c: 58: LATB = 0x00;
  1968  001056  0E00               	movlw	0
  1969  001058  6E8A               	movwf	3978,c	;volatile
  1970                           
  1971                           ;pin_manager.c: 59: LATC = 0x00;
  1972  00105A  0E00               	movlw	0
  1973  00105C  6E8B               	movwf	3979,c	;volatile
  1974                           
  1975                           ;pin_manager.c: 64: TRISA = 0xFF;
  1976  00105E  6892               	setf	3986,c	;volatile
  1977                           
  1978                           ;pin_manager.c: 65: TRISB = 0xFF;
  1979  001060  6893               	setf	3987,c	;volatile
  1980                           
  1981                           ;pin_manager.c: 66: TRISC = 0xBF;
  1982  001062  0EBF               	movlw	191
  1983  001064  6E94               	movwf	3988,c	;volatile
  1984                           
  1985                           ;pin_manager.c: 71: ANSELC = 0x24;
  1986  001066  0E24               	movlw	36
  1987  001068  010F               	movlb	15	; () banked
  1988  00106A  6F3A               	movwf	58,b	;volatile
  1989                           
  1990                           ;pin_manager.c: 72: ANSELB = 0x3F;
  1991  00106C  0E3F               	movlw	63
  1992  00106E  6F39               	movwf	57,b	;volatile
  1993                           
  1994                           ;pin_manager.c: 73: ANSELA = 0x2F;
  1995  001070  0E2F               	movlw	47
  1996  001072  6F38               	movwf	56,b	;volatile
  1997                           
  1998                           ;pin_manager.c: 78: WPUB = 0x00;
  1999  001074  0E00               	movlw	0
  2000  001076  6E61               	movwf	3937,c	;volatile
  2001                           
  2002                           ; BSR set to: 15
  2003                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  2004  001078  8EF1               	bsf	intcon2,7,c	;volatile
  2005                           
  2006                           ; BSR set to: 15
  2007  00107A  0012               	return		;funcret
  2008  00107C                     __end_of_PIN_MANAGER_Initialize:
  2009                           	opt stack 0
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           prodh	equ	0xFF4
  2015                           prodl	equ	0xFF3
  2016                           intcon	equ	0xFF2
  2017                           intcon2	equ	0xFF1
  2018                           postinc0	equ	0xFEE
  2019                           plusw0	equ	0xFEB
  2020                           wreg	equ	0xFE8
  2021                           postdec1	equ	0xFE5
  2022                           plusw1	equ	0xFE3
  2023                           fsr1l	equ	0xFE1
  2024                           indf2	equ	0xFDF
  2025                           postinc2	equ	0xFDE
  2026                           postdec2	equ	0xFDD
  2027                           plusw2	equ	0xFDB
  2028                           fsr2h	equ	0xFDA
  2029                           fsr2l	equ	0xFD9
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function _OSCILLATOR_Initialize *****************
  2033 ;; Defined at:
  2034 ;;		line 120 in file "mcc_generated_files/mcc.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;		None
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg, status,2
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2048 ;;      Params:         0       0       0       0       0       0       0
  2049 ;;      Locals:         0       0       0       0       0       0       0
  2050 ;;      Temps:          0       0       0       0       0       0       0
  2051 ;;      Totals:         0       0       0       0       0       0       0
  2052 ;;Total ram usage:        0 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    5
  2055 ;; This function calls:
  2056 ;;		Nothing
  2057 ;; This function is called by:
  2058 ;;		_SYSTEM_Initialize
  2059 ;; This function uses a non-reentrant model
  2060 ;;
  2061                           
  2062                           	psect	text10
  2063  001238                     __ptext10:
  2064                           	opt stack 0
  2065  001238                     _OSCILLATOR_Initialize:
  2066                           	opt stack 24
  2067                           
  2068                           ;mcc.c: 123: OSCCON = 0x72;
  2069                           
  2070                           ; BSR set to: 15
  2071                           ;incstack = 0
  2072  001238  0E72               	movlw	114
  2073  00123A  6ED3               	movwf	4051,c	;volatile
  2074                           
  2075                           ;mcc.c: 125: OSCCON2 = 0x04;
  2076  00123C  0E04               	movlw	4
  2077  00123E  6ED2               	movwf	4050,c	;volatile
  2078                           
  2079                           ;mcc.c: 127: OSCTUNE = 0x40;
  2080  001240  0E40               	movlw	64
  2081  001242  6E9B               	movwf	3995,c	;volatile
  2082  001244  0012               	return		;funcret
  2083  001246                     __end_of_OSCILLATOR_Initialize:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           prodh	equ	0xFF4
  2090                           prodl	equ	0xFF3
  2091                           intcon	equ	0xFF2
  2092                           intcon2	equ	0xFF1
  2093                           postinc0	equ	0xFEE
  2094                           plusw0	equ	0xFEB
  2095                           wreg	equ	0xFE8
  2096                           postdec1	equ	0xFE5
  2097                           plusw1	equ	0xFE3
  2098                           fsr1l	equ	0xFE1
  2099                           indf2	equ	0xFDF
  2100                           postinc2	equ	0xFDE
  2101                           postdec2	equ	0xFDD
  2102                           plusw2	equ	0xFDB
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _INTERRUPT_Initialize *****************
  2108 ;; Defined at:
  2109 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		None
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2123 ;;      Params:         0       0       0       0       0       0       0
  2124 ;;      Locals:         0       0       0       0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0       0       0
  2126 ;;      Totals:         0       0       0       0       0       0       0
  2127 ;;Total ram usage:        0 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    5
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_SYSTEM_Initialize
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text11
  2138  001390                     __ptext11:
  2139                           	opt stack 0
  2140  001390                     _INTERRUPT_Initialize:
  2141                           	opt stack 24
  2142                           
  2143                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  2144                           
  2145                           ;incstack = 0
  2146  001390  9ED0               	bcf	4048,7,c	;volatile
  2147  001392  0012               	return		;funcret
  2148  001394                     __end_of_INTERRUPT_Initialize:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           intcon2	equ	0xFF1
  2158                           postinc0	equ	0xFEE
  2159                           plusw0	equ	0xFEB
  2160                           wreg	equ	0xFE8
  2161                           postdec1	equ	0xFE5
  2162                           plusw1	equ	0xFE3
  2163                           fsr1l	equ	0xFE1
  2164                           indf2	equ	0xFDF
  2165                           postinc2	equ	0xFDE
  2166                           postdec2	equ	0xFDD
  2167                           plusw2	equ	0xFDB
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function _EUSART1_Initialize *****************
  2173 ;; Defined at:
  2174 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2, status,0, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2188 ;;      Params:         0       0       0       0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0
  2191 ;;      Totals:         0       0       0       0       0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    6
  2195 ;; This function calls:
  2196 ;;		_EUSART1_SetRxInterruptHandler
  2197 ;;		_EUSART1_SetTxInterruptHandler
  2198 ;; This function is called by:
  2199 ;;		_SYSTEM_Initialize
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text12
  2204  000DC6                     __ptext12:
  2205                           	opt stack 0
  2206  000DC6                     _EUSART1_Initialize:
  2207                           	opt stack 23
  2208                           
  2209                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  2210                           
  2211                           ;incstack = 0
  2212  000DC6  9A9D               	bcf	3997,5,c	;volatile
  2213                           
  2214                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  2215  000DC8  989D               	bcf	3997,4,c	;volatile
  2216                           
  2217                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  2218  000DCA  0EF8               	movlw	low _EUSART1_Transmit_ISR
  2219  000DCC  6E3A               	movwf	EUSART1_SetTxInterruptHandler@handler,c
  2220  000DCE  0E0F               	movlw	high _EUSART1_Transmit_ISR
  2221  000DD0  6E3B               	movwf	EUSART1_SetTxInterruptHandler@handler+1,c
  2222  000DD2  EC73  F009         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  2223                           
  2224                           ;eusart1.c: 82: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  2225  000DD6  0E26               	movlw	low _EUSART1_Receive_ISR
  2226  000DD8  6E3A               	movwf	EUSART1_SetRxInterruptHandler@handler,c
  2227  000DDA  0E10               	movlw	high _EUSART1_Receive_ISR
  2228  000DDC  6E3B               	movwf	EUSART1_SetRxInterruptHandler@handler+1,c
  2229  000DDE  EC78  F009         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  2230                           
  2231                           ;eusart1.c: 87: BAUDCON1 = 0x08;
  2232  000DE2  0E08               	movlw	8
  2233  000DE4  6EB8               	movwf	4024,c	;volatile
  2234                           
  2235                           ;eusart1.c: 90: RCSTA1 = 0x90;
  2236  000DE6  0E90               	movlw	144
  2237  000DE8  6EAB               	movwf	4011,c	;volatile
  2238                           
  2239                           ;eusart1.c: 93: TXSTA1 = 0x24;
  2240  000DEA  0E24               	movlw	36
  2241  000DEC  6EAC               	movwf	4012,c	;volatile
  2242                           
  2243                           ;eusart1.c: 96: SPBRG1 = 0x22;
  2244  000DEE  0E22               	movlw	34
  2245  000DF0  6EAF               	movwf	4015,c	;volatile
  2246                           
  2247                           ;eusart1.c: 99: SPBRGH1 = 0x00;
  2248  000DF2  0E00               	movlw	0
  2249  000DF4  6EB0               	movwf	4016,c	;volatile
  2250                           
  2251                           ;eusart1.c: 103: eusart1TxHead = 0;
  2252  000DF6  0E00               	movlw	0
  2253  000DF8  6E1C               	movwf	_eusart1TxHead,c	;volatile
  2254                           
  2255                           ;eusart1.c: 104: eusart1TxTail = 0;
  2256  000DFA  0E00               	movlw	0
  2257  000DFC  6E1B               	movwf	_eusart1TxTail,c	;volatile
  2258                           
  2259                           ;eusart1.c: 105: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2260  000DFE  0E08               	movlw	8
  2261  000E00  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  2262                           
  2263                           ;eusart1.c: 107: eusart1RxHead = 0;
  2264  000E02  0E00               	movlw	0
  2265  000E04  6E1A               	movwf	_eusart1RxHead,c	;volatile
  2266                           
  2267                           ;eusart1.c: 108: eusart1RxTail = 0;
  2268  000E06  0E00               	movlw	0
  2269  000E08  6E19               	movwf	_eusart1RxTail,c	;volatile
  2270                           
  2271                           ;eusart1.c: 109: eusart1RxCount = 0;
  2272  000E0A  0E00               	movlw	0
  2273  000E0C  6E18               	movwf	_eusart1RxCount,c	;volatile
  2274                           
  2275                           ;eusart1.c: 112: PIE1bits.RC1IE = 1;
  2276  000E0E  8A9D               	bsf	3997,5,c	;volatile
  2277  000E10  0012               	return		;funcret
  2278  000E12                     __end_of_EUSART1_Initialize:
  2279                           	opt stack 0
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           prodh	equ	0xFF4
  2285                           prodl	equ	0xFF3
  2286                           intcon	equ	0xFF2
  2287                           intcon2	equ	0xFF1
  2288                           postinc0	equ	0xFEE
  2289                           plusw0	equ	0xFEB
  2290                           wreg	equ	0xFE8
  2291                           postdec1	equ	0xFE5
  2292                           plusw1	equ	0xFE3
  2293                           fsr1l	equ	0xFE1
  2294                           indf2	equ	0xFDF
  2295                           postinc2	equ	0xFDE
  2296                           postdec2	equ	0xFDD
  2297                           plusw2	equ	0xFDB
  2298                           fsr2h	equ	0xFDA
  2299                           fsr2l	equ	0xFD9
  2300                           status	equ	0xFD8
  2301                           
  2302 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  2303 ;; Defined at:
  2304 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;  handler         2   20[COMRAM] PTR FTN()void 
  2307 ;;		 -> EUSART1_Transmit_ISR(1), 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;		None
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		wreg, status,2, status,0
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2319 ;;      Params:         2       0       0       0       0       0       0
  2320 ;;      Locals:         0       0       0       0       0       0       0
  2321 ;;      Temps:          0       0       0       0       0       0       0
  2322 ;;      Totals:         2       0       0       0       0       0       0
  2323 ;;Total ram usage:        2 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    5
  2326 ;; This function calls:
  2327 ;;		Nothing
  2328 ;; This function is called by:
  2329 ;;		_EUSART1_Initialize
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text13
  2334  0012E6                     __ptext13:
  2335                           	opt stack 0
  2336  0012E6                     _EUSART1_SetTxInterruptHandler:
  2337                           	opt stack 23
  2338                           
  2339                           ;eusart1.c: 223: EUSART1_TxDefaultInterruptHandler = handler;
  2340                           
  2341                           ;incstack = 0
  2342  0012E6  C03A  F0E5         	movff	EUSART1_SetTxInterruptHandler@handler,_EUSART1_TxDefaultInterruptHandler
  2343  0012EA  C03B  F0E6         	movff	EUSART1_SetTxInterruptHandler@handler+1,_EUSART1_TxDefaultInterruptHandler+1
  2344  0012EE  0012               	return		;funcret
  2345  0012F0                     __end_of_EUSART1_SetTxInterruptHandler:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           tblptrh	equ	0xFF7
  2349                           tblptrl	equ	0xFF6
  2350                           tablat	equ	0xFF5
  2351                           prodh	equ	0xFF4
  2352                           prodl	equ	0xFF3
  2353                           intcon	equ	0xFF2
  2354                           intcon2	equ	0xFF1
  2355                           postinc0	equ	0xFEE
  2356                           plusw0	equ	0xFEB
  2357                           wreg	equ	0xFE8
  2358                           postdec1	equ	0xFE5
  2359                           plusw1	equ	0xFE3
  2360                           fsr1l	equ	0xFE1
  2361                           indf2	equ	0xFDF
  2362                           postinc2	equ	0xFDE
  2363                           postdec2	equ	0xFDD
  2364                           plusw2	equ	0xFDB
  2365                           fsr2h	equ	0xFDA
  2366                           fsr2l	equ	0xFD9
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  2370 ;; Defined at:
  2371 ;;		line 226 in file "mcc_generated_files/eusart1.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  handler         2   20[COMRAM] PTR FTN()void 
  2374 ;;		 -> EUSART1_Receive_ISR(1), 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;		None
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2386 ;;      Params:         2       0       0       0       0       0       0
  2387 ;;      Locals:         0       0       0       0       0       0       0
  2388 ;;      Temps:          0       0       0       0       0       0       0
  2389 ;;      Totals:         2       0       0       0       0       0       0
  2390 ;;Total ram usage:        2 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    5
  2393 ;; This function calls:
  2394 ;;		Nothing
  2395 ;; This function is called by:
  2396 ;;		_EUSART1_Initialize
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text14
  2401  0012F0                     __ptext14:
  2402                           	opt stack 0
  2403  0012F0                     _EUSART1_SetRxInterruptHandler:
  2404                           	opt stack 23
  2405                           
  2406                           ;eusart1.c: 227: EUSART1_RxDefaultInterruptHandler = handler;
  2407                           
  2408                           ;incstack = 0
  2409  0012F0  C03A  F0E3         	movff	EUSART1_SetRxInterruptHandler@handler,_EUSART1_RxDefaultInterruptHandler
  2410  0012F4  C03B  F0E4         	movff	EUSART1_SetRxInterruptHandler@handler+1,_EUSART1_RxDefaultInterruptHandler+1
  2411  0012F8  0012               	return		;funcret
  2412  0012FA                     __end_of_EUSART1_SetRxInterruptHandler:
  2413                           	opt stack 0
  2414                           tblptru	equ	0xFF8
  2415                           tblptrh	equ	0xFF7
  2416                           tblptrl	equ	0xFF6
  2417                           tablat	equ	0xFF5
  2418                           prodh	equ	0xFF4
  2419                           prodl	equ	0xFF3
  2420                           intcon	equ	0xFF2
  2421                           intcon2	equ	0xFF1
  2422                           postinc0	equ	0xFEE
  2423                           plusw0	equ	0xFEB
  2424                           wreg	equ	0xFE8
  2425                           postdec1	equ	0xFE5
  2426                           plusw1	equ	0xFE3
  2427                           fsr1l	equ	0xFE1
  2428                           indf2	equ	0xFDF
  2429                           postinc2	equ	0xFDE
  2430                           postdec2	equ	0xFDD
  2431                           plusw2	equ	0xFDB
  2432                           fsr2h	equ	0xFDA
  2433                           fsr2l	equ	0xFD9
  2434                           status	equ	0xFD8
  2435                           
  2436 ;; *************** function _ACCELEROMETER_Initialize *****************
  2437 ;; Defined at:
  2438 ;;		line 4 in file "accelerometer.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;		None
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      void 
  2445 ;; Registers used:
  2446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2452 ;;      Params:         0       0       0       0       0       0       0
  2453 ;;      Locals:         0       0       0       0       0       0       0
  2454 ;;      Temps:          2       0       0       0       0       0       0
  2455 ;;      Totals:         2       0       0       0       0       0       0
  2456 ;;Total ram usage:        2 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:   13
  2459 ;; This function calls:
  2460 ;;		_read_register
  2461 ;;		_write_register
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text15
  2468  000AF0                     __ptext15:
  2469                           	opt stack 0
  2470  000AF0                     _ACCELEROMETER_Initialize:
  2471                           	opt stack 17
  2472                           
  2473                           ;accelerometer.c: 6: write_register(0x2B, 0x40);
  2474                           
  2475                           ;incstack = 0
  2476  000AF0  0E40               	movlw	64
  2477  000AF2  6E3F               	movwf	write_register@data,c
  2478  000AF4  0E2B               	movlw	43
  2479  000AF6  ECCC  F007         	call	_write_register
  2480                           
  2481                           ;accelerometer.c: 8: _delay((unsigned long)((100)*(16000000/4000.0)));
  2482  000AFA  0E03               	movlw	3
  2483  000AFC  6E42               	movwf	(??_ACCELEROMETER_Initialize+1)& (0+255),c
  2484  000AFE  0E08               	movlw	8
  2485  000B00  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  2486  000B02  0E77               	movlw	119
  2487  000B04                     u2157:
  2488  000B04  2EE8               	decfsz	wreg,f,c
  2489  000B06  D7FE               	bra	u2157
  2490  000B08  2E41               	decfsz	??_ACCELEROMETER_Initialize& (0+255),f,c
  2491  000B0A  D7FC               	bra	u2157
  2492  000B0C  2E42               	decfsz	(??_ACCELEROMETER_Initialize+1)& (0+255),f,c
  2493  000B0E  D7FA               	bra	u2157
  2494  000B10  F000               	nop	
  2495  000B12  0E2B               	movlw	43
  2496  000B14  ECE5  F007         	call	_read_register
  2497  000B18  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  2498  000B1A  BC41               	btfsc	??_ACCELEROMETER_Initialize,6,c
  2499  000B1C  D7FA               	goto	l636
  2500                           
  2501                           ;accelerometer.c: 14: write_register(0x0E, MMA8451_RANGE_4_G);
  2502  000B1E  0E01               	movlw	1
  2503  000B20  6E3F               	movwf	write_register@data,c
  2504  000B22  0E0E               	movlw	14
  2505  000B24  ECCC  F007         	call	_write_register
  2506                           
  2507                           ;accelerometer.c: 16: write_register(0x2B, 0x02);
  2508  000B28  0E02               	movlw	2
  2509  000B2A  6E3F               	movwf	write_register@data,c
  2510  000B2C  0E2B               	movlw	43
  2511  000B2E  ECCC  F007         	call	_write_register
  2512                           
  2513                           ;accelerometer.c: 18: write_register(0x2D, 0x01);
  2514  000B32  0E01               	movlw	1
  2515  000B34  6E3F               	movwf	write_register@data,c
  2516  000B36  0E2D               	movlw	45
  2517  000B38  ECCC  F007         	call	_write_register
  2518                           
  2519                           ;accelerometer.c: 19: write_register(0x2E, 0x01);
  2520  000B3C  0E01               	movlw	1
  2521  000B3E  6E3F               	movwf	write_register@data,c
  2522  000B40  0E2E               	movlw	46
  2523  000B42  ECCC  F007         	call	_write_register
  2524                           
  2525                           ;accelerometer.c: 22: write_register(0x11, 0x40);
  2526  000B46  0E40               	movlw	64
  2527  000B48  6E3F               	movwf	write_register@data,c
  2528  000B4A  0E11               	movlw	17
  2529  000B4C  ECCC  F007         	call	_write_register
  2530                           
  2531                           ;accelerometer.c: 25: write_register(0x2A, 0x01 | 0x04);
  2532  000B50  0E05               	movlw	5
  2533  000B52  6E3F               	movwf	write_register@data,c
  2534  000B54  0E2A               	movlw	42
  2535  000B56  ECCC  F007         	call	_write_register
  2536  000B5A  0012               	return		;funcret
  2537  000B5C                     __end_of_ACCELEROMETER_Initialize:
  2538                           	opt stack 0
  2539                           tblptru	equ	0xFF8
  2540                           tblptrh	equ	0xFF7
  2541                           tblptrl	equ	0xFF6
  2542                           tablat	equ	0xFF5
  2543                           prodh	equ	0xFF4
  2544                           prodl	equ	0xFF3
  2545                           intcon	equ	0xFF2
  2546                           intcon2	equ	0xFF1
  2547                           postinc0	equ	0xFEE
  2548                           plusw0	equ	0xFEB
  2549                           wreg	equ	0xFE8
  2550                           postdec1	equ	0xFE5
  2551                           plusw1	equ	0xFE3
  2552                           fsr1l	equ	0xFE1
  2553                           indf2	equ	0xFDF
  2554                           postinc2	equ	0xFDE
  2555                           postdec2	equ	0xFDD
  2556                           plusw2	equ	0xFDB
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _write_register *****************
  2562 ;; Defined at:
  2563 ;;		line 29 in file "accelerometer.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  reg             1    wreg     unsigned char 
  2566 ;;  data            1   25[COMRAM] unsigned char 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  reg             1   26[COMRAM] unsigned char 
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2578 ;;      Params:         1       0       0       0       0       0       0
  2579 ;;      Locals:         1       0       0       0       0       0       0
  2580 ;;      Temps:          0       0       0       0       0       0       0
  2581 ;;      Totals:         2       0       0       0       0       0       0
  2582 ;;Total ram usage:        2 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:   12
  2585 ;; This function calls:
  2586 ;;		_i2c_close
  2587 ;;		_i2c_masterWrite
  2588 ;;		_i2c_open
  2589 ;;		_i2c_setBuffer
  2590 ;; This function is called by:
  2591 ;;		_ACCELEROMETER_Initialize
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text16
  2596  000F98                     __ptext16:
  2597                           	opt stack 0
  2598  000F98                     _write_register:
  2599                           	opt stack 17
  2600                           
  2601                           ;incstack = 0
  2602                           ;write_register@reg stored from wreg
  2603  000F98  6E40               	movwf	write_register@reg,c
  2604                           
  2605                           ;accelerometer.c: 30: static i2c_error_t status;
  2606                           ;accelerometer.c: 31: static uint8_t buffer[2];
  2607                           ;accelerometer.c: 34: buffer[0] = reg;
  2608  000F9A  C040  F023         	movff	write_register@reg,write_register@buffer
  2609                           
  2610                           ;accelerometer.c: 35: buffer[1] = data;
  2611  000F9E  C03F  F024         	movff	write_register@data,write_register@buffer+1
  2612                           
  2613                           ;accelerometer.c: 36: i2c_open(0x1D);
  2614  000FA2  0E1D               	movlw	29
  2615  000FA4  ECA0  F003         	call	_i2c_open
  2616                           
  2617                           ;accelerometer.c: 37: i2c_setBuffer(buffer, 2);
  2618  000FA8  0E23               	movlw	low write_register@buffer
  2619  000FAA  6E3A               	movwf	i2c_setBuffer@buffer,c
  2620  000FAC  0E00               	movlw	high write_register@buffer
  2621  000FAE  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2622  000FB0  0E00               	movlw	0
  2623  000FB2  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2624  000FB4  0E02               	movlw	2
  2625  000FB6  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2626  000FB8  EC5F  F008         	call	_i2c_setBuffer	;wreg free
  2627                           
  2628                           ;accelerometer.c: 40: status = i2c_masterWrite();
  2629  000FBC  EC91  F009         	call	_i2c_masterWrite	;wreg free
  2630  000FC0  6E17               	movwf	write_register@status,c
  2631                           
  2632                           ;accelerometer.c: 41: status = i2c_close();
  2633  000FC2  EC50  F008         	call	_i2c_close	;wreg free
  2634  000FC6  6E17               	movwf	write_register@status,c
  2635  000FC8  0012               	return		;funcret
  2636  000FCA                     __end_of_write_register:
  2637                           	opt stack 0
  2638                           tblptru	equ	0xFF8
  2639                           tblptrh	equ	0xFF7
  2640                           tblptrl	equ	0xFF6
  2641                           tablat	equ	0xFF5
  2642                           prodh	equ	0xFF4
  2643                           prodl	equ	0xFF3
  2644                           intcon	equ	0xFF2
  2645                           intcon2	equ	0xFF1
  2646                           postinc0	equ	0xFEE
  2647                           plusw0	equ	0xFEB
  2648                           wreg	equ	0xFE8
  2649                           postdec1	equ	0xFE5
  2650                           plusw1	equ	0xFE3
  2651                           fsr1l	equ	0xFE1
  2652                           indf2	equ	0xFDF
  2653                           postinc2	equ	0xFDE
  2654                           postdec2	equ	0xFDD
  2655                           plusw2	equ	0xFDB
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _i2c_masterWrite *****************
  2661 ;; Defined at:
  2662 ;;		line 264 in file "mcc_generated_files/drivers/i2c_master.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;		None
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;		None
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      enum E6837
  2669 ;; Registers used:
  2670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2676 ;;      Params:         0       0       0       0       0       0       0
  2677 ;;      Locals:         0       0       0       0       0       0       0
  2678 ;;      Temps:          0       0       0       0       0       0       0
  2679 ;;      Totals:         0       0       0       0       0       0       0
  2680 ;;Total ram usage:        0 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:   11
  2683 ;; This function calls:
  2684 ;;		_i2c_masterOperation
  2685 ;; This function is called by:
  2686 ;;		_write_register
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text17
  2691  001322                     __ptext17:
  2692                           	opt stack 0
  2693  001322                     _i2c_masterWrite:
  2694                           	opt stack 17
  2695                           
  2696                           ;i2c_master.c: 266: return i2c_masterOperation(OPERATIONWRITE);
  2697                           
  2698                           ;incstack = 0
  2699  001322  0E02               	movlw	2
  2700  001324  EC09  F007         	call	_i2c_masterOperation
  2701  001328  0012               	return	
  2702  00132A                     __end_of_i2c_masterWrite:
  2703                           	opt stack 0
  2704                           tblptru	equ	0xFF8
  2705                           tblptrh	equ	0xFF7
  2706                           tblptrl	equ	0xFF6
  2707                           tablat	equ	0xFF5
  2708                           prodh	equ	0xFF4
  2709                           prodl	equ	0xFF3
  2710                           intcon	equ	0xFF2
  2711                           intcon2	equ	0xFF1
  2712                           postinc0	equ	0xFEE
  2713                           plusw0	equ	0xFEB
  2714                           wreg	equ	0xFE8
  2715                           postdec1	equ	0xFE5
  2716                           plusw1	equ	0xFE3
  2717                           fsr1l	equ	0xFE1
  2718                           indf2	equ	0xFDF
  2719                           postinc2	equ	0xFDE
  2720                           postdec2	equ	0xFDD
  2721                           plusw2	equ	0xFDB
  2722                           fsr2h	equ	0xFDA
  2723                           fsr2l	equ	0xFD9
  2724                           status	equ	0xFD8
  2725                           
  2726 ;; *************** function _read_register *****************
  2727 ;; Defined at:
  2728 ;;		line 46 in file "accelerometer.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  reg             1    wreg     unsigned char 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  reg             1   26[COMRAM] unsigned char 
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      unsigned char 
  2735 ;; Registers used:
  2736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2742 ;;      Params:         0       0       0       0       0       0       0
  2743 ;;      Locals:         1       0       0       0       0       0       0
  2744 ;;      Temps:          0       0       0       0       0       0       0
  2745 ;;      Totals:         1       0       0       0       0       0       0
  2746 ;;Total ram usage:        1 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:   12
  2749 ;; This function calls:
  2750 ;;		_i2c_close
  2751 ;;		_i2c_masterAccelRead
  2752 ;;		_i2c_open
  2753 ;;		_i2c_setBuffer
  2754 ;; This function is called by:
  2755 ;;		_ACCELEROMETER_Initialize
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text18
  2760  000FCA                     __ptext18:
  2761                           	opt stack 0
  2762  000FCA                     _read_register:
  2763                           	opt stack 17
  2764                           
  2765                           ;incstack = 0
  2766                           ;read_register@reg stored from wreg
  2767  000FCA  6E40               	movwf	read_register@reg,c
  2768                           
  2769                           ;accelerometer.c: 47: static i2c_error_t status;
  2770                           ;accelerometer.c: 48: static volatile uint8_t receivebuffer[1];
  2771                           ;accelerometer.c: 51: i2c_open(0x1D);
  2772  000FCC  0E1D               	movlw	29
  2773  000FCE  ECA0  F003         	call	_i2c_open
  2774                           
  2775                           ;accelerometer.c: 55: i2c_setBuffer(receivebuffer, 1);
  2776  000FD2  0E25               	movlw	low read_register@receivebuffer
  2777  000FD4  6E3A               	movwf	i2c_setBuffer@buffer,c
  2778  000FD6  0E00               	movlw	high read_register@receivebuffer
  2779  000FD8  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2780  000FDA  0E00               	movlw	0
  2781  000FDC  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2782  000FDE  0E01               	movlw	1
  2783  000FE0  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2784  000FE2  EC5F  F008         	call	_i2c_setBuffer	;wreg free
  2785                           
  2786                           ;accelerometer.c: 58: status = i2c_masterAccelRead(reg);
  2787  000FE6  5040               	movf	read_register@reg,w,c
  2788  000FE8  EC23  F009         	call	_i2c_masterAccelRead
  2789  000FEC  6E16               	movwf	read_register@status,c
  2790                           
  2791                           ;accelerometer.c: 61: status = i2c_close();
  2792  000FEE  EC50  F008         	call	_i2c_close	;wreg free
  2793  000FF2  6E16               	movwf	read_register@status,c
  2794                           
  2795                           ;accelerometer.c: 63: return receivebuffer[0];
  2796  000FF4  5025               	movf	read_register@receivebuffer,w,c	;volatile
  2797  000FF6  0012               	return	
  2798  000FF8                     __end_of_read_register:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           prodh	equ	0xFF4
  2805                           prodl	equ	0xFF3
  2806                           intcon	equ	0xFF2
  2807                           intcon2	equ	0xFF1
  2808                           postinc0	equ	0xFEE
  2809                           plusw0	equ	0xFEB
  2810                           wreg	equ	0xFE8
  2811                           postdec1	equ	0xFE5
  2812                           plusw1	equ	0xFE3
  2813                           fsr1l	equ	0xFE1
  2814                           indf2	equ	0xFDF
  2815                           postinc2	equ	0xFDE
  2816                           postdec2	equ	0xFDD
  2817                           plusw2	equ	0xFDB
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _i2c_setBuffer *****************
  2823 ;; Defined at:
  2824 ;;		line 192 in file "mcc_generated_files/drivers/i2c_master.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  buffer          2   20[COMRAM] PTR void 
  2827 ;;		 -> read_xyzvalues@readbuffer(6), read_register@receivebuffer(1), write_register@buffer(2), 
  2828 ;;  bufferSize      2   22[COMRAM] unsigned int 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2840 ;;      Params:         4       0       0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0
  2843 ;;      Totals:         4       0       0       0       0       0       0
  2844 ;;Total ram usage:        4 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    5
  2847 ;; This function calls:
  2848 ;;		Nothing
  2849 ;; This function is called by:
  2850 ;;		_write_register
  2851 ;;		_read_register
  2852 ;;		_read_xyzvalues
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text19
  2857  0010BE                     __ptext19:
  2858                           	opt stack 0
  2859  0010BE                     _i2c_setBuffer:
  2860                           	opt stack 24
  2861                           
  2862                           ;i2c_master.c: 194: if(i2c_status.bufferFree)
  2863                           
  2864                           ;incstack = 0
  2865  0010BE  0100               	movlb	0	; () banked
  2866  0010C0  A59A               	btfss	_i2c_status& (0+255),2,b
  2867  0010C2  0012               	return	
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;i2c_master.c: 195: {
  2871                           ;i2c_master.c: 196: i2c_status.data_ptr = buffer;
  2872  0010C4  C03A  F09C         	movff	i2c_setBuffer@buffer,_i2c_status+2
  2873  0010C8  C03B  F09D         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;i2c_master.c: 197: i2c_status.data_length = bufferSize;
  2877  0010CC  C03C  F09E         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  2878  0010D0  C03D  F09F         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;i2c_master.c: 198: i2c_status.bufferFree = 0;
  2882  0010D4  959A               	bcf	_i2c_status& (0+255),2,b
  2883  0010D6  0012               	return	
  2884  0010D8                     __end_of_i2c_setBuffer:
  2885                           	opt stack 0
  2886                           tblptru	equ	0xFF8
  2887                           tblptrh	equ	0xFF7
  2888                           tblptrl	equ	0xFF6
  2889                           tablat	equ	0xFF5
  2890                           prodh	equ	0xFF4
  2891                           prodl	equ	0xFF3
  2892                           intcon	equ	0xFF2
  2893                           intcon2	equ	0xFF1
  2894                           postinc0	equ	0xFEE
  2895                           plusw0	equ	0xFEB
  2896                           wreg	equ	0xFE8
  2897                           postdec1	equ	0xFE5
  2898                           plusw1	equ	0xFE3
  2899                           fsr1l	equ	0xFE1
  2900                           indf2	equ	0xFDF
  2901                           postinc2	equ	0xFDE
  2902                           postdec2	equ	0xFDD
  2903                           plusw2	equ	0xFDB
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _i2c_open *****************
  2909 ;; Defined at:
  2910 ;;		line 124 in file "mcc_generated_files/drivers/i2c_master.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  address         1    wreg     unsigned char 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  address         1   23[COMRAM] unsigned char 
  2915 ;;  ret             1   22[COMRAM] enum E6837
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      enum E6837
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2925 ;;      Params:         0       0       0       0       0       0       0
  2926 ;;      Locals:         2       0       0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0
  2928 ;;      Totals:         2       0       0       0       0       0       0
  2929 ;;Total ram usage:        2 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    6
  2932 ;; This function calls:
  2933 ;;		_i2c1_driver_open
  2934 ;;		_i2c1_driver_setBusCollisionISR
  2935 ;;		_i2c1_driver_setI2cISR
  2936 ;;		_mssp1_clearIRQ
  2937 ;; This function is called by:
  2938 ;;		_write_register
  2939 ;;		_read_register
  2940 ;;		_read_xyzvalues
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text20
  2945  000740                     __ptext20:
  2946                           	opt stack 0
  2947  000740                     _i2c_open:
  2948                           	opt stack 23
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;incstack = 0
  2952                           ;i2c_open@address stored from wreg
  2953  000740  6E3D               	movwf	i2c_open@address,c
  2954                           
  2955                           ;i2c_master.c: 126: i2c_error_t ret = I2C_BUSY;
  2956  000742  0E01               	movlw	1
  2957  000744  6E3C               	movwf	i2c_open@ret,c
  2958                           
  2959                           ;i2c_master.c: 128: if(!i2c_status.inUse)
  2960  000746  0100               	movlb	0	; () banked
  2961  000748  B39A               	btfsc	_i2c_status& (0+255),1,b
  2962  00074A  0012               	return	
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;i2c_master.c: 129: {
  2966                           ;i2c_master.c: 130: i2c_status.address = address;
  2967  00074C  C03D  F09B         	movff	i2c_open@address,_i2c_status+1
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;i2c_master.c: 131: i2c_status.busy = 0;
  2971  000750  919A               	bcf	_i2c_status& (0+255),0,b
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;i2c_master.c: 132: i2c_status.inUse = 1;
  2975  000752  839A               	bsf	_i2c_status& (0+255),1,b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;i2c_master.c: 133: i2c_status.addressNACKCheck = 0;
  2979  000754  979A               	bcf	_i2c_status& (0+255),3,b
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;i2c_master.c: 134: i2c_status.state = I2C_RESET;
  2983  000756  0E0E               	movlw	14
  2984  000758  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;i2c_master.c: 135: i2c_status.time_out_value = 500;
  2988  00075A  0E01               	movlw	1
  2989  00075C  6FA3               	movwf	(_i2c_status+9)& (0+255),b
  2990  00075E  0EF4               	movlw	244
  2991  000760  6FA2               	movwf	(_i2c_status+8)& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;i2c_master.c: 136: i2c_status.bufferFree = 1;
  2995  000762  859A               	bsf	_i2c_status& (0+255),2,b
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  2999  000764  0E18               	movlw	low _returnStop
  3000  000766  6FA6               	movwf	(_i2c_status+12)& (0+255),b
  3001  000768  0E13               	movlw	high _returnStop
  3002  00076A  6FA7               	movwf	(_i2c_status+13)& (0+255),b
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  3006  00076C  0E00               	movlw	0
  3007  00076E  6FB2               	movwf	(_i2c_status+24)& (0+255),b
  3008  000770  0E00               	movlw	0
  3009  000772  6FB3               	movwf	(_i2c_status+25)& (0+255),b
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;i2c_master.c: 141: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  3013  000774  0E18               	movlw	low _returnStop
  3014  000776  6FA8               	movwf	(_i2c_status+14)& (0+255),b
  3015  000778  0E13               	movlw	high _returnStop
  3016  00077A  6FA9               	movwf	(_i2c_status+15)& (0+255),b
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;i2c_master.c: 142: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  3020  00077C  0E00               	movlw	0
  3021  00077E  6FB4               	movwf	(_i2c_status+26)& (0+255),b
  3022  000780  0E00               	movlw	0
  3023  000782  6FB5               	movwf	(_i2c_status+27)& (0+255),b
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;i2c_master.c: 143: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  3027  000784  0E18               	movlw	low _returnStop
  3028  000786  6FAA               	movwf	(_i2c_status+16)& (0+255),b
  3029  000788  0E13               	movlw	high _returnStop
  3030  00078A  6FAB               	movwf	(_i2c_status+17)& (0+255),b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;i2c_master.c: 144: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  3034  00078C  0E00               	movlw	0
  3035  00078E  6FB6               	movwf	(_i2c_status+28)& (0+255),b
  3036  000790  0E00               	movlw	0
  3037  000792  6FB7               	movwf	(_i2c_status+29)& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;i2c_master.c: 145: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  3041  000794  0E18               	movlw	low _returnStop
  3042  000796  6FAC               	movwf	(_i2c_status+18)& (0+255),b
  3043  000798  0E13               	movlw	high _returnStop
  3044  00079A  6FAD               	movwf	(_i2c_status+19)& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;i2c_master.c: 146: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  3048  00079C  0E00               	movlw	0
  3049  00079E  6FB8               	movwf	(_i2c_status+30)& (0+255),b
  3050  0007A0  0E00               	movlw	0
  3051  0007A2  6FB9               	movwf	(_i2c_status+31)& (0+255),b
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;i2c_master.c: 147: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  3055  0007A4  0E0E               	movlw	low _returnReset
  3056  0007A6  6FAE               	movwf	(_i2c_status+20)& (0+255),b
  3057  0007A8  0E13               	movlw	high _returnReset
  3058  0007AA  6FAF               	movwf	(_i2c_status+21)& (0+255),b
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;i2c_master.c: 148: i2c_status.callbackPayload[i2c_timeOut] = (0);
  3062  0007AC  0E00               	movlw	0
  3063  0007AE  6FBA               	movwf	(_i2c_status+32)& (0+255),b
  3064  0007B0  0E00               	movlw	0
  3065  0007B2  6FBB               	movwf	(_i2c_status+33)& (0+255),b
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;i2c_master.c: 150: i2c1_driver_open();
  3069  0007B4  EC79  F008         	call	_i2c1_driver_open	;wreg free
  3070                           
  3071                           ;i2c_master.c: 151: mssp1_clearIRQ();
  3072  0007B8  ECD8  F009         	call	_mssp1_clearIRQ	;wreg free
  3073                           
  3074                           ;i2c_master.c: 153: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  3075  0007BC  0E8A               	movlw	low _i2c_busCollisionISR
  3076  0007BE  6E3A               	movwf	i2c1_driver_setBusCollisionISR@f,c
  3077  0007C0  0E13               	movlw	high _i2c_busCollisionISR
  3078  0007C2  6E3B               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  3079  0007C4  EC82  F009         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  3080                           
  3081                           ;i2c_master.c: 154: i2c1_driver_setI2cISR(i2c_ISR);
  3082  0007C8  0E2A               	movlw	low _i2c_ISR
  3083  0007CA  6E3A               	movwf	i2c1_driver_setI2cISR@f,c
  3084  0007CC  0E0D               	movlw	high _i2c_ISR
  3085  0007CE  6E3B               	movwf	i2c1_driver_setI2cISR@f+1,c
  3086  0007D0  EC7D  F009         	call	_i2c1_driver_setI2cISR	;wreg free
  3087                           
  3088                           ;i2c_master.c: 159: ret = I2C_NOERR;
  3089  0007D4  0E00               	movlw	0
  3090  0007D6  6E3C               	movwf	i2c_open@ret,c
  3091  0007D8  0012               	return	
  3092  0007DA                     __end_of_i2c_open:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           intcon	equ	0xFF2
  3101                           intcon2	equ	0xFF1
  3102                           postinc0	equ	0xFEE
  3103                           plusw0	equ	0xFEB
  3104                           wreg	equ	0xFE8
  3105                           postdec1	equ	0xFE5
  3106                           plusw1	equ	0xFE3
  3107                           fsr1l	equ	0xFE1
  3108                           indf2	equ	0xFDF
  3109                           postinc2	equ	0xFDE
  3110                           postdec2	equ	0xFDD
  3111                           plusw2	equ	0xFDB
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _i2c1_driver_setI2cISR *****************
  3117 ;; Defined at:
  3118 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  f               2   20[COMRAM] PTR FTN()void 
  3121 ;;		 -> i2c_ISR(1), 
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;		None
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3133 ;;      Params:         2       0       0       0       0       0       0
  3134 ;;      Locals:         0       0       0       0       0       0       0
  3135 ;;      Temps:          0       0       0       0       0       0       0
  3136 ;;      Totals:         2       0       0       0       0       0       0
  3137 ;;Total ram usage:        2 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    5
  3140 ;; This function calls:
  3141 ;;		Nothing
  3142 ;; This function is called by:
  3143 ;;		_i2c_open
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text21
  3148  0012FA                     __ptext21:
  3149                           	opt stack 0
  3150  0012FA                     _i2c1_driver_setI2cISR:
  3151                           	opt stack 23
  3152                           
  3153                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  3154                           
  3155                           ;incstack = 0
  3156  0012FA  C03A  F011         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  3157  0012FE  C03B  F012         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  3158  001302  0012               	return		;funcret
  3159  001304                     __end_of_i2c1_driver_setI2cISR:
  3160                           	opt stack 0
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           intcon2	equ	0xFF1
  3169                           postinc0	equ	0xFEE
  3170                           plusw0	equ	0xFEB
  3171                           wreg	equ	0xFE8
  3172                           postdec1	equ	0xFE5
  3173                           plusw1	equ	0xFE3
  3174                           fsr1l	equ	0xFE1
  3175                           indf2	equ	0xFDF
  3176                           postinc2	equ	0xFDE
  3177                           postdec2	equ	0xFDD
  3178                           plusw2	equ	0xFDB
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  3184 ;; Defined at:
  3185 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  f               2   20[COMRAM] PTR FTN()void 
  3188 ;;		 -> i2c_busCollisionISR(1), 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2, status,0
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3200 ;;      Params:         2       0       0       0       0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0
  3202 ;;      Temps:          0       0       0       0       0       0       0
  3203 ;;      Totals:         2       0       0       0       0       0       0
  3204 ;;Total ram usage:        2 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    5
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_i2c_open
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text22
  3215  001304                     __ptext22:
  3216                           	opt stack 0
  3217  001304                     _i2c1_driver_setBusCollisionISR:
  3218                           	opt stack 23
  3219                           
  3220                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  3221                           
  3222                           ;incstack = 0
  3223  001304  C03A  F013         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  3224  001308  C03B  F014         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  3225  00130C  0012               	return		;funcret
  3226  00130E                     __end_of_i2c1_driver_setBusCollisionISR:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           prodh	equ	0xFF4
  3233                           prodl	equ	0xFF3
  3234                           intcon	equ	0xFF2
  3235                           intcon2	equ	0xFF1
  3236                           postinc0	equ	0xFEE
  3237                           plusw0	equ	0xFEB
  3238                           wreg	equ	0xFE8
  3239                           postdec1	equ	0xFE5
  3240                           plusw1	equ	0xFE3
  3241                           fsr1l	equ	0xFE1
  3242                           indf2	equ	0xFDF
  3243                           postinc2	equ	0xFDE
  3244                           postdec2	equ	0xFDD
  3245                           plusw2	equ	0xFDB
  3246                           fsr2h	equ	0xFDA
  3247                           fsr2l	equ	0xFD9
  3248                           status	equ	0xFD8
  3249                           
  3250 ;; *************** function _i2c1_driver_open *****************
  3251 ;; Defined at:
  3252 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;		None
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;		None
  3257 ;; Return value:  Size  Location     Type
  3258 ;;		None               void
  3259 ;; Registers used:
  3260 ;;		wreg, status,2
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3266 ;;      Params:         0       0       0       0       0       0       0
  3267 ;;      Locals:         0       0       0       0       0       0       0
  3268 ;;      Temps:          0       0       0       0       0       0       0
  3269 ;;      Totals:         0       0       0       0       0       0       0
  3270 ;;Total ram usage:        0 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    5
  3273 ;; This function calls:
  3274 ;;		Nothing
  3275 ;; This function is called by:
  3276 ;;		_i2c_open
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text23
  3281  0010F2                     __ptext23:
  3282                           	opt stack 0
  3283  0010F2                     _i2c1_driver_open:
  3284                           	opt stack 23
  3285                           
  3286                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  3287                           
  3288                           ;incstack = 0
  3289  0010F2  BAC6               	btfsc	4038,5,c	;volatile
  3290  0010F4  0012               	return	
  3291                           
  3292                           ;i2c1_driver.c: 86: {
  3293                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  3294  0010F6  0E00               	movlw	0
  3295  0010F8  6EC7               	movwf	4039,c	;volatile
  3296                           
  3297                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  3298  0010FA  0E28               	movlw	40
  3299  0010FC  6EC6               	movwf	4038,c	;volatile
  3300                           
  3301                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  3302  0010FE  0E00               	movlw	0
  3303  001100  6EC5               	movwf	4037,c	;volatile
  3304                           
  3305                           ;i2c1_driver.c: 90: SSP1ADD = 0x27;
  3306  001102  0E27               	movlw	39
  3307  001104  6EC8               	movwf	4040,c	;volatile
  3308                           
  3309                           ;i2c1_driver.c: 93: else
  3310                           ;i2c1_driver.c: 94: return 0;
  3311                           ;	Return value of _i2c1_driver_open is never used
  3312                           
  3313                           ;i2c1_driver.c: 92: }
  3314                           
  3315                           ;i2c1_driver.c: 91: return 1;
  3316                           ;	Return value of _i2c1_driver_open is never used
  3317  001106  0012               	return	
  3318  001108                     __end_of_i2c1_driver_open:
  3319                           	opt stack 0
  3320                           tblptru	equ	0xFF8
  3321                           tblptrh	equ	0xFF7
  3322                           tblptrl	equ	0xFF6
  3323                           tablat	equ	0xFF5
  3324                           prodh	equ	0xFF4
  3325                           prodl	equ	0xFF3
  3326                           intcon	equ	0xFF2
  3327                           intcon2	equ	0xFF1
  3328                           postinc0	equ	0xFEE
  3329                           plusw0	equ	0xFEB
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           plusw1	equ	0xFE3
  3333                           fsr1l	equ	0xFE1
  3334                           indf2	equ	0xFDF
  3335                           postinc2	equ	0xFDE
  3336                           postdec2	equ	0xFDD
  3337                           plusw2	equ	0xFDB
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function _i2c_masterAccelRead *****************
  3343 ;; Defined at:
  3344 ;;		line 249 in file "mcc_generated_files/drivers/i2c_master.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  reg             1    wreg     unsigned char 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  reg             1   25[COMRAM] unsigned char 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      enum E6837
  3351 ;; Registers used:
  3352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3358 ;;      Params:         0       0       0       0       0       0       0
  3359 ;;      Locals:         1       0       0       0       0       0       0
  3360 ;;      Temps:          0       0       0       0       0       0       0
  3361 ;;      Totals:         1       0       0       0       0       0       0
  3362 ;;Total ram usage:        1 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; Hardware stack levels required when called:   11
  3365 ;; This function calls:
  3366 ;;		_i2c_masterOperation
  3367 ;; This function is called by:
  3368 ;;		_read_register
  3369 ;;		_read_xyzvalues
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text24
  3374  001246                     __ptext24:
  3375                           	opt stack 0
  3376  001246                     _i2c_masterAccelRead:
  3377                           	opt stack 18
  3378                           
  3379                           ;incstack = 0
  3380                           ;i2c_masterAccelRead@reg stored from wreg
  3381  001246  6E3F               	movwf	i2c_masterAccelRead@reg,c
  3382                           
  3383                           ;i2c_master.c: 252: i2c_status.register_address = reg;
  3384  001248  C03F  F0BE         	movff	i2c_masterAccelRead@reg,_i2c_status+36
  3385                           
  3386                           ;i2c_master.c: 254: return i2c_masterOperation(OPERATIONACCELREAD);
  3387  00124C  0E01               	movlw	1
  3388  00124E  EC09  F007         	call	_i2c_masterOperation
  3389  001252  0012               	return	
  3390  001254                     __end_of_i2c_masterAccelRead:
  3391                           	opt stack 0
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           intcon	equ	0xFF2
  3399                           intcon2	equ	0xFF1
  3400                           postinc0	equ	0xFEE
  3401                           plusw0	equ	0xFEB
  3402                           wreg	equ	0xFE8
  3403                           postdec1	equ	0xFE5
  3404                           plusw1	equ	0xFE3
  3405                           fsr1l	equ	0xFE1
  3406                           indf2	equ	0xFDF
  3407                           postinc2	equ	0xFDE
  3408                           postdec2	equ	0xFDD
  3409                           plusw2	equ	0xFDB
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _i2c_masterOperation *****************
  3415 ;; Defined at:
  3416 ;;		line 210 in file "mcc_generated_files/drivers/i2c_master.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  operation       1    wreg     enum E6863
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  operation       1   23[COMRAM] enum E6863
  3421 ;;  ret             1   24[COMRAM] enum E6837
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      enum E6837
  3424 ;; Registers used:
  3425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3431 ;;      Params:         0       0       0       0       0       0       0
  3432 ;;      Locals:         2       0       0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0
  3434 ;;      Totals:         2       0       0       0       0       0       0
  3435 ;;Total ram usage:        2 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:   10
  3438 ;; This function calls:
  3439 ;;		_i2c1_driver_start
  3440 ;;		_i2c_poller
  3441 ;;		_mssp1_IRQisEnabled
  3442 ;; This function is called by:
  3443 ;;		_i2c_masterAccelRead
  3444 ;;		_i2c_masterWrite
  3445 ;;		_i2c_masterRead
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text25
  3450  000E12                     __ptext25:
  3451                           	opt stack 0
  3452  000E12                     _i2c_masterOperation:
  3453                           	opt stack 18
  3454                           
  3455                           ;incstack = 0
  3456                           ;i2c_masterOperation@operation stored from wreg
  3457  000E12  6E3D               	movwf	i2c_masterOperation@operation,c
  3458                           
  3459                           ;i2c_master.c: 212: i2c_error_t ret = I2C_BUSY;
  3460  000E14  0E01               	movlw	1
  3461  000E16  6E3E               	movwf	i2c_masterOperation@ret,c
  3462                           
  3463                           ;i2c_master.c: 213: if(!i2c_status.busy)
  3464  000E18  0100               	movlb	0	; () banked
  3465  000E1A  B19A               	btfsc	_i2c_status& (0+255),0,b
  3466  000E1C  D01C               	goto	l100
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;i2c_master.c: 214: {
  3470                           ;i2c_master.c: 215: i2c_status.busy = 1;
  3471  000E1E  819A               	bsf	_i2c_status& (0+255),0,b
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;i2c_master.c: 216: ret = I2C_NOERR;
  3475  000E20  0E00               	movlw	0
  3476  000E22  6E3E               	movwf	i2c_masterOperation@ret,c
  3477                           
  3478                           ;i2c_master.c: 218: switch(operation) {
  3479  000E24  D007               	goto	l95
  3480  000E26                     
  3481                           ; BSR set to: 0
  3482                           ;i2c_master.c: 220: i2c_status.state = I2C_SEND_ADR_READ;
  3483                           
  3484                           ; BSR set to: 0
  3485  000E26  0E01               	movlw	1
  3486  000E28  D003               	goto	L2
  3487  000E2A                     
  3488                           ; BSR set to: 0
  3489                           ;i2c_master.c: 224: i2c_status.state = I2C_SEND_INITIAL_READ;
  3490                           
  3491                           ; BSR set to: 0
  3492  000E2A  0E10               	movlw	16
  3493  000E2C  D001               	goto	L2
  3494  000E2E                     
  3495                           ; BSR set to: 0
  3496                           ;i2c_master.c: 228: i2c_status.state = I2C_SEND_ADR_WRITE;
  3497                           
  3498                           ; BSR set to: 0
  3499  000E2E  0E02               	movlw	2
  3500  000E30                     L2:
  3501  000E30  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;i2c_master.c: 230: }
  3505                           
  3506                           ;i2c_master.c: 229: break;
  3507  000E32  D00A               	goto	l97
  3508  000E34                     l95:
  3509                           
  3510                           ; BSR set to: 0
  3511                           
  3512                           ; BSR set to: 0
  3513  000E34  503D               	movf	i2c_masterOperation@operation,w,c
  3514                           
  3515                           ; Switch size 1, requested type "space"
  3516                           ; Number of cases is 3, Range of values is 0 to 2
  3517                           ; switch strategies available:
  3518                           ; Name         Instructions Cycles
  3519                           ; simple_byte           10     6 (average)
  3520                           ;	Chosen strategy is simple_byte
  3521  000E36  0A00               	xorlw	0	; case 0
  3522  000E38  B4D8               	btfsc	status,2,c
  3523  000E3A  D7F5               	goto	l96
  3524  000E3C  0A01               	xorlw	1	; case 1
  3525  000E3E  B4D8               	btfsc	status,2,c
  3526  000E40  D7F4               	goto	l98
  3527  000E42  0A03               	xorlw	3	; case 2
  3528  000E44  B4D8               	btfsc	status,2,c
  3529  000E46  D7F3               	goto	l99
  3530  000E48                     l97:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;i2c_master.c: 241: i2c1_driver_start();
  3534                           
  3535                           ; BSR set to: 0
  3536  000E48  ECD4  F009         	call	_i2c1_driver_start	;wreg free
  3537                           
  3538                           ;i2c_master.c: 243: if(! mssp1_IRQisEnabled())
  3539  000E4C  ECF4  F008         	call	_mssp1_IRQisEnabled	;wreg free
  3540  000E50  A0D8               	btfss	status,0,c
  3541                           
  3542                           ;i2c_master.c: 244: i2c_poller();
  3543  000E52  EC6C  F008         	call	_i2c_poller	;wreg free
  3544  000E56                     l100:
  3545                           
  3546                           ;i2c_master.c: 245: }
  3547                           ;i2c_master.c: 246: return ret;
  3548  000E56  503E               	movf	i2c_masterOperation@ret,w,c
  3549  000E58  0012               	return	
  3550  000E5A                     __end_of_i2c_masterOperation:
  3551                           	opt stack 0
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           intcon2	equ	0xFF1
  3560                           postinc0	equ	0xFEE
  3561                           plusw0	equ	0xFEB
  3562                           wreg	equ	0xFE8
  3563                           postdec1	equ	0xFE5
  3564                           plusw1	equ	0xFE3
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           plusw2	equ	0xFDB
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _mssp1_IRQisEnabled *****************
  3575 ;; Defined at:
  3576 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;		None
  3581 ;; Return value:  Size  Location     Type
  3582 ;;		None               void
  3583 ;; Registers used:
  3584 ;;		wreg, status,0
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3590 ;;      Params:         0       0       0       0       0       0       0
  3591 ;;      Locals:         0       0       0       0       0       0       0
  3592 ;;      Temps:          1       0       0       0       0       0       0
  3593 ;;      Totals:         1       0       0       0       0       0       0
  3594 ;;Total ram usage:        1 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    5
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_i2c_masterOperation
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text26
  3605  0011E8                     __ptext26:
  3606                           	opt stack 0
  3607  0011E8                     _mssp1_IRQisEnabled:
  3608                           	opt stack 22
  3609                           
  3610                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
  3611                           
  3612                           ;incstack = 0
  3613  0011E8  A69D               	btfss	3997,3,c	;volatile
  3614  0011EA  D003               	goto	u1580
  3615  0011EC  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  3616  0011EE  2A3A               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  3617  0011F0  D001               	goto	u1588
  3618  0011F2                     u1580:
  3619  0011F2  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  3620  0011F4                     u1588:
  3621  0011F4  303A               	rrcf	??_mssp1_IRQisEnabled,w,c
  3622  0011F6  0012               	return	
  3623  0011F8                     __end_of_mssp1_IRQisEnabled:
  3624                           	opt stack 0
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           prodh	equ	0xFF4
  3630                           prodl	equ	0xFF3
  3631                           intcon	equ	0xFF2
  3632                           intcon2	equ	0xFF1
  3633                           postinc0	equ	0xFEE
  3634                           plusw0	equ	0xFEB
  3635                           wreg	equ	0xFE8
  3636                           postdec1	equ	0xFE5
  3637                           plusw1	equ	0xFE3
  3638                           fsr1l	equ	0xFE1
  3639                           indf2	equ	0xFDF
  3640                           postinc2	equ	0xFDE
  3641                           postdec2	equ	0xFDD
  3642                           plusw2	equ	0xFDB
  3643                           fsr2h	equ	0xFDA
  3644                           fsr2l	equ	0xFD9
  3645                           status	equ	0xFD8
  3646                           
  3647 ;; *************** function _i2c_poller *****************
  3648 ;; Defined at:
  3649 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3663 ;;      Params:         0       0       0       0       0       0       0
  3664 ;;      Locals:         0       0       0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0
  3666 ;;      Totals:         0       0       0       0       0       0       0
  3667 ;;Total ram usage:        0 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    9
  3670 ;; This function calls:
  3671 ;;		_i2c_ISR
  3672 ;;		_mssp1_waitForEvent
  3673 ;; This function is called by:
  3674 ;;		_i2c_masterOperation
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text27
  3679  0010D8                     __ptext27:
  3680                           	opt stack 0
  3681  0010D8                     _i2c_poller:
  3682                           	opt stack 18
  3683                           
  3684                           ;i2c_master.c: 274: while(i2c_status.busy)
  3685                           
  3686                           ;incstack = 0
  3687  0010D8  D008               	goto	l113
  3688  0010DA                     
  3689                           ;i2c_master.c: 275: {
  3690                           ;i2c_master.c: 276: mssp1_waitForEvent((0));
  3691  0010DA  0E00               	movlw	0
  3692  0010DC  6E3A               	movwf	mssp1_waitForEvent@timeout,c
  3693  0010DE  0E00               	movlw	0
  3694  0010E0  6E3B               	movwf	mssp1_waitForEvent@timeout+1,c
  3695  0010E2  ECD9  F008         	call	_mssp1_waitForEvent	;wreg free
  3696                           
  3697                           ;i2c_master.c: 277: i2c_ISR();
  3698  0010E6  EC95  F006         	call	_i2c_ISR	;wreg free
  3699  0010EA                     l113:
  3700  0010EA  0100               	movlb	0	; () banked
  3701  0010EC  A19A               	btfss	_i2c_status& (0+255),0,b
  3702  0010EE  0012               	return	
  3703  0010F0  D7F4               	goto	l114
  3704  0010F2                     __end_of_i2c_poller:
  3705                           	opt stack 0
  3706                           tblptru	equ	0xFF8
  3707                           tblptrh	equ	0xFF7
  3708                           tblptrl	equ	0xFF6
  3709                           tablat	equ	0xFF5
  3710                           prodh	equ	0xFF4
  3711                           prodl	equ	0xFF3
  3712                           intcon	equ	0xFF2
  3713                           intcon2	equ	0xFF1
  3714                           postinc0	equ	0xFEE
  3715                           plusw0	equ	0xFEB
  3716                           wreg	equ	0xFE8
  3717                           postdec1	equ	0xFE5
  3718                           plusw1	equ	0xFE3
  3719                           fsr1l	equ	0xFE1
  3720                           indf2	equ	0xFDF
  3721                           postinc2	equ	0xFDE
  3722                           postdec2	equ	0xFDD
  3723                           plusw2	equ	0xFDB
  3724                           fsr2h	equ	0xFDA
  3725                           fsr2l	equ	0xFD9
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function _mssp1_waitForEvent *****************
  3729 ;; Defined at:
  3730 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  timeout         2   20[COMRAM] PTR unsigned int 
  3733 ;;		 -> NULL(0), 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3745 ;;      Params:         2       0       0       0       0       0       0
  3746 ;;      Locals:         0       0       0       0       0       0       0
  3747 ;;      Temps:          0       0       0       0       0       0       0
  3748 ;;      Totals:         2       0       0       0       0       0       0
  3749 ;;Total ram usage:        2 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    5
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		_i2c_poller
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text28
  3760  0011B2                     __ptext28:
  3761                           	opt stack 0
  3762  0011B2                     _mssp1_waitForEvent:
  3763                           	opt stack 21
  3764                           
  3765                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;incstack = 0
  3769  0011B2  B69E               	btfsc	3998,3,c	;volatile
  3770  0011B4  0012               	return	
  3771  0011B6                     u1530:
  3772                           
  3773                           ;i2c1_driver.c: 76: {
  3774                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
  3775                           
  3776                           ;i2c1_driver.c: 74: {
  3777                           ;i2c1_driver.c: 75: while(1)
  3778  0011B6  B69E               	btfsc	3998,3,c	;volatile
  3779  0011B8  0012               	return	
  3780                           
  3781                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3782  0011BA  0E85               	movlw	133
  3783  0011BC                     u2167:
  3784  0011BC  2EE8               	decfsz	wreg,f,c
  3785  0011BE  D7FE               	bra	u2167
  3786  0011C0  F000               	nop	
  3787  0011C2  D7F9               	goto	u1530
  3788  0011C4                     __end_of_mssp1_waitForEvent:
  3789                           	opt stack 0
  3790                           tblptru	equ	0xFF8
  3791                           tblptrh	equ	0xFF7
  3792                           tblptrl	equ	0xFF6
  3793                           tablat	equ	0xFF5
  3794                           prodh	equ	0xFF4
  3795                           prodl	equ	0xFF3
  3796                           intcon	equ	0xFF2
  3797                           intcon2	equ	0xFF1
  3798                           postinc0	equ	0xFEE
  3799                           plusw0	equ	0xFEB
  3800                           wreg	equ	0xFE8
  3801                           postdec1	equ	0xFE5
  3802                           plusw1	equ	0xFE3
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           plusw2	equ	0xFDB
  3808                           fsr2h	equ	0xFDA
  3809                           fsr2l	equ	0xFD9
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _i2c_ISR *****************
  3813 ;; Defined at:
  3814 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;		None
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3828 ;;      Params:         0       0       0       0       0       0       0
  3829 ;;      Locals:         0       0       0       0       0       0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0
  3831 ;;      Totals:         0       0       0       0       0       0       0
  3832 ;;Total ram usage:        0 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    8
  3835 ;; This function calls:
  3836 ;;		_do_I2C_DO_ACK
  3837 ;;		_do_I2C_DO_ADDRESS_NACK
  3838 ;;		_do_I2C_DO_NACK_RESTART
  3839 ;;		_do_I2C_DO_NACK_STOP
  3840 ;;		_do_I2C_IDLE
  3841 ;;		_do_I2C_RCEN
  3842 ;;		_do_I2C_RESET
  3843 ;;		_do_I2C_RX
  3844 ;;		_do_I2C_SEND_ADR_READ
  3845 ;;		_do_I2C_SEND_ADR_WRITE
  3846 ;;		_do_I2C_SEND_INITIAL_READ
  3847 ;;		_do_I2C_SEND_RESTART
  3848 ;;		_do_I2C_SEND_RESTART_READ
  3849 ;;		_do_I2C_SEND_RESTART_WRITE
  3850 ;;		_do_I2C_SEND_STOP
  3851 ;;		_do_I2C_TX
  3852 ;;		_do_I2C_TX_EMPTY
  3853 ;;		_do_I2C_TX_REGISTER
  3854 ;;		_i2c1_driver_isNACK
  3855 ;;		_mssp1_clearIRQ
  3856 ;; This function is called by:
  3857 ;;		_i2c_open
  3858 ;;		_i2c_poller
  3859 ;;		_INTERRUPT_InterruptManager
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	text29
  3864  000D2A                     __ptext29:
  3865                           	opt stack 0
  3866  000D2A                     _i2c_ISR:
  3867                           	opt stack 0
  3868                           
  3869                           ;Skip over the trampoline to the duplicate function for level 2
  3870  000D2A  B24A               	btfsc	btemp,1,c
  3871  000D2C  EF2D  F007         	goto	i2_i2c_ISR
  3872  000D30                     _i2c_ISR$intlevel0:
  3873                           	opt stack 18
  3874                           
  3875                           ;i2c_master.c: 486: mssp1_clearIRQ();
  3876                           
  3877                           ;incstack = 0
  3878  000D30  ECD8  F009         	call	_mssp1_clearIRQ	;wreg free
  3879                           
  3880                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  3881  000D34  0100               	movlb	0	; () banked
  3882  000D36  A79A               	btfss	_i2c_status& (0+255),3,b
  3883  000D38  D007               	goto	l209
  3884                           
  3885                           ; BSR set to: 0
  3886  000D3A  ECB0  F008         	call	_i2c1_driver_isNACK	;wreg free
  3887  000D3E  A0D8               	btfss	status,0,c
  3888  000D40  D003               	goto	l209
  3889                           
  3890                           ;i2c_master.c: 493: {
  3891                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  3892  000D42  0E0F               	movlw	15
  3893  000D44  0100               	movlb	0	; () banked
  3894  000D46  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  3895  000D48                     l209:
  3896                           
  3897                           ;i2c_master.c: 495: }
  3898                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  3899                           
  3900                           ; BSR set to: 0
  3901  000D48  0100               	movlb	0	; () banked
  3902  000D4A  51A4               	movf	(_i2c_status+10)& (0+255),w,b
  3903  000D4C  0D02               	mullw	2
  3904  000D4E  0EBF               	movlw	low _fsmStateTable
  3905  000D50  24F3               	addwf	prodl,w,c
  3906  000D52  6ED9               	movwf	fsr2l,c
  3907  000D54  0E00               	movlw	high _fsmStateTable
  3908  000D56  20F4               	addwfc	prodh,w,c
  3909  000D58  6EDA               	movwf	fsr2h,c
  3910  000D5A  D801               	call	u1578
  3911  000D5C  D00A               	goto	u1579
  3912  000D5E                     u1578:
  3913  000D5E  0005               	push	
  3914  000D60  6EFA               	movwf	pclath,c
  3915  000D62  50DE               	movf	postinc2,w,c
  3916  000D64  6EFD               	movwf	tosl,c
  3917  000D66  50DE               	movf	postinc2,w,c
  3918  000D68  6EFE               	movwf	tosh,c
  3919  000D6A  50F8               	movf	tblptru,w,c
  3920  000D6C  6EFF               	movwf	tosu,c
  3921  000D6E  50FA               	movf	pclath,w,c
  3922  000D70  0012               	return		;indir
  3923  000D72                     u1579:
  3924  000D72  0100               	movlb	0	; () banked
  3925  000D74  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  3926                           
  3927                           ; BSR set to: 0
  3928  000D76  0012               	return		;funcret
  3929  000D78                     __end_of_i2c_ISR:
  3930                           	opt stack 0
  3931                           tosu	equ	0xFFF
  3932                           tosh	equ	0xFFE
  3933                           tosl	equ	0xFFD
  3934                           pclath	equ	0xFFA
  3935                           tblptru	equ	0xFF8
  3936                           tblptrh	equ	0xFF7
  3937                           tblptrl	equ	0xFF6
  3938                           tablat	equ	0xFF5
  3939                           prodh	equ	0xFF4
  3940                           prodl	equ	0xFF3
  3941                           intcon	equ	0xFF2
  3942                           intcon2	equ	0xFF1
  3943                           postinc0	equ	0xFEE
  3944                           plusw0	equ	0xFEB
  3945                           wreg	equ	0xFE8
  3946                           postdec1	equ	0xFE5
  3947                           plusw1	equ	0xFE3
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           plusw2	equ	0xFDB
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _do_I2C_TX_EMPTY *****************
  3958 ;; Defined at:
  3959 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;		None
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;		None
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      enum E7019
  3966 ;; Registers used:
  3967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3973 ;;      Params:         0       0       0       0       0       0       0
  3974 ;;      Locals:         0       0       0       0       0       0       0
  3975 ;;      Temps:          0       0       0       0       0       0       0
  3976 ;;      Totals:         0       0       0       0       0       0       0
  3977 ;;Total ram usage:        0 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    7
  3980 ;; This function calls:
  3981 ;;		_do_I2C_SEND_RESTART
  3982 ;;		_do_I2C_SEND_STOP
  3983 ;;		_mssp1_setIRQ
  3984 ;;		_returnReset
  3985 ;;		_returnStop
  3986 ;; This function is called by:
  3987 ;;		_i2c_ISR
  3988 ;;		i2_i2c_ISR
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text30
  3993  000C22                     __ptext30:
  3994                           	opt stack 0
  3995  000C22                     _do_I2C_TX_EMPTY:
  3996                           	opt stack 0
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;Skip over the trampoline to the duplicate function for level 2
  4000  000C22  B24A               	btfsc	btemp,1,c
  4001  000C24  EF40  F006         	goto	i2_do_I2C_TX_EMPTY
  4002  000C28                     _do_I2C_TX_EMPTY$intlevel0:
  4003                           	opt stack 18
  4004                           
  4005                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  4006                           
  4007                           ;incstack = 0
  4008  000C28  0100               	movlb	0	; () banked
  4009  000C2A  859A               	bsf	_i2c_status& (0+255),2,b
  4010                           
  4011                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  4012  000C2C  D00A               	goto	l197
  4013  000C2E                     
  4014                           ;i2c_master.c: 448: case i2c_restart_write:
  4015                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  4016                           
  4017                           ; BSR set to: 0
  4018                           
  4019                           ; BSR set to: 0
  4020  000C2E  EC46  F009         	call	_do_I2C_SEND_RESTART	;wreg free
  4021  000C32  0012               	return	
  4022  000C34                     
  4023                           ;i2c_master.c: 451: mssp1_setIRQ();
  4024  000C34  ECCA  F009         	call	_mssp1_setIRQ	;wreg free
  4025                           
  4026                           ;i2c_master.c: 452: return I2C_TX;
  4027  000C38  0E03               	movlw	3
  4028  000C3A  0012               	return	
  4029  000C3C                     
  4030                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  4031                           
  4032                           ;i2c_master.c: 454: case i2c_stop:
  4033  000C3C  EC3F  F009         	call	_do_I2C_SEND_STOP	;wreg free
  4034                           
  4035                           ;i2c_master.c: 456: }
  4036  000C40  0012               	return	
  4037  000C42                     l197:
  4038  000C42  C0B2  F03A         	movff	_i2c_status+24,returnReset@p
  4039  000C46  C0B3  F03B         	movff	_i2c_status+25,returnReset@p+1
  4040  000C4A  EE20  F0A6         	lfsr	2,_i2c_status+12
  4041  000C4E  D801               	call	u1528
  4042  000C50  D00A               	goto	u1529
  4043  000C52                     u1528:
  4044  000C52  0005               	push	
  4045  000C54  6EFA               	movwf	pclath,c
  4046  000C56  50DE               	movf	postinc2,w,c
  4047  000C58  6EFD               	movwf	tosl,c
  4048  000C5A  50DE               	movf	postinc2,w,c
  4049  000C5C  6EFE               	movwf	tosh,c
  4050  000C5E  50F8               	movf	tblptru,w,c
  4051  000C60  6EFF               	movwf	tosu,c
  4052  000C62  50FA               	movf	pclath,w,c
  4053  000C64  0012               	return		;indir
  4054  000C66                     u1529:
  4055                           
  4056                           ; Switch size 1, requested type "space"
  4057                           ; Number of cases is 4, Range of values is 1 to 4
  4058                           ; switch strategies available:
  4059                           ; Name         Instructions Cycles
  4060                           ; simple_byte           13     7 (average)
  4061                           ;	Chosen strategy is simple_byte
  4062  000C66  0A01               	xorlw	1	; case 1
  4063  000C68  B4D8               	btfsc	status,2,c
  4064  000C6A  D7E8               	goto	l202
  4065  000C6C  0A03               	xorlw	3	; case 2
  4066  000C6E  B4D8               	btfsc	status,2,c
  4067  000C70  D7DE               	goto	l198
  4068  000C72  0A01               	xorlw	1	; case 3
  4069  000C74  B4D8               	btfsc	status,2,c
  4070  000C76  D7DB               	goto	l198
  4071  000C78  0A07               	xorlw	7	; case 4
  4072  000C7A  B4D8               	btfsc	status,2,c
  4073  000C7C  D7DB               	goto	l201
  4074  000C7E  D7DE               	goto	l202
  4075  000C80                     __end_of_do_I2C_TX_EMPTY:
  4076                           	opt stack 0
  4077                           tosu	equ	0xFFF
  4078                           tosh	equ	0xFFE
  4079                           tosl	equ	0xFFD
  4080                           pclath	equ	0xFFA
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           intcon	equ	0xFF2
  4088                           intcon2	equ	0xFF1
  4089                           postinc0	equ	0xFEE
  4090                           plusw0	equ	0xFEB
  4091                           wreg	equ	0xFE8
  4092                           postdec1	equ	0xFE5
  4093                           plusw1	equ	0xFE3
  4094                           fsr1l	equ	0xFE1
  4095                           indf2	equ	0xFDF
  4096                           postinc2	equ	0xFDE
  4097                           postdec2	equ	0xFDD
  4098                           plusw2	equ	0xFDB
  4099                           fsr2h	equ	0xFDA
  4100                           fsr2l	equ	0xFD9
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function _do_I2C_RX *****************
  4104 ;; Defined at:
  4105 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      enum E7019
  4112 ;; Registers used:
  4113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4119 ;;      Params:         0       0       0       0       0       0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0
  4122 ;;      Totals:         0       0       0       0       0       0       0
  4123 ;;Total ram usage:        0 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    7
  4126 ;; This function calls:
  4127 ;;		_do_I2C_DO_NACK_RESTART
  4128 ;;		_do_I2C_DO_NACK_STOP
  4129 ;;		_i2c1_driver_getRXData
  4130 ;;		_i2c1_driver_sendACK
  4131 ;;		_returnReset
  4132 ;;		_returnStop
  4133 ;; This function is called by:
  4134 ;;		_i2c_ISR
  4135 ;;		i2_i2c_ISR
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text31
  4140  000992                     __ptext31:
  4141                           	opt stack 0
  4142  000992                     _do_I2C_RX:
  4143                           	opt stack 0
  4144                           
  4145                           ;Skip over the trampoline to the duplicate function for level 2
  4146  000992  B24A               	btfsc	btemp,1,c
  4147  000994  EF06  F005         	goto	i2_do_I2C_RX
  4148  000998                     _do_I2C_RX$intlevel0:
  4149                           	opt stack 18
  4150                           
  4151                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  4152                           
  4153                           ;incstack = 0
  4154  000998  ECCC  F009         	call	_i2c1_driver_getRXData	;wreg free
  4155  00099C  C09C  FFD9         	movff	_i2c_status+2,fsr2l
  4156  0009A0  C09D  FFDA         	movff	_i2c_status+3,fsr2h
  4157  0009A4  6EDF               	movwf	indf2,c
  4158  0009A6  0100               	movlb	0	; () banked
  4159  0009A8  4B9C               	infsnz	(_i2c_status+2)& (0+255),f,b
  4160  0009AA  2B9D               	incf	(_i2c_status+3)& (0+255),f,b
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  4164  0009AC  079E               	decf	(_i2c_status+4)& (0+255),f,b
  4165  0009AE  A0D8               	btfss	status,0,c
  4166  0009B0  079F               	decf	(_i2c_status+5)& (0+255),f,b
  4167  0009B2  519E               	movf	(_i2c_status+4)& (0+255),w,b
  4168  0009B4  119F               	iorwf	(_i2c_status+5)& (0+255),w,b
  4169  0009B6  B4D8               	btfsc	status,2,c
  4170  0009B8  D004               	goto	l185
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;i2c_master.c: 421: {
  4174                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  4175  0009BA  ECBC  F009         	call	_i2c1_driver_sendACK	;wreg free
  4176                           
  4177                           ;i2c_master.c: 423: return I2C_RCEN;
  4178  0009BE  0E05               	movlw	5
  4179                           
  4180                           ;i2c_master.c: 424: }
  4181  0009C0  0012               	return	
  4182  0009C2                     l185:
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;i2c_master.c: 425: else
  4186                           ;i2c_master.c: 426: {
  4187                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  4188  0009C2  859A               	bsf	_i2c_status& (0+255),2,b
  4189                           
  4190                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  4191  0009C4  D006               	goto	l188
  4192  0009C6                     
  4193                           ;i2c_master.c: 431: case i2c_restart_read:
  4194                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  4195                           
  4196                           ; BSR set to: 0
  4197                           
  4198                           ; BSR set to: 0
  4199  0009C6  EC2A  F009         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  4200  0009CA  0012               	return	
  4201  0009CC                     
  4202                           ;i2c_master.c: 435: case i2c_stop:
  4203                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  4204                           
  4205                           ;i2c_master.c: 434: case i2c_continue:
  4206  0009CC  EC31  F009         	call	_do_I2C_DO_NACK_STOP	;wreg free
  4207                           
  4208                           ;i2c_master.c: 437: }
  4209  0009D0  0012               	return	
  4210  0009D2                     l188:
  4211  0009D2  C0B2  F03A         	movff	_i2c_status+24,returnReset@p
  4212  0009D6  C0B3  F03B         	movff	_i2c_status+25,returnReset@p+1
  4213  0009DA  EE20  F0A6         	lfsr	2,_i2c_status+12
  4214  0009DE  D801               	call	u1518
  4215  0009E0  D00A               	goto	u1519
  4216  0009E2                     u1518:
  4217  0009E2  0005               	push	
  4218  0009E4  6EFA               	movwf	pclath,c
  4219  0009E6  50DE               	movf	postinc2,w,c
  4220  0009E8  6EFD               	movwf	tosl,c
  4221  0009EA  50DE               	movf	postinc2,w,c
  4222  0009EC  6EFE               	movwf	tosh,c
  4223  0009EE  50F8               	movf	tblptru,w,c
  4224  0009F0  6EFF               	movwf	tosu,c
  4225  0009F2  50FA               	movf	pclath,w,c
  4226  0009F4  0012               	return		;indir
  4227  0009F6                     u1519:
  4228                           
  4229                           ; Switch size 1, requested type "space"
  4230                           ; Number of cases is 4, Range of values is 1 to 4
  4231                           ; switch strategies available:
  4232                           ; Name         Instructions Cycles
  4233                           ; simple_byte           13     7 (average)
  4234                           ;	Chosen strategy is simple_byte
  4235  0009F6  0A01               	xorlw	1	; case 1
  4236  0009F8  B4D8               	btfsc	status,2,c
  4237  0009FA  D7E8               	goto	l191
  4238  0009FC  0A03               	xorlw	3	; case 2
  4239  0009FE  B4D8               	btfsc	status,2,c
  4240  000A00  D7E2               	goto	l189
  4241  000A02  0A01               	xorlw	1	; case 3
  4242  000A04  B4D8               	btfsc	status,2,c
  4243  000A06  D7DF               	goto	l189
  4244  000A08  0A07               	xorlw	7	; case 4
  4245  000A0A  D7E0               	goto	l191
  4246  000A0C                     __end_of_do_I2C_RX:
  4247                           	opt stack 0
  4248                           tosu	equ	0xFFF
  4249                           tosh	equ	0xFFE
  4250                           tosl	equ	0xFFD
  4251                           pclath	equ	0xFFA
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           prodh	equ	0xFF4
  4257                           prodl	equ	0xFF3
  4258                           intcon	equ	0xFF2
  4259                           intcon2	equ	0xFF1
  4260                           postinc0	equ	0xFEE
  4261                           plusw0	equ	0xFEB
  4262                           wreg	equ	0xFE8
  4263                           postdec1	equ	0xFE5
  4264                           plusw1	equ	0xFE3
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           plusw2	equ	0xFDB
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _do_I2C_TX *****************
  4275 ;; Defined at:
  4276 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      enum E7019
  4283 ;; Registers used:
  4284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4290 ;;      Params:         0       0       0       0       0       0       0
  4291 ;;      Locals:         2       0       0       0       0       0       0
  4292 ;;      Temps:          0       0       0       0       0       0       0
  4293 ;;      Totals:         2       0       0       0       0       0       0
  4294 ;;Total ram usage:        2 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    7
  4297 ;; This function calls:
  4298 ;;		_do_I2C_SEND_RESTART_READ
  4299 ;;		_do_I2C_SEND_RESTART_WRITE
  4300 ;;		_do_I2C_SEND_STOP
  4301 ;;		_i2c1_driver_TXData
  4302 ;;		_i2c1_driver_isNACK
  4303 ;;		_returnReset
  4304 ;;		_returnStop
  4305 ;; This function is called by:
  4306 ;;		_i2c_ISR
  4307 ;;		i2_i2c_ISR
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text32
  4312  0007DA                     __ptext32:
  4313                           	opt stack 0
  4314  0007DA                     _do_I2C_TX:
  4315                           	opt stack 0
  4316                           
  4317                           ;Skip over the trampoline to the duplicate function for level 2
  4318  0007DA  B24A               	btfsc	btemp,1,c
  4319  0007DC  EF81  F004         	goto	i2_do_I2C_TX
  4320  0007E0                     _do_I2C_TX$intlevel0:
  4321                           	opt stack 18
  4322                           
  4323                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  4324                           
  4325                           ;incstack = 0
  4326  0007E0  ECB0  F008         	call	_i2c1_driver_isNACK	;wreg free
  4327  0007E4  B0D8               	btfsc	status,0,c
  4328  0007E6  D00A               	goto	l170
  4329  0007E8  D026               	goto	l169
  4330  0007EA                     
  4331                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  4332  0007EA  EC54  F009         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  4333  0007EE  0012               	return	
  4334  0007F0                     
  4335                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  4336  0007F0  EC4D  F009         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  4337  0007F4  0012               	return	
  4338  0007F6                     
  4339                           ;i2c_master.c: 405: case i2c_stop:
  4340                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  4341                           
  4342                           ;i2c_master.c: 404: case i2c_continue:
  4343  0007F6  EC3F  F009         	call	_do_I2C_SEND_STOP	;wreg free
  4344                           
  4345                           ;i2c_master.c: 407: }
  4346  0007FA  0012               	return	
  4347  0007FC                     l170:
  4348  0007FC  C0B8  F03A         	movff	_i2c_status+30,returnReset@p
  4349  000800  C0B9  F03B         	movff	_i2c_status+31,returnReset@p+1
  4350  000804  EE20  F0AC         	lfsr	2,_i2c_status+18
  4351  000808  D801               	call	u1488
  4352  00080A  D00A               	goto	u1489
  4353  00080C                     u1488:
  4354  00080C  0005               	push	
  4355  00080E  6EFA               	movwf	pclath,c
  4356  000810  50DE               	movf	postinc2,w,c
  4357  000812  6EFD               	movwf	tosl,c
  4358  000814  50DE               	movf	postinc2,w,c
  4359  000816  6EFE               	movwf	tosh,c
  4360  000818  50F8               	movf	tblptru,w,c
  4361  00081A  6EFF               	movwf	tosu,c
  4362  00081C  50FA               	movf	pclath,w,c
  4363  00081E  0012               	return		;indir
  4364  000820                     u1489:
  4365                           
  4366                           ; Switch size 1, requested type "space"
  4367                           ; Number of cases is 4, Range of values is 1 to 4
  4368                           ; switch strategies available:
  4369                           ; Name         Instructions Cycles
  4370                           ; simple_byte           13     7 (average)
  4371                           ;	Chosen strategy is simple_byte
  4372  000820  0A01               	xorlw	1	; case 1
  4373  000822  B4D8               	btfsc	status,2,c
  4374  000824  D7E8               	goto	l174
  4375  000826  0A03               	xorlw	3	; case 2
  4376  000828  B4D8               	btfsc	status,2,c
  4377  00082A  D7DF               	goto	l171
  4378  00082C  0A01               	xorlw	1	; case 3
  4379  00082E  B4D8               	btfsc	status,2,c
  4380  000830  D7DF               	goto	l173
  4381  000832  0A07               	xorlw	7	; case 4
  4382  000834  D7E0               	goto	l174
  4383  000836                     l169:
  4384                           
  4385                           ;i2c_master.c: 409: else
  4386                           ;i2c_master.c: 410: {
  4387                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  4388  000836  0100               	movlb	0	; () banked
  4389  000838  979A               	bcf	_i2c_status& (0+255),3,b
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  4393  00083A  C09C  FFD9         	movff	_i2c_status+2,fsr2l
  4394  00083E  C09D  FFDA         	movff	_i2c_status+3,fsr2h
  4395  000842  4B9C               	infsnz	(_i2c_status+2)& (0+255),f,b
  4396  000844  2B9D               	incf	(_i2c_status+3)& (0+255),f,b
  4397  000846  50DF               	movf	indf2,w,c
  4398  000848  EC95  F009         	call	_i2c1_driver_TXData
  4399                           
  4400                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  4401  00084C  0100               	movlb	0	; () banked
  4402  00084E  079E               	decf	(_i2c_status+4)& (0+255),f,b
  4403  000850  A0D8               	btfss	status,0,c
  4404  000852  079F               	decf	(_i2c_status+5)& (0+255),f,b
  4405  000854  519E               	movf	(_i2c_status+4)& (0+255),w,b
  4406  000856  119F               	iorwf	(_i2c_status+5)& (0+255),w,b
  4407  000858  A4D8               	btfss	status,2,c
  4408  00085A  D004               	goto	l180
  4409                           
  4410                           ; BSR set to: 0
  4411  00085C  0E00               	movlw	0
  4412  00085E  6E3C               	movwf	_do_I2C_TX$315+1,c
  4413  000860  0E06               	movlw	6
  4414  000862  D003               	goto	L3
  4415  000864                     l180:
  4416                           
  4417                           ; BSR set to: 0
  4418                           
  4419                           ; BSR set to: 0
  4420  000864  0E00               	movlw	0
  4421  000866  6E3C               	movwf	_do_I2C_TX$315+1,c
  4422  000868  0E03               	movlw	3
  4423  00086A                     L3:
  4424  00086A  6E3B               	movwf	_do_I2C_TX$315,c
  4425                           
  4426                           ; BSR set to: 0
  4427  00086C  503B               	movf	_do_I2C_TX$315,w,c
  4428                           
  4429                           ; BSR set to: 0
  4430  00086E  0012               	return	
  4431  000870                     __end_of_do_I2C_TX:
  4432                           	opt stack 0
  4433                           tosu	equ	0xFFF
  4434                           tosh	equ	0xFFE
  4435                           tosl	equ	0xFFD
  4436                           pclath	equ	0xFFA
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           prodh	equ	0xFF4
  4442                           prodl	equ	0xFF3
  4443                           intcon	equ	0xFF2
  4444                           intcon2	equ	0xFF1
  4445                           postinc0	equ	0xFEE
  4446                           plusw0	equ	0xFEB
  4447                           wreg	equ	0xFE8
  4448                           postdec1	equ	0xFE5
  4449                           plusw1	equ	0xFE3
  4450                           fsr1l	equ	0xFE1
  4451                           indf2	equ	0xFDF
  4452                           postinc2	equ	0xFDE
  4453                           postdec2	equ	0xFDD
  4454                           plusw2	equ	0xFDB
  4455                           fsr2h	equ	0xFDA
  4456                           fsr2l	equ	0xFD9
  4457                           status	equ	0xFD8
  4458                           
  4459 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  4460 ;; Defined at:
  4461 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;		None
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;		None
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  1    wreg      enum E7019
  4468 ;; Registers used:
  4469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4475 ;;      Params:         0       0       0       0       0       0       0
  4476 ;;      Locals:         0       0       0       0       0       0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0
  4478 ;;      Totals:         0       0       0       0       0       0       0
  4479 ;;Total ram usage:        0 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    7
  4482 ;; This function calls:
  4483 ;;		_do_I2C_SEND_RESTART
  4484 ;;		_do_I2C_SEND_STOP
  4485 ;;		_returnReset
  4486 ;;		_returnStop
  4487 ;; This function is called by:
  4488 ;;		_i2c_ISR
  4489 ;;		i2_i2c_ISR
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text33
  4494  000D78                     __ptext33:
  4495                           	opt stack 0
  4496  000D78                     _do_I2C_DO_ADDRESS_NACK:
  4497                           	opt stack 0
  4498                           
  4499                           ;Skip over the trampoline to the duplicate function for level 2
  4500  000D78  B24A               	btfsc	btemp,1,c
  4501  000D7A  EF51  F007         	goto	i2_do_I2C_DO_ADDRESS_NACK
  4502  000D7E                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  4503                           	opt stack 18
  4504                           
  4505                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  4506                           
  4507                           ;incstack = 0
  4508  000D7E  0100               	movlb	0	; () banked
  4509  000D80  979A               	bcf	_i2c_status& (0+255),3,b
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  4513  000D82  0E02               	movlw	2
  4514  000D84  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  4515                           
  4516                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  4517  000D86  D006               	goto	l161
  4518  000D88                     
  4519                           ;i2c_master.c: 386: case i2c_restart_write:
  4520                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  4521                           
  4522                           ; BSR set to: 0
  4523                           
  4524                           ; BSR set to: 0
  4525  000D88  EC46  F009         	call	_do_I2C_SEND_RESTART	;wreg free
  4526  000D8C  0012               	return	
  4527  000D8E                     
  4528                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  4529  000D8E  EC3F  F009         	call	_do_I2C_SEND_STOP	;wreg free
  4530                           
  4531                           ;i2c_master.c: 390: }
  4532  000D92  0012               	return	
  4533  000D94                     l161:
  4534  000D94  C0B6  F03A         	movff	_i2c_status+28,returnReset@p
  4535  000D98  C0B7  F03B         	movff	_i2c_status+29,returnReset@p+1
  4536  000D9C  EE20  F0AA         	lfsr	2,_i2c_status+16
  4537  000DA0  D801               	call	u1468
  4538  000DA2  D00A               	goto	u1469
  4539  000DA4                     u1468:
  4540  000DA4  0005               	push	
  4541  000DA6  6EFA               	movwf	pclath,c
  4542  000DA8  50DE               	movf	postinc2,w,c
  4543  000DAA  6EFD               	movwf	tosl,c
  4544  000DAC  50DE               	movf	postinc2,w,c
  4545  000DAE  6EFE               	movwf	tosh,c
  4546  000DB0  50F8               	movf	tblptru,w,c
  4547  000DB2  6EFF               	movwf	tosu,c
  4548  000DB4  50FA               	movf	pclath,w,c
  4549  000DB6  0012               	return		;indir
  4550  000DB8                     u1469:
  4551                           
  4552                           ; Switch size 1, requested type "space"
  4553                           ; Number of cases is 2, Range of values is 2 to 3
  4554                           ; switch strategies available:
  4555                           ; Name         Instructions Cycles
  4556                           ; simple_byte            7     4 (average)
  4557                           ;	Chosen strategy is simple_byte
  4558  000DB8  0A02               	xorlw	2	; case 2
  4559  000DBA  B4D8               	btfsc	status,2,c
  4560  000DBC  D7E5               	goto	l162
  4561  000DBE  0A01               	xorlw	1	; case 3
  4562  000DC0  B4D8               	btfsc	status,2,c
  4563  000DC2  D7E2               	goto	l162
  4564  000DC4  D7E4               	goto	l165
  4565  000DC6                     __end_of_do_I2C_DO_ADDRESS_NACK:
  4566                           	opt stack 0
  4567                           tosu	equ	0xFFF
  4568                           tosh	equ	0xFFE
  4569                           tosl	equ	0xFFD
  4570                           pclath	equ	0xFFA
  4571                           tblptru	equ	0xFF8
  4572                           tblptrh	equ	0xFF7
  4573                           tblptrl	equ	0xFF6
  4574                           tablat	equ	0xFF5
  4575                           prodh	equ	0xFF4
  4576                           prodl	equ	0xFF3
  4577                           intcon	equ	0xFF2
  4578                           intcon2	equ	0xFF1
  4579                           postinc0	equ	0xFEE
  4580                           plusw0	equ	0xFEB
  4581                           wreg	equ	0xFE8
  4582                           postdec1	equ	0xFE5
  4583                           plusw1	equ	0xFE3
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           plusw2	equ	0xFDB
  4589                           fsr2h	equ	0xFDA
  4590                           fsr2l	equ	0xFD9
  4591                           status	equ	0xFD8
  4592                           
  4593 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  4594 ;; Defined at:
  4595 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;		None
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      enum E7019
  4602 ;; Registers used:
  4603 ;;		wreg, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4609 ;;      Params:         0       0       0       0       0       0       0
  4610 ;;      Locals:         0       0       0       0       0       0       0
  4611 ;;      Temps:          0       0       0       0       0       0       0
  4612 ;;      Totals:         0       0       0       0       0       0       0
  4613 ;;Total ram usage:        0 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    6
  4616 ;; This function calls:
  4617 ;;		_i2c1_driver_sendNACK
  4618 ;; This function is called by:
  4619 ;;		_do_I2C_RX
  4620 ;;		_i2c_ISR
  4621 ;;		i2_i2c_ISR
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text34
  4626  001254                     __ptext34:
  4627                           	opt stack 0
  4628  001254                     _do_I2C_DO_NACK_RESTART:
  4629                           	opt stack 0
  4630                           
  4631                           ;Skip over the trampoline to the duplicate function for level 2
  4632  001254  B24A               	btfsc	btemp,1,c
  4633  001256  EF99  F009         	goto	i2_do_I2C_DO_NACK_RESTART
  4634  00125A                     _do_I2C_DO_NACK_RESTART$intlevel0:
  4635                           	opt stack 18
  4636                           
  4637                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  4638                           
  4639                           ;incstack = 0
  4640  00125A  ECB9  F009         	call	_i2c1_driver_sendNACK	;wreg free
  4641                           
  4642                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  4643  00125E  0E09               	movlw	9
  4644  001260  0012               	return	
  4645  001262                     __end_of_do_I2C_DO_NACK_RESTART:
  4646                           	opt stack 0
  4647                           tosu	equ	0xFFF
  4648                           tosh	equ	0xFFE
  4649                           tosl	equ	0xFFD
  4650                           pclath	equ	0xFFA
  4651                           tblptru	equ	0xFF8
  4652                           tblptrh	equ	0xFF7
  4653                           tblptrl	equ	0xFF6
  4654                           tablat	equ	0xFF5
  4655                           prodh	equ	0xFF4
  4656                           prodl	equ	0xFF3
  4657                           intcon	equ	0xFF2
  4658                           intcon2	equ	0xFF1
  4659                           postinc0	equ	0xFEE
  4660                           plusw0	equ	0xFEB
  4661                           wreg	equ	0xFE8
  4662                           postdec1	equ	0xFE5
  4663                           plusw1	equ	0xFE3
  4664                           fsr1l	equ	0xFE1
  4665                           indf2	equ	0xFDF
  4666                           postinc2	equ	0xFDE
  4667                           postdec2	equ	0xFDD
  4668                           plusw2	equ	0xFDB
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  4674 ;; Defined at:
  4675 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;		None
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      enum E7019
  4682 ;; Registers used:
  4683 ;;		wreg, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4689 ;;      Params:         0       0       0       0       0       0       0
  4690 ;;      Locals:         0       0       0       0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0
  4692 ;;      Totals:         0       0       0       0       0       0       0
  4693 ;;Total ram usage:        0 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    6
  4696 ;; This function calls:
  4697 ;;		_i2c1_driver_sendNACK
  4698 ;; This function is called by:
  4699 ;;		_do_I2C_RX
  4700 ;;		_i2c_ISR
  4701 ;;		i2_i2c_ISR
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text35
  4706  001262                     __ptext35:
  4707                           	opt stack 0
  4708  001262                     _do_I2C_DO_NACK_STOP:
  4709                           	opt stack 0
  4710                           
  4711                           ;Skip over the trampoline to the duplicate function for level 2
  4712  001262  B24A               	btfsc	btemp,1,c
  4713  001264  EF9D  F009         	goto	i2_do_I2C_DO_NACK_STOP
  4714  001268                     _do_I2C_DO_NACK_STOP$intlevel0:
  4715                           	opt stack 18
  4716                           
  4717                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  4718                           
  4719                           ;incstack = 0
  4720  001268  ECB9  F009         	call	_i2c1_driver_sendNACK	;wreg free
  4721                           
  4722                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  4723  00126C  0E0A               	movlw	10
  4724  00126E  0012               	return	
  4725  001270                     __end_of_do_I2C_DO_NACK_STOP:
  4726                           	opt stack 0
  4727                           tosu	equ	0xFFF
  4728                           tosh	equ	0xFFE
  4729                           tosl	equ	0xFFD
  4730                           pclath	equ	0xFFA
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           intcon	equ	0xFF2
  4738                           intcon2	equ	0xFF1
  4739                           postinc0	equ	0xFEE
  4740                           plusw0	equ	0xFEB
  4741                           wreg	equ	0xFE8
  4742                           postdec1	equ	0xFE5
  4743                           plusw1	equ	0xFE3
  4744                           fsr1l	equ	0xFE1
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           plusw2	equ	0xFDB
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _do_I2C_DO_ACK *****************
  4754 ;; Defined at:
  4755 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      enum E7019
  4762 ;; Registers used:
  4763 ;;		wreg, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4769 ;;      Params:         0       0       0       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0
  4772 ;;      Totals:         0       0       0       0       0       0       0
  4773 ;;Total ram usage:        0 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    6
  4776 ;; This function calls:
  4777 ;;		_i2c1_driver_sendACK
  4778 ;; This function is called by:
  4779 ;;		_i2c_ISR
  4780 ;;		i2_i2c_ISR
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text36
  4785  001270                     __ptext36:
  4786                           	opt stack 0
  4787  001270                     _do_I2C_DO_ACK:
  4788                           	opt stack 0
  4789                           
  4790                           ;Skip over the trampoline to the duplicate function for level 2
  4791  001270  B24A               	btfsc	btemp,1,c
  4792  001272  EFA1  F009         	goto	i2_do_I2C_DO_ACK
  4793  001276                     _do_I2C_DO_ACK$intlevel0:
  4794                           	opt stack 19
  4795                           
  4796                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  4797                           
  4798                           ;incstack = 0
  4799  001276  ECBC  F009         	call	_i2c1_driver_sendACK	;wreg free
  4800                           
  4801                           ;i2c_master.c: 362: return I2C_RCEN;
  4802  00127A  0E05               	movlw	5
  4803  00127C  0012               	return	
  4804  00127E                     __end_of_do_I2C_DO_ACK:
  4805                           	opt stack 0
  4806                           tosu	equ	0xFFF
  4807                           tosh	equ	0xFFE
  4808                           tosl	equ	0xFFD
  4809                           pclath	equ	0xFFA
  4810                           tblptru	equ	0xFF8
  4811                           tblptrh	equ	0xFF7
  4812                           tblptrl	equ	0xFF6
  4813                           tablat	equ	0xFF5
  4814                           prodh	equ	0xFF4
  4815                           prodl	equ	0xFF3
  4816                           intcon	equ	0xFF2
  4817                           intcon2	equ	0xFF1
  4818                           postinc0	equ	0xFEE
  4819                           plusw0	equ	0xFEB
  4820                           wreg	equ	0xFE8
  4821                           postdec1	equ	0xFE5
  4822                           plusw1	equ	0xFE3
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           plusw2	equ	0xFDB
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function _do_I2C_RCEN *****************
  4833 ;; Defined at:
  4834 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;		None
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;		None
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      enum E7019
  4841 ;; Registers used:
  4842 ;;		wreg, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4848 ;;      Params:         0       0       0       0       0       0       0
  4849 ;;      Locals:         0       0       0       0       0       0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0
  4851 ;;      Totals:         0       0       0       0       0       0       0
  4852 ;;Total ram usage:        0 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    6
  4855 ;; This function calls:
  4856 ;;		_i2c1_driver_startRX
  4857 ;; This function is called by:
  4858 ;;		_i2c_ISR
  4859 ;;		i2_i2c_ISR
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text37
  4864  0011C4                     __ptext37:
  4865                           	opt stack 0
  4866  0011C4                     _do_I2C_RCEN:
  4867                           	opt stack 0
  4868                           
  4869                           ;Skip over the trampoline to the duplicate function for level 2
  4870  0011C4  B24A               	btfsc	btemp,1,c
  4871  0011C6  EF62  F009         	goto	i2_do_I2C_RCEN
  4872  0011CA                     _do_I2C_RCEN$intlevel0:
  4873                           	opt stack 19
  4874                           
  4875                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  4876                           
  4877                           ;incstack = 0
  4878  0011CA  0100               	movlb	0	; () banked
  4879  0011CC  979A               	bcf	_i2c_status& (0+255),3,b
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;i2c_master.c: 355: i2c1_driver_startRX();
  4883  0011CE  ECCE  F009         	call	_i2c1_driver_startRX	;wreg free
  4884                           
  4885                           ;i2c_master.c: 356: return I2C_RX;
  4886  0011D2  0E04               	movlw	4
  4887  0011D4  0012               	return	
  4888  0011D6                     __end_of_do_I2C_RCEN:
  4889                           	opt stack 0
  4890                           tosu	equ	0xFFF
  4891                           tosh	equ	0xFFE
  4892                           tosl	equ	0xFFD
  4893                           pclath	equ	0xFFA
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           intcon	equ	0xFF2
  4901                           intcon2	equ	0xFF1
  4902                           postinc0	equ	0xFEE
  4903                           plusw0	equ	0xFEB
  4904                           wreg	equ	0xFE8
  4905                           postdec1	equ	0xFE5
  4906                           plusw1	equ	0xFE3
  4907                           fsr1l	equ	0xFE1
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           plusw2	equ	0xFDB
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  4917 ;; Defined at:
  4918 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      enum E7019
  4925 ;; Registers used:
  4926 ;;		wreg, status,2, status,0, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4932 ;;      Params:         0       0       0       0       0       0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0
  4934 ;;      Temps:          0       0       0       0       0       0       0
  4935 ;;      Totals:         0       0       0       0       0       0       0
  4936 ;;Total ram usage:        0 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    6
  4939 ;; This function calls:
  4940 ;;		_i2c1_driver_TXData
  4941 ;; This function is called by:
  4942 ;;		_i2c_ISR
  4943 ;;		i2_i2c_ISR
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text38
  4948  001108                     __ptext38:
  4949                           	opt stack 0
  4950  001108                     _do_I2C_SEND_ADR_WRITE:
  4951                           	opt stack 0
  4952                           
  4953                           ;Skip over the trampoline to the duplicate function for level 2
  4954  001108  B24A               	btfsc	btemp,1,c
  4955  00110A  EFFC  F008         	goto	i2_do_I2C_SEND_ADR_WRITE
  4956  00110E                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  4957                           	opt stack 19
  4958                           
  4959                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  4960                           
  4961                           ;incstack = 0
  4962  00110E  0100               	movlb	0	; () banked
  4963  001110  879A               	bsf	_i2c_status& (0+255),3,b
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  4967  001112  519B               	movf	(_i2c_status+1)& (0+255),w,b
  4968  001114  259B               	addwf	(_i2c_status+1)& (0+255),w,b
  4969  001116  EC95  F009         	call	_i2c1_driver_TXData
  4970                           
  4971                           ;i2c_master.c: 349: return I2C_TX;
  4972  00111A  0E03               	movlw	3
  4973  00111C  0012               	return	
  4974  00111E                     __end_of_do_I2C_SEND_ADR_WRITE:
  4975                           	opt stack 0
  4976                           tosu	equ	0xFFF
  4977                           tosh	equ	0xFFE
  4978                           tosl	equ	0xFFD
  4979                           pclath	equ	0xFFA
  4980                           tblptru	equ	0xFF8
  4981                           tblptrh	equ	0xFF7
  4982                           tblptrl	equ	0xFF6
  4983                           tablat	equ	0xFF5
  4984                           prodh	equ	0xFF4
  4985                           prodl	equ	0xFF3
  4986                           intcon	equ	0xFF2
  4987                           intcon2	equ	0xFF1
  4988                           postinc0	equ	0xFEE
  4989                           plusw0	equ	0xFEB
  4990                           wreg	equ	0xFE8
  4991                           postdec1	equ	0xFE5
  4992                           plusw1	equ	0xFE3
  4993                           fsr1l	equ	0xFE1
  4994                           indf2	equ	0xFDF
  4995                           postinc2	equ	0xFDE
  4996                           postdec2	equ	0xFDD
  4997                           plusw2	equ	0xFDB
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002 ;; *************** function _do_I2C_SEND_INITIAL_READ *****************
  5003 ;; Defined at:
  5004 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;		None
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      enum E7019
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5018 ;;      Params:         0       0       0       0       0       0       0
  5019 ;;      Locals:         0       0       0       0       0       0       0
  5020 ;;      Temps:          0       0       0       0       0       0       0
  5021 ;;      Totals:         0       0       0       0       0       0       0
  5022 ;;Total ram usage:        0 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    6
  5025 ;; This function calls:
  5026 ;;		_i2c1_driver_TXData
  5027 ;; This function is called by:
  5028 ;;		_i2c_ISR
  5029 ;;		i2_i2c_ISR
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text39
  5034  00111E                     __ptext39:
  5035                           	opt stack 0
  5036  00111E                     _do_I2C_SEND_INITIAL_READ:
  5037                           	opt stack 0
  5038                           
  5039                           ;Skip over the trampoline to the duplicate function for level 2
  5040  00111E  B24A               	btfsc	btemp,1,c
  5041  001120  EF04  F009         	goto	i2_do_I2C_SEND_INITIAL_READ
  5042  001124                     _do_I2C_SEND_INITIAL_READ$intlevel0:
  5043                           	opt stack 19
  5044                           
  5045                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  5046                           
  5047                           ;incstack = 0
  5048  001124  0100               	movlb	0	; () banked
  5049  001126  879A               	bsf	_i2c_status& (0+255),3,b
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  5053  001128  519B               	movf	(_i2c_status+1)& (0+255),w,b
  5054  00112A  259B               	addwf	(_i2c_status+1)& (0+255),w,b
  5055  00112C  EC95  F009         	call	_i2c1_driver_TXData
  5056                           
  5057                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  5058  001130  0E11               	movlw	17
  5059  001132  0012               	return	
  5060  001134                     __end_of_do_I2C_SEND_INITIAL_READ:
  5061                           	opt stack 0
  5062                           tosu	equ	0xFFF
  5063                           tosh	equ	0xFFE
  5064                           tosl	equ	0xFFD
  5065                           pclath	equ	0xFFA
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           intcon2	equ	0xFF1
  5074                           postinc0	equ	0xFEE
  5075                           plusw0	equ	0xFEB
  5076                           wreg	equ	0xFE8
  5077                           postdec1	equ	0xFE5
  5078                           plusw1	equ	0xFE3
  5079                           fsr1l	equ	0xFE1
  5080                           indf2	equ	0xFDF
  5081                           postinc2	equ	0xFDE
  5082                           postdec2	equ	0xFDD
  5083                           plusw2	equ	0xFDB
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  5089 ;; Defined at:
  5090 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      enum E7019
  5097 ;; Registers used:
  5098 ;;		wreg, status,0, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5104 ;;      Params:         0       0       0       0       0       0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0
  5107 ;;      Totals:         0       0       0       0       0       0       0
  5108 ;;Total ram usage:        0 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    6
  5111 ;; This function calls:
  5112 ;;		_i2c1_driver_TXData
  5113 ;; This function is called by:
  5114 ;;		_i2c_ISR
  5115 ;;		i2_i2c_ISR
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           	psect	text40
  5120  001134                     __ptext40:
  5121                           	opt stack 0
  5122  001134                     _do_I2C_SEND_ADR_READ:
  5123                           	opt stack 0
  5124                           
  5125                           ;Skip over the trampoline to the duplicate function for level 2
  5126  001134  B24A               	btfsc	btemp,1,c
  5127  001136  EF0C  F009         	goto	i2_do_I2C_SEND_ADR_READ
  5128  00113A                     _do_I2C_SEND_ADR_READ$intlevel0:
  5129                           	opt stack 19
  5130                           
  5131                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  5132                           
  5133                           ;incstack = 0
  5134  00113A  0100               	movlb	0	; () banked
  5135  00113C  879A               	bsf	_i2c_status& (0+255),3,b
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  5139  00113E  80D8               	bsf	status,0,c
  5140  001140  359B               	rlcf	(_i2c_status+1)& (0+255),w,b
  5141  001142  EC95  F009         	call	_i2c1_driver_TXData
  5142                           
  5143                           ;i2c_master.c: 325: return I2C_RCEN;
  5144  001146  0E05               	movlw	5
  5145  001148  0012               	return	
  5146  00114A                     __end_of_do_I2C_SEND_ADR_READ:
  5147                           	opt stack 0
  5148                           tosu	equ	0xFFF
  5149                           tosh	equ	0xFFE
  5150                           tosl	equ	0xFFD
  5151                           pclath	equ	0xFFA
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           intcon	equ	0xFF2
  5159                           intcon2	equ	0xFF1
  5160                           postinc0	equ	0xFEE
  5161                           plusw0	equ	0xFEB
  5162                           wreg	equ	0xFE8
  5163                           postdec1	equ	0xFE5
  5164                           plusw1	equ	0xFE3
  5165                           fsr1l	equ	0xFE1
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           plusw2	equ	0xFDB
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function _do_I2C_SEND_STOP *****************
  5175 ;; Defined at:
  5176 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      enum E7019
  5183 ;; Registers used:
  5184 ;;		wreg, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5190 ;;      Params:         0       0       0       0       0       0       0
  5191 ;;      Locals:         0       0       0       0       0       0       0
  5192 ;;      Temps:          0       0       0       0       0       0       0
  5193 ;;      Totals:         0       0       0       0       0       0       0
  5194 ;;Total ram usage:        0 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    6
  5197 ;; This function calls:
  5198 ;;		_i2c1_driver_stop
  5199 ;; This function is called by:
  5200 ;;		_do_I2C_DO_ADDRESS_NACK
  5201 ;;		_do_I2C_TX
  5202 ;;		_do_I2C_TX_EMPTY
  5203 ;;		_i2c_ISR
  5204 ;;		i2_i2c_ISR
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text41
  5209  00127E                     __ptext41:
  5210                           	opt stack 0
  5211  00127E                     _do_I2C_SEND_STOP:
  5212                           	opt stack 0
  5213                           
  5214                           ;Skip over the trampoline to the duplicate function for level 2
  5215  00127E  B24A               	btfsc	btemp,1,c
  5216  001280  EFA5  F009         	goto	i2_do_I2C_SEND_STOP
  5217  001284                     _do_I2C_SEND_STOP$intlevel0:
  5218                           	opt stack 18
  5219                           
  5220                           ;i2c_master.c: 316: i2c1_driver_stop();
  5221                           
  5222                           ;incstack = 0
  5223  001284  ECD0  F009         	call	_i2c1_driver_stop	;wreg free
  5224                           
  5225                           ;i2c_master.c: 317: return I2C_IDLE;
  5226  001288  0E00               	movlw	0
  5227  00128A  0012               	return	
  5228  00128C                     __end_of_do_I2C_SEND_STOP:
  5229                           	opt stack 0
  5230                           tosu	equ	0xFFF
  5231                           tosh	equ	0xFFE
  5232                           tosl	equ	0xFFD
  5233                           pclath	equ	0xFFA
  5234                           tblptru	equ	0xFF8
  5235                           tblptrh	equ	0xFF7
  5236                           tblptrl	equ	0xFF6
  5237                           tablat	equ	0xFF5
  5238                           prodh	equ	0xFF4
  5239                           prodl	equ	0xFF3
  5240                           intcon	equ	0xFF2
  5241                           intcon2	equ	0xFF1
  5242                           postinc0	equ	0xFEE
  5243                           plusw0	equ	0xFEB
  5244                           wreg	equ	0xFE8
  5245                           postdec1	equ	0xFE5
  5246                           plusw1	equ	0xFE3
  5247                           fsr1l	equ	0xFE1
  5248                           indf2	equ	0xFDF
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           plusw2	equ	0xFDB
  5252                           fsr2h	equ	0xFDA
  5253                           fsr2l	equ	0xFD9
  5254                           status	equ	0xFD8
  5255                           
  5256 ;; *************** function _do_I2C_SEND_RESTART *****************
  5257 ;; Defined at:
  5258 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;		None
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;		None
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  1    wreg      enum E7019
  5265 ;; Registers used:
  5266 ;;		wreg, cstack
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5272 ;;      Params:         0       0       0       0       0       0       0
  5273 ;;      Locals:         0       0       0       0       0       0       0
  5274 ;;      Temps:          0       0       0       0       0       0       0
  5275 ;;      Totals:         0       0       0       0       0       0       0
  5276 ;;Total ram usage:        0 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    6
  5279 ;; This function calls:
  5280 ;;		_i2c1_driver_restart
  5281 ;; This function is called by:
  5282 ;;		_do_I2C_DO_ADDRESS_NACK
  5283 ;;		_do_I2C_TX_EMPTY
  5284 ;;		_i2c_ISR
  5285 ;;		i2_i2c_ISR
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text42
  5290  00128C                     __ptext42:
  5291                           	opt stack 0
  5292  00128C                     _do_I2C_SEND_RESTART:
  5293                           	opt stack 0
  5294                           
  5295                           ;Skip over the trampoline to the duplicate function for level 2
  5296  00128C  B24A               	btfsc	btemp,1,c
  5297  00128E  EFA9  F009         	goto	i2_do_I2C_SEND_RESTART
  5298  001292                     _do_I2C_SEND_RESTART$intlevel0:
  5299                           	opt stack 18
  5300                           
  5301                           ;i2c_master.c: 310: i2c1_driver_restart();
  5302                           
  5303                           ;incstack = 0
  5304  001292  ECD2  F009         	call	_i2c1_driver_restart	;wreg free
  5305                           
  5306                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  5307  001296  0E01               	movlw	1
  5308  001298  0012               	return	
  5309  00129A                     __end_of_do_I2C_SEND_RESTART:
  5310                           	opt stack 0
  5311                           tosu	equ	0xFFF
  5312                           tosh	equ	0xFFE
  5313                           tosl	equ	0xFFD
  5314                           pclath	equ	0xFFA
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           intcon	equ	0xFF2
  5322                           intcon2	equ	0xFF1
  5323                           postinc0	equ	0xFEE
  5324                           plusw0	equ	0xFEB
  5325                           wreg	equ	0xFE8
  5326                           postdec1	equ	0xFE5
  5327                           plusw1	equ	0xFE3
  5328                           fsr1l	equ	0xFE1
  5329                           indf2	equ	0xFDF
  5330                           postinc2	equ	0xFDE
  5331                           postdec2	equ	0xFDD
  5332                           plusw2	equ	0xFDB
  5333                           fsr2h	equ	0xFDA
  5334                           fsr2l	equ	0xFD9
  5335                           status	equ	0xFD8
  5336                           
  5337 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  5338 ;; Defined at:
  5339 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;		None
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  1    wreg      enum E7019
  5346 ;; Registers used:
  5347 ;;		wreg, cstack
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5353 ;;      Params:         0       0       0       0       0       0       0
  5354 ;;      Locals:         0       0       0       0       0       0       0
  5355 ;;      Temps:          0       0       0       0       0       0       0
  5356 ;;      Totals:         0       0       0       0       0       0       0
  5357 ;;Total ram usage:        0 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; Hardware stack levels required when called:    6
  5360 ;; This function calls:
  5361 ;;		_i2c1_driver_restart
  5362 ;; This function is called by:
  5363 ;;		_do_I2C_TX
  5364 ;;		_i2c_ISR
  5365 ;;		i2_i2c_ISR
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text43
  5370  00129A                     __ptext43:
  5371                           	opt stack 0
  5372  00129A                     _do_I2C_SEND_RESTART_WRITE:
  5373                           	opt stack 0
  5374                           
  5375                           ;Skip over the trampoline to the duplicate function for level 2
  5376  00129A  B24A               	btfsc	btemp,1,c
  5377  00129C  EFAD  F009         	goto	i2_do_I2C_SEND_RESTART_WRITE
  5378  0012A0                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  5379                           	opt stack 18
  5380                           
  5381                           ;i2c_master.c: 304: i2c1_driver_restart();
  5382                           
  5383                           ;incstack = 0
  5384  0012A0  ECD2  F009         	call	_i2c1_driver_restart	;wreg free
  5385                           
  5386                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  5387  0012A4  0E02               	movlw	2
  5388  0012A6  0012               	return	
  5389  0012A8                     __end_of_do_I2C_SEND_RESTART_WRITE:
  5390                           	opt stack 0
  5391                           tosu	equ	0xFFF
  5392                           tosh	equ	0xFFE
  5393                           tosl	equ	0xFFD
  5394                           pclath	equ	0xFFA
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           intcon2	equ	0xFF1
  5403                           postinc0	equ	0xFEE
  5404                           plusw0	equ	0xFEB
  5405                           wreg	equ	0xFE8
  5406                           postdec1	equ	0xFE5
  5407                           plusw1	equ	0xFE3
  5408                           fsr1l	equ	0xFE1
  5409                           indf2	equ	0xFDF
  5410                           postinc2	equ	0xFDE
  5411                           postdec2	equ	0xFDD
  5412                           plusw2	equ	0xFDB
  5413                           fsr2h	equ	0xFDA
  5414                           fsr2l	equ	0xFD9
  5415                           status	equ	0xFD8
  5416                           
  5417 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  5418 ;; Defined at:
  5419 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      enum E7019
  5426 ;; Registers used:
  5427 ;;		wreg, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5433 ;;      Params:         0       0       0       0       0       0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0
  5435 ;;      Temps:          0       0       0       0       0       0       0
  5436 ;;      Totals:         0       0       0       0       0       0       0
  5437 ;;Total ram usage:        0 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    6
  5440 ;; This function calls:
  5441 ;;		_i2c1_driver_restart
  5442 ;; This function is called by:
  5443 ;;		_do_I2C_TX
  5444 ;;		_i2c_ISR
  5445 ;;		i2_i2c_ISR
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text44
  5450  0012A8                     __ptext44:
  5451                           	opt stack 0
  5452  0012A8                     _do_I2C_SEND_RESTART_READ:
  5453                           	opt stack 0
  5454                           
  5455                           ;Skip over the trampoline to the duplicate function for level 2
  5456  0012A8  B24A               	btfsc	btemp,1,c
  5457  0012AA  EFB1  F009         	goto	i2_do_I2C_SEND_RESTART_READ
  5458  0012AE                     _do_I2C_SEND_RESTART_READ$intlevel0:
  5459                           	opt stack 18
  5460                           
  5461                           ;i2c_master.c: 298: i2c1_driver_restart();
  5462                           
  5463                           ;incstack = 0
  5464  0012AE  ECD2  F009         	call	_i2c1_driver_restart	;wreg free
  5465                           
  5466                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  5467  0012B2  0E01               	movlw	1
  5468  0012B4  0012               	return	
  5469  0012B6                     __end_of_do_I2C_SEND_RESTART_READ:
  5470                           	opt stack 0
  5471                           tosu	equ	0xFFF
  5472                           tosh	equ	0xFFE
  5473                           tosl	equ	0xFFD
  5474                           pclath	equ	0xFFA
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           intcon	equ	0xFF2
  5482                           intcon2	equ	0xFF1
  5483                           postinc0	equ	0xFEE
  5484                           plusw0	equ	0xFEB
  5485                           wreg	equ	0xFE8
  5486                           postdec1	equ	0xFE5
  5487                           plusw1	equ	0xFE3
  5488                           fsr1l	equ	0xFE1
  5489                           indf2	equ	0xFDF
  5490                           postinc2	equ	0xFDE
  5491                           postdec2	equ	0xFDD
  5492                           plusw2	equ	0xFDB
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _do_I2C_IDLE *****************
  5498 ;; Defined at:
  5499 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      enum E7019
  5506 ;; Registers used:
  5507 ;;		wreg, status,2
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5513 ;;      Params:         0       0       0       0       0       0       0
  5514 ;;      Locals:         0       0       0       0       0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0
  5516 ;;      Totals:         0       0       0       0       0       0       0
  5517 ;;Total ram usage:        0 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    5
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_i2c_ISR
  5524 ;;		i2_i2c_ISR
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text45
  5529  0011D6                     __ptext45:
  5530                           	opt stack 0
  5531  0011D6                     _do_I2C_IDLE:
  5532                           	opt stack 0
  5533                           
  5534                           ;Skip over the trampoline to the duplicate function for level 2
  5535  0011D6  B24A               	btfsc	btemp,1,c
  5536  0011D8  EF68  F009         	goto	i2_do_I2C_IDLE
  5537  0011DC                     _do_I2C_IDLE$intlevel0:
  5538                           	opt stack 20
  5539                           
  5540                           ;i2c_master.c: 291: i2c_status.busy = 0;
  5541                           
  5542                           ;incstack = 0
  5543  0011DC  0100               	movlb	0	; () banked
  5544  0011DE  919A               	bcf	_i2c_status& (0+255),0,b
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  5548  0011E0  0E00               	movlw	0
  5549  0011E2  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;i2c_master.c: 293: return I2C_RESET;
  5553  0011E4  0E0E               	movlw	14
  5554  0011E6  0012               	return	
  5555  0011E8                     __end_of_do_I2C_IDLE:
  5556                           	opt stack 0
  5557                           tosu	equ	0xFFF
  5558                           tosh	equ	0xFFE
  5559                           tosl	equ	0xFFD
  5560                           pclath	equ	0xFFA
  5561                           tblptru	equ	0xFF8
  5562                           tblptrh	equ	0xFF7
  5563                           tblptrl	equ	0xFF6
  5564                           tablat	equ	0xFF5
  5565                           prodh	equ	0xFF4
  5566                           prodl	equ	0xFF3
  5567                           intcon	equ	0xFF2
  5568                           intcon2	equ	0xFF1
  5569                           postinc0	equ	0xFEE
  5570                           plusw0	equ	0xFEB
  5571                           wreg	equ	0xFE8
  5572                           postdec1	equ	0xFE5
  5573                           plusw1	equ	0xFE3
  5574                           fsr1l	equ	0xFE1
  5575                           indf2	equ	0xFDF
  5576                           postinc2	equ	0xFDE
  5577                           postdec2	equ	0xFDD
  5578                           plusw2	equ	0xFDB
  5579                           fsr2h	equ	0xFDA
  5580                           fsr2l	equ	0xFD9
  5581                           status	equ	0xFD8
  5582                           
  5583 ;; *************** function _do_I2C_RESET *****************
  5584 ;; Defined at:
  5585 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      enum E7019
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5599 ;;      Params:         0       0       0       0       0       0       0
  5600 ;;      Locals:         0       0       0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0
  5602 ;;      Totals:         0       0       0       0       0       0       0
  5603 ;;Total ram usage:        0 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    6
  5606 ;; This function calls:
  5607 ;;		_i2c1_driver_resetBus
  5608 ;; This function is called by:
  5609 ;;		_i2c_ISR
  5610 ;;		i2_i2c_ISR
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text46
  5615  00114A                     __ptext46:
  5616                           	opt stack 0
  5617  00114A                     _do_I2C_RESET:
  5618                           	opt stack 0
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;Skip over the trampoline to the duplicate function for level 2
  5622  00114A  B24A               	btfsc	btemp,1,c
  5623  00114C  EF14  F009         	goto	i2_do_I2C_RESET
  5624  001150                     _do_I2C_RESET$intlevel0:
  5625                           	opt stack 19
  5626                           
  5627                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  5628                           
  5629                           ;incstack = 0
  5630  001150  ECEC  F009         	call	_i2c1_driver_resetBus	;wreg free
  5631                           
  5632                           ;i2c_master.c: 284: i2c_status.busy = 0;
  5633  001154  0100               	movlb	0	; () banked
  5634  001156  919A               	bcf	_i2c_status& (0+255),0,b
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  5638  001158  0E00               	movlw	0
  5639  00115A  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;i2c_master.c: 286: return I2C_RESET;
  5643  00115C  0E0E               	movlw	14
  5644  00115E  0012               	return	
  5645  001160                     __end_of_do_I2C_RESET:
  5646                           	opt stack 0
  5647                           tosu	equ	0xFFF
  5648                           tosh	equ	0xFFE
  5649                           tosl	equ	0xFFD
  5650                           pclath	equ	0xFFA
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           intcon2	equ	0xFF1
  5659                           postinc0	equ	0xFEE
  5660                           plusw0	equ	0xFEB
  5661                           wreg	equ	0xFE8
  5662                           postdec1	equ	0xFE5
  5663                           plusw1	equ	0xFE3
  5664                           fsr1l	equ	0xFE1
  5665                           indf2	equ	0xFDF
  5666                           postinc2	equ	0xFDE
  5667                           postdec2	equ	0xFDD
  5668                           plusw2	equ	0xFDB
  5669                           fsr2h	equ	0xFDA
  5670                           fsr2l	equ	0xFD9
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function _do_I2C_TX_REGISTER *****************
  5674 ;; Defined at:
  5675 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;		None
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;		None
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      enum E7019
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5689 ;;      Params:         0       0       0       0       0       0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0
  5691 ;;      Temps:          0       0       0       0       0       0       0
  5692 ;;      Totals:         0       0       0       0       0       0       0
  5693 ;;Total ram usage:        0 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    6
  5696 ;; This function calls:
  5697 ;;		_i2c1_driver_TXData
  5698 ;; This function is called by:
  5699 ;;		_i2c_ISR
  5700 ;;		i2_i2c_ISR
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text47
  5705  00118C                     __ptext47:
  5706                           	opt stack 0
  5707  00118C                     _do_I2C_TX_REGISTER:
  5708                           	opt stack 0
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;Skip over the trampoline to the duplicate function for level 2
  5712  00118C  B24A               	btfsc	btemp,1,c
  5713  00118E  EF5B  F009         	goto	i2_do_I2C_TX_REGISTER
  5714  001192                     _do_I2C_TX_REGISTER$intlevel0:
  5715                           	opt stack 19
  5716                           
  5717                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  5718                           
  5719                           ;incstack = 0
  5720  001192  0100               	movlb	0	; () banked
  5721  001194  879A               	bsf	_i2c_status& (0+255),3,b
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  5725  001196  51BE               	movf	(_i2c_status+36)& (0+255),w,b
  5726  001198  EC95  F009         	call	_i2c1_driver_TXData
  5727                           
  5728                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  5729  00119C  0E07               	movlw	7
  5730  00119E  0012               	return	
  5731  0011A0                     __end_of_do_I2C_TX_REGISTER:
  5732                           	opt stack 0
  5733                           tosu	equ	0xFFF
  5734                           tosh	equ	0xFFE
  5735                           tosl	equ	0xFFD
  5736                           pclath	equ	0xFFA
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodh	equ	0xFF4
  5742                           prodl	equ	0xFF3
  5743                           intcon	equ	0xFF2
  5744                           intcon2	equ	0xFF1
  5745                           postinc0	equ	0xFEE
  5746                           plusw0	equ	0xFEB
  5747                           wreg	equ	0xFE8
  5748                           postdec1	equ	0xFE5
  5749                           plusw1	equ	0xFE3
  5750                           fsr1l	equ	0xFE1
  5751                           indf2	equ	0xFDF
  5752                           postinc2	equ	0xFDE
  5753                           postdec2	equ	0xFDD
  5754                           plusw2	equ	0xFDB
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _mssp1_setIRQ *****************
  5760 ;; Defined at:
  5761 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;		None
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		None
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5775 ;;      Params:         0       0       0       0       0       0       0
  5776 ;;      Locals:         0       0       0       0       0       0       0
  5777 ;;      Temps:          0       0       0       0       0       0       0
  5778 ;;      Totals:         0       0       0       0       0       0       0
  5779 ;;Total ram usage:        0 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    5
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_do_I2C_TX_EMPTY
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           	psect	text48
  5790  001394                     __ptext48:
  5791                           	opt stack 0
  5792  001394                     _mssp1_setIRQ:
  5793                           	opt stack 19
  5794                           
  5795                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  5796                           
  5797                           ;incstack = 0
  5798  001394  869E               	bsf	3998,3,c	;volatile
  5799  001396  0012               	return		;funcret
  5800  001398                     __end_of_mssp1_setIRQ:
  5801                           	opt stack 0
  5802                           tosu	equ	0xFFF
  5803                           tosh	equ	0xFFE
  5804                           tosl	equ	0xFFD
  5805                           pclath	equ	0xFFA
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           intcon2	equ	0xFF1
  5814                           postinc0	equ	0xFEE
  5815                           plusw0	equ	0xFEB
  5816                           wreg	equ	0xFE8
  5817                           postdec1	equ	0xFE5
  5818                           plusw1	equ	0xFE3
  5819                           fsr1l	equ	0xFE1
  5820                           indf2	equ	0xFDF
  5821                           postinc2	equ	0xFDE
  5822                           postdec2	equ	0xFDD
  5823                           plusw2	equ	0xFDB
  5824                           fsr2h	equ	0xFDA
  5825                           fsr2l	equ	0xFD9
  5826                           status	equ	0xFD8
  5827                           
  5828 ;; *************** function _i2c1_driver_isNACK *****************
  5829 ;; Defined at:
  5830 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;		None
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;		None
  5835 ;; Return value:  Size  Location     Type
  5836 ;;		None               void
  5837 ;; Registers used:
  5838 ;;		wreg, status,2, status,0
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5844 ;;      Params:         0       0       0       0       0       0       0
  5845 ;;      Locals:         0       0       0       0       0       0       0
  5846 ;;      Temps:          1       0       0       0       0       0       0
  5847 ;;      Totals:         1       0       0       0       0       0       0
  5848 ;;Total ram usage:        1 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    5
  5851 ;; This function calls:
  5852 ;;		Nothing
  5853 ;; This function is called by:
  5854 ;;		_do_I2C_TX
  5855 ;;		_i2c_ISR
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           	psect	text49
  5860  001160                     __ptext49:
  5861                           	opt stack 0
  5862  001160                     _i2c1_driver_isNACK:
  5863                           	opt stack 20
  5864                           
  5865                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  5866                           
  5867                           ;incstack = 0
  5868  001160  50C5               	movf	4037,w,c	;volatile
  5869  001162  0BBF               	andlw	-65
  5870  001164  0940               	iorlw	64
  5871  001166  6EC5               	movwf	4037,c	;volatile
  5872  001168  38C5               	swapf	4037,w,c	;volatile
  5873  00116A  32E8               	rrcf	wreg,f,c
  5874  00116C  32E8               	rrcf	wreg,f,c
  5875  00116E  0B01               	andlw	1
  5876  001170  6E3A               	movwf	??_i2c1_driver_isNACK& (0+255),c
  5877  001172  303A               	rrcf	??_i2c1_driver_isNACK,w,c
  5878  001174  0012               	return	
  5879  001176                     __end_of_i2c1_driver_isNACK:
  5880                           	opt stack 0
  5881                           tosu	equ	0xFFF
  5882                           tosh	equ	0xFFE
  5883                           tosl	equ	0xFFD
  5884                           pclath	equ	0xFFA
  5885                           tblptru	equ	0xFF8
  5886                           tblptrh	equ	0xFF7
  5887                           tblptrl	equ	0xFF6
  5888                           tablat	equ	0xFF5
  5889                           prodh	equ	0xFF4
  5890                           prodl	equ	0xFF3
  5891                           intcon	equ	0xFF2
  5892                           intcon2	equ	0xFF1
  5893                           postinc0	equ	0xFEE
  5894                           plusw0	equ	0xFEB
  5895                           wreg	equ	0xFE8
  5896                           postdec1	equ	0xFE5
  5897                           plusw1	equ	0xFE3
  5898                           fsr1l	equ	0xFE1
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           plusw2	equ	0xFDB
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _i2c1_driver_TXData *****************
  5908 ;; Defined at:
  5909 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  d               1    wreg     unsigned char 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  d               1   20[COMRAM] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      void 
  5916 ;; Registers used:
  5917 ;;		wreg
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5923 ;;      Params:         0       0       0       0       0       0       0
  5924 ;;      Locals:         1       0       0       0       0       0       0
  5925 ;;      Temps:          0       0       0       0       0       0       0
  5926 ;;      Totals:         1       0       0       0       0       0       0
  5927 ;;Total ram usage:        1 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    5
  5930 ;; This function calls:
  5931 ;;		Nothing
  5932 ;; This function is called by:
  5933 ;;		_do_I2C_SEND_ADR_READ
  5934 ;;		_do_I2C_SEND_INITIAL_READ
  5935 ;;		_do_I2C_TX_REGISTER
  5936 ;;		_do_I2C_SEND_ADR_WRITE
  5937 ;;		_do_I2C_TX
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           	psect	text50
  5942  00132A                     __ptext50:
  5943                           	opt stack 0
  5944  00132A                     _i2c1_driver_TXData:
  5945                           	opt stack 19
  5946                           
  5947                           ;incstack = 0
  5948                           ;i2c1_driver_TXData@d stored from wreg
  5949  00132A  6E3A               	movwf	i2c1_driver_TXData@d,c
  5950                           
  5951                           ;i2c1_driver.c: 188: SSP1BUF = d;
  5952  00132C  C03A  FFC9         	movff	i2c1_driver_TXData@d,4041	;volatile
  5953  001330  0012               	return		;funcret
  5954  001332                     __end_of_i2c1_driver_TXData:
  5955                           	opt stack 0
  5956                           tosu	equ	0xFFF
  5957                           tosh	equ	0xFFE
  5958                           tosl	equ	0xFFD
  5959                           pclath	equ	0xFFA
  5960                           tblptru	equ	0xFF8
  5961                           tblptrh	equ	0xFF7
  5962                           tblptrl	equ	0xFF6
  5963                           tablat	equ	0xFF5
  5964                           prodh	equ	0xFF4
  5965                           prodl	equ	0xFF3
  5966                           intcon	equ	0xFF2
  5967                           intcon2	equ	0xFF1
  5968                           postinc0	equ	0xFEE
  5969                           plusw0	equ	0xFEB
  5970                           wreg	equ	0xFE8
  5971                           postdec1	equ	0xFE5
  5972                           plusw1	equ	0xFE3
  5973                           fsr1l	equ	0xFE1
  5974                           indf2	equ	0xFDF
  5975                           postinc2	equ	0xFDE
  5976                           postdec2	equ	0xFDD
  5977                           plusw2	equ	0xFDB
  5978                           fsr2h	equ	0xFDA
  5979                           fsr2l	equ	0xFD9
  5980                           status	equ	0xFD8
  5981                           
  5982 ;; *************** function _i2c1_driver_getRXData *****************
  5983 ;; Defined at:
  5984 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;		None
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      unsigned char 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5998 ;;      Params:         0       0       0       0       0       0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0
  6001 ;;      Totals:         0       0       0       0       0       0       0
  6002 ;;Total ram usage:        0 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    5
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_do_I2C_RX
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text51
  6013  001398                     __ptext51:
  6014                           	opt stack 0
  6015  001398                     _i2c1_driver_getRXData:
  6016                           	opt stack 19
  6017                           
  6018                           ;i2c1_driver.c: 173: return SSP1BUF;
  6019                           
  6020                           ;incstack = 0
  6021  001398  50C9               	movf	4041,w,c	;volatile
  6022  00139A  0012               	return	
  6023  00139C                     __end_of_i2c1_driver_getRXData:
  6024                           	opt stack 0
  6025                           tosu	equ	0xFFF
  6026                           tosh	equ	0xFFE
  6027                           tosl	equ	0xFFD
  6028                           pclath	equ	0xFFA
  6029                           tblptru	equ	0xFF8
  6030                           tblptrh	equ	0xFF7
  6031                           tblptrl	equ	0xFF6
  6032                           tablat	equ	0xFF5
  6033                           prodh	equ	0xFF4
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           intcon2	equ	0xFF1
  6037                           postinc0	equ	0xFEE
  6038                           plusw0	equ	0xFEB
  6039                           wreg	equ	0xFE8
  6040                           postdec1	equ	0xFE5
  6041                           plusw1	equ	0xFE3
  6042                           fsr1l	equ	0xFE1
  6043                           indf2	equ	0xFDF
  6044                           postinc2	equ	0xFDE
  6045                           postdec2	equ	0xFDD
  6046                           plusw2	equ	0xFDB
  6047                           fsr2h	equ	0xFDA
  6048                           fsr2l	equ	0xFD9
  6049                           status	equ	0xFD8
  6050                           
  6051 ;; *************** function _i2c1_driver_sendNACK *****************
  6052 ;; Defined at:
  6053 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;		None
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;		None
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		None
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6067 ;;      Params:         0       0       0       0       0       0       0
  6068 ;;      Locals:         0       0       0       0       0       0       0
  6069 ;;      Temps:          0       0       0       0       0       0       0
  6070 ;;      Totals:         0       0       0       0       0       0       0
  6071 ;;Total ram usage:        0 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    5
  6074 ;; This function calls:
  6075 ;;		Nothing
  6076 ;; This function is called by:
  6077 ;;		_do_I2C_DO_NACK_STOP
  6078 ;;		_do_I2C_DO_NACK_RESTART
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text52
  6083  001372                     __ptext52:
  6084                           	opt stack 0
  6085  001372                     _i2c1_driver_sendNACK:
  6086                           	opt stack 18
  6087                           
  6088                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  6089                           
  6090                           ;incstack = 0
  6091  001372  8AC5               	bsf	4037,5,c	;volatile
  6092                           
  6093                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  6094  001374  88C5               	bsf	4037,4,c	;volatile
  6095  001376  0012               	return		;funcret
  6096  001378                     __end_of_i2c1_driver_sendNACK:
  6097                           	opt stack 0
  6098                           tosu	equ	0xFFF
  6099                           tosh	equ	0xFFE
  6100                           tosl	equ	0xFFD
  6101                           pclath	equ	0xFFA
  6102                           tblptru	equ	0xFF8
  6103                           tblptrh	equ	0xFF7
  6104                           tblptrl	equ	0xFF6
  6105                           tablat	equ	0xFF5
  6106                           prodh	equ	0xFF4
  6107                           prodl	equ	0xFF3
  6108                           intcon	equ	0xFF2
  6109                           intcon2	equ	0xFF1
  6110                           postinc0	equ	0xFEE
  6111                           plusw0	equ	0xFEB
  6112                           wreg	equ	0xFE8
  6113                           postdec1	equ	0xFE5
  6114                           plusw1	equ	0xFE3
  6115                           fsr1l	equ	0xFE1
  6116                           indf2	equ	0xFDF
  6117                           postinc2	equ	0xFDE
  6118                           postdec2	equ	0xFDD
  6119                           plusw2	equ	0xFDB
  6120                           fsr2h	equ	0xFDA
  6121                           fsr2l	equ	0xFD9
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function _i2c1_driver_resetBus *****************
  6125 ;; Defined at:
  6126 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;		None
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		None
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6140 ;;      Params:         0       0       0       0       0       0       0
  6141 ;;      Locals:         0       0       0       0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0
  6143 ;;      Totals:         0       0       0       0       0       0       0
  6144 ;;Total ram usage:        0 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    5
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_do_I2C_RESET
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text53
  6155  0013D8                     __ptext53:
  6156                           	opt stack 0
  6157  0013D8                     _i2c1_driver_resetBus:
  6158                           	opt stack 19
  6159                           
  6160                           ;incstack = 0
  6161  0013D8  0012               	return		;funcret
  6162  0013DA                     __end_of_i2c1_driver_resetBus:
  6163                           	opt stack 0
  6164                           tosu	equ	0xFFF
  6165                           tosh	equ	0xFFE
  6166                           tosl	equ	0xFFD
  6167                           pclath	equ	0xFFA
  6168                           tblptru	equ	0xFF8
  6169                           tblptrh	equ	0xFF7
  6170                           tblptrl	equ	0xFF6
  6171                           tablat	equ	0xFF5
  6172                           prodh	equ	0xFF4
  6173                           prodl	equ	0xFF3
  6174                           intcon	equ	0xFF2
  6175                           intcon2	equ	0xFF1
  6176                           postinc0	equ	0xFEE
  6177                           plusw0	equ	0xFEB
  6178                           wreg	equ	0xFE8
  6179                           postdec1	equ	0xFE5
  6180                           plusw1	equ	0xFE3
  6181                           fsr1l	equ	0xFE1
  6182                           indf2	equ	0xFDF
  6183                           postinc2	equ	0xFDE
  6184                           postdec2	equ	0xFDD
  6185                           plusw2	equ	0xFDB
  6186                           fsr2h	equ	0xFDA
  6187                           fsr2l	equ	0xFD9
  6188                           status	equ	0xFD8
  6189                           
  6190 ;; *************** function _i2c1_driver_startRX *****************
  6191 ;; Defined at:
  6192 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;		None
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;		None
  6197 ;; Return value:  Size  Location     Type
  6198 ;;                  1    wreg      void 
  6199 ;; Registers used:
  6200 ;;		None
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6206 ;;      Params:         0       0       0       0       0       0       0
  6207 ;;      Locals:         0       0       0       0       0       0       0
  6208 ;;      Temps:          0       0       0       0       0       0       0
  6209 ;;      Totals:         0       0       0       0       0       0       0
  6210 ;;Total ram usage:        0 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; Hardware stack levels required when called:    5
  6213 ;; This function calls:
  6214 ;;		Nothing
  6215 ;; This function is called by:
  6216 ;;		_do_I2C_RCEN
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           	psect	text54
  6221  00139C                     __ptext54:
  6222                           	opt stack 0
  6223  00139C                     _i2c1_driver_startRX:
  6224                           	opt stack 19
  6225                           
  6226                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  6227                           
  6228                           ;incstack = 0
  6229  00139C  86C5               	bsf	4037,3,c	;volatile
  6230  00139E  0012               	return		;funcret
  6231  0013A0                     __end_of_i2c1_driver_startRX:
  6232                           	opt stack 0
  6233                           tosu	equ	0xFFF
  6234                           tosh	equ	0xFFE
  6235                           tosl	equ	0xFFD
  6236                           pclath	equ	0xFFA
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           intcon	equ	0xFF2
  6244                           intcon2	equ	0xFF1
  6245                           postinc0	equ	0xFEE
  6246                           plusw0	equ	0xFEB
  6247                           wreg	equ	0xFE8
  6248                           postdec1	equ	0xFE5
  6249                           plusw1	equ	0xFE3
  6250                           fsr1l	equ	0xFE1
  6251                           indf2	equ	0xFDF
  6252                           postinc2	equ	0xFDE
  6253                           postdec2	equ	0xFDD
  6254                           plusw2	equ	0xFDB
  6255                           fsr2h	equ	0xFDA
  6256                           fsr2l	equ	0xFD9
  6257                           status	equ	0xFD8
  6258                           
  6259 ;; *************** function _returnReset *****************
  6260 ;; Defined at:
  6261 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  p               2   20[COMRAM] PTR void 
  6264 ;;		 -> NULL(0), 
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;		None
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      enum E6842
  6269 ;; Registers used:
  6270 ;;		wreg
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6276 ;;      Params:         2       0       0       0       0       0       0
  6277 ;;      Locals:         0       0       0       0       0       0       0
  6278 ;;      Temps:          0       0       0       0       0       0       0
  6279 ;;      Totals:         2       0       0       0       0       0       0
  6280 ;;Total ram usage:        2 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:    5
  6283 ;; This function calls:
  6284 ;;		Nothing
  6285 ;; This function is called by:
  6286 ;;		_i2c_open
  6287 ;;		_do_I2C_DO_ADDRESS_NACK
  6288 ;;		_do_I2C_TX
  6289 ;;		_do_I2C_RX
  6290 ;;		_do_I2C_TX_EMPTY
  6291 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6292 ;;		i2_do_I2C_TX
  6293 ;;		i2_do_I2C_RX
  6294 ;;		i2_do_I2C_TX_EMPTY
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           	psect	text55
  6299  00130E                     __ptext55:
  6300                           	opt stack 0
  6301  00130E                     _returnReset:
  6302                           	opt stack 0
  6303                           
  6304                           ;Skip over the trampoline to the duplicate function for level 2
  6305  00130E  B24A               	btfsc	btemp,1,c
  6306  001310  EFE2  F009         	goto	i2_returnReset
  6307  001314                     _returnReset$intlevel0:
  6308                           	opt stack 19
  6309                           
  6310                           ;i2c_master.c: 515: return i2c_reset_link;
  6311                           
  6312                           ;incstack = 0
  6313  001314  0E05               	movlw	5
  6314  001316  0012               	return	
  6315  001318                     __end_of_returnReset:
  6316                           	opt stack 0
  6317                           tosu	equ	0xFFF
  6318                           tosh	equ	0xFFE
  6319                           tosl	equ	0xFFD
  6320                           pclath	equ	0xFFA
  6321                           tblptru	equ	0xFF8
  6322                           tblptrh	equ	0xFF7
  6323                           tblptrl	equ	0xFF6
  6324                           tablat	equ	0xFF5
  6325                           prodh	equ	0xFF4
  6326                           prodl	equ	0xFF3
  6327                           intcon	equ	0xFF2
  6328                           intcon2	equ	0xFF1
  6329                           postinc0	equ	0xFEE
  6330                           plusw0	equ	0xFEB
  6331                           wreg	equ	0xFE8
  6332                           postdec1	equ	0xFE5
  6333                           plusw1	equ	0xFE3
  6334                           fsr1l	equ	0xFE1
  6335                           indf2	equ	0xFDF
  6336                           postinc2	equ	0xFDE
  6337                           postdec2	equ	0xFDD
  6338                           plusw2	equ	0xFDB
  6339                           fsr2h	equ	0xFDA
  6340                           fsr2l	equ	0xFD9
  6341                           status	equ	0xFD8
  6342                           
  6343 ;; *************** function _returnStop *****************
  6344 ;; Defined at:
  6345 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  p               2   20[COMRAM] PTR void 
  6348 ;;		 -> NULL(0), 
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;		None
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      enum E6842
  6353 ;; Registers used:
  6354 ;;		wreg
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6360 ;;      Params:         2       0       0       0       0       0       0
  6361 ;;      Locals:         0       0       0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0
  6363 ;;      Totals:         2       0       0       0       0       0       0
  6364 ;;Total ram usage:        2 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    5
  6367 ;; This function calls:
  6368 ;;		Nothing
  6369 ;; This function is called by:
  6370 ;;		_i2c_open
  6371 ;;		_setCallBack
  6372 ;;		_do_I2C_DO_ADDRESS_NACK
  6373 ;;		_do_I2C_TX
  6374 ;;		_do_I2C_RX
  6375 ;;		_do_I2C_TX_EMPTY
  6376 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6377 ;;		i2_do_I2C_TX
  6378 ;;		i2_do_I2C_RX
  6379 ;;		i2_do_I2C_TX_EMPTY
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           	psect	text56
  6384  001318                     __ptext56:
  6385                           	opt stack 0
  6386  001318                     _returnStop:
  6387                           	opt stack 0
  6388                           
  6389                           ;Skip over the trampoline to the duplicate function for level 2
  6390  001318  B24A               	btfsc	btemp,1,c
  6391  00131A  EFE4  F009         	goto	i2_returnStop
  6392  00131E                     _returnStop$intlevel0:
  6393                           	opt stack 19
  6394                           
  6395                           ;i2c_master.c: 510: return i2c_stop;
  6396                           
  6397                           ;incstack = 0
  6398  00131E  0E01               	movlw	1
  6399  001320  0012               	return	
  6400  001322                     __end_of_returnStop:
  6401                           	opt stack 0
  6402                           tosu	equ	0xFFF
  6403                           tosh	equ	0xFFE
  6404                           tosl	equ	0xFFD
  6405                           pclath	equ	0xFFA
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           intcon	equ	0xFF2
  6413                           intcon2	equ	0xFF1
  6414                           postinc0	equ	0xFEE
  6415                           plusw0	equ	0xFEB
  6416                           wreg	equ	0xFE8
  6417                           postdec1	equ	0xFE5
  6418                           plusw1	equ	0xFE3
  6419                           fsr1l	equ	0xFE1
  6420                           indf2	equ	0xFDF
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           plusw2	equ	0xFDB
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function _i2c1_driver_stop *****************
  6429 ;; Defined at:
  6430 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      void 
  6437 ;; Registers used:
  6438 ;;		None
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6444 ;;      Params:         0       0       0       0       0       0       0
  6445 ;;      Locals:         0       0       0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0
  6447 ;;      Totals:         0       0       0       0       0       0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    5
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_do_I2C_SEND_STOP
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text57
  6459  0013A0                     __ptext57:
  6460                           	opt stack 0
  6461  0013A0                     _i2c1_driver_stop:
  6462                           	opt stack 18
  6463                           
  6464                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  6465                           
  6466                           ;incstack = 0
  6467  0013A0  84C5               	bsf	4037,2,c	;volatile
  6468  0013A2  0012               	return		;funcret
  6469  0013A4                     __end_of_i2c1_driver_stop:
  6470                           	opt stack 0
  6471                           tosu	equ	0xFFF
  6472                           tosh	equ	0xFFE
  6473                           tosl	equ	0xFFD
  6474                           pclath	equ	0xFFA
  6475                           tblptru	equ	0xFF8
  6476                           tblptrh	equ	0xFF7
  6477                           tblptrl	equ	0xFF6
  6478                           tablat	equ	0xFF5
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           intcon	equ	0xFF2
  6482                           intcon2	equ	0xFF1
  6483                           postinc0	equ	0xFEE
  6484                           plusw0	equ	0xFEB
  6485                           wreg	equ	0xFE8
  6486                           postdec1	equ	0xFE5
  6487                           plusw1	equ	0xFE3
  6488                           fsr1l	equ	0xFE1
  6489                           indf2	equ	0xFDF
  6490                           postinc2	equ	0xFDE
  6491                           postdec2	equ	0xFDD
  6492                           plusw2	equ	0xFDB
  6493                           fsr2h	equ	0xFDA
  6494                           fsr2l	equ	0xFD9
  6495                           status	equ	0xFD8
  6496                           
  6497 ;; *************** function _i2c1_driver_restart *****************
  6498 ;; Defined at:
  6499 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;		None
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;		None
  6504 ;; Return value:  Size  Location     Type
  6505 ;;                  1    wreg      void 
  6506 ;; Registers used:
  6507 ;;		None
  6508 ;; Tracked objects:
  6509 ;;		On entry : 0/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6513 ;;      Params:         0       0       0       0       0       0       0
  6514 ;;      Locals:         0       0       0       0       0       0       0
  6515 ;;      Temps:          0       0       0       0       0       0       0
  6516 ;;      Totals:         0       0       0       0       0       0       0
  6517 ;;Total ram usage:        0 bytes
  6518 ;; Hardware stack levels used:    1
  6519 ;; Hardware stack levels required when called:    5
  6520 ;; This function calls:
  6521 ;;		Nothing
  6522 ;; This function is called by:
  6523 ;;		_do_I2C_SEND_RESTART_READ
  6524 ;;		_do_I2C_SEND_RESTART_WRITE
  6525 ;;		_do_I2C_SEND_RESTART
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           	psect	text58
  6530  0013A4                     __ptext58:
  6531                           	opt stack 0
  6532  0013A4                     _i2c1_driver_restart:
  6533                           	opt stack 18
  6534                           
  6535                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  6536                           
  6537                           ;incstack = 0
  6538  0013A4  82C5               	bsf	4037,1,c	;volatile
  6539  0013A6  0012               	return		;funcret
  6540  0013A8                     __end_of_i2c1_driver_restart:
  6541                           	opt stack 0
  6542                           tosu	equ	0xFFF
  6543                           tosh	equ	0xFFE
  6544                           tosl	equ	0xFFD
  6545                           pclath	equ	0xFFA
  6546                           tblptru	equ	0xFF8
  6547                           tblptrh	equ	0xFF7
  6548                           tblptrl	equ	0xFF6
  6549                           tablat	equ	0xFF5
  6550                           prodh	equ	0xFF4
  6551                           prodl	equ	0xFF3
  6552                           intcon	equ	0xFF2
  6553                           intcon2	equ	0xFF1
  6554                           postinc0	equ	0xFEE
  6555                           plusw0	equ	0xFEB
  6556                           wreg	equ	0xFE8
  6557                           postdec1	equ	0xFE5
  6558                           plusw1	equ	0xFE3
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           plusw2	equ	0xFDB
  6564                           fsr2h	equ	0xFDA
  6565                           fsr2l	equ	0xFD9
  6566                           status	equ	0xFD8
  6567                           
  6568 ;; *************** function _i2c1_driver_sendACK *****************
  6569 ;; Defined at:
  6570 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;		None
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;		None
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      void 
  6577 ;; Registers used:
  6578 ;;		None
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6584 ;;      Params:         0       0       0       0       0       0       0
  6585 ;;      Locals:         0       0       0       0       0       0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0
  6587 ;;      Totals:         0       0       0       0       0       0       0
  6588 ;;Total ram usage:        0 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    5
  6591 ;; This function calls:
  6592 ;;		Nothing
  6593 ;; This function is called by:
  6594 ;;		_do_I2C_DO_ACK
  6595 ;;		_do_I2C_RX
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text59
  6600  001378                     __ptext59:
  6601                           	opt stack 0
  6602  001378                     _i2c1_driver_sendACK:
  6603                           	opt stack 19
  6604                           
  6605                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  6606                           
  6607                           ;incstack = 0
  6608  001378  9AC5               	bcf	4037,5,c	;volatile
  6609                           
  6610                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  6611  00137A  88C5               	bsf	4037,4,c	;volatile
  6612  00137C  0012               	return		;funcret
  6613  00137E                     __end_of_i2c1_driver_sendACK:
  6614                           	opt stack 0
  6615                           tosu	equ	0xFFF
  6616                           tosh	equ	0xFFE
  6617                           tosl	equ	0xFFD
  6618                           pclath	equ	0xFFA
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           intcon	equ	0xFF2
  6626                           intcon2	equ	0xFF1
  6627                           postinc0	equ	0xFEE
  6628                           plusw0	equ	0xFEB
  6629                           wreg	equ	0xFE8
  6630                           postdec1	equ	0xFE5
  6631                           plusw1	equ	0xFE3
  6632                           fsr1l	equ	0xFE1
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           plusw2	equ	0xFDB
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8
  6640                           
  6641 ;; *************** function _i2c1_driver_start *****************
  6642 ;; Defined at:
  6643 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		None
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6657 ;;      Params:         0       0       0       0       0       0       0
  6658 ;;      Locals:         0       0       0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0
  6660 ;;      Totals:         0       0       0       0       0       0       0
  6661 ;;Total ram usage:        0 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    5
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_i2c_masterOperation
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text60
  6672  0013A8                     __ptext60:
  6673                           	opt stack 0
  6674  0013A8                     _i2c1_driver_start:
  6675                           	opt stack 22
  6676                           
  6677                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  6678                           
  6679                           ;incstack = 0
  6680  0013A8  80C5               	bsf	4037,0,c	;volatile
  6681  0013AA  0012               	return		;funcret
  6682  0013AC                     __end_of_i2c1_driver_start:
  6683                           	opt stack 0
  6684                           tosu	equ	0xFFF
  6685                           tosh	equ	0xFFE
  6686                           tosl	equ	0xFFD
  6687                           pclath	equ	0xFFA
  6688                           tblptru	equ	0xFF8
  6689                           tblptrh	equ	0xFF7
  6690                           tblptrl	equ	0xFF6
  6691                           tablat	equ	0xFF5
  6692                           prodh	equ	0xFF4
  6693                           prodl	equ	0xFF3
  6694                           intcon	equ	0xFF2
  6695                           intcon2	equ	0xFF1
  6696                           postinc0	equ	0xFEE
  6697                           plusw0	equ	0xFEB
  6698                           wreg	equ	0xFE8
  6699                           postdec1	equ	0xFE5
  6700                           plusw1	equ	0xFE3
  6701                           fsr1l	equ	0xFE1
  6702                           indf2	equ	0xFDF
  6703                           postinc2	equ	0xFDE
  6704                           postdec2	equ	0xFDD
  6705                           plusw2	equ	0xFDB
  6706                           fsr2h	equ	0xFDA
  6707                           fsr2l	equ	0xFD9
  6708                           status	equ	0xFD8
  6709                           
  6710 ;; *************** function _i2c_close *****************
  6711 ;; Defined at:
  6712 ;;		line 170 in file "mcc_generated_files/drivers/i2c_master.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;		None
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  ret             1   20[COMRAM] enum E6837
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  1    wreg      enum E6837
  6719 ;; Registers used:
  6720 ;;		wreg, status,2, cstack
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6726 ;;      Params:         0       0       0       0       0       0       0
  6727 ;;      Locals:         1       0       0       0       0       0       0
  6728 ;;      Temps:          0       0       0       0       0       0       0
  6729 ;;      Totals:         1       0       0       0       0       0       0
  6730 ;;Total ram usage:        1 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    6
  6733 ;; This function calls:
  6734 ;;		_mssp1_clearIRQ
  6735 ;;		_mssp1_disableIRQ
  6736 ;; This function is called by:
  6737 ;;		_write_register
  6738 ;;		_read_register
  6739 ;;		_read_xyzvalues
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text61
  6744  0010A0                     __ptext61:
  6745                           	opt stack 0
  6746  0010A0                     _i2c_close:
  6747                           	opt stack 23
  6748                           
  6749                           ;i2c_master.c: 172: i2c_error_t ret = I2C_BUSY;
  6750                           
  6751                           ;incstack = 0
  6752  0010A0  0E01               	movlw	1
  6753  0010A2  6E3A               	movwf	i2c_close@ret,c
  6754                           
  6755                           ;i2c_master.c: 173: if(!i2c_status.busy)
  6756  0010A4  0100               	movlb	0	; () banked
  6757  0010A6  B19A               	btfsc	_i2c_status& (0+255),0,b
  6758  0010A8  D008               	goto	l83
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;i2c_master.c: 174: {
  6762                           ;i2c_master.c: 175: i2c_status.inUse = 0;
  6763  0010AA  939A               	bcf	_i2c_status& (0+255),1,b
  6764                           
  6765                           ;i2c_master.c: 177: i2c_status.address = 0xff;
  6766  0010AC  699B               	setf	(_i2c_status+1)& (0+255),b
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;i2c_master.c: 178: mssp1_clearIRQ();
  6770  0010AE  ECD8  F009         	call	_mssp1_clearIRQ	;wreg free
  6771                           
  6772                           ;i2c_master.c: 179: mssp1_disableIRQ();
  6773  0010B2  ECD6  F009         	call	_mssp1_disableIRQ	;wreg free
  6774                           
  6775                           ;i2c_master.c: 180: ret = i2c_status.error;
  6776  0010B6  C0A5  F03A         	movff	_i2c_status+11,i2c_close@ret
  6777  0010BA                     l83:
  6778                           
  6779                           ;i2c_master.c: 181: }
  6780                           ;i2c_master.c: 182: return ret;
  6781  0010BA  503A               	movf	i2c_close@ret,w,c
  6782  0010BC  0012               	return	
  6783  0010BE                     __end_of_i2c_close:
  6784                           	opt stack 0
  6785                           tosu	equ	0xFFF
  6786                           tosh	equ	0xFFE
  6787                           tosl	equ	0xFFD
  6788                           pclath	equ	0xFFA
  6789                           tblptru	equ	0xFF8
  6790                           tblptrh	equ	0xFF7
  6791                           tblptrl	equ	0xFF6
  6792                           tablat	equ	0xFF5
  6793                           prodh	equ	0xFF4
  6794                           prodl	equ	0xFF3
  6795                           intcon	equ	0xFF2
  6796                           intcon2	equ	0xFF1
  6797                           postinc0	equ	0xFEE
  6798                           plusw0	equ	0xFEB
  6799                           wreg	equ	0xFE8
  6800                           postdec1	equ	0xFE5
  6801                           plusw1	equ	0xFE3
  6802                           fsr1l	equ	0xFE1
  6803                           indf2	equ	0xFDF
  6804                           postinc2	equ	0xFDE
  6805                           postdec2	equ	0xFDD
  6806                           plusw2	equ	0xFDB
  6807                           fsr2h	equ	0xFDA
  6808                           fsr2l	equ	0xFD9
  6809                           status	equ	0xFD8
  6810                           
  6811 ;; *************** function _mssp1_disableIRQ *****************
  6812 ;; Defined at:
  6813 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;		None
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;		None
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      void 
  6820 ;; Registers used:
  6821 ;;		None
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6827 ;;      Params:         0       0       0       0       0       0       0
  6828 ;;      Locals:         0       0       0       0       0       0       0
  6829 ;;      Temps:          0       0       0       0       0       0       0
  6830 ;;      Totals:         0       0       0       0       0       0       0
  6831 ;;Total ram usage:        0 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    5
  6834 ;; This function calls:
  6835 ;;		Nothing
  6836 ;; This function is called by:
  6837 ;;		_i2c_close
  6838 ;;		_i2c_setTimeOut
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text62
  6843  0013AC                     __ptext62:
  6844                           	opt stack 0
  6845  0013AC                     _mssp1_disableIRQ:
  6846                           	opt stack 23
  6847                           
  6848                           ;i2c1_driver.c: 50: PIE1bits.SSP1IE = 0;
  6849                           
  6850                           ;incstack = 0
  6851  0013AC  969D               	bcf	3997,3,c	;volatile
  6852  0013AE  0012               	return		;funcret
  6853  0013B0                     __end_of_mssp1_disableIRQ:
  6854                           	opt stack 0
  6855                           tosu	equ	0xFFF
  6856                           tosh	equ	0xFFE
  6857                           tosl	equ	0xFFD
  6858                           pclath	equ	0xFFA
  6859                           tblptru	equ	0xFF8
  6860                           tblptrh	equ	0xFF7
  6861                           tblptrl	equ	0xFF6
  6862                           tablat	equ	0xFF5
  6863                           prodh	equ	0xFF4
  6864                           prodl	equ	0xFF3
  6865                           intcon	equ	0xFF2
  6866                           intcon2	equ	0xFF1
  6867                           postinc0	equ	0xFEE
  6868                           plusw0	equ	0xFEB
  6869                           wreg	equ	0xFE8
  6870                           postdec1	equ	0xFE5
  6871                           plusw1	equ	0xFE3
  6872                           fsr1l	equ	0xFE1
  6873                           indf2	equ	0xFDF
  6874                           postinc2	equ	0xFDE
  6875                           postdec2	equ	0xFDD
  6876                           plusw2	equ	0xFDB
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           
  6881 ;; *************** function _mssp1_clearIRQ *****************
  6882 ;; Defined at:
  6883 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;		None
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;		None
  6888 ;; Return value:  Size  Location     Type
  6889 ;;                  1    wreg      void 
  6890 ;; Registers used:
  6891 ;;		None
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6897 ;;      Params:         0       0       0       0       0       0       0
  6898 ;;      Locals:         0       0       0       0       0       0       0
  6899 ;;      Temps:          0       0       0       0       0       0       0
  6900 ;;      Totals:         0       0       0       0       0       0       0
  6901 ;;Total ram usage:        0 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    5
  6904 ;; This function calls:
  6905 ;;		Nothing
  6906 ;; This function is called by:
  6907 ;;		_i2c_open
  6908 ;;		_i2c_close
  6909 ;;		_i2c_ISR
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           	psect	text63
  6914  0013B0                     __ptext63:
  6915                           	opt stack 0
  6916  0013B0                     _mssp1_clearIRQ:
  6917                           	opt stack 23
  6918                           
  6919                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6920                           
  6921                           ;incstack = 0
  6922  0013B0  969E               	bcf	3998,3,c	;volatile
  6923  0013B2  0012               	return		;funcret
  6924  0013B4                     __end_of_mssp1_clearIRQ:
  6925                           	opt stack 0
  6926                           tosu	equ	0xFFF
  6927                           tosh	equ	0xFFE
  6928                           tosl	equ	0xFFD
  6929                           pclath	equ	0xFFA
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           intcon	equ	0xFF2
  6937                           intcon2	equ	0xFF1
  6938                           postinc0	equ	0xFEE
  6939                           plusw0	equ	0xFEB
  6940                           wreg	equ	0xFE8
  6941                           postdec1	equ	0xFE5
  6942                           plusw1	equ	0xFE3
  6943                           fsr1l	equ	0xFE1
  6944                           indf2	equ	0xFDF
  6945                           postinc2	equ	0xFDE
  6946                           postdec2	equ	0xFDD
  6947                           plusw2	equ	0xFDB
  6948                           fsr2h	equ	0xFDA
  6949                           fsr2l	equ	0xFD9
  6950                           status	equ	0xFD8
  6951                           
  6952 ;; *************** function _INTERRUPT_InterruptManager *****************
  6953 ;; Defined at:
  6954 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;		None
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;		None
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      void 
  6961 ;; Registers used:
  6962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6968 ;;      Params:         0       0       0       0       0       0       0
  6969 ;;      Locals:         0       0       0       0       0       0       0
  6970 ;;      Temps:         18       0       0       0       0       0       0
  6971 ;;      Totals:        18       0       0       0       0       0       0
  6972 ;;Total ram usage:       18 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:    4
  6975 ;; This function calls:
  6976 ;;		Absolute function
  6977 ;;		_EUSART1_Receive_ISR
  6978 ;;		_EUSART1_Transmit_ISR
  6979 ;;		_i2c_busCollisionISR
  6980 ;;		i2_i2c_ISR
  6981 ;; This function is called by:
  6982 ;;		Interrupt level 2
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985                           
  6986                           	psect	intcode
  6987  000008                     __pintcode:
  6988                           	opt stack 0
  6989  000008                     _INTERRUPT_InterruptManager:
  6990                           	opt stack 17
  6991                           
  6992                           ;incstack = 0
  6993  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6994  00000A  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
  6995  00000E  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6996  000012  CFE9 F02A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6997  000016  CFEA F02B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6998  00001A  CFE1 F02C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6999  00001E  CFE2 F02D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7000  000022  CFD9 F02E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7001  000026  CFDA F02F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7002  00002A  CFF3 F030          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7003  00002E  CFF4 F031          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7004  000032  CFF6 F032          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7005  000036  CFF7 F033          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7006  00003A  CFF8 F034          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7007  00003E  CFF5 F035          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7008  000042  C04A  F036         	movff	btemp,??_INTERRUPT_InterruptManager+14
  7009  000046  C04B  F037         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  7010  00004A  C04C  F038         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  7011  00004E  C04D  F039         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  7012                           
  7013                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  7014  000052  ACF2               	btfss	intcon,6,c	;volatile
  7015  000054  D032               	goto	i2u211_49
  7016                           
  7017                           ;interrupt_manager.c: 61: {
  7018                           ;interrupt_manager.c: 62: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  7019  000056  B6A0               	btfsc	4000,3,c	;volatile
  7020  000058  A6A1               	btfss	4001,3,c	;volatile
  7021  00005A  D008               	goto	i2l567
  7022                           
  7023                           ;interrupt_manager.c: 63: {
  7024                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  7025  00005C  D801               	call	i2u202_48
  7026  00005E  D02D               	goto	i2u211_49
  7027  000060                     i2u202_48:
  7028  000060  0005               	push	
  7029  000062  6EFA               	movwf	pclath,c
  7030  000064  5013               	movf	_i2c1_driver_busCollisionISR,w,c
  7031  000066  6EFD               	movwf	tosl,c
  7032  000068  5014               	movf	_i2c1_driver_busCollisionISR+1,w,c
  7033  00006A  D022               	goto	L6
  7034  00006C                     i2l567:
  7035                           
  7036                           ;interrupt_manager.c: 66: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  7037  00006C  B69D               	btfsc	3997,3,c	;volatile
  7038  00006E  A69E               	btfss	3998,3,c	;volatile
  7039  000070  D008               	goto	i2l569
  7040                           
  7041                           ;interrupt_manager.c: 67: {
  7042                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  7043  000072  D801               	call	i2u205_48
  7044  000074  D022               	goto	i2u211_49
  7045  000076                     i2u205_48:
  7046  000076  0005               	push	
  7047  000078  6EFA               	movwf	pclath,c
  7048  00007A  5011               	movf	_i2c1_driver_i2cISR,w,c
  7049  00007C  6EFD               	movwf	tosl,c
  7050  00007E  5012               	movf	_i2c1_driver_i2cISR+1,w,c
  7051  000080  D017               	goto	L6
  7052  000082                     i2l569:
  7053                           
  7054                           ;interrupt_manager.c: 70: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7055  000082  B89D               	btfsc	3997,4,c	;volatile
  7056  000084  A89E               	btfss	3998,4,c	;volatile
  7057  000086  D009               	goto	i2l571
  7058                           
  7059                           ;interrupt_manager.c: 71: {
  7060                           ;interrupt_manager.c: 72: EUSART1_TxDefaultInterruptHandler();
  7061  000088  D801               	call	i2u208_48
  7062  00008A  D017               	goto	i2u211_49
  7063  00008C                     i2u208_48:
  7064  00008C  0005               	push	
  7065  00008E  0100               	movlb	0	; () banked
  7066  000090  6EFA               	movwf	pclath,c
  7067  000092  51E5               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
  7068  000094  6EFD               	movwf	tosl,c
  7069  000096  51E6               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
  7070  000098  D00B               	goto	L6
  7071  00009A                     i2l571:
  7072                           
  7073                           ;interrupt_manager.c: 74: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7074  00009A  BA9D               	btfsc	3997,5,c	;volatile
  7075  00009C  AA9E               	btfss	3998,5,c	;volatile
  7076  00009E  D00D               	goto	i2u211_49
  7077                           
  7078                           ;interrupt_manager.c: 75: {
  7079                           ;interrupt_manager.c: 76: EUSART1_RxDefaultInterruptHandler();
  7080  0000A0  D801               	call	i2u211_48
  7081  0000A2  D00B               	goto	i2u211_49
  7082  0000A4                     i2u211_48:
  7083  0000A4  0005               	push	
  7084  0000A6  0100               	movlb	0	; () banked
  7085  0000A8  6EFA               	movwf	pclath,c
  7086  0000AA  51E3               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
  7087  0000AC  6EFD               	movwf	tosl,c
  7088  0000AE  51E4               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
  7089  0000B0                     L6:
  7090  0000B0  6EFE               	movwf	tosh,c
  7091  0000B2  50F8               	movf	tblptru,w,c
  7092  0000B4  6EFF               	movwf	tosu,c
  7093  0000B6  50FA               	movf	pclath,w,c
  7094  0000B8  0012               	return		;indir
  7095  0000BA                     i2u211_49:
  7096                           
  7097                           ;interrupt_manager.c: 83: else
  7098                           ;interrupt_manager.c: 84: {
  7099                           
  7100                           ;interrupt_manager.c: 81: }
  7101                           ;interrupt_manager.c: 82: }
  7102                           
  7103                           ;interrupt_manager.c: 78: else
  7104                           ;interrupt_manager.c: 79: {
  7105                           
  7106                           ;interrupt_manager.c: 77: }
  7107  0000BA  C039  F04D         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  7108  0000BE  C038  F04C         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  7109  0000C2  C037  F04B         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  7110  0000C6  C036  F04A         	movff	??_INTERRUPT_InterruptManager+14,btemp
  7111  0000CA  C035  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7112  0000CE  C034  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7113  0000D2  C033  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7114  0000D6  C032  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7115  0000DA  C031  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7116  0000DE  C030  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7117  0000E2  C02F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7118  0000E6  C02E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7119  0000EA  C02D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7120  0000EE  C02C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7121  0000F2  C02B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7122  0000F6  C02A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7123  0000FA  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7124  0000FE  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7125  000102  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7126  000104  0011               	retfie		f
  7127  000106                     __end_of_INTERRUPT_InterruptManager:
  7128                           	opt stack 0
  7129                           tosu	equ	0xFFF
  7130                           tosh	equ	0xFFE
  7131                           tosl	equ	0xFFD
  7132                           pclatu	equ	0xFFB
  7133                           pclath	equ	0xFFA
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           intcon	equ	0xFF2
  7141                           intcon2	equ	0xFF1
  7142                           postinc0	equ	0xFEE
  7143                           plusw0	equ	0xFEB
  7144                           fsr0h	equ	0xFEA
  7145                           fsr0l	equ	0xFE9
  7146                           wreg	equ	0xFE8
  7147                           postdec1	equ	0xFE5
  7148                           plusw1	equ	0xFE3
  7149                           fsr1h	equ	0xFE2
  7150                           fsr1l	equ	0xFE1
  7151                           indf2	equ	0xFDF
  7152                           postinc2	equ	0xFDE
  7153                           postdec2	equ	0xFDD
  7154                           plusw2	equ	0xFDB
  7155                           fsr2h	equ	0xFDA
  7156                           fsr2l	equ	0xFD9
  7157                           status	equ	0xFD8
  7158                           
  7159 ;; *************** function i2_i2c_ISR *****************
  7160 ;; Defined at:
  7161 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;		None
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;		None
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      void 
  7168 ;; Registers used:
  7169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7175 ;;      Params:         0       0       0       0       0       0       0
  7176 ;;      Locals:         0       0       0       0       0       0       0
  7177 ;;      Temps:          0       0       0       0       0       0       0
  7178 ;;      Totals:         0       0       0       0       0       0       0
  7179 ;;Total ram usage:        0 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:    3
  7182 ;; This function calls:
  7183 ;;		i2_do_I2C_DO_ACK
  7184 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7185 ;;		i2_do_I2C_DO_NACK_RESTART
  7186 ;;		i2_do_I2C_DO_NACK_STOP
  7187 ;;		i2_do_I2C_IDLE
  7188 ;;		i2_do_I2C_RCEN
  7189 ;;		i2_do_I2C_RESET
  7190 ;;		i2_do_I2C_RX
  7191 ;;		i2_do_I2C_SEND_ADR_READ
  7192 ;;		i2_do_I2C_SEND_ADR_WRITE
  7193 ;;		i2_do_I2C_SEND_INITIAL_READ
  7194 ;;		i2_do_I2C_SEND_RESTART
  7195 ;;		i2_do_I2C_SEND_RESTART_READ
  7196 ;;		i2_do_I2C_SEND_RESTART_WRITE
  7197 ;;		i2_do_I2C_SEND_STOP
  7198 ;;		i2_do_I2C_TX
  7199 ;;		i2_do_I2C_TX_EMPTY
  7200 ;;		i2_do_I2C_TX_REGISTER
  7201 ;;		i2_i2c1_driver_isNACK
  7202 ;;		i2_mssp1_clearIRQ
  7203 ;; This function is called by:
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text65
  7208  000E5A                     __ptext65:
  7209                           	opt stack 0
  7210  000E5A                     i2_i2c_ISR:
  7211                           	opt stack 17
  7212                           
  7213                           ;i2c_master.c: 486: mssp1_clearIRQ();
  7214                           
  7215                           ;incstack = 0
  7216  000E5A  ECDA  F009         	call	i2_mssp1_clearIRQ	;wreg free
  7217                           
  7218                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  7219  000E5E  0100               	movlb	0	; () banked
  7220  000E60  A79A               	btfss	_i2c_status& (0+255),3,b
  7221  000E62  D007               	goto	i2l209
  7222                           
  7223                           ; BSR set to: 0
  7224  000E64  ECBB  F008         	call	i2_i2c1_driver_isNACK	;wreg free
  7225  000E68  A0D8               	btfss	status,0,c
  7226  000E6A  D003               	goto	i2l209
  7227                           
  7228                           ;i2c_master.c: 493: {
  7229                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  7230  000E6C  0E0F               	movlw	15
  7231  000E6E  0100               	movlb	0	; () banked
  7232  000E70  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  7233  000E72                     i2l209:
  7234                           
  7235                           ;i2c_master.c: 495: }
  7236                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  7237                           
  7238                           ; BSR set to: 0
  7239  000E72  0100               	movlb	0	; () banked
  7240  000E74  51A4               	movf	(_i2c_status+10)& (0+255),w,b
  7241  000E76  0D02               	mullw	2
  7242  000E78  0EBF               	movlw	low _fsmStateTable
  7243  000E7A  24F3               	addwf	prodl,w,c
  7244  000E7C  6ED9               	movwf	fsr2l,c
  7245  000E7E  0E00               	movlw	high _fsmStateTable
  7246  000E80  20F4               	addwfc	prodh,w,c
  7247  000E82  6EDA               	movwf	fsr2h,c
  7248  000E84  D801               	call	i2u197_48
  7249  000E86  D00A               	goto	i2u197_49
  7250  000E88                     i2u197_48:
  7251  000E88  0005               	push	
  7252  000E8A  6EFA               	movwf	pclath,c
  7253  000E8C  50DE               	movf	postinc2,w,c
  7254  000E8E  6EFD               	movwf	tosl,c
  7255  000E90  50DE               	movf	postinc2,w,c
  7256  000E92  6EFE               	movwf	tosh,c
  7257  000E94  50F8               	movf	tblptru,w,c
  7258  000E96  6EFF               	movwf	tosu,c
  7259  000E98  50FA               	movf	pclath,w,c
  7260  000E9A  0012               	return		;indir
  7261  000E9C                     i2u197_49:
  7262  000E9C  0100               	movlb	0	; () banked
  7263  000E9E  6FA4               	movwf	(_i2c_status+10)& (0+255),b
  7264                           
  7265                           ; BSR set to: 0
  7266  000EA0  0012               	return		;funcret
  7267  000EA2                     __end_ofi2_i2c_ISR:
  7268                           	opt stack 0
  7269                           tosu	equ	0xFFF
  7270                           tosh	equ	0xFFE
  7271                           tosl	equ	0xFFD
  7272                           pclatu	equ	0xFFB
  7273                           pclath	equ	0xFFA
  7274                           tblptru	equ	0xFF8
  7275                           tblptrh	equ	0xFF7
  7276                           tblptrl	equ	0xFF6
  7277                           tablat	equ	0xFF5
  7278                           prodh	equ	0xFF4
  7279                           prodl	equ	0xFF3
  7280                           intcon	equ	0xFF2
  7281                           intcon2	equ	0xFF1
  7282                           postinc0	equ	0xFEE
  7283                           plusw0	equ	0xFEB
  7284                           fsr0h	equ	0xFEA
  7285                           fsr0l	equ	0xFE9
  7286                           wreg	equ	0xFE8
  7287                           postdec1	equ	0xFE5
  7288                           plusw1	equ	0xFE3
  7289                           fsr1h	equ	0xFE2
  7290                           fsr1l	equ	0xFE1
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           postdec2	equ	0xFDD
  7294                           plusw2	equ	0xFDB
  7295                           fsr2h	equ	0xFDA
  7296                           fsr2l	equ	0xFD9
  7297                           status	equ	0xFD8
  7298                           
  7299 ;; *************** function i2_mssp1_clearIRQ *****************
  7300 ;; Defined at:
  7301 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;		None
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;		None
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  1    wreg      void 
  7308 ;; Registers used:
  7309 ;;		None
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7315 ;;      Params:         0       0       0       0       0       0       0
  7316 ;;      Locals:         0       0       0       0       0       0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0
  7318 ;;      Totals:         0       0       0       0       0       0       0
  7319 ;;Total ram usage:        0 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; This function calls:
  7322 ;;		Nothing
  7323 ;; This function is called by:
  7324 ;;		i2_i2c_ISR
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           	psect	text66
  7329  0013B4                     __ptext66:
  7330                           	opt stack 0
  7331  0013B4                     i2_mssp1_clearIRQ:
  7332                           	opt stack 19
  7333                           
  7334                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;incstack = 0
  7338  0013B4  969E               	bcf	3998,3,c	;volatile
  7339  0013B6  0012               	return		;funcret
  7340  0013B8                     __end_ofi2_mssp1_clearIRQ:
  7341                           	opt stack 0
  7342                           tosu	equ	0xFFF
  7343                           tosh	equ	0xFFE
  7344                           tosl	equ	0xFFD
  7345                           pclatu	equ	0xFFB
  7346                           pclath	equ	0xFFA
  7347                           tblptru	equ	0xFF8
  7348                           tblptrh	equ	0xFF7
  7349                           tblptrl	equ	0xFF6
  7350                           tablat	equ	0xFF5
  7351                           prodh	equ	0xFF4
  7352                           prodl	equ	0xFF3
  7353                           intcon	equ	0xFF2
  7354                           intcon2	equ	0xFF1
  7355                           postinc0	equ	0xFEE
  7356                           plusw0	equ	0xFEB
  7357                           fsr0h	equ	0xFEA
  7358                           fsr0l	equ	0xFE9
  7359                           wreg	equ	0xFE8
  7360                           postdec1	equ	0xFE5
  7361                           plusw1	equ	0xFE3
  7362                           fsr1h	equ	0xFE2
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           postdec2	equ	0xFDD
  7367                           plusw2	equ	0xFDB
  7368                           fsr2h	equ	0xFDA
  7369                           fsr2l	equ	0xFD9
  7370                           status	equ	0xFD8
  7371                           
  7372 ;; *************** function i2_do_I2C_TX_EMPTY *****************
  7373 ;; Defined at:
  7374 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;		None
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;		None
  7379 ;; Return value:  Size  Location     Type
  7380 ;;                  1    wreg      enum E7019
  7381 ;; Registers used:
  7382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7383 ;; Tracked objects:
  7384 ;;		On entry : 0/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7388 ;;      Params:         0       0       0       0       0       0       0
  7389 ;;      Locals:         0       0       0       0       0       0       0
  7390 ;;      Temps:          0       0       0       0       0       0       0
  7391 ;;      Totals:         0       0       0       0       0       0       0
  7392 ;;Total ram usage:        0 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; Hardware stack levels required when called:    2
  7395 ;; This function calls:
  7396 ;;		i2_do_I2C_SEND_RESTART
  7397 ;;		i2_do_I2C_SEND_STOP
  7398 ;;		i2_mssp1_setIRQ
  7399 ;;		i2_returnReset
  7400 ;;		i2_returnStop
  7401 ;; This function is called by:
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           	psect	text67
  7406  000C80                     __ptext67:
  7407                           	opt stack 0
  7408  000C80                     i2_do_I2C_TX_EMPTY:
  7409                           	opt stack 17
  7410                           
  7411                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  7412                           
  7413                           ;incstack = 0
  7414  000C80  0100               	movlb	0	; () banked
  7415  000C82  859A               	bsf	_i2c_status& (0+255),2,b
  7416                           
  7417                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7418  000C84  D00A               	goto	i2l197
  7419  000C86                     
  7420                           ;i2c_master.c: 448: case i2c_restart_write:
  7421                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  7422                           
  7423                           ; BSR set to: 0
  7424                           
  7425                           ; BSR set to: 0
  7426  000C86  ECA9  F009         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7427  000C8A  0012               	return	
  7428  000C8C                     
  7429                           ;i2c_master.c: 451: mssp1_setIRQ();
  7430  000C8C  ECDC  F009         	call	i2_mssp1_setIRQ	;wreg free
  7431                           
  7432                           ;i2c_master.c: 452: return I2C_TX;
  7433  000C90  0E03               	movlw	3
  7434  000C92  0012               	return	
  7435  000C94                     
  7436                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  7437                           
  7438                           ;i2c_master.c: 454: case i2c_stop:
  7439  000C94  ECA5  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
  7440                           
  7441                           ;i2c_master.c: 456: }
  7442  000C98  0012               	return	
  7443  000C9A                     i2l197:
  7444  000C9A  C0B2  F026         	movff	_i2c_status+24,i2returnReset@p
  7445  000C9E  C0B3  F027         	movff	_i2c_status+25,i2returnReset@p+1
  7446  000CA2  EE20  F0A6         	lfsr	2,_i2c_status+12
  7447  000CA6  D801               	call	i2u181_48
  7448  000CA8  D00A               	goto	i2u181_49
  7449  000CAA                     i2u181_48:
  7450  000CAA  0005               	push	
  7451  000CAC  6EFA               	movwf	pclath,c
  7452  000CAE  50DE               	movf	postinc2,w,c
  7453  000CB0  6EFD               	movwf	tosl,c
  7454  000CB2  50DE               	movf	postinc2,w,c
  7455  000CB4  6EFE               	movwf	tosh,c
  7456  000CB6  50F8               	movf	tblptru,w,c
  7457  000CB8  6EFF               	movwf	tosu,c
  7458  000CBA  50FA               	movf	pclath,w,c
  7459  000CBC  0012               	return		;indir
  7460  000CBE                     i2u181_49:
  7461                           
  7462                           ; Switch size 1, requested type "space"
  7463                           ; Number of cases is 4, Range of values is 1 to 4
  7464                           ; switch strategies available:
  7465                           ; Name         Instructions Cycles
  7466                           ; simple_byte           13     7 (average)
  7467                           ;	Chosen strategy is simple_byte
  7468  000CBE  0A01               	xorlw	1	; case 1
  7469  000CC0  B4D8               	btfsc	status,2,c
  7470  000CC2  D7E8               	goto	i2l202
  7471  000CC4  0A03               	xorlw	3	; case 2
  7472  000CC6  B4D8               	btfsc	status,2,c
  7473  000CC8  D7DE               	goto	i2l198
  7474  000CCA  0A01               	xorlw	1	; case 3
  7475  000CCC  B4D8               	btfsc	status,2,c
  7476  000CCE  D7DB               	goto	i2l198
  7477  000CD0  0A07               	xorlw	7	; case 4
  7478  000CD2  B4D8               	btfsc	status,2,c
  7479  000CD4  D7DB               	goto	i2l201
  7480  000CD6  D7DE               	goto	i2l202
  7481  000CD8                     __end_ofi2_do_I2C_TX_EMPTY:
  7482                           	opt stack 0
  7483                           tosu	equ	0xFFF
  7484                           tosh	equ	0xFFE
  7485                           tosl	equ	0xFFD
  7486                           pclatu	equ	0xFFB
  7487                           pclath	equ	0xFFA
  7488                           tblptru	equ	0xFF8
  7489                           tblptrh	equ	0xFF7
  7490                           tblptrl	equ	0xFF6
  7491                           tablat	equ	0xFF5
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           intcon	equ	0xFF2
  7495                           intcon2	equ	0xFF1
  7496                           postinc0	equ	0xFEE
  7497                           plusw0	equ	0xFEB
  7498                           fsr0h	equ	0xFEA
  7499                           fsr0l	equ	0xFE9
  7500                           wreg	equ	0xFE8
  7501                           postdec1	equ	0xFE5
  7502                           plusw1	equ	0xFE3
  7503                           fsr1h	equ	0xFE2
  7504                           fsr1l	equ	0xFE1
  7505                           indf2	equ	0xFDF
  7506                           postinc2	equ	0xFDE
  7507                           postdec2	equ	0xFDD
  7508                           plusw2	equ	0xFDB
  7509                           fsr2h	equ	0xFDA
  7510                           fsr2l	equ	0xFD9
  7511                           status	equ	0xFD8
  7512                           
  7513 ;; *************** function i2_do_I2C_RX *****************
  7514 ;; Defined at:
  7515 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;		None
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;		None
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      enum E7019
  7522 ;; Registers used:
  7523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7529 ;;      Params:         0       0       0       0       0       0       0
  7530 ;;      Locals:         0       0       0       0       0       0       0
  7531 ;;      Temps:          0       0       0       0       0       0       0
  7532 ;;      Totals:         0       0       0       0       0       0       0
  7533 ;;Total ram usage:        0 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    2
  7536 ;; This function calls:
  7537 ;;		i2_do_I2C_DO_NACK_RESTART
  7538 ;;		i2_do_I2C_DO_NACK_STOP
  7539 ;;		i2_i2c1_driver_getRXData
  7540 ;;		i2_i2c1_driver_sendACK
  7541 ;;		i2_returnReset
  7542 ;;		i2_returnStop
  7543 ;; This function is called by:
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           	psect	text68
  7548  000A0C                     __ptext68:
  7549                           	opt stack 0
  7550  000A0C                     i2_do_I2C_RX:
  7551                           	opt stack 17
  7552                           
  7553                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  7554                           
  7555                           ;incstack = 0
  7556  000A0C  ECDE  F009         	call	i2_i2c1_driver_getRXData	;wreg free
  7557  000A10  C09C  FFD9         	movff	_i2c_status+2,fsr2l
  7558  000A14  C09D  FFDA         	movff	_i2c_status+3,fsr2h
  7559  000A18  6EDF               	movwf	indf2,c
  7560  000A1A  0100               	movlb	0	; () banked
  7561  000A1C  4B9C               	infsnz	(_i2c_status+2)& (0+255),f,b
  7562  000A1E  2B9D               	incf	(_i2c_status+3)& (0+255),f,b
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  7566  000A20  079E               	decf	(_i2c_status+4)& (0+255),f,b
  7567  000A22  A0D8               	btfss	status,0,c
  7568  000A24  079F               	decf	(_i2c_status+5)& (0+255),f,b
  7569  000A26  519E               	movf	(_i2c_status+4)& (0+255),w,b
  7570  000A28  119F               	iorwf	(_i2c_status+5)& (0+255),w,b
  7571  000A2A  B4D8               	btfsc	status,2,c
  7572  000A2C  D004               	goto	i2l185
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;i2c_master.c: 421: {
  7576                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  7577  000A2E  ECC2  F009         	call	i2_i2c1_driver_sendACK	;wreg free
  7578                           
  7579                           ;i2c_master.c: 423: return I2C_RCEN;
  7580  000A32  0E05               	movlw	5
  7581                           
  7582                           ;i2c_master.c: 424: }
  7583  000A34  0012               	return	
  7584  000A36                     i2l185:
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;i2c_master.c: 425: else
  7588                           ;i2c_master.c: 426: {
  7589                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  7590  000A36  859A               	bsf	_i2c_status& (0+255),2,b
  7591                           
  7592                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7593  000A38  D006               	goto	i2l188
  7594  000A3A                     
  7595                           ;i2c_master.c: 431: case i2c_restart_read:
  7596                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  7597                           
  7598                           ; BSR set to: 0
  7599                           
  7600                           ; BSR set to: 0
  7601  000A3A  EC99  F009         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  7602  000A3E  0012               	return	
  7603  000A40                     
  7604                           ;i2c_master.c: 435: case i2c_stop:
  7605                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  7606                           
  7607                           ;i2c_master.c: 434: case i2c_continue:
  7608  000A40  EC9D  F009         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  7609                           
  7610                           ;i2c_master.c: 437: }
  7611  000A44  0012               	return	
  7612  000A46                     i2l188:
  7613  000A46  C0B2  F026         	movff	_i2c_status+24,i2returnReset@p
  7614  000A4A  C0B3  F027         	movff	_i2c_status+25,i2returnReset@p+1
  7615  000A4E  EE20  F0A6         	lfsr	2,_i2c_status+12
  7616  000A52  D801               	call	i2u180_48
  7617  000A54  D00A               	goto	i2u180_49
  7618  000A56                     i2u180_48:
  7619  000A56  0005               	push	
  7620  000A58  6EFA               	movwf	pclath,c
  7621  000A5A  50DE               	movf	postinc2,w,c
  7622  000A5C  6EFD               	movwf	tosl,c
  7623  000A5E  50DE               	movf	postinc2,w,c
  7624  000A60  6EFE               	movwf	tosh,c
  7625  000A62  50F8               	movf	tblptru,w,c
  7626  000A64  6EFF               	movwf	tosu,c
  7627  000A66  50FA               	movf	pclath,w,c
  7628  000A68  0012               	return		;indir
  7629  000A6A                     i2u180_49:
  7630                           
  7631                           ; Switch size 1, requested type "space"
  7632                           ; Number of cases is 4, Range of values is 1 to 4
  7633                           ; switch strategies available:
  7634                           ; Name         Instructions Cycles
  7635                           ; simple_byte           13     7 (average)
  7636                           ;	Chosen strategy is simple_byte
  7637  000A6A  0A01               	xorlw	1	; case 1
  7638  000A6C  B4D8               	btfsc	status,2,c
  7639  000A6E  D7E8               	goto	i2l191
  7640  000A70  0A03               	xorlw	3	; case 2
  7641  000A72  B4D8               	btfsc	status,2,c
  7642  000A74  D7E2               	goto	i2l189
  7643  000A76  0A01               	xorlw	1	; case 3
  7644  000A78  B4D8               	btfsc	status,2,c
  7645  000A7A  D7DF               	goto	i2l189
  7646  000A7C  0A07               	xorlw	7	; case 4
  7647  000A7E  D7E0               	goto	i2l191
  7648  000A80                     __end_ofi2_do_I2C_RX:
  7649                           	opt stack 0
  7650                           tosu	equ	0xFFF
  7651                           tosh	equ	0xFFE
  7652                           tosl	equ	0xFFD
  7653                           pclatu	equ	0xFFB
  7654                           pclath	equ	0xFFA
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodh	equ	0xFF4
  7660                           prodl	equ	0xFF3
  7661                           intcon	equ	0xFF2
  7662                           intcon2	equ	0xFF1
  7663                           postinc0	equ	0xFEE
  7664                           plusw0	equ	0xFEB
  7665                           fsr0h	equ	0xFEA
  7666                           fsr0l	equ	0xFE9
  7667                           wreg	equ	0xFE8
  7668                           postdec1	equ	0xFE5
  7669                           plusw1	equ	0xFE3
  7670                           fsr1h	equ	0xFE2
  7671                           fsr1l	equ	0xFE1
  7672                           indf2	equ	0xFDF
  7673                           postinc2	equ	0xFDE
  7674                           postdec2	equ	0xFDD
  7675                           plusw2	equ	0xFDB
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function i2_do_I2C_TX *****************
  7681 ;; Defined at:
  7682 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;		None
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;		None
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  1    wreg      enum E7019
  7689 ;; Registers used:
  7690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7696 ;;      Params:         0       0       0       0       0       0       0
  7697 ;;      Locals:         2       0       0       0       0       0       0
  7698 ;;      Temps:          0       0       0       0       0       0       0
  7699 ;;      Totals:         2       0       0       0       0       0       0
  7700 ;;Total ram usage:        2 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    2
  7703 ;; This function calls:
  7704 ;;		i2_do_I2C_SEND_RESTART_READ
  7705 ;;		i2_do_I2C_SEND_RESTART_WRITE
  7706 ;;		i2_do_I2C_SEND_STOP
  7707 ;;		i2_i2c1_driver_TXData
  7708 ;;		i2_i2c1_driver_isNACK
  7709 ;;		i2_returnReset
  7710 ;;		i2_returnStop
  7711 ;; This function is called by:
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text69
  7716  000902                     __ptext69:
  7717                           	opt stack 0
  7718  000902                     i2_do_I2C_TX:
  7719                           	opt stack 17
  7720                           
  7721                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  7722                           
  7723                           ;incstack = 0
  7724  000902  ECBB  F008         	call	i2_i2c1_driver_isNACK	;wreg free
  7725  000906  B0D8               	btfsc	status,0,c
  7726  000908  D00A               	goto	i2l170
  7727  00090A  D026               	goto	i2l169
  7728  00090C                     
  7729                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  7730  00090C  ECB1  F009         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  7731  000910  0012               	return	
  7732  000912                     
  7733                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  7734  000912  ECAD  F009         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  7735  000916  0012               	return	
  7736  000918                     
  7737                           ;i2c_master.c: 405: case i2c_stop:
  7738                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  7739                           
  7740                           ;i2c_master.c: 404: case i2c_continue:
  7741  000918  ECA5  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
  7742                           
  7743                           ;i2c_master.c: 407: }
  7744  00091C  0012               	return	
  7745  00091E                     i2l170:
  7746  00091E  C0B8  F026         	movff	_i2c_status+30,i2returnReset@p
  7747  000922  C0B9  F027         	movff	_i2c_status+31,i2returnReset@p+1
  7748  000926  EE20  F0AC         	lfsr	2,_i2c_status+18
  7749  00092A  D801               	call	i2u177_48
  7750  00092C  D00A               	goto	i2u177_49
  7751  00092E                     i2u177_48:
  7752  00092E  0005               	push	
  7753  000930  6EFA               	movwf	pclath,c
  7754  000932  50DE               	movf	postinc2,w,c
  7755  000934  6EFD               	movwf	tosl,c
  7756  000936  50DE               	movf	postinc2,w,c
  7757  000938  6EFE               	movwf	tosh,c
  7758  00093A  50F8               	movf	tblptru,w,c
  7759  00093C  6EFF               	movwf	tosu,c
  7760  00093E  50FA               	movf	pclath,w,c
  7761  000940  0012               	return		;indir
  7762  000942                     i2u177_49:
  7763                           
  7764                           ; Switch size 1, requested type "space"
  7765                           ; Number of cases is 4, Range of values is 1 to 4
  7766                           ; switch strategies available:
  7767                           ; Name         Instructions Cycles
  7768                           ; simple_byte           13     7 (average)
  7769                           ;	Chosen strategy is simple_byte
  7770  000942  0A01               	xorlw	1	; case 1
  7771  000944  B4D8               	btfsc	status,2,c
  7772  000946  D7E8               	goto	i2l174
  7773  000948  0A03               	xorlw	3	; case 2
  7774  00094A  B4D8               	btfsc	status,2,c
  7775  00094C  D7DF               	goto	i2l171
  7776  00094E  0A01               	xorlw	1	; case 3
  7777  000950  B4D8               	btfsc	status,2,c
  7778  000952  D7DF               	goto	i2l173
  7779  000954  0A07               	xorlw	7	; case 4
  7780  000956  D7E0               	goto	i2l174
  7781  000958                     i2l169:
  7782                           
  7783                           ;i2c_master.c: 409: else
  7784                           ;i2c_master.c: 410: {
  7785                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  7786  000958  0100               	movlb	0	; () banked
  7787  00095A  979A               	bcf	_i2c_status& (0+255),3,b
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  7791  00095C  C09C  FFD9         	movff	_i2c_status+2,fsr2l
  7792  000960  C09D  FFDA         	movff	_i2c_status+3,fsr2h
  7793  000964  4B9C               	infsnz	(_i2c_status+2)& (0+255),f,b
  7794  000966  2B9D               	incf	(_i2c_status+3)& (0+255),f,b
  7795  000968  50DF               	movf	indf2,w,c
  7796  00096A  ECB5  F009         	call	i2_i2c1_driver_TXData
  7797                           
  7798                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7799  00096E  0100               	movlb	0	; () banked
  7800  000970  079E               	decf	(_i2c_status+4)& (0+255),f,b
  7801  000972  A0D8               	btfss	status,0,c
  7802  000974  079F               	decf	(_i2c_status+5)& (0+255),f,b
  7803  000976  519E               	movf	(_i2c_status+4)& (0+255),w,b
  7804  000978  119F               	iorwf	(_i2c_status+5)& (0+255),w,b
  7805  00097A  A4D8               	btfss	status,2,c
  7806  00097C  D004               	goto	i2l180
  7807                           
  7808                           ; BSR set to: 0
  7809  00097E  0E00               	movlw	0
  7810  000980  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7811  000982  0E06               	movlw	6
  7812  000984  D003               	goto	L7
  7813  000986                     i2l180:
  7814                           
  7815                           ; BSR set to: 0
  7816                           
  7817                           ; BSR set to: 0
  7818  000986  0E00               	movlw	0
  7819  000988  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7820  00098A  0E03               	movlw	3
  7821  00098C                     L7:
  7822  00098C  6E26               	movwf	i2_do_I2C_TX$315,c
  7823                           
  7824                           ; BSR set to: 0
  7825  00098E  5026               	movf	i2_do_I2C_TX$315,w,c
  7826                           
  7827                           ; BSR set to: 0
  7828  000990  0012               	return	
  7829  000992                     __end_ofi2_do_I2C_TX:
  7830                           	opt stack 0
  7831                           tosu	equ	0xFFF
  7832                           tosh	equ	0xFFE
  7833                           tosl	equ	0xFFD
  7834                           pclatu	equ	0xFFB
  7835                           pclath	equ	0xFFA
  7836                           tblptru	equ	0xFF8
  7837                           tblptrh	equ	0xFF7
  7838                           tblptrl	equ	0xFF6
  7839                           tablat	equ	0xFF5
  7840                           prodh	equ	0xFF4
  7841                           prodl	equ	0xFF3
  7842                           intcon	equ	0xFF2
  7843                           intcon2	equ	0xFF1
  7844                           postinc0	equ	0xFEE
  7845                           plusw0	equ	0xFEB
  7846                           fsr0h	equ	0xFEA
  7847                           fsr0l	equ	0xFE9
  7848                           wreg	equ	0xFE8
  7849                           postdec1	equ	0xFE5
  7850                           plusw1	equ	0xFE3
  7851                           fsr1h	equ	0xFE2
  7852                           fsr1l	equ	0xFE1
  7853                           indf2	equ	0xFDF
  7854                           postinc2	equ	0xFDE
  7855                           postdec2	equ	0xFDD
  7856                           plusw2	equ	0xFDB
  7857                           fsr2h	equ	0xFDA
  7858                           fsr2l	equ	0xFD9
  7859                           status	equ	0xFD8
  7860                           
  7861 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  7862 ;; Defined at:
  7863 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;		None
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      enum E7019
  7870 ;; Registers used:
  7871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7877 ;;      Params:         0       0       0       0       0       0       0
  7878 ;;      Locals:         0       0       0       0       0       0       0
  7879 ;;      Temps:          0       0       0       0       0       0       0
  7880 ;;      Totals:         0       0       0       0       0       0       0
  7881 ;;Total ram usage:        0 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    2
  7884 ;; This function calls:
  7885 ;;		i2_do_I2C_SEND_RESTART
  7886 ;;		i2_do_I2C_SEND_STOP
  7887 ;;		i2_returnReset
  7888 ;;		i2_returnStop
  7889 ;; This function is called by:
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text70
  7894  000EA2                     __ptext70:
  7895                           	opt stack 0
  7896  000EA2                     i2_do_I2C_DO_ADDRESS_NACK:
  7897                           	opt stack 17
  7898                           
  7899                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  7900                           
  7901                           ;incstack = 0
  7902  000EA2  0100               	movlb	0	; () banked
  7903  000EA4  979A               	bcf	_i2c_status& (0+255),3,b
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  7907  000EA6  0E02               	movlw	2
  7908  000EA8  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  7909                           
  7910                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7911  000EAA  D006               	goto	i2l161
  7912  000EAC                     
  7913                           ;i2c_master.c: 386: case i2c_restart_write:
  7914                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  7915                           
  7916                           ; BSR set to: 0
  7917                           
  7918                           ; BSR set to: 0
  7919  000EAC  ECA9  F009         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7920  000EB0  0012               	return	
  7921  000EB2                     
  7922                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  7923  000EB2  ECA5  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
  7924                           
  7925                           ;i2c_master.c: 390: }
  7926  000EB6  0012               	return	
  7927  000EB8                     i2l161:
  7928  000EB8  C0B6  F026         	movff	_i2c_status+28,i2returnReset@p
  7929  000EBC  C0B7  F027         	movff	_i2c_status+29,i2returnReset@p+1
  7930  000EC0  EE20  F0AA         	lfsr	2,_i2c_status+16
  7931  000EC4  D801               	call	i2u175_48
  7932  000EC6  D00A               	goto	i2u175_49
  7933  000EC8                     i2u175_48:
  7934  000EC8  0005               	push	
  7935  000ECA  6EFA               	movwf	pclath,c
  7936  000ECC  50DE               	movf	postinc2,w,c
  7937  000ECE  6EFD               	movwf	tosl,c
  7938  000ED0  50DE               	movf	postinc2,w,c
  7939  000ED2  6EFE               	movwf	tosh,c
  7940  000ED4  50F8               	movf	tblptru,w,c
  7941  000ED6  6EFF               	movwf	tosu,c
  7942  000ED8  50FA               	movf	pclath,w,c
  7943  000EDA  0012               	return		;indir
  7944  000EDC                     i2u175_49:
  7945                           
  7946                           ; Switch size 1, requested type "space"
  7947                           ; Number of cases is 2, Range of values is 2 to 3
  7948                           ; switch strategies available:
  7949                           ; Name         Instructions Cycles
  7950                           ; simple_byte            7     4 (average)
  7951                           ;	Chosen strategy is simple_byte
  7952  000EDC  0A02               	xorlw	2	; case 2
  7953  000EDE  B4D8               	btfsc	status,2,c
  7954  000EE0  D7E5               	goto	i2l162
  7955  000EE2  0A01               	xorlw	1	; case 3
  7956  000EE4  B4D8               	btfsc	status,2,c
  7957  000EE6  D7E2               	goto	i2l162
  7958  000EE8  D7E4               	goto	i2l165
  7959  000EEA                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  7960                           	opt stack 0
  7961                           tosu	equ	0xFFF
  7962                           tosh	equ	0xFFE
  7963                           tosl	equ	0xFFD
  7964                           pclatu	equ	0xFFB
  7965                           pclath	equ	0xFFA
  7966                           tblptru	equ	0xFF8
  7967                           tblptrh	equ	0xFF7
  7968                           tblptrl	equ	0xFF6
  7969                           tablat	equ	0xFF5
  7970                           prodh	equ	0xFF4
  7971                           prodl	equ	0xFF3
  7972                           intcon	equ	0xFF2
  7973                           intcon2	equ	0xFF1
  7974                           postinc0	equ	0xFEE
  7975                           plusw0	equ	0xFEB
  7976                           fsr0h	equ	0xFEA
  7977                           fsr0l	equ	0xFE9
  7978                           wreg	equ	0xFE8
  7979                           postdec1	equ	0xFE5
  7980                           plusw1	equ	0xFE3
  7981                           fsr1h	equ	0xFE2
  7982                           fsr1l	equ	0xFE1
  7983                           indf2	equ	0xFDF
  7984                           postinc2	equ	0xFDE
  7985                           postdec2	equ	0xFDD
  7986                           plusw2	equ	0xFDB
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  7992 ;; Defined at:
  7993 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;		None
  7998 ;; Return value:  Size  Location     Type
  7999 ;;                  1    wreg      enum E7019
  8000 ;; Registers used:
  8001 ;;		wreg, cstack
  8002 ;; Tracked objects:
  8003 ;;		On entry : 0/0
  8004 ;;		On exit  : 0/0
  8005 ;;		Unchanged: 0/0
  8006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8007 ;;      Params:         0       0       0       0       0       0       0
  8008 ;;      Locals:         0       0       0       0       0       0       0
  8009 ;;      Temps:          0       0       0       0       0       0       0
  8010 ;;      Totals:         0       0       0       0       0       0       0
  8011 ;;Total ram usage:        0 bytes
  8012 ;; Hardware stack levels used:    1
  8013 ;; Hardware stack levels required when called:    1
  8014 ;; This function calls:
  8015 ;;		i2_i2c1_driver_sendNACK
  8016 ;; This function is called by:
  8017 ;;		i2_do_I2C_RX
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           	psect	text71
  8022  001332                     __ptext71:
  8023                           	opt stack 0
  8024  001332                     i2_do_I2C_DO_NACK_RESTART:
  8025                           	opt stack 17
  8026                           
  8027                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  8028                           
  8029                           ;incstack = 0
  8030  001332  ECBF  F009         	call	i2_i2c1_driver_sendNACK	;wreg free
  8031                           
  8032                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  8033  001336  0E09               	movlw	9
  8034  001338  0012               	return	
  8035  00133A                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  8036                           	opt stack 0
  8037                           tosu	equ	0xFFF
  8038                           tosh	equ	0xFFE
  8039                           tosl	equ	0xFFD
  8040                           pclatu	equ	0xFFB
  8041                           pclath	equ	0xFFA
  8042                           tblptru	equ	0xFF8
  8043                           tblptrh	equ	0xFF7
  8044                           tblptrl	equ	0xFF6
  8045                           tablat	equ	0xFF5
  8046                           prodh	equ	0xFF4
  8047                           prodl	equ	0xFF3
  8048                           intcon	equ	0xFF2
  8049                           intcon2	equ	0xFF1
  8050                           postinc0	equ	0xFEE
  8051                           plusw0	equ	0xFEB
  8052                           fsr0h	equ	0xFEA
  8053                           fsr0l	equ	0xFE9
  8054                           wreg	equ	0xFE8
  8055                           postdec1	equ	0xFE5
  8056                           plusw1	equ	0xFE3
  8057                           fsr1h	equ	0xFE2
  8058                           fsr1l	equ	0xFE1
  8059                           indf2	equ	0xFDF
  8060                           postinc2	equ	0xFDE
  8061                           postdec2	equ	0xFDD
  8062                           plusw2	equ	0xFDB
  8063                           fsr2h	equ	0xFDA
  8064                           fsr2l	equ	0xFD9
  8065                           status	equ	0xFD8
  8066                           
  8067 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  8068 ;; Defined at:
  8069 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;		None
  8072 ;; Auto vars:     Size  Location     Type
  8073 ;;		None
  8074 ;; Return value:  Size  Location     Type
  8075 ;;                  1    wreg      enum E7019
  8076 ;; Registers used:
  8077 ;;		wreg, cstack
  8078 ;; Tracked objects:
  8079 ;;		On entry : 0/0
  8080 ;;		On exit  : 0/0
  8081 ;;		Unchanged: 0/0
  8082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8083 ;;      Params:         0       0       0       0       0       0       0
  8084 ;;      Locals:         0       0       0       0       0       0       0
  8085 ;;      Temps:          0       0       0       0       0       0       0
  8086 ;;      Totals:         0       0       0       0       0       0       0
  8087 ;;Total ram usage:        0 bytes
  8088 ;; Hardware stack levels used:    1
  8089 ;; Hardware stack levels required when called:    1
  8090 ;; This function calls:
  8091 ;;		i2_i2c1_driver_sendNACK
  8092 ;; This function is called by:
  8093 ;;		i2_do_I2C_RX
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           	psect	text72
  8098  00133A                     __ptext72:
  8099                           	opt stack 0
  8100  00133A                     i2_do_I2C_DO_NACK_STOP:
  8101                           	opt stack 17
  8102                           
  8103                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  8104                           
  8105                           ;incstack = 0
  8106  00133A  ECBF  F009         	call	i2_i2c1_driver_sendNACK	;wreg free
  8107                           
  8108                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  8109  00133E  0E0A               	movlw	10
  8110  001340  0012               	return	
  8111  001342                     __end_ofi2_do_I2C_DO_NACK_STOP:
  8112                           	opt stack 0
  8113                           tosu	equ	0xFFF
  8114                           tosh	equ	0xFFE
  8115                           tosl	equ	0xFFD
  8116                           pclatu	equ	0xFFB
  8117                           pclath	equ	0xFFA
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodh	equ	0xFF4
  8123                           prodl	equ	0xFF3
  8124                           intcon	equ	0xFF2
  8125                           intcon2	equ	0xFF1
  8126                           postinc0	equ	0xFEE
  8127                           plusw0	equ	0xFEB
  8128                           fsr0h	equ	0xFEA
  8129                           fsr0l	equ	0xFE9
  8130                           wreg	equ	0xFE8
  8131                           postdec1	equ	0xFE5
  8132                           plusw1	equ	0xFE3
  8133                           fsr1h	equ	0xFE2
  8134                           fsr1l	equ	0xFE1
  8135                           indf2	equ	0xFDF
  8136                           postinc2	equ	0xFDE
  8137                           postdec2	equ	0xFDD
  8138                           plusw2	equ	0xFDB
  8139                           fsr2h	equ	0xFDA
  8140                           fsr2l	equ	0xFD9
  8141                           status	equ	0xFD8
  8142                           
  8143 ;; *************** function i2_do_I2C_DO_ACK *****************
  8144 ;; Defined at:
  8145 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;		None
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;		None
  8150 ;; Return value:  Size  Location     Type
  8151 ;;                  1    wreg      enum E7019
  8152 ;; Registers used:
  8153 ;;		wreg, cstack
  8154 ;; Tracked objects:
  8155 ;;		On entry : 0/0
  8156 ;;		On exit  : 0/0
  8157 ;;		Unchanged: 0/0
  8158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8159 ;;      Params:         0       0       0       0       0       0       0
  8160 ;;      Locals:         0       0       0       0       0       0       0
  8161 ;;      Temps:          0       0       0       0       0       0       0
  8162 ;;      Totals:         0       0       0       0       0       0       0
  8163 ;;Total ram usage:        0 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; Hardware stack levels required when called:    1
  8166 ;; This function calls:
  8167 ;;		i2_i2c1_driver_sendACK
  8168 ;; This function is called by:
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           	psect	text73
  8173  001342                     __ptext73:
  8174                           	opt stack 0
  8175  001342                     i2_do_I2C_DO_ACK:
  8176                           	opt stack 18
  8177                           
  8178                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  8179                           
  8180                           ;incstack = 0
  8181  001342  ECC2  F009         	call	i2_i2c1_driver_sendACK	;wreg free
  8182                           
  8183                           ;i2c_master.c: 362: return I2C_RCEN;
  8184  001346  0E05               	movlw	5
  8185  001348  0012               	return	
  8186  00134A                     __end_ofi2_do_I2C_DO_ACK:
  8187                           	opt stack 0
  8188                           tosu	equ	0xFFF
  8189                           tosh	equ	0xFFE
  8190                           tosl	equ	0xFFD
  8191                           pclatu	equ	0xFFB
  8192                           pclath	equ	0xFFA
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           intcon2	equ	0xFF1
  8201                           postinc0	equ	0xFEE
  8202                           plusw0	equ	0xFEB
  8203                           fsr0h	equ	0xFEA
  8204                           fsr0l	equ	0xFE9
  8205                           wreg	equ	0xFE8
  8206                           postdec1	equ	0xFE5
  8207                           plusw1	equ	0xFE3
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           plusw2	equ	0xFDB
  8214                           fsr2h	equ	0xFDA
  8215                           fsr2l	equ	0xFD9
  8216                           status	equ	0xFD8
  8217                           
  8218 ;; *************** function i2_do_I2C_RCEN *****************
  8219 ;; Defined at:
  8220 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;		None
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;		None
  8225 ;; Return value:  Size  Location     Type
  8226 ;;                  1    wreg      enum E7019
  8227 ;; Registers used:
  8228 ;;		wreg, cstack
  8229 ;; Tracked objects:
  8230 ;;		On entry : 0/0
  8231 ;;		On exit  : 0/0
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8234 ;;      Params:         0       0       0       0       0       0       0
  8235 ;;      Locals:         0       0       0       0       0       0       0
  8236 ;;      Temps:          0       0       0       0       0       0       0
  8237 ;;      Totals:         0       0       0       0       0       0       0
  8238 ;;Total ram usage:        0 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; Hardware stack levels required when called:    1
  8241 ;; This function calls:
  8242 ;;		i2_i2c1_driver_startRX
  8243 ;; This function is called by:
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           	psect	text74
  8248  0012C4                     __ptext74:
  8249                           	opt stack 0
  8250  0012C4                     i2_do_I2C_RCEN:
  8251                           	opt stack 18
  8252                           
  8253                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  8254                           
  8255                           ;incstack = 0
  8256  0012C4  0100               	movlb	0	; () banked
  8257  0012C6  979A               	bcf	_i2c_status& (0+255),3,b
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;i2c_master.c: 355: i2c1_driver_startRX();
  8261  0012C8  ECE0  F009         	call	i2_i2c1_driver_startRX	;wreg free
  8262                           
  8263                           ;i2c_master.c: 356: return I2C_RX;
  8264  0012CC  0E04               	movlw	4
  8265  0012CE  0012               	return	
  8266  0012D0                     __end_ofi2_do_I2C_RCEN:
  8267                           	opt stack 0
  8268                           tosu	equ	0xFFF
  8269                           tosh	equ	0xFFE
  8270                           tosl	equ	0xFFD
  8271                           pclatu	equ	0xFFB
  8272                           pclath	equ	0xFFA
  8273                           tblptru	equ	0xFF8
  8274                           tblptrh	equ	0xFF7
  8275                           tblptrl	equ	0xFF6
  8276                           tablat	equ	0xFF5
  8277                           prodh	equ	0xFF4
  8278                           prodl	equ	0xFF3
  8279                           intcon	equ	0xFF2
  8280                           intcon2	equ	0xFF1
  8281                           postinc0	equ	0xFEE
  8282                           plusw0	equ	0xFEB
  8283                           fsr0h	equ	0xFEA
  8284                           fsr0l	equ	0xFE9
  8285                           wreg	equ	0xFE8
  8286                           postdec1	equ	0xFE5
  8287                           plusw1	equ	0xFE3
  8288                           fsr1h	equ	0xFE2
  8289                           fsr1l	equ	0xFE1
  8290                           indf2	equ	0xFDF
  8291                           postinc2	equ	0xFDE
  8292                           postdec2	equ	0xFDD
  8293                           plusw2	equ	0xFDB
  8294                           fsr2h	equ	0xFDA
  8295                           fsr2l	equ	0xFD9
  8296                           status	equ	0xFD8
  8297                           
  8298 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  8299 ;; Defined at:
  8300 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  8301 ;; Parameters:    Size  Location     Type
  8302 ;;		None
  8303 ;; Auto vars:     Size  Location     Type
  8304 ;;		None
  8305 ;; Return value:  Size  Location     Type
  8306 ;;                  1    wreg      enum E7019
  8307 ;; Registers used:
  8308 ;;		wreg, status,2, status,0, cstack
  8309 ;; Tracked objects:
  8310 ;;		On entry : 0/0
  8311 ;;		On exit  : 0/0
  8312 ;;		Unchanged: 0/0
  8313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8314 ;;      Params:         0       0       0       0       0       0       0
  8315 ;;      Locals:         0       0       0       0       0       0       0
  8316 ;;      Temps:          0       0       0       0       0       0       0
  8317 ;;      Totals:         0       0       0       0       0       0       0
  8318 ;;Total ram usage:        0 bytes
  8319 ;; Hardware stack levels used:    1
  8320 ;; Hardware stack levels required when called:    1
  8321 ;; This function calls:
  8322 ;;		i2_i2c1_driver_TXData
  8323 ;; This function is called by:
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           	psect	text75
  8328  0011F8                     __ptext75:
  8329                           	opt stack 0
  8330  0011F8                     i2_do_I2C_SEND_ADR_WRITE:
  8331                           	opt stack 18
  8332                           
  8333                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  8334                           
  8335                           ;incstack = 0
  8336  0011F8  0100               	movlb	0	; () banked
  8337  0011FA  879A               	bsf	_i2c_status& (0+255),3,b
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  8341  0011FC  519B               	movf	(_i2c_status+1)& (0+255),w,b
  8342  0011FE  259B               	addwf	(_i2c_status+1)& (0+255),w,b
  8343  001200  ECB5  F009         	call	i2_i2c1_driver_TXData
  8344                           
  8345                           ;i2c_master.c: 349: return I2C_TX;
  8346  001204  0E03               	movlw	3
  8347  001206  0012               	return	
  8348  001208                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  8349                           	opt stack 0
  8350                           tosu	equ	0xFFF
  8351                           tosh	equ	0xFFE
  8352                           tosl	equ	0xFFD
  8353                           pclatu	equ	0xFFB
  8354                           pclath	equ	0xFFA
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           intcon	equ	0xFF2
  8362                           intcon2	equ	0xFF1
  8363                           postinc0	equ	0xFEE
  8364                           plusw0	equ	0xFEB
  8365                           fsr0h	equ	0xFEA
  8366                           fsr0l	equ	0xFE9
  8367                           wreg	equ	0xFE8
  8368                           postdec1	equ	0xFE5
  8369                           plusw1	equ	0xFE3
  8370                           fsr1h	equ	0xFE2
  8371                           fsr1l	equ	0xFE1
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           plusw2	equ	0xFDB
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function i2_do_I2C_SEND_INITIAL_READ *****************
  8381 ;; Defined at:
  8382 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;		None
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;		None
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  1    wreg      enum E7019
  8389 ;; Registers used:
  8390 ;;		wreg, status,2, status,0, cstack
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8396 ;;      Params:         0       0       0       0       0       0       0
  8397 ;;      Locals:         0       0       0       0       0       0       0
  8398 ;;      Temps:          0       0       0       0       0       0       0
  8399 ;;      Totals:         0       0       0       0       0       0       0
  8400 ;;Total ram usage:        0 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    1
  8403 ;; This function calls:
  8404 ;;		i2_i2c1_driver_TXData
  8405 ;; This function is called by:
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           	psect	text76
  8410  001208                     __ptext76:
  8411                           	opt stack 0
  8412  001208                     i2_do_I2C_SEND_INITIAL_READ:
  8413                           	opt stack 18
  8414                           
  8415                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  8416                           
  8417                           ;incstack = 0
  8418  001208  0100               	movlb	0	; () banked
  8419  00120A  879A               	bsf	_i2c_status& (0+255),3,b
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  8423  00120C  519B               	movf	(_i2c_status+1)& (0+255),w,b
  8424  00120E  259B               	addwf	(_i2c_status+1)& (0+255),w,b
  8425  001210  ECB5  F009         	call	i2_i2c1_driver_TXData
  8426                           
  8427                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  8428  001214  0E11               	movlw	17
  8429  001216  0012               	return	
  8430  001218                     __end_ofi2_do_I2C_SEND_INITIAL_READ:
  8431                           	opt stack 0
  8432                           tosu	equ	0xFFF
  8433                           tosh	equ	0xFFE
  8434                           tosl	equ	0xFFD
  8435                           pclatu	equ	0xFFB
  8436                           pclath	equ	0xFFA
  8437                           tblptru	equ	0xFF8
  8438                           tblptrh	equ	0xFF7
  8439                           tblptrl	equ	0xFF6
  8440                           tablat	equ	0xFF5
  8441                           prodh	equ	0xFF4
  8442                           prodl	equ	0xFF3
  8443                           intcon	equ	0xFF2
  8444                           intcon2	equ	0xFF1
  8445                           postinc0	equ	0xFEE
  8446                           plusw0	equ	0xFEB
  8447                           fsr0h	equ	0xFEA
  8448                           fsr0l	equ	0xFE9
  8449                           wreg	equ	0xFE8
  8450                           postdec1	equ	0xFE5
  8451                           plusw1	equ	0xFE3
  8452                           fsr1h	equ	0xFE2
  8453                           fsr1l	equ	0xFE1
  8454                           indf2	equ	0xFDF
  8455                           postinc2	equ	0xFDE
  8456                           postdec2	equ	0xFDD
  8457                           plusw2	equ	0xFDB
  8458                           fsr2h	equ	0xFDA
  8459                           fsr2l	equ	0xFD9
  8460                           status	equ	0xFD8
  8461                           
  8462 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  8463 ;; Defined at:
  8464 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;		None
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;		None
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  1    wreg      enum E7019
  8471 ;; Registers used:
  8472 ;;		wreg, status,0, cstack
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8478 ;;      Params:         0       0       0       0       0       0       0
  8479 ;;      Locals:         0       0       0       0       0       0       0
  8480 ;;      Temps:          0       0       0       0       0       0       0
  8481 ;;      Totals:         0       0       0       0       0       0       0
  8482 ;;Total ram usage:        0 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:    1
  8485 ;; This function calls:
  8486 ;;		i2_i2c1_driver_TXData
  8487 ;; This function is called by:
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           	psect	text77
  8492  001218                     __ptext77:
  8493                           	opt stack 0
  8494  001218                     i2_do_I2C_SEND_ADR_READ:
  8495                           	opt stack 18
  8496                           
  8497                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  8498                           
  8499                           ;incstack = 0
  8500  001218  0100               	movlb	0	; () banked
  8501  00121A  879A               	bsf	_i2c_status& (0+255),3,b
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  8505  00121C  80D8               	bsf	status,0,c
  8506  00121E  359B               	rlcf	(_i2c_status+1)& (0+255),w,b
  8507  001220  ECB5  F009         	call	i2_i2c1_driver_TXData
  8508                           
  8509                           ;i2c_master.c: 325: return I2C_RCEN;
  8510  001224  0E05               	movlw	5
  8511  001226  0012               	return	
  8512  001228                     __end_ofi2_do_I2C_SEND_ADR_READ:
  8513                           	opt stack 0
  8514                           tosu	equ	0xFFF
  8515                           tosh	equ	0xFFE
  8516                           tosl	equ	0xFFD
  8517                           pclatu	equ	0xFFB
  8518                           pclath	equ	0xFFA
  8519                           tblptru	equ	0xFF8
  8520                           tblptrh	equ	0xFF7
  8521                           tblptrl	equ	0xFF6
  8522                           tablat	equ	0xFF5
  8523                           prodh	equ	0xFF4
  8524                           prodl	equ	0xFF3
  8525                           intcon	equ	0xFF2
  8526                           intcon2	equ	0xFF1
  8527                           postinc0	equ	0xFEE
  8528                           plusw0	equ	0xFEB
  8529                           fsr0h	equ	0xFEA
  8530                           fsr0l	equ	0xFE9
  8531                           wreg	equ	0xFE8
  8532                           postdec1	equ	0xFE5
  8533                           plusw1	equ	0xFE3
  8534                           fsr1h	equ	0xFE2
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           plusw2	equ	0xFDB
  8540                           fsr2h	equ	0xFDA
  8541                           fsr2l	equ	0xFD9
  8542                           status	equ	0xFD8
  8543                           
  8544 ;; *************** function i2_do_I2C_SEND_STOP *****************
  8545 ;; Defined at:
  8546 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;		None
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;		None
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  1    wreg      enum E7019
  8553 ;; Registers used:
  8554 ;;		wreg, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8560 ;;      Params:         0       0       0       0       0       0       0
  8561 ;;      Locals:         0       0       0       0       0       0       0
  8562 ;;      Temps:          0       0       0       0       0       0       0
  8563 ;;      Totals:         0       0       0       0       0       0       0
  8564 ;;Total ram usage:        0 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    1
  8567 ;; This function calls:
  8568 ;;		i2_i2c1_driver_stop
  8569 ;; This function is called by:
  8570 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8571 ;;		i2_do_I2C_TX
  8572 ;;		i2_do_I2C_TX_EMPTY
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text78
  8577  00134A                     __ptext78:
  8578                           	opt stack 0
  8579  00134A                     i2_do_I2C_SEND_STOP:
  8580                           	opt stack 17
  8581                           
  8582                           ;i2c_master.c: 316: i2c1_driver_stop();
  8583                           
  8584                           ;incstack = 0
  8585  00134A  ECE6  F009         	call	i2_i2c1_driver_stop	;wreg free
  8586                           
  8587                           ;i2c_master.c: 317: return I2C_IDLE;
  8588  00134E  0E00               	movlw	0
  8589  001350  0012               	return	
  8590  001352                     __end_ofi2_do_I2C_SEND_STOP:
  8591                           	opt stack 0
  8592                           tosu	equ	0xFFF
  8593                           tosh	equ	0xFFE
  8594                           tosl	equ	0xFFD
  8595                           pclatu	equ	0xFFB
  8596                           pclath	equ	0xFFA
  8597                           tblptru	equ	0xFF8
  8598                           tblptrh	equ	0xFF7
  8599                           tblptrl	equ	0xFF6
  8600                           tablat	equ	0xFF5
  8601                           prodh	equ	0xFF4
  8602                           prodl	equ	0xFF3
  8603                           intcon	equ	0xFF2
  8604                           intcon2	equ	0xFF1
  8605                           postinc0	equ	0xFEE
  8606                           plusw0	equ	0xFEB
  8607                           fsr0h	equ	0xFEA
  8608                           fsr0l	equ	0xFE9
  8609                           wreg	equ	0xFE8
  8610                           postdec1	equ	0xFE5
  8611                           plusw1	equ	0xFE3
  8612                           fsr1h	equ	0xFE2
  8613                           fsr1l	equ	0xFE1
  8614                           indf2	equ	0xFDF
  8615                           postinc2	equ	0xFDE
  8616                           postdec2	equ	0xFDD
  8617                           plusw2	equ	0xFDB
  8618                           fsr2h	equ	0xFDA
  8619                           fsr2l	equ	0xFD9
  8620                           status	equ	0xFD8
  8621                           
  8622 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  8623 ;; Defined at:
  8624 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;		None
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;		None
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1    wreg      enum E7019
  8631 ;; Registers used:
  8632 ;;		wreg, cstack
  8633 ;; Tracked objects:
  8634 ;;		On entry : 0/0
  8635 ;;		On exit  : 0/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8638 ;;      Params:         0       0       0       0       0       0       0
  8639 ;;      Locals:         0       0       0       0       0       0       0
  8640 ;;      Temps:          0       0       0       0       0       0       0
  8641 ;;      Totals:         0       0       0       0       0       0       0
  8642 ;;Total ram usage:        0 bytes
  8643 ;; Hardware stack levels used:    1
  8644 ;; Hardware stack levels required when called:    1
  8645 ;; This function calls:
  8646 ;;		i2_i2c1_driver_restart
  8647 ;; This function is called by:
  8648 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8649 ;;		i2_do_I2C_TX_EMPTY
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           	psect	text79
  8654  001352                     __ptext79:
  8655                           	opt stack 0
  8656  001352                     i2_do_I2C_SEND_RESTART:
  8657                           	opt stack 17
  8658                           
  8659                           ;i2c_master.c: 310: i2c1_driver_restart();
  8660                           
  8661                           ;incstack = 0
  8662  001352  ECE8  F009         	call	i2_i2c1_driver_restart	;wreg free
  8663                           
  8664                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  8665  001356  0E01               	movlw	1
  8666  001358  0012               	return	
  8667  00135A                     __end_ofi2_do_I2C_SEND_RESTART:
  8668                           	opt stack 0
  8669                           tosu	equ	0xFFF
  8670                           tosh	equ	0xFFE
  8671                           tosl	equ	0xFFD
  8672                           pclatu	equ	0xFFB
  8673                           pclath	equ	0xFFA
  8674                           tblptru	equ	0xFF8
  8675                           tblptrh	equ	0xFF7
  8676                           tblptrl	equ	0xFF6
  8677                           tablat	equ	0xFF5
  8678                           prodh	equ	0xFF4
  8679                           prodl	equ	0xFF3
  8680                           intcon	equ	0xFF2
  8681                           intcon2	equ	0xFF1
  8682                           postinc0	equ	0xFEE
  8683                           plusw0	equ	0xFEB
  8684                           fsr0h	equ	0xFEA
  8685                           fsr0l	equ	0xFE9
  8686                           wreg	equ	0xFE8
  8687                           postdec1	equ	0xFE5
  8688                           plusw1	equ	0xFE3
  8689                           fsr1h	equ	0xFE2
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           plusw2	equ	0xFDB
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  8700 ;; Defined at:
  8701 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;		None
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;		None
  8706 ;; Return value:  Size  Location     Type
  8707 ;;                  1    wreg      enum E7019
  8708 ;; Registers used:
  8709 ;;		wreg, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8715 ;;      Params:         0       0       0       0       0       0       0
  8716 ;;      Locals:         0       0       0       0       0       0       0
  8717 ;;      Temps:          0       0       0       0       0       0       0
  8718 ;;      Totals:         0       0       0       0       0       0       0
  8719 ;;Total ram usage:        0 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    1
  8722 ;; This function calls:
  8723 ;;		i2_i2c1_driver_restart
  8724 ;; This function is called by:
  8725 ;;		i2_do_I2C_TX
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text80
  8730  00135A                     __ptext80:
  8731                           	opt stack 0
  8732  00135A                     i2_do_I2C_SEND_RESTART_WRITE:
  8733                           	opt stack 17
  8734                           
  8735                           ;i2c_master.c: 304: i2c1_driver_restart();
  8736                           
  8737                           ;incstack = 0
  8738  00135A  ECE8  F009         	call	i2_i2c1_driver_restart	;wreg free
  8739                           
  8740                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  8741  00135E  0E02               	movlw	2
  8742  001360  0012               	return	
  8743  001362                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  8744                           	opt stack 0
  8745                           tosu	equ	0xFFF
  8746                           tosh	equ	0xFFE
  8747                           tosl	equ	0xFFD
  8748                           pclatu	equ	0xFFB
  8749                           pclath	equ	0xFFA
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           intcon	equ	0xFF2
  8757                           intcon2	equ	0xFF1
  8758                           postinc0	equ	0xFEE
  8759                           plusw0	equ	0xFEB
  8760                           fsr0h	equ	0xFEA
  8761                           fsr0l	equ	0xFE9
  8762                           wreg	equ	0xFE8
  8763                           postdec1	equ	0xFE5
  8764                           plusw1	equ	0xFE3
  8765                           fsr1h	equ	0xFE2
  8766                           fsr1l	equ	0xFE1
  8767                           indf2	equ	0xFDF
  8768                           postinc2	equ	0xFDE
  8769                           postdec2	equ	0xFDD
  8770                           plusw2	equ	0xFDB
  8771                           fsr2h	equ	0xFDA
  8772                           fsr2l	equ	0xFD9
  8773                           status	equ	0xFD8
  8774                           
  8775 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  8776 ;; Defined at:
  8777 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;		None
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;		None
  8782 ;; Return value:  Size  Location     Type
  8783 ;;                  1    wreg      enum E7019
  8784 ;; Registers used:
  8785 ;;		wreg, cstack
  8786 ;; Tracked objects:
  8787 ;;		On entry : 0/0
  8788 ;;		On exit  : 0/0
  8789 ;;		Unchanged: 0/0
  8790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8791 ;;      Params:         0       0       0       0       0       0       0
  8792 ;;      Locals:         0       0       0       0       0       0       0
  8793 ;;      Temps:          0       0       0       0       0       0       0
  8794 ;;      Totals:         0       0       0       0       0       0       0
  8795 ;;Total ram usage:        0 bytes
  8796 ;; Hardware stack levels used:    1
  8797 ;; Hardware stack levels required when called:    1
  8798 ;; This function calls:
  8799 ;;		i2_i2c1_driver_restart
  8800 ;; This function is called by:
  8801 ;;		i2_do_I2C_TX
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text81
  8806  001362                     __ptext81:
  8807                           	opt stack 0
  8808  001362                     i2_do_I2C_SEND_RESTART_READ:
  8809                           	opt stack 17
  8810                           
  8811                           ;i2c_master.c: 298: i2c1_driver_restart();
  8812                           
  8813                           ;incstack = 0
  8814  001362  ECE8  F009         	call	i2_i2c1_driver_restart	;wreg free
  8815                           
  8816                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  8817  001366  0E01               	movlw	1
  8818  001368  0012               	return	
  8819  00136A                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  8820                           	opt stack 0
  8821                           tosu	equ	0xFFF
  8822                           tosh	equ	0xFFE
  8823                           tosl	equ	0xFFD
  8824                           pclatu	equ	0xFFB
  8825                           pclath	equ	0xFFA
  8826                           tblptru	equ	0xFF8
  8827                           tblptrh	equ	0xFF7
  8828                           tblptrl	equ	0xFF6
  8829                           tablat	equ	0xFF5
  8830                           prodh	equ	0xFF4
  8831                           prodl	equ	0xFF3
  8832                           intcon	equ	0xFF2
  8833                           intcon2	equ	0xFF1
  8834                           postinc0	equ	0xFEE
  8835                           plusw0	equ	0xFEB
  8836                           fsr0h	equ	0xFEA
  8837                           fsr0l	equ	0xFE9
  8838                           wreg	equ	0xFE8
  8839                           postdec1	equ	0xFE5
  8840                           plusw1	equ	0xFE3
  8841                           fsr1h	equ	0xFE2
  8842                           fsr1l	equ	0xFE1
  8843                           indf2	equ	0xFDF
  8844                           postinc2	equ	0xFDE
  8845                           postdec2	equ	0xFDD
  8846                           plusw2	equ	0xFDB
  8847                           fsr2h	equ	0xFDA
  8848                           fsr2l	equ	0xFD9
  8849                           status	equ	0xFD8
  8850                           
  8851 ;; *************** function i2_do_I2C_IDLE *****************
  8852 ;; Defined at:
  8853 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;		None
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;		None
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  1    wreg      enum E7019
  8860 ;; Registers used:
  8861 ;;		wreg, status,2
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8867 ;;      Params:         0       0       0       0       0       0       0
  8868 ;;      Locals:         0       0       0       0       0       0       0
  8869 ;;      Temps:          0       0       0       0       0       0       0
  8870 ;;      Totals:         0       0       0       0       0       0       0
  8871 ;;Total ram usage:        0 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text82
  8880  0012D0                     __ptext82:
  8881                           	opt stack 0
  8882  0012D0                     i2_do_I2C_IDLE:
  8883                           	opt stack 19
  8884                           
  8885                           ;i2c_master.c: 291: i2c_status.busy = 0;
  8886                           
  8887                           ;incstack = 0
  8888  0012D0  0100               	movlb	0	; () banked
  8889  0012D2  919A               	bcf	_i2c_status& (0+255),0,b
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  8893  0012D4  0E00               	movlw	0
  8894  0012D6  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;i2c_master.c: 293: return I2C_RESET;
  8898  0012D8  0E0E               	movlw	14
  8899  0012DA  0012               	return	
  8900  0012DC                     __end_ofi2_do_I2C_IDLE:
  8901                           	opt stack 0
  8902                           tosu	equ	0xFFF
  8903                           tosh	equ	0xFFE
  8904                           tosl	equ	0xFFD
  8905                           pclatu	equ	0xFFB
  8906                           pclath	equ	0xFFA
  8907                           tblptru	equ	0xFF8
  8908                           tblptrh	equ	0xFF7
  8909                           tblptrl	equ	0xFF6
  8910                           tablat	equ	0xFF5
  8911                           prodh	equ	0xFF4
  8912                           prodl	equ	0xFF3
  8913                           intcon	equ	0xFF2
  8914                           intcon2	equ	0xFF1
  8915                           postinc0	equ	0xFEE
  8916                           plusw0	equ	0xFEB
  8917                           fsr0h	equ	0xFEA
  8918                           fsr0l	equ	0xFE9
  8919                           wreg	equ	0xFE8
  8920                           postdec1	equ	0xFE5
  8921                           plusw1	equ	0xFE3
  8922                           fsr1h	equ	0xFE2
  8923                           fsr1l	equ	0xFE1
  8924                           indf2	equ	0xFDF
  8925                           postinc2	equ	0xFDE
  8926                           postdec2	equ	0xFDD
  8927                           plusw2	equ	0xFDB
  8928                           fsr2h	equ	0xFDA
  8929                           fsr2l	equ	0xFD9
  8930                           status	equ	0xFD8
  8931                           
  8932 ;; *************** function i2_do_I2C_RESET *****************
  8933 ;; Defined at:
  8934 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;		None
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;		None
  8939 ;; Return value:  Size  Location     Type
  8940 ;;                  1    wreg      enum E7019
  8941 ;; Registers used:
  8942 ;;		wreg, status,2, cstack
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8948 ;;      Params:         0       0       0       0       0       0       0
  8949 ;;      Locals:         0       0       0       0       0       0       0
  8950 ;;      Temps:          0       0       0       0       0       0       0
  8951 ;;      Totals:         0       0       0       0       0       0       0
  8952 ;;Total ram usage:        0 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    1
  8955 ;; This function calls:
  8956 ;;		i2_i2c1_driver_resetBus
  8957 ;; This function is called by:
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	text83
  8962  001228                     __ptext83:
  8963                           	opt stack 0
  8964  001228                     i2_do_I2C_RESET:
  8965                           	opt stack 18
  8966                           
  8967                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;incstack = 0
  8971  001228  ECED  F009         	call	i2_i2c1_driver_resetBus	;wreg free
  8972                           
  8973                           ;i2c_master.c: 284: i2c_status.busy = 0;
  8974  00122C  0100               	movlb	0	; () banked
  8975  00122E  919A               	bcf	_i2c_status& (0+255),0,b
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  8979  001230  0E00               	movlw	0
  8980  001232  6FA5               	movwf	(_i2c_status+11)& (0+255),b
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;i2c_master.c: 286: return I2C_RESET;
  8984  001234  0E0E               	movlw	14
  8985  001236  0012               	return	
  8986  001238                     __end_ofi2_do_I2C_RESET:
  8987                           	opt stack 0
  8988                           tosu	equ	0xFFF
  8989                           tosh	equ	0xFFE
  8990                           tosl	equ	0xFFD
  8991                           pclatu	equ	0xFFB
  8992                           pclath	equ	0xFFA
  8993                           tblptru	equ	0xFF8
  8994                           tblptrh	equ	0xFF7
  8995                           tblptrl	equ	0xFF6
  8996                           tablat	equ	0xFF5
  8997                           prodh	equ	0xFF4
  8998                           prodl	equ	0xFF3
  8999                           intcon	equ	0xFF2
  9000                           intcon2	equ	0xFF1
  9001                           postinc0	equ	0xFEE
  9002                           plusw0	equ	0xFEB
  9003                           fsr0h	equ	0xFEA
  9004                           fsr0l	equ	0xFE9
  9005                           wreg	equ	0xFE8
  9006                           postdec1	equ	0xFE5
  9007                           plusw1	equ	0xFE3
  9008                           fsr1h	equ	0xFE2
  9009                           fsr1l	equ	0xFE1
  9010                           indf2	equ	0xFDF
  9011                           postinc2	equ	0xFDE
  9012                           postdec2	equ	0xFDD
  9013                           plusw2	equ	0xFDB
  9014                           fsr2h	equ	0xFDA
  9015                           fsr2l	equ	0xFD9
  9016                           status	equ	0xFD8
  9017                           
  9018 ;; *************** function i2_do_I2C_TX_REGISTER *****************
  9019 ;; Defined at:
  9020 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;		None
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;		None
  9025 ;; Return value:  Size  Location     Type
  9026 ;;                  1    wreg      enum E7019
  9027 ;; Registers used:
  9028 ;;		wreg, status,2, cstack
  9029 ;; Tracked objects:
  9030 ;;		On entry : 0/0
  9031 ;;		On exit  : 0/0
  9032 ;;		Unchanged: 0/0
  9033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9034 ;;      Params:         0       0       0       0       0       0       0
  9035 ;;      Locals:         0       0       0       0       0       0       0
  9036 ;;      Temps:          0       0       0       0       0       0       0
  9037 ;;      Totals:         0       0       0       0       0       0       0
  9038 ;;Total ram usage:        0 bytes
  9039 ;; Hardware stack levels used:    1
  9040 ;; Hardware stack levels required when called:    1
  9041 ;; This function calls:
  9042 ;;		i2_i2c1_driver_TXData
  9043 ;; This function is called by:
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           	psect	text84
  9048  0012B6                     __ptext84:
  9049                           	opt stack 0
  9050  0012B6                     i2_do_I2C_TX_REGISTER:
  9051                           	opt stack 18
  9052                           
  9053                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;incstack = 0
  9057  0012B6  0100               	movlb	0	; () banked
  9058  0012B8  879A               	bsf	_i2c_status& (0+255),3,b
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  9062  0012BA  51BE               	movf	(_i2c_status+36)& (0+255),w,b
  9063  0012BC  ECB5  F009         	call	i2_i2c1_driver_TXData
  9064                           
  9065                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  9066  0012C0  0E07               	movlw	7
  9067  0012C2  0012               	return	
  9068  0012C4                     __end_ofi2_do_I2C_TX_REGISTER:
  9069                           	opt stack 0
  9070                           tosu	equ	0xFFF
  9071                           tosh	equ	0xFFE
  9072                           tosl	equ	0xFFD
  9073                           pclatu	equ	0xFFB
  9074                           pclath	equ	0xFFA
  9075                           tblptru	equ	0xFF8
  9076                           tblptrh	equ	0xFF7
  9077                           tblptrl	equ	0xFF6
  9078                           tablat	equ	0xFF5
  9079                           prodh	equ	0xFF4
  9080                           prodl	equ	0xFF3
  9081                           intcon	equ	0xFF2
  9082                           intcon2	equ	0xFF1
  9083                           postinc0	equ	0xFEE
  9084                           plusw0	equ	0xFEB
  9085                           fsr0h	equ	0xFEA
  9086                           fsr0l	equ	0xFE9
  9087                           wreg	equ	0xFE8
  9088                           postdec1	equ	0xFE5
  9089                           plusw1	equ	0xFE3
  9090                           fsr1h	equ	0xFE2
  9091                           fsr1l	equ	0xFE1
  9092                           indf2	equ	0xFDF
  9093                           postinc2	equ	0xFDE
  9094                           postdec2	equ	0xFDD
  9095                           plusw2	equ	0xFDB
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function i2_mssp1_setIRQ *****************
  9101 ;; Defined at:
  9102 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;		None
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  1    wreg      void 
  9109 ;; Registers used:
  9110 ;;		None
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9116 ;;      Params:         0       0       0       0       0       0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0
  9118 ;;      Temps:          0       0       0       0       0       0       0
  9119 ;;      Totals:         0       0       0       0       0       0       0
  9120 ;;Total ram usage:        0 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; This function calls:
  9123 ;;		Nothing
  9124 ;; This function is called by:
  9125 ;;		i2_do_I2C_TX_EMPTY
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           	psect	text85
  9130  0013B8                     __ptext85:
  9131                           	opt stack 0
  9132  0013B8                     i2_mssp1_setIRQ:
  9133                           	opt stack 18
  9134                           
  9135                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  9136                           
  9137                           ;incstack = 0
  9138  0013B8  869E               	bsf	3998,3,c	;volatile
  9139  0013BA  0012               	return		;funcret
  9140  0013BC                     __end_ofi2_mssp1_setIRQ:
  9141                           	opt stack 0
  9142                           tosu	equ	0xFFF
  9143                           tosh	equ	0xFFE
  9144                           tosl	equ	0xFFD
  9145                           pclatu	equ	0xFFB
  9146                           pclath	equ	0xFFA
  9147                           tblptru	equ	0xFF8
  9148                           tblptrh	equ	0xFF7
  9149                           tblptrl	equ	0xFF6
  9150                           tablat	equ	0xFF5
  9151                           prodh	equ	0xFF4
  9152                           prodl	equ	0xFF3
  9153                           intcon	equ	0xFF2
  9154                           intcon2	equ	0xFF1
  9155                           postinc0	equ	0xFEE
  9156                           plusw0	equ	0xFEB
  9157                           fsr0h	equ	0xFEA
  9158                           fsr0l	equ	0xFE9
  9159                           wreg	equ	0xFE8
  9160                           postdec1	equ	0xFE5
  9161                           plusw1	equ	0xFE3
  9162                           fsr1h	equ	0xFE2
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           plusw2	equ	0xFDB
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function i2_i2c1_driver_isNACK *****************
  9173 ;; Defined at:
  9174 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;		None
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;		None
  9179 ;; Return value:  Size  Location     Type
  9180 ;;		None               void
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9188 ;;      Params:         0       0       0       0       0       0       0
  9189 ;;      Locals:         0       0       0       0       0       0       0
  9190 ;;      Temps:          1       0       0       0       0       0       0
  9191 ;;      Totals:         1       0       0       0       0       0       0
  9192 ;;Total ram usage:        1 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		i2_do_I2C_TX
  9198 ;;		i2_i2c_ISR
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text86
  9203  001176                     __ptext86:
  9204                           	opt stack 0
  9205  001176                     i2_i2c1_driver_isNACK:
  9206                           	opt stack 19
  9207                           
  9208                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  9209                           
  9210                           ;incstack = 0
  9211  001176  50C5               	movf	4037,w,c	;volatile
  9212  001178  0BBF               	andlw	-65
  9213  00117A  0940               	iorlw	64
  9214  00117C  6EC5               	movwf	4037,c	;volatile
  9215  00117E  38C5               	swapf	4037,w,c	;volatile
  9216  001180  32E8               	rrcf	wreg,f,c
  9217  001182  32E8               	rrcf	wreg,f,c
  9218  001184  0B01               	andlw	1
  9219  001186  6E26               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
  9220  001188  3026               	rrcf	??i2_i2c1_driver_isNACK,w,c
  9221  00118A  0012               	return	
  9222  00118C                     __end_ofi2_i2c1_driver_isNACK:
  9223                           	opt stack 0
  9224                           tosu	equ	0xFFF
  9225                           tosh	equ	0xFFE
  9226                           tosl	equ	0xFFD
  9227                           pclatu	equ	0xFFB
  9228                           pclath	equ	0xFFA
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           prodh	equ	0xFF4
  9234                           prodl	equ	0xFF3
  9235                           intcon	equ	0xFF2
  9236                           intcon2	equ	0xFF1
  9237                           postinc0	equ	0xFEE
  9238                           plusw0	equ	0xFEB
  9239                           fsr0h	equ	0xFEA
  9240                           fsr0l	equ	0xFE9
  9241                           wreg	equ	0xFE8
  9242                           postdec1	equ	0xFE5
  9243                           plusw1	equ	0xFE3
  9244                           fsr1h	equ	0xFE2
  9245                           fsr1l	equ	0xFE1
  9246                           indf2	equ	0xFDF
  9247                           postinc2	equ	0xFDE
  9248                           postdec2	equ	0xFDD
  9249                           plusw2	equ	0xFDB
  9250                           fsr2h	equ	0xFDA
  9251                           fsr2l	equ	0xFD9
  9252                           status	equ	0xFD8
  9253                           
  9254 ;; *************** function i2_i2c1_driver_TXData *****************
  9255 ;; Defined at:
  9256 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;  d               1    wreg     unsigned char 
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;  d               1    0[COMRAM] unsigned char 
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      void 
  9263 ;; Registers used:
  9264 ;;		wreg
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9270 ;;      Params:         0       0       0       0       0       0       0
  9271 ;;      Locals:         1       0       0       0       0       0       0
  9272 ;;      Temps:          0       0       0       0       0       0       0
  9273 ;;      Totals:         1       0       0       0       0       0       0
  9274 ;;Total ram usage:        1 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; This function calls:
  9277 ;;		Nothing
  9278 ;; This function is called by:
  9279 ;;		i2_do_I2C_SEND_ADR_READ
  9280 ;;		i2_do_I2C_SEND_INITIAL_READ
  9281 ;;		i2_do_I2C_TX_REGISTER
  9282 ;;		i2_do_I2C_SEND_ADR_WRITE
  9283 ;;		i2_do_I2C_TX
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text87
  9288  00136A                     __ptext87:
  9289                           	opt stack 0
  9290  00136A                     i2_i2c1_driver_TXData:
  9291                           	opt stack 18
  9292                           
  9293                           ;incstack = 0
  9294                           ;i2i2c1_driver_TXData@d stored from wreg
  9295  00136A  6E26               	movwf	i2i2c1_driver_TXData@d,c
  9296                           
  9297                           ;i2c1_driver.c: 188: SSP1BUF = d;
  9298  00136C  C026  FFC9         	movff	i2i2c1_driver_TXData@d,4041	;volatile
  9299  001370  0012               	return		;funcret
  9300  001372                     __end_ofi2_i2c1_driver_TXData:
  9301                           	opt stack 0
  9302                           tosu	equ	0xFFF
  9303                           tosh	equ	0xFFE
  9304                           tosl	equ	0xFFD
  9305                           pclatu	equ	0xFFB
  9306                           pclath	equ	0xFFA
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           intcon2	equ	0xFF1
  9315                           postinc0	equ	0xFEE
  9316                           plusw0	equ	0xFEB
  9317                           fsr0h	equ	0xFEA
  9318                           fsr0l	equ	0xFE9
  9319                           wreg	equ	0xFE8
  9320                           postdec1	equ	0xFE5
  9321                           plusw1	equ	0xFE3
  9322                           fsr1h	equ	0xFE2
  9323                           fsr1l	equ	0xFE1
  9324                           indf2	equ	0xFDF
  9325                           postinc2	equ	0xFDE
  9326                           postdec2	equ	0xFDD
  9327                           plusw2	equ	0xFDB
  9328                           fsr2h	equ	0xFDA
  9329                           fsr2l	equ	0xFD9
  9330                           status	equ	0xFD8
  9331                           
  9332 ;; *************** function i2_i2c1_driver_getRXData *****************
  9333 ;; Defined at:
  9334 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;		None
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;		None
  9339 ;; Return value:  Size  Location     Type
  9340 ;;                  1    wreg      unsigned char 
  9341 ;; Registers used:
  9342 ;;		wreg, status,2
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9348 ;;      Params:         0       0       0       0       0       0       0
  9349 ;;      Locals:         0       0       0       0       0       0       0
  9350 ;;      Temps:          0       0       0       0       0       0       0
  9351 ;;      Totals:         0       0       0       0       0       0       0
  9352 ;;Total ram usage:        0 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; This function calls:
  9355 ;;		Nothing
  9356 ;; This function is called by:
  9357 ;;		i2_do_I2C_RX
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text88
  9362  0013BC                     __ptext88:
  9363                           	opt stack 0
  9364  0013BC                     i2_i2c1_driver_getRXData:
  9365                           	opt stack 18
  9366                           
  9367                           ;i2c1_driver.c: 173: return SSP1BUF;
  9368                           
  9369                           ;incstack = 0
  9370  0013BC  50C9               	movf	4041,w,c	;volatile
  9371  0013BE  0012               	return	
  9372  0013C0                     __end_ofi2_i2c1_driver_getRXData:
  9373                           	opt stack 0
  9374                           tosu	equ	0xFFF
  9375                           tosh	equ	0xFFE
  9376                           tosl	equ	0xFFD
  9377                           pclatu	equ	0xFFB
  9378                           pclath	equ	0xFFA
  9379                           tblptru	equ	0xFF8
  9380                           tblptrh	equ	0xFF7
  9381                           tblptrl	equ	0xFF6
  9382                           tablat	equ	0xFF5
  9383                           prodh	equ	0xFF4
  9384                           prodl	equ	0xFF3
  9385                           intcon	equ	0xFF2
  9386                           intcon2	equ	0xFF1
  9387                           postinc0	equ	0xFEE
  9388                           plusw0	equ	0xFEB
  9389                           fsr0h	equ	0xFEA
  9390                           fsr0l	equ	0xFE9
  9391                           wreg	equ	0xFE8
  9392                           postdec1	equ	0xFE5
  9393                           plusw1	equ	0xFE3
  9394                           fsr1h	equ	0xFE2
  9395                           fsr1l	equ	0xFE1
  9396                           indf2	equ	0xFDF
  9397                           postinc2	equ	0xFDE
  9398                           postdec2	equ	0xFDD
  9399                           plusw2	equ	0xFDB
  9400                           fsr2h	equ	0xFDA
  9401                           fsr2l	equ	0xFD9
  9402                           status	equ	0xFD8
  9403                           
  9404 ;; *************** function i2_i2c1_driver_sendNACK *****************
  9405 ;; Defined at:
  9406 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;		None
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;		None
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		None
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9420 ;;      Params:         0       0       0       0       0       0       0
  9421 ;;      Locals:         0       0       0       0       0       0       0
  9422 ;;      Temps:          0       0       0       0       0       0       0
  9423 ;;      Totals:         0       0       0       0       0       0       0
  9424 ;;Total ram usage:        0 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; This function calls:
  9427 ;;		Nothing
  9428 ;; This function is called by:
  9429 ;;		i2_do_I2C_DO_NACK_STOP
  9430 ;;		i2_do_I2C_DO_NACK_RESTART
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text89
  9435  00137E                     __ptext89:
  9436                           	opt stack 0
  9437  00137E                     i2_i2c1_driver_sendNACK:
  9438                           	opt stack 17
  9439                           
  9440                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  9441                           
  9442                           ;incstack = 0
  9443  00137E  8AC5               	bsf	4037,5,c	;volatile
  9444                           
  9445                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  9446  001380  88C5               	bsf	4037,4,c	;volatile
  9447  001382  0012               	return		;funcret
  9448  001384                     __end_ofi2_i2c1_driver_sendNACK:
  9449                           	opt stack 0
  9450                           tosu	equ	0xFFF
  9451                           tosh	equ	0xFFE
  9452                           tosl	equ	0xFFD
  9453                           pclatu	equ	0xFFB
  9454                           pclath	equ	0xFFA
  9455                           tblptru	equ	0xFF8
  9456                           tblptrh	equ	0xFF7
  9457                           tblptrl	equ	0xFF6
  9458                           tablat	equ	0xFF5
  9459                           prodh	equ	0xFF4
  9460                           prodl	equ	0xFF3
  9461                           intcon	equ	0xFF2
  9462                           intcon2	equ	0xFF1
  9463                           postinc0	equ	0xFEE
  9464                           plusw0	equ	0xFEB
  9465                           fsr0h	equ	0xFEA
  9466                           fsr0l	equ	0xFE9
  9467                           wreg	equ	0xFE8
  9468                           postdec1	equ	0xFE5
  9469                           plusw1	equ	0xFE3
  9470                           fsr1h	equ	0xFE2
  9471                           fsr1l	equ	0xFE1
  9472                           indf2	equ	0xFDF
  9473                           postinc2	equ	0xFDE
  9474                           postdec2	equ	0xFDD
  9475                           plusw2	equ	0xFDB
  9476                           fsr2h	equ	0xFDA
  9477                           fsr2l	equ	0xFD9
  9478                           status	equ	0xFD8
  9479                           
  9480 ;; *************** function i2_i2c1_driver_resetBus *****************
  9481 ;; Defined at:
  9482 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      void 
  9489 ;; Registers used:
  9490 ;;		None
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9496 ;;      Params:         0       0       0       0       0       0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; This function calls:
  9503 ;;		Nothing
  9504 ;; This function is called by:
  9505 ;;		i2_do_I2C_RESET
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text90
  9510  0013DA                     __ptext90:
  9511                           	opt stack 0
  9512  0013DA                     i2_i2c1_driver_resetBus:
  9513                           	opt stack 18
  9514                           
  9515                           ;incstack = 0
  9516  0013DA  0012               	return		;funcret
  9517  0013DC                     __end_ofi2_i2c1_driver_resetBus:
  9518                           	opt stack 0
  9519                           tosu	equ	0xFFF
  9520                           tosh	equ	0xFFE
  9521                           tosl	equ	0xFFD
  9522                           pclatu	equ	0xFFB
  9523                           pclath	equ	0xFFA
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           intcon	equ	0xFF2
  9531                           intcon2	equ	0xFF1
  9532                           postinc0	equ	0xFEE
  9533                           plusw0	equ	0xFEB
  9534                           fsr0h	equ	0xFEA
  9535                           fsr0l	equ	0xFE9
  9536                           wreg	equ	0xFE8
  9537                           postdec1	equ	0xFE5
  9538                           plusw1	equ	0xFE3
  9539                           fsr1h	equ	0xFE2
  9540                           fsr1l	equ	0xFE1
  9541                           indf2	equ	0xFDF
  9542                           postinc2	equ	0xFDE
  9543                           postdec2	equ	0xFDD
  9544                           plusw2	equ	0xFDB
  9545                           fsr2h	equ	0xFDA
  9546                           fsr2l	equ	0xFD9
  9547                           status	equ	0xFD8
  9548                           
  9549 ;; *************** function i2_i2c1_driver_startRX *****************
  9550 ;; Defined at:
  9551 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;		None
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;		None
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      void 
  9558 ;; Registers used:
  9559 ;;		None
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9565 ;;      Params:         0       0       0       0       0       0       0
  9566 ;;      Locals:         0       0       0       0       0       0       0
  9567 ;;      Temps:          0       0       0       0       0       0       0
  9568 ;;      Totals:         0       0       0       0       0       0       0
  9569 ;;Total ram usage:        0 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; This function calls:
  9572 ;;		Nothing
  9573 ;; This function is called by:
  9574 ;;		i2_do_I2C_RCEN
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           	psect	text91
  9579  0013C0                     __ptext91:
  9580                           	opt stack 0
  9581  0013C0                     i2_i2c1_driver_startRX:
  9582                           	opt stack 18
  9583                           
  9584                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  9585                           
  9586                           ;incstack = 0
  9587  0013C0  86C5               	bsf	4037,3,c	;volatile
  9588  0013C2  0012               	return		;funcret
  9589  0013C4                     __end_ofi2_i2c1_driver_startRX:
  9590                           	opt stack 0
  9591                           tosu	equ	0xFFF
  9592                           tosh	equ	0xFFE
  9593                           tosl	equ	0xFFD
  9594                           pclatu	equ	0xFFB
  9595                           pclath	equ	0xFFA
  9596                           tblptru	equ	0xFF8
  9597                           tblptrh	equ	0xFF7
  9598                           tblptrl	equ	0xFF6
  9599                           tablat	equ	0xFF5
  9600                           prodh	equ	0xFF4
  9601                           prodl	equ	0xFF3
  9602                           intcon	equ	0xFF2
  9603                           intcon2	equ	0xFF1
  9604                           postinc0	equ	0xFEE
  9605                           plusw0	equ	0xFEB
  9606                           fsr0h	equ	0xFEA
  9607                           fsr0l	equ	0xFE9
  9608                           wreg	equ	0xFE8
  9609                           postdec1	equ	0xFE5
  9610                           plusw1	equ	0xFE3
  9611                           fsr1h	equ	0xFE2
  9612                           fsr1l	equ	0xFE1
  9613                           indf2	equ	0xFDF
  9614                           postinc2	equ	0xFDE
  9615                           postdec2	equ	0xFDD
  9616                           plusw2	equ	0xFDB
  9617                           fsr2h	equ	0xFDA
  9618                           fsr2l	equ	0xFD9
  9619                           status	equ	0xFD8
  9620                           
  9621 ;; *************** function i2_returnReset *****************
  9622 ;; Defined at:
  9623 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  9624 ;; Parameters:    Size  Location     Type
  9625 ;;  p               2    0[COMRAM] PTR void 
  9626 ;;		 -> NULL(0), 
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;                  1    wreg      enum E6842
  9631 ;; Registers used:
  9632 ;;		wreg
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9638 ;;      Params:         2       0       0       0       0       0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0
  9640 ;;      Temps:          0       0       0       0       0       0       0
  9641 ;;      Totals:         2       0       0       0       0       0       0
  9642 ;;Total ram usage:        2 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; This function calls:
  9645 ;;		Nothing
  9646 ;; This function is called by:
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           	psect	text92
  9651  0013C4                     __ptext92:
  9652                           	opt stack 0
  9653  0013C4                     i2_returnReset:
  9654                           	opt stack 18
  9655                           
  9656                           ;i2c_master.c: 515: return i2c_reset_link;
  9657                           
  9658                           ;incstack = 0
  9659  0013C4  0E05               	movlw	5
  9660  0013C6  0012               	return	
  9661  0013C8                     __end_ofi2_returnReset:
  9662                           	opt stack 0
  9663                           tosu	equ	0xFFF
  9664                           tosh	equ	0xFFE
  9665                           tosl	equ	0xFFD
  9666                           pclatu	equ	0xFFB
  9667                           pclath	equ	0xFFA
  9668                           tblptru	equ	0xFF8
  9669                           tblptrh	equ	0xFF7
  9670                           tblptrl	equ	0xFF6
  9671                           tablat	equ	0xFF5
  9672                           prodh	equ	0xFF4
  9673                           prodl	equ	0xFF3
  9674                           intcon	equ	0xFF2
  9675                           intcon2	equ	0xFF1
  9676                           postinc0	equ	0xFEE
  9677                           plusw0	equ	0xFEB
  9678                           fsr0h	equ	0xFEA
  9679                           fsr0l	equ	0xFE9
  9680                           wreg	equ	0xFE8
  9681                           postdec1	equ	0xFE5
  9682                           plusw1	equ	0xFE3
  9683                           fsr1h	equ	0xFE2
  9684                           fsr1l	equ	0xFE1
  9685                           indf2	equ	0xFDF
  9686                           postinc2	equ	0xFDE
  9687                           postdec2	equ	0xFDD
  9688                           plusw2	equ	0xFDB
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function i2_returnStop *****************
  9694 ;; Defined at:
  9695 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;  p               2    0[COMRAM] PTR void 
  9698 ;;		 -> NULL(0), 
  9699 ;; Auto vars:     Size  Location     Type
  9700 ;;		None
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  1    wreg      enum E6842
  9703 ;; Registers used:
  9704 ;;		wreg
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9710 ;;      Params:         2       0       0       0       0       0       0
  9711 ;;      Locals:         0       0       0       0       0       0       0
  9712 ;;      Temps:          0       0       0       0       0       0       0
  9713 ;;      Totals:         2       0       0       0       0       0       0
  9714 ;;Total ram usage:        2 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; This function calls:
  9717 ;;		Nothing
  9718 ;; This function is called by:
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text93
  9723  0013C8                     __ptext93:
  9724                           	opt stack 0
  9725  0013C8                     i2_returnStop:
  9726                           	opt stack 18
  9727                           
  9728                           ;i2c_master.c: 510: return i2c_stop;
  9729                           
  9730                           ;incstack = 0
  9731  0013C8  0E01               	movlw	1
  9732  0013CA  0012               	return	
  9733  0013CC                     __end_ofi2_returnStop:
  9734                           	opt stack 0
  9735                           tosu	equ	0xFFF
  9736                           tosh	equ	0xFFE
  9737                           tosl	equ	0xFFD
  9738                           pclatu	equ	0xFFB
  9739                           pclath	equ	0xFFA
  9740                           tblptru	equ	0xFF8
  9741                           tblptrh	equ	0xFF7
  9742                           tblptrl	equ	0xFF6
  9743                           tablat	equ	0xFF5
  9744                           prodh	equ	0xFF4
  9745                           prodl	equ	0xFF3
  9746                           intcon	equ	0xFF2
  9747                           intcon2	equ	0xFF1
  9748                           postinc0	equ	0xFEE
  9749                           plusw0	equ	0xFEB
  9750                           fsr0h	equ	0xFEA
  9751                           fsr0l	equ	0xFE9
  9752                           wreg	equ	0xFE8
  9753                           postdec1	equ	0xFE5
  9754                           plusw1	equ	0xFE3
  9755                           fsr1h	equ	0xFE2
  9756                           fsr1l	equ	0xFE1
  9757                           indf2	equ	0xFDF
  9758                           postinc2	equ	0xFDE
  9759                           postdec2	equ	0xFDD
  9760                           plusw2	equ	0xFDB
  9761                           fsr2h	equ	0xFDA
  9762                           fsr2l	equ	0xFD9
  9763                           status	equ	0xFD8
  9764                           
  9765 ;; *************** function i2_i2c1_driver_stop *****************
  9766 ;; Defined at:
  9767 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  9768 ;; Parameters:    Size  Location     Type
  9769 ;;		None
  9770 ;; Auto vars:     Size  Location     Type
  9771 ;;		None
  9772 ;; Return value:  Size  Location     Type
  9773 ;;                  1    wreg      void 
  9774 ;; Registers used:
  9775 ;;		None
  9776 ;; Tracked objects:
  9777 ;;		On entry : 0/0
  9778 ;;		On exit  : 0/0
  9779 ;;		Unchanged: 0/0
  9780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9781 ;;      Params:         0       0       0       0       0       0       0
  9782 ;;      Locals:         0       0       0       0       0       0       0
  9783 ;;      Temps:          0       0       0       0       0       0       0
  9784 ;;      Totals:         0       0       0       0       0       0       0
  9785 ;;Total ram usage:        0 bytes
  9786 ;; Hardware stack levels used:    1
  9787 ;; This function calls:
  9788 ;;		Nothing
  9789 ;; This function is called by:
  9790 ;;		i2_do_I2C_SEND_STOP
  9791 ;; This function uses a non-reentrant model
  9792 ;;
  9793                           
  9794                           	psect	text94
  9795  0013CC                     __ptext94:
  9796                           	opt stack 0
  9797  0013CC                     i2_i2c1_driver_stop:
  9798                           	opt stack 17
  9799                           
  9800                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  9801                           
  9802                           ;incstack = 0
  9803  0013CC  84C5               	bsf	4037,2,c	;volatile
  9804  0013CE  0012               	return		;funcret
  9805  0013D0                     __end_ofi2_i2c1_driver_stop:
  9806                           	opt stack 0
  9807                           tosu	equ	0xFFF
  9808                           tosh	equ	0xFFE
  9809                           tosl	equ	0xFFD
  9810                           pclatu	equ	0xFFB
  9811                           pclath	equ	0xFFA
  9812                           tblptru	equ	0xFF8
  9813                           tblptrh	equ	0xFF7
  9814                           tblptrl	equ	0xFF6
  9815                           tablat	equ	0xFF5
  9816                           prodh	equ	0xFF4
  9817                           prodl	equ	0xFF3
  9818                           intcon	equ	0xFF2
  9819                           intcon2	equ	0xFF1
  9820                           postinc0	equ	0xFEE
  9821                           plusw0	equ	0xFEB
  9822                           fsr0h	equ	0xFEA
  9823                           fsr0l	equ	0xFE9
  9824                           wreg	equ	0xFE8
  9825                           postdec1	equ	0xFE5
  9826                           plusw1	equ	0xFE3
  9827                           fsr1h	equ	0xFE2
  9828                           fsr1l	equ	0xFE1
  9829                           indf2	equ	0xFDF
  9830                           postinc2	equ	0xFDE
  9831                           postdec2	equ	0xFDD
  9832                           plusw2	equ	0xFDB
  9833                           fsr2h	equ	0xFDA
  9834                           fsr2l	equ	0xFD9
  9835                           status	equ	0xFD8
  9836                           
  9837 ;; *************** function i2_i2c1_driver_restart *****************
  9838 ;; Defined at:
  9839 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;                  1    wreg      void 
  9846 ;; Registers used:
  9847 ;;		None
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9853 ;;      Params:         0       0       0       0       0       0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0
  9855 ;;      Temps:          0       0       0       0       0       0       0
  9856 ;;      Totals:         0       0       0       0       0       0       0
  9857 ;;Total ram usage:        0 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; This function calls:
  9860 ;;		Nothing
  9861 ;; This function is called by:
  9862 ;;		i2_do_I2C_SEND_RESTART_READ
  9863 ;;		i2_do_I2C_SEND_RESTART_WRITE
  9864 ;;		i2_do_I2C_SEND_RESTART
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           	psect	text95
  9869  0013D0                     __ptext95:
  9870                           	opt stack 0
  9871  0013D0                     i2_i2c1_driver_restart:
  9872                           	opt stack 17
  9873                           
  9874                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  9875                           
  9876                           ;incstack = 0
  9877  0013D0  82C5               	bsf	4037,1,c	;volatile
  9878  0013D2  0012               	return		;funcret
  9879  0013D4                     __end_ofi2_i2c1_driver_restart:
  9880                           	opt stack 0
  9881                           tosu	equ	0xFFF
  9882                           tosh	equ	0xFFE
  9883                           tosl	equ	0xFFD
  9884                           pclatu	equ	0xFFB
  9885                           pclath	equ	0xFFA
  9886                           tblptru	equ	0xFF8
  9887                           tblptrh	equ	0xFF7
  9888                           tblptrl	equ	0xFF6
  9889                           tablat	equ	0xFF5
  9890                           prodh	equ	0xFF4
  9891                           prodl	equ	0xFF3
  9892                           intcon	equ	0xFF2
  9893                           intcon2	equ	0xFF1
  9894                           postinc0	equ	0xFEE
  9895                           plusw0	equ	0xFEB
  9896                           fsr0h	equ	0xFEA
  9897                           fsr0l	equ	0xFE9
  9898                           wreg	equ	0xFE8
  9899                           postdec1	equ	0xFE5
  9900                           plusw1	equ	0xFE3
  9901                           fsr1h	equ	0xFE2
  9902                           fsr1l	equ	0xFE1
  9903                           indf2	equ	0xFDF
  9904                           postinc2	equ	0xFDE
  9905                           postdec2	equ	0xFDD
  9906                           plusw2	equ	0xFDB
  9907                           fsr2h	equ	0xFDA
  9908                           fsr2l	equ	0xFD9
  9909                           status	equ	0xFD8
  9910                           
  9911 ;; *************** function i2_i2c1_driver_sendACK *****************
  9912 ;; Defined at:
  9913 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;		None
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;		None
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  1    wreg      void 
  9920 ;; Registers used:
  9921 ;;		None
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9927 ;;      Params:         0       0       0       0       0       0       0
  9928 ;;      Locals:         0       0       0       0       0       0       0
  9929 ;;      Temps:          0       0       0       0       0       0       0
  9930 ;;      Totals:         0       0       0       0       0       0       0
  9931 ;;Total ram usage:        0 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; This function calls:
  9934 ;;		Nothing
  9935 ;; This function is called by:
  9936 ;;		i2_do_I2C_DO_ACK
  9937 ;;		i2_do_I2C_RX
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text96
  9942  001384                     __ptext96:
  9943                           	opt stack 0
  9944  001384                     i2_i2c1_driver_sendACK:
  9945                           	opt stack 18
  9946                           
  9947                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  9948                           
  9949                           ;incstack = 0
  9950  001384  9AC5               	bcf	4037,5,c	;volatile
  9951                           
  9952                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  9953  001386  88C5               	bsf	4037,4,c	;volatile
  9954  001388  0012               	return		;funcret
  9955  00138A                     __end_ofi2_i2c1_driver_sendACK:
  9956                           	opt stack 0
  9957                           tosu	equ	0xFFF
  9958                           tosh	equ	0xFFE
  9959                           tosl	equ	0xFFD
  9960                           pclatu	equ	0xFFB
  9961                           pclath	equ	0xFFA
  9962                           tblptru	equ	0xFF8
  9963                           tblptrh	equ	0xFF7
  9964                           tblptrl	equ	0xFF6
  9965                           tablat	equ	0xFF5
  9966                           prodh	equ	0xFF4
  9967                           prodl	equ	0xFF3
  9968                           intcon	equ	0xFF2
  9969                           intcon2	equ	0xFF1
  9970                           postinc0	equ	0xFEE
  9971                           plusw0	equ	0xFEB
  9972                           fsr0h	equ	0xFEA
  9973                           fsr0l	equ	0xFE9
  9974                           wreg	equ	0xFE8
  9975                           postdec1	equ	0xFE5
  9976                           plusw1	equ	0xFE3
  9977                           fsr1h	equ	0xFE2
  9978                           fsr1l	equ	0xFE1
  9979                           indf2	equ	0xFDF
  9980                           postinc2	equ	0xFDE
  9981                           postdec2	equ	0xFDD
  9982                           plusw2	equ	0xFDB
  9983                           fsr2h	equ	0xFDA
  9984                           fsr2l	equ	0xFD9
  9985                           status	equ	0xFD8
  9986                           
  9987 ;; *************** function _i2c_busCollisionISR *****************
  9988 ;; Defined at:
  9989 ;;		line 500 in file "mcc_generated_files/drivers/i2c_master.c"
  9990 ;; Parameters:    Size  Location     Type
  9991 ;;		None
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;		None
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  1    wreg      void 
  9996 ;; Registers used:
  9997 ;;		cstack
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10003 ;;      Params:         0       0       0       0       0       0       0
 10004 ;;      Locals:         0       0       0       0       0       0       0
 10005 ;;      Temps:          0       0       0       0       0       0       0
 10006 ;;      Totals:         0       0       0       0       0       0       0
 10007 ;;Total ram usage:        0 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; Hardware stack levels required when called:    1
 10010 ;; This function calls:
 10011 ;;		_i2c1_driver_clearBusCollision
 10012 ;; This function is called by:
 10013 ;;		_i2c_open
 10014 ;;		_INTERRUPT_InterruptManager
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text97
 10019  00138A                     __ptext97:
 10020                           	opt stack 0
 10021  00138A                     _i2c_busCollisionISR:
 10022                           	opt stack 19
 10023                           
 10024                           ;i2c_master.c: 502: i2c1_driver_clearBusCollision();
 10025                           
 10026                           ;incstack = 0
 10027  00138A  ECEA  F009         	call	_i2c1_driver_clearBusCollision	;wreg free
 10028  00138E  0012               	return		;funcret
 10029  001390                     __end_of_i2c_busCollisionISR:
 10030                           	opt stack 0
 10031                           tosu	equ	0xFFF
 10032                           tosh	equ	0xFFE
 10033                           tosl	equ	0xFFD
 10034                           pclatu	equ	0xFFB
 10035                           pclath	equ	0xFFA
 10036                           tblptru	equ	0xFF8
 10037                           tblptrh	equ	0xFF7
 10038                           tblptrl	equ	0xFF6
 10039                           tablat	equ	0xFF5
 10040                           prodh	equ	0xFF4
 10041                           prodl	equ	0xFF3
 10042                           intcon	equ	0xFF2
 10043                           intcon2	equ	0xFF1
 10044                           postinc0	equ	0xFEE
 10045                           plusw0	equ	0xFEB
 10046                           fsr0h	equ	0xFEA
 10047                           fsr0l	equ	0xFE9
 10048                           wreg	equ	0xFE8
 10049                           postdec1	equ	0xFE5
 10050                           plusw1	equ	0xFE3
 10051                           fsr1h	equ	0xFE2
 10052                           fsr1l	equ	0xFE1
 10053                           indf2	equ	0xFDF
 10054                           postinc2	equ	0xFDE
 10055                           postdec2	equ	0xFDD
 10056                           plusw2	equ	0xFDB
 10057                           fsr2h	equ	0xFDA
 10058                           fsr2l	equ	0xFD9
 10059                           status	equ	0xFD8
 10060                           
 10061 ;; *************** function _i2c1_driver_clearBusCollision *****************
 10062 ;; Defined at:
 10063 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;		None
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;		None
 10068 ;; Return value:  Size  Location     Type
 10069 ;;                  1    wreg      void 
 10070 ;; Registers used:
 10071 ;;		None
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10077 ;;      Params:         0       0       0       0       0       0       0
 10078 ;;      Locals:         0       0       0       0       0       0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0
 10080 ;;      Totals:         0       0       0       0       0       0       0
 10081 ;;Total ram usage:        0 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; This function calls:
 10084 ;;		Nothing
 10085 ;; This function is called by:
 10086 ;;		_i2c_busCollisionISR
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           	psect	text98
 10091  0013D4                     __ptext98:
 10092                           	opt stack 0
 10093  0013D4                     _i2c1_driver_clearBusCollision:
 10094                           	opt stack 19
 10095                           
 10096                           ;i2c1_driver.c: 255: PIR2bits.BCL1IF = 0;
 10097                           
 10098                           ;incstack = 0
 10099  0013D4  96A1               	bcf	4001,3,c	;volatile
 10100  0013D6  0012               	return		;funcret
 10101  0013D8                     __end_of_i2c1_driver_clearBusCollision:
 10102                           	opt stack 0
 10103                           tosu	equ	0xFFF
 10104                           tosh	equ	0xFFE
 10105                           tosl	equ	0xFFD
 10106                           pclatu	equ	0xFFB
 10107                           pclath	equ	0xFFA
 10108                           tblptru	equ	0xFF8
 10109                           tblptrh	equ	0xFF7
 10110                           tblptrl	equ	0xFF6
 10111                           tablat	equ	0xFF5
 10112                           prodh	equ	0xFF4
 10113                           prodl	equ	0xFF3
 10114                           intcon	equ	0xFF2
 10115                           intcon2	equ	0xFF1
 10116                           postinc0	equ	0xFEE
 10117                           plusw0	equ	0xFEB
 10118                           fsr0h	equ	0xFEA
 10119                           fsr0l	equ	0xFE9
 10120                           wreg	equ	0xFE8
 10121                           postdec1	equ	0xFE5
 10122                           plusw1	equ	0xFE3
 10123                           fsr1h	equ	0xFE2
 10124                           fsr1l	equ	0xFE1
 10125                           indf2	equ	0xFDF
 10126                           postinc2	equ	0xFDE
 10127                           postdec2	equ	0xFDD
 10128                           plusw2	equ	0xFDB
 10129                           fsr2h	equ	0xFDA
 10130                           fsr2l	equ	0xFD9
 10131                           status	equ	0xFD8
 10132                           
 10133 ;; *************** function _EUSART1_Transmit_ISR *****************
 10134 ;; Defined at:
 10135 ;;		line 183 in file "mcc_generated_files/eusart1.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;		None
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;		None
 10140 ;; Return value:  Size  Location     Type
 10141 ;;                  1    wreg      void 
 10142 ;; Registers used:
 10143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10144 ;; Tracked objects:
 10145 ;;		On entry : 0/0
 10146 ;;		On exit  : 0/0
 10147 ;;		Unchanged: 0/0
 10148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10149 ;;      Params:         0       0       0       0       0       0       0
 10150 ;;      Locals:         0       0       0       0       0       0       0
 10151 ;;      Temps:          0       0       0       0       0       0       0
 10152 ;;      Totals:         0       0       0       0       0       0       0
 10153 ;;Total ram usage:        0 bytes
 10154 ;; Hardware stack levels used:    1
 10155 ;; This function calls:
 10156 ;;		Nothing
 10157 ;; This function is called by:
 10158 ;;		_EUSART1_Initialize
 10159 ;;		_INTERRUPT_InterruptManager
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           	psect	text99
 10164  000FF8                     __ptext99:
 10165                           	opt stack 0
 10166  000FF8                     _EUSART1_Transmit_ISR:
 10167                           	opt stack 20
 10168                           
 10169                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 10170                           
 10171                           ;incstack = 0
 10172  000FF8  0E08               	movlw	8
 10173  000FFA  6049               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 10174  000FFC  D012               	goto	i2l321
 10175                           
 10176                           ;eusart1.c: 188: {
 10177                           ;eusart1.c: 189: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 10178  000FFE  501B               	movf	_eusart1TxTail,w,c	;volatile
 10179  001000  0D01               	mullw	1
 10180  001002  0E09               	movlw	low _eusart1TxBuffer
 10181  001004  24F3               	addwf	prodl,w,c
 10182  001006  6ED9               	movwf	fsr2l,c
 10183  001008  0E00               	movlw	high _eusart1TxBuffer
 10184  00100A  20F4               	addwfc	prodh,w,c
 10185  00100C  6EDA               	movwf	fsr2h,c
 10186  00100E  50DF               	movf	indf2,w,c
 10187  001010  6EAD               	movwf	4013,c	;volatile
 10188  001012  2A1B               	incf	_eusart1TxTail,f,c	;volatile
 10189                           
 10190                           ;eusart1.c: 190: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 10191  001014  0E07               	movlw	7
 10192  001016  641B               	cpfsgt	_eusart1TxTail,c	;volatile
 10193  001018  D002               	goto	i2l322
 10194                           
 10195                           ;eusart1.c: 191: {
 10196                           ;eusart1.c: 192: eusart1TxTail = 0;
 10197  00101A  0E00               	movlw	0
 10198  00101C  6E1B               	movwf	_eusart1TxTail,c	;volatile
 10199  00101E                     i2l322:
 10200                           
 10201                           ;eusart1.c: 193: }
 10202                           ;eusart1.c: 194: eusart1TxBufferRemaining++;
 10203  00101E  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 10204                           
 10205                           ;eusart1.c: 195: }
 10206  001020  0012               	return	
 10207  001022                     i2l321:
 10208                           
 10209                           ;eusart1.c: 196: else
 10210                           ;eusart1.c: 197: {
 10211                           ;eusart1.c: 198: PIE1bits.TX1IE = 0;
 10212  001022  989D               	bcf	3997,4,c	;volatile
 10213  001024  0012               	return	
 10214  001026                     __end_of_EUSART1_Transmit_ISR:
 10215                           	opt stack 0
 10216                           tosu	equ	0xFFF
 10217                           tosh	equ	0xFFE
 10218                           tosl	equ	0xFFD
 10219                           pclatu	equ	0xFFB
 10220                           pclath	equ	0xFFA
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           intcon	equ	0xFF2
 10228                           intcon2	equ	0xFF1
 10229                           postinc0	equ	0xFEE
 10230                           plusw0	equ	0xFEB
 10231                           fsr0h	equ	0xFEA
 10232                           fsr0l	equ	0xFE9
 10233                           wreg	equ	0xFE8
 10234                           postdec1	equ	0xFE5
 10235                           plusw1	equ	0xFE3
 10236                           fsr1h	equ	0xFE2
 10237                           fsr1l	equ	0xFE1
 10238                           indf2	equ	0xFDF
 10239                           postinc2	equ	0xFDE
 10240                           postdec2	equ	0xFDD
 10241                           plusw2	equ	0xFDB
 10242                           fsr2h	equ	0xFDA
 10243                           fsr2l	equ	0xFD9
 10244                           status	equ	0xFD8
 10245                           
 10246 ;; *************** function _EUSART1_Receive_ISR *****************
 10247 ;; Defined at:
 10248 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;		None
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;		None
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  1    wreg      void 
 10255 ;; Registers used:
 10256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10262 ;;      Params:         0       0       0       0       0       0       0
 10263 ;;      Locals:         0       0       0       0       0       0       0
 10264 ;;      Temps:          0       0       0       0       0       0       0
 10265 ;;      Totals:         0       0       0       0       0       0       0
 10266 ;;Total ram usage:        0 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; This function calls:
 10269 ;;		Nothing
 10270 ;; This function is called by:
 10271 ;;		_EUSART1_Initialize
 10272 ;;		_INTERRUPT_InterruptManager
 10273 ;; This function uses a non-reentrant model
 10274 ;;
 10275                           
 10276                           	psect	text100
 10277  001026                     __ptext100:
 10278                           	opt stack 0
 10279  001026                     _EUSART1_Receive_ISR:
 10280                           	opt stack 20
 10281                           
 10282                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 10283                           
 10284                           ;incstack = 0
 10285  001026  A2AB               	btfss	4011,1,c	;volatile
 10286  001028  D002               	goto	i2l327
 10287                           
 10288                           ;eusart1.c: 206: {
 10289                           ;eusart1.c: 209: RCSTA1bits.CREN = 0;
 10290  00102A  98AB               	bcf	4011,4,c	;volatile
 10291                           
 10292                           ;eusart1.c: 210: RCSTA1bits.CREN = 1;
 10293  00102C  88AB               	bsf	4011,4,c	;volatile
 10294  00102E                     i2l327:
 10295                           
 10296                           ;eusart1.c: 211: }
 10297                           ;eusart1.c: 214: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 10298  00102E  501A               	movf	_eusart1RxHead,w,c	;volatile
 10299  001030  0D01               	mullw	1
 10300  001032  0E01               	movlw	low _eusart1RxBuffer
 10301  001034  24F3               	addwf	prodl,w,c
 10302  001036  6ED9               	movwf	fsr2l,c
 10303  001038  0E00               	movlw	high _eusart1RxBuffer
 10304  00103A  20F4               	addwfc	prodh,w,c
 10305  00103C  6EDA               	movwf	fsr2h,c
 10306  00103E  CFAE FFDF          	movff	4014,indf2	;volatile
 10307  001042  2A1A               	incf	_eusart1RxHead,f,c	;volatile
 10308                           
 10309                           ;eusart1.c: 215: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 10310  001044  0E07               	movlw	7
 10311  001046  641A               	cpfsgt	_eusart1RxHead,c	;volatile
 10312  001048  D002               	goto	i2l328
 10313                           
 10314                           ;eusart1.c: 216: {
 10315                           ;eusart1.c: 217: eusart1RxHead = 0;
 10316  00104A  0E00               	movlw	0
 10317  00104C  6E1A               	movwf	_eusart1RxHead,c	;volatile
 10318  00104E                     i2l328:
 10319                           
 10320                           ;eusart1.c: 218: }
 10321                           ;eusart1.c: 219: eusart1RxCount++;
 10322  00104E  2A18               	incf	_eusart1RxCount,f,c	;volatile
 10323  001050  0012               	return		;funcret
 10324  001052                     __end_of_EUSART1_Receive_ISR:
 10325                           	opt stack 0
 10326                           tosu	equ	0xFFF
 10327                           tosh	equ	0xFFE
 10328                           tosl	equ	0xFFD
 10329                           pclatu	equ	0xFFB
 10330                           pclath	equ	0xFFA
 10331                           tblptru	equ	0xFF8
 10332                           tblptrh	equ	0xFF7
 10333                           tblptrl	equ	0xFF6
 10334                           tablat	equ	0xFF5
 10335                           prodh	equ	0xFF4
 10336                           prodl	equ	0xFF3
 10337                           intcon	equ	0xFF2
 10338                           intcon2	equ	0xFF1
 10339                           postinc0	equ	0xFEE
 10340                           plusw0	equ	0xFEB
 10341                           fsr0h	equ	0xFEA
 10342                           fsr0l	equ	0xFE9
 10343                           wreg	equ	0xFE8
 10344                           postdec1	equ	0xFE5
 10345                           plusw1	equ	0xFE3
 10346                           fsr1h	equ	0xFE2
 10347                           fsr1l	equ	0xFE1
 10348                           indf2	equ	0xFDF
 10349                           postinc2	equ	0xFDE
 10350                           postdec2	equ	0xFDD
 10351                           plusw2	equ	0xFDB
 10352                           fsr2h	equ	0xFDA
 10353                           fsr2l	equ	0xFD9
 10354                           status	equ	0xFD8
 10355                           tosu	equ	0xFFF
 10356                           tosh	equ	0xFFE
 10357                           tosl	equ	0xFFD
 10358                           pclatu	equ	0xFFB
 10359                           pclath	equ	0xFFA
 10360                           tblptru	equ	0xFF8
 10361                           tblptrh	equ	0xFF7
 10362                           tblptrl	equ	0xFF6
 10363                           tablat	equ	0xFF5
 10364                           prodh	equ	0xFF4
 10365                           prodl	equ	0xFF3
 10366                           intcon	equ	0xFF2
 10367                           intcon2	equ	0xFF1
 10368                           postinc0	equ	0xFEE
 10369                           plusw0	equ	0xFEB
 10370                           fsr0h	equ	0xFEA
 10371                           fsr0l	equ	0xFE9
 10372                           wreg	equ	0xFE8
 10373                           postdec1	equ	0xFE5
 10374                           plusw1	equ	0xFE3
 10375                           fsr1h	equ	0xFE2
 10376                           fsr1l	equ	0xFE1
 10377                           indf2	equ	0xFDF
 10378                           postinc2	equ	0xFDE
 10379                           postdec2	equ	0xFDD
 10380                           plusw2	equ	0xFDB
 10381                           fsr2h	equ	0xFDA
 10382                           fsr2l	equ	0xFD9
 10383                           status	equ	0xFD8
 10384                           
 10385                           	psect	text101
 10386  000000                     __ptext101:
 10387                           	opt stack 0
 10388                           tosu	equ	0xFFF
 10389                           tosh	equ	0xFFE
 10390                           tosl	equ	0xFFD
 10391                           pclatu	equ	0xFFB
 10392                           pclath	equ	0xFFA
 10393                           tblptru	equ	0xFF8
 10394                           tblptrh	equ	0xFF7
 10395                           tblptrl	equ	0xFF6
 10396                           tablat	equ	0xFF5
 10397                           prodh	equ	0xFF4
 10398                           prodl	equ	0xFF3
 10399                           intcon	equ	0xFF2
 10400                           intcon2	equ	0xFF1
 10401                           postinc0	equ	0xFEE
 10402                           plusw0	equ	0xFEB
 10403                           fsr0h	equ	0xFEA
 10404                           fsr0l	equ	0xFE9
 10405                           wreg	equ	0xFE8
 10406                           postdec1	equ	0xFE5
 10407                           plusw1	equ	0xFE3
 10408                           fsr1h	equ	0xFE2
 10409                           fsr1l	equ	0xFE1
 10410                           indf2	equ	0xFDF
 10411                           postinc2	equ	0xFDE
 10412                           postdec2	equ	0xFDD
 10413                           plusw2	equ	0xFDB
 10414                           fsr2h	equ	0xFDA
 10415                           fsr2l	equ	0xFD9
 10416                           status	equ	0xFD8
 10417                           
 10418                           	psect	rparam
 10419  0000                     tosu	equ	0xFFF
 10420                           tosh	equ	0xFFE
 10421                           tosl	equ	0xFFD
 10422                           pclatu	equ	0xFFB
 10423                           pclath	equ	0xFFA
 10424                           tblptru	equ	0xFF8
 10425                           tblptrh	equ	0xFF7
 10426                           tblptrl	equ	0xFF6
 10427                           tablat	equ	0xFF5
 10428                           prodh	equ	0xFF4
 10429                           prodl	equ	0xFF3
 10430                           intcon	equ	0xFF2
 10431                           intcon2	equ	0xFF1
 10432                           postinc0	equ	0xFEE
 10433                           plusw0	equ	0xFEB
 10434                           fsr0h	equ	0xFEA
 10435                           fsr0l	equ	0xFE9
 10436                           wreg	equ	0xFE8
 10437                           postdec1	equ	0xFE5
 10438                           plusw1	equ	0xFE3
 10439                           fsr1h	equ	0xFE2
 10440                           fsr1l	equ	0xFE1
 10441                           indf2	equ	0xFDF
 10442                           postinc2	equ	0xFDE
 10443                           postdec2	equ	0xFDD
 10444                           plusw2	equ	0xFDB
 10445                           fsr2h	equ	0xFDA
 10446                           fsr2l	equ	0xFD9
 10447                           status	equ	0xFD8
 10448                           
 10449                           	psect	temp
 10450  00004A                     btemp:
 10451                           	opt stack 0
 10452  00004A                     	ds	1
 10453  0000                     int$flags	set	btemp
 10454  0000                     wtemp6	set	btemp+1
 10455                           tosu	equ	0xFFF
 10456                           tosh	equ	0xFFE
 10457                           tosl	equ	0xFFD
 10458                           pclatu	equ	0xFFB
 10459                           pclath	equ	0xFFA
 10460                           tblptru	equ	0xFF8
 10461                           tblptrh	equ	0xFF7
 10462                           tblptrl	equ	0xFF6
 10463                           tablat	equ	0xFF5
 10464                           prodh	equ	0xFF4
 10465                           prodl	equ	0xFF3
 10466                           intcon	equ	0xFF2
 10467                           intcon2	equ	0xFF1
 10468                           postinc0	equ	0xFEE
 10469                           plusw0	equ	0xFEB
 10470                           fsr0h	equ	0xFEA
 10471                           fsr0l	equ	0xFE9
 10472                           wreg	equ	0xFE8
 10473                           postdec1	equ	0xFE5
 10474                           plusw1	equ	0xFE3
 10475                           fsr1h	equ	0xFE2
 10476                           fsr1l	equ	0xFE1
 10477                           indf2	equ	0xFDF
 10478                           postinc2	equ	0xFDE
 10479                           postdec2	equ	0xFDD
 10480                           plusw2	equ	0xFDB
 10481                           fsr2h	equ	0xFDA
 10482                           fsr2l	equ	0xFD9
 10483                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    10
    Data        86
    BSS         74
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      73
    BANK0           160     58     135
    BANK1           256      0      50
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_ISR$2291	PTR const FTN()enum E7019 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$11$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[3]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    i2c1_driver_setI2cISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART1_SetRxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_SetTxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E7019[18] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    S53$callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S53$data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _read_xyzvalues->_i2c_masterAccelRead
    _printf->___lwmod
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _printString->_EUSART1_Write
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ACCELEROMETER_Initialize->_read_register
    _ACCELEROMETER_Initialize->_write_register
    _i2c_masterWrite->_i2c_masterOperation
    _read_register->_i2c_masterAccelRead
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterAccelRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_REGISTER->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_INITIAL_READ->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX

Critical Paths under _main in BANK0

    _main->_printString

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   10280
                                             33 COMRAM     2     2      0
                                             52 BANK0      6     6      0
           _ACCELEROMETER_Initialize
                  _SYSTEM_Initialize
                        _printString
                             _printf
                     _read_xyzvalues
 ---------------------------------------------------------------------------------
 (1) _read_xyzvalues                                      12     6      6    2685
                                             26 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    17      8    1669
                                             32 COMRAM     1     1      0
                                              0 BANK0     15     7      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             27 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             20 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printString                                         54    54      0     198
                                             21 COMRAM     2     2      0
                                              0 BANK0     52    52      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ACCELEROMETER_Initialize                             2     2      0    5384
                                             27 COMRAM     2     2      0
                      _read_register
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _write_register                                       2     1      1    3007
                                             25 COMRAM     2     1      1
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0    1390
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (2) _read_register                                        1     1      0    2377
                                             26 COMRAM     1     1      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4     602
                                             20 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     286
                                             22 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterAccelRead                                  1     1      0    1421
                                             25 COMRAM     1     1      0
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0    1390
                                             23 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0    1322
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0    1232
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
           _do_I2C_SEND_INITIAL_READ *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _do_I2C_TX_REGISTER *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_REGISTER                                   0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0     328
                                             21 COMRAM     2     2      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_INITIAL_READ                             0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0     260
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2     260
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            1     1      0      37
                                             20 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     563
                                              2 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (11) i2_i2c_ISR                                           0     0      0     563
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
         i2_do_I2C_SEND_INITIAL_READ *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_do_I2C_TX_REGISTER *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (12) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_REGISTER                                0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_EMPTY                                   0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                     i2_mssp1_setIRQ
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX                                         2     2      0     163
                                              0 COMRAM     2     2      0
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_INITIAL_READ                          0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RX                                         0     0      0     104
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_returnStop                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_returnReset                                       2     0      2     104
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (12) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACCELEROMETER_Initialize
     _read_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterAccelRead
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
     _write_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printString
     _EUSART1_Write
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _EUSART1_Write
   _read_xyzvalues
     _i2c_close
       _mssp1_clearIRQ
       _mssp1_disableIRQ
     _i2c_masterAccelRead
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _returnReset *
               _returnStop *
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               _do_I2C_DO_NACK_RESTART
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData
               _i2c1_driver_sendACK
               _returnReset *
               _returnStop *
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_INITIAL_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               _do_I2C_SEND_RESTART_READ
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _i2c1_driver_TXData
               _i2c1_driver_isNACK
               _returnReset *
               _returnStop *
             _do_I2C_TX_EMPTY *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _mssp1_setIRQ
               _returnReset *
               _returnStop *
             _do_I2C_TX_REGISTER *
               _i2c1_driver_TXData
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       i2_do_I2C_DO_NACK_RESTART
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData
       i2_i2c1_driver_sendACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_INITIAL_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       i2_do_I2C_SEND_RESTART_READ
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData
       i2_i2c1_driver_isNACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_EMPTY *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_mssp1_setIRQ
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_REGISTER *
       i2_i2c1_driver_TXData
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      32       6       19.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3A      87       4       84.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      49       1       77.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102       9        0.0%
DATA                 0      0     102      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 26 15:17:39 2018

                ??i2_i2c1_driver_startRX 0026             _do_I2C_TX_REGISTER$intlevel0 1192  
                           returnReset@p 003A                 _eusart1TxBufferRemaining 0049  
          _do_I2C_SEND_RESTART$intlevel0 1292                                       l83 10BA  
                                     l95 0E34                                       l96 0E26  
                                     l97 0E48                                       l98 0E2A  
                                     l99 0E2E                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 128C                     __size_of_do_I2C_RCEN 0012  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                            __CFG_LVP$ON 000000                                      l100 0E56  
                                    l201 0C34                                      l113 10EA  
                                    l202 0C3C                                      l114 10DA  
                                    l310 0F62                                      l311 0F60  
                                    l161 0D94                                      l209 0D48  
                                    l162 0D88                                      l170 07FC  
                                    l171 07EA                                      l180 0864  
                                    l165 0D8E                                      l173 07F0  
                                    l309 0F3E                                      l174 07F6  
                                    l191 09CC                                      l169 0836  
                                    l185 09C2                                      l188 09D2  
                                    l189 09C6                                      l197 0C42  
                                    l613 0A90                                      l198 0C2E  
                                    l606 0BEE                                      l608 0C20  
                                    l636 0B12                                      l671 0622  
                                    l680 0686                                      l672 0632  
                                    l684 06C8                                      l685 071A  
                                    l686 06CE                                      l678 065E  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
        __end_ofi2_i2c1_driver_getRXData 13C0             __size_of_i2c_masterOperation 0048  
                   _returnStop$intlevel0 131E                    __size_of_do_I2C_RESET 0016  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8                               _TXSTA1bits 000FAC  
        i2c1_driver_setBusCollisionISR@f 003A                              i2_do_I2C_RX 0A0C  
                            i2_do_I2C_TX 0902                                     l1103 0F00  
                                   l1104 0EF8                                     l1107 0F18  
                                   l1108 0F22                                     l1093 0CF6  
                                   l1094 0CEE                                     l1097 0D16  
                                   l1098 0D20                                     l4017 068A  
                                   l3715 0F2E                                     l3939 0BDE  
                         i2_mssp1_setIRQ 13B8                   __size_ofi2_do_I2C_IDLE 000C  
                                   STR_1 060B                                     STR_2 0612  
                                   u2121 0A9A                   __size_ofi2_do_I2C_RCEN 000C  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u2137 0AAC  
                                   u1530 11B6                                     u2147 0C0A  
                                   u1700 0CFA                                     u2157 0B04  
                                   u1518 09E2                                     u1519 09F6  
                                   u2167 11BC                                     u1528 0C52  
                                   u1529 0C66                                     u1730 0F04  
                                   u1468 0DA4                                     u1580 11F2  
                                   u1469 0DB8                                     u1821 0BCC  
                                   u1910 06B6                                     u1488 080C  
                                   u1489 0820                                     u1578 0D5E  
                                   u1930 0724                                     u1579 0D72  
                                   u1588 11F4                                     u1861 08F8  
                   ?_do_I2C_SEND_RESTART 0026                                     _WPUB 000F61  
                          _EUSART1_Write 0F2C        __size_of_do_I2C_SEND_RESTART_READ 000E  
                   __end_ofi2_returnStop 13CC                ?_do_I2C_SEND_RESTART_READ 0026  
                                   _main 0A80                __size_of_do_I2C_SEND_STOP 000E  
                 __size_of_do_I2C_DO_ACK 000E                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   fsr0l 000FE9                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                                   btemp 004A                            __CFG_BORV$190 000000  
                           printString@i 0092                    ?_do_I2C_SEND_ADR_READ 0026  
                                   prodh 000FF4                                     prodl 000FF3  
        ??_i2c1_driver_clearBusCollision 0026                                     start 0106  
                          __CFG_IESO$OFF 000000                            _i2c_setBuffer 10BE  
                        __end_of_i2c_ISR 0D78                             ___param_bank 000000  
               ??_do_I2C_DO_NACK_RESTART 003A                __size_of_mssp1_disableIRQ 0004  
                           _do_I2C_RESET 114A           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 1246                 __end_of_i2c1_driver_open 1108  
                                  ?_main 0026                 __end_of_i2c1_driver_stop 13A4  
             __end_of_i2c1_driver_TXData 1332                           __CFG_DEBUG$OFF 000000  
                        __end_of___lwdiv 0D2A                                    i2l201 0C8C  
                        __end_of___lwmod 0F2C                                    i2l202 0C94  
                __size_ofi2_do_I2C_RESET 0010                                    i2l321 1022  
                                  i2l161 0EB8                                    i2l209 0E72  
                                  i2l322 101E                                    i2l162 0EAC  
                                  i2l170 091E                                    i2l171 090C  
                                  i2l180 0986                                    i2l165 0EB2  
                                  i2l173 0912                                    i2l174 0918  
                                  i2l327 102E                                    i2l191 0A40  
                                  i2l328 104E                                    i2l169 0958  
                                  i2l185 0A36                                    i2l188 0A46  
                                  i2l189 0A3A                                    i2l197 0C9A  
                                  i2l198 0C86                                    i2l571 009A  
                                  i2l567 006C                                    i2l569 0082  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 0FF8  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                              i2c_open@ret 003C  
                          __CFG_WRTB$OFF 000000                    __end_ofi2_returnReset 13C8  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                 __end_ofi2_mssp1_setIRQ 13BC                           __CFG_EBTRB$OFF 000000  
             __end_of_i2c1_driver_isNACK 1176                          __end_of_dpowers 060B  
                      write_register@reg 0040                       __size_ofi2_i2c_ISR 0048  
             ?_do_I2C_SEND_RESTART_WRITE 0026                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 12DC                    ??_do_I2C_SEND_RESTART 003A  
                          i2returnStop@p 0026   __end_of_i2c1_driver_setBusCollisionISR 130E  
__size_of_i2c1_driver_setBusCollisionISR 000A           _i2c1_driver_setBusCollisionISR 1304  
                         ?_EUSART1_Write 0026                                    pclath 000FFA  
                                  tablat 000FF5                  __size_of_mssp1_clearIRQ 0004  
                                  plusw0 000FEB                                    plusw1 000FE3  
                                  plusw2 000FDB                   ?_do_I2C_SEND_ADR_WRITE 0026  
                                  status 000FD8                                    wtemp6 004B  
                         __CFG_HFOFST$ON 000000          __size_ofi2_i2c1_driver_sendNACK 0006  
                         ?_i2c_setBuffer 003A                           __CFG_PBADEN$ON 000000  
        __size_ofi2_i2c1_driver_resetBus 0002                            _fsmStateTable 00BF  
                        __initialization 0B5C                               _i2c_poller 10D8  
                             _i2c_status 009A               __end_of_EUSART1_Initialize 0E12  
                           __end_of_main 0AF0                            i2_do_I2C_IDLE 12D0  
                          i2_do_I2C_RCEN 12C4                         __end_of_i2c_open 07DA  
            ?_INTERRUPT_InterruptManager 0026                         i2_mssp1_clearIRQ 13B4  
       __end_ofi2_do_I2C_DO_ADDRESS_NACK 0EEA                            _do_I2C_DO_ACK 1270  
                                 ??_main 0047                            _do_I2C_TX$315 003B  
          __size_of_i2c1_driver_sendNACK 0006                            __activetblptr 000002  
                           i2c_close@ret 003A                      _i2c_masterAccelRead 1246  
                  ?_EUSART1_Transmit_ISR 0026            __size_of_i2c1_driver_resetBus 0002  
                ?_do_I2C_DO_ADDRESS_NACK 0026                          ?i2_mssp1_setIRQ 0026  
     __end_ofi2_do_I2C_SEND_RESTART_READ 136A               i2_do_I2C_SEND_RESTART_READ 1362  
                       ??_read_xyzvalues 0046                                   _ANSELA 000F38  
                                 ?_putch 0026                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                 __size_ofi2_do_I2C_DO_ACK 0008  
                       ??_write_register 0040                           __CFG_WDTEN$OFF 000000  
                                 _RCREG1 000FAE                                   _RCSTA1 000FAB  
                     __size_of_i2c_close 001E                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                  i2_do_I2C_SEND_ADR_WRITE 11F8  
                 ??_do_I2C_SEND_ADR_READ 003A            __size_ofi2_do_I2C_TX_REGISTER 000E  
                              ??_i2c_ISR 003D                                   _TXREG1 000FAD  
                                 _TXSTA1 000FAC                     ?_i2c_masterAccelRead 0026  
           i2c_masterOperation@operation 003D                  ??i2_do_I2C_SEND_RESTART 0026  
            ?i2_do_I2C_SEND_INITIAL_READ 0026                 _do_I2C_SEND_INITIAL_READ 111E  
                         __CFG_XINST$OFF 000000         __size_ofi2_i2c1_driver_getRXData 0004  
                  _i2c1_driver_getRXData 1398                       i2_i2c1_driver_stop 13CC  
                    _do_I2C_RX$intlevel0 0998        __size_of_ACCELEROMETER_Initialize 006C  
            __end_of_do_I2C_DO_NACK_STOP 1270                ?_ACCELEROMETER_Initialize 0026  
                         ?i2_do_I2C_IDLE 0026                          _i2c_masterWrite 1322  
                         ?i2_do_I2C_RCEN 0026    __end_of_i2c1_driver_clearBusCollision 13D8  
 __size_of_i2c1_driver_clearBusCollision 0004            _i2c1_driver_clearBusCollision 13D4  
                         __CFG_STVREN$ON 000000                        __end_ofi2_i2c_ISR 0EA2  
        __size_of_do_I2C_DO_NACK_RESTART 000E                                ??___lwdiv 003E  
                              ??___lwmod 0045                       write_register@data 003F  
                         i2returnReset@p 0026                                   clear_0 0BA2  
                                 clear_1 0BAE                           ?_do_I2C_DO_ACK 0026  
                                 _printf 0616                      ?i2_i2c1_driver_stop 0026  
                 i2_i2c1_driver_sendNACK 137E                   i2c1_driver_setI2cISR@f 003A  
            __end_of_i2c1_driver_sendACK 137E           __end_of_do_I2C_DO_ADDRESS_NACK 0DC6  
                 i2_i2c1_driver_resetBus 13DA                             __mediumconst 0000  
   __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008              __end_of_i2c1_driver_restart 13A8  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_returnReset 003A  
          _do_I2C_DO_NACK_STOP$intlevel0 1268                    _i2c1_driver_setI2cISR 12FA  
            __end_of_i2c1_driver_startRX 13A0                          ??_EUSART1_Write 003A  
                  __size_ofi2_returnStop 0004                          _eusart1RxBuffer 0001  
   EUSART1_SetTxInterruptHandler@handler 003A           __size_ofi2_do_I2C_DO_NACK_STOP 0008  
          __size_of_INTERRUPT_Initialize 0004            __end_ofi2_do_I2C_DO_NACK_STOP 1342  
                           ?_printString 0026                          _eusart1TxBuffer 0009  
                      _SYSTEM_Initialize 11A0                               __accesstop 0060  
                   ??i2_i2c1_driver_stop 0026                  __end_of__initialization 0BB4  
                        ??_i2c_setBuffer 003E           _do_I2C_SEND_ADR_READ$intlevel0 113A  
                       _do_I2C_SEND_STOP 127E                       __size_of_do_I2C_RX 007A  
                     _do_I2C_TX_REGISTER 118C                       __size_of_do_I2C_TX 0096  
                 __size_of_read_register 002E                       ?_SYSTEM_Initialize 0026  
                  ??_i2c_masterAccelRead 003F                            ___rparam_used 000001  
             __end_of_mssp1_IRQisEnabled 11F8                      _i2c_masterOperation 0E12  
               __size_of_do_I2C_TX_EMPTY 005E           __size_ofi2_i2c1_driver_sendACK 0006  
             __end_of_mssp1_waitForEvent 11C4            __end_ofi2_i2c1_driver_sendACK 138A  
                            ?_i2c_poller 0026                           __pcstackCOMRAM 0026  
                    ?_do_I2C_TX_REGISTER 0026                      _do_I2C_TX$intlevel0 07E0  
                           __pidataBANK0 107C                             __pidataBANK1 0F66  
                    ??_SYSTEM_Initialize 003C           __size_ofi2_i2c1_driver_restart 0004  
          __end_ofi2_i2c1_driver_restart 13D4                         _mssp1_disableIRQ 13AC  
         __size_ofi2_i2c1_driver_startRX 0004            __end_ofi2_i2c1_driver_startRX 13C4  
                          __end_of_putch 12E6                        __end_of_i2c_close 10BE  
                           i2_returnStop 13C8                           i2_do_I2C_RESET 1228  
                 ??_EUSART1_Transmit_ISR 0026                     ?_i2c_masterOperation 0026  
               i2_do_I2C_DO_ADDRESS_NACK 0EA2              __end_of_EUSART1_Receive_ISR 1052  
                   ??_do_I2C_TX_REGISTER 003B                             ?i2_do_I2C_RX 0026  
                           ?i2_do_I2C_TX 0026        __size_ofi2_do_I2C_DO_NACK_RESTART 0008  
              ?i2_do_I2C_DO_NACK_RESTART 0026                   _do_I2C_DO_NACK_RESTART 1254  
              __end_of_SYSTEM_Initialize 11B2                ??i2_do_I2C_SEND_ADR_WRITE 0026  
                                ??_putch 003B                            _eusart1RxHead 001A  
             __end_ofi2_do_I2C_SEND_STOP 1352                            _eusart1TxHead 001C  
                          _eusart1RxTail 0019                           _mssp1_clearIRQ 13B0  
                             __pbssBANK0 009A                            _eusart1TxTail 001B  
      _EUSART1_TxDefaultInterruptHandler 00E5          ??_EUSART1_SetRxInterruptHandler 003C  
          __size_ofi2_i2c1_driver_TXData 0008                          __CFG_PLLCFG$OFF 000000  
                              ?_i2c_open 0026                               __pnvCOMRAM 0049  
                __end_of_i2c_masterWrite 132A                   ?_i2c1_driver_getRXData 0026  
                      ??i2_do_I2C_DO_ACK 0026            __size_ofi2_i2c1_driver_isNACK 0016  
                  _do_I2C_IDLE$intlevel0 11DC                        i2_do_I2C_TX_EMPTY 0C80  
                        ??i2_do_I2C_IDLE 0026             __size_of_i2c_busCollisionISR 0006  
                        ??i2_do_I2C_RCEN 0026                       __CFG_CCP2MX$PORTC1 000000  
                          ??_do_I2C_IDLE 003A                            ??_do_I2C_RCEN 003A  
                     ?i2_do_I2C_TX_EMPTY 0026                       __CFG_CCP3MX$PORTB5 000000  
                        ??_do_I2C_DO_ACK 003A                   __end_ofi2_do_I2C_RESET 1238  
                    i2c_setBuffer@buffer 003A                                  ?_printf 0060  
                          _read_register 0FCA           ?_i2c1_driver_clearBusCollision 0026  
                    ??i2_do_I2C_TX_EMPTY 0026                    ??_i2c_masterOperation 003D  
                      ?_i2c1_driver_open 0026                        __end_of_do_I2C_RX 0A0C  
                      __end_of_do_I2C_TX 0870                 ??i2_do_I2C_SEND_ADR_READ 0026  
                      ?_i2c1_driver_stop 0026                   ?_i2c1_driver_setI2cISR 003A  
                     ??_i2c1_driver_open 003A                       ??_i2c1_driver_stop 003A  
                                _OSCCON2 000FD2                            ?_mssp1_setIRQ 0026  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                                _SSP1ADD 000FC8                                  _SSP1BUF 000FC9  
                 __end_of_mssp1_clearIRQ 13B4                                  _SSP1MSK 000FCA  
    __size_ofi2_do_I2C_SEND_INITIAL_READ 0010                      __size_of_i2c_poller 001A  
                ??_do_I2C_SEND_ADR_WRITE 003B      _do_I2C_SEND_RESTART_WRITE$intlevel0 12A0  
            ??_do_I2C_SEND_RESTART_WRITE 003A                       _i2c1_driver_TXData 132A  
                             ??_i2c_open 003C                 __end_ofi2_mssp1_clearIRQ 13B8  
                     _i2c1_driver_i2cISR 0011                                  _i2c_ISR 0D2A  
              __end_ofi2_do_I2C_TX_EMPTY 0CD8                  i2_i2c1_driver_getRXData 13BC  
                        __CFG_PWRTEN$OFF 000000                                  __Hparam 0000  
                  _returnReset$intlevel0 1314                    _do_I2C_RCEN$intlevel0 11CA  
                     _i2c1_driver_isNACK 1160                      ?_i2c1_driver_TXData 0026  
                                __Lparam 0000         _do_I2C_DO_ADDRESS_NACK$intlevel0 0D7E  
                                ___lwdiv 0CD8                                  ___lwmod 0EEA  
                           __psmallconst 0600                        ??_do_I2C_TX_EMPTY 003A  
                    ?_i2c1_driver_isNACK 0026                          ?i2_do_I2C_RESET 0026  
                                __pcinit 0B5C                                  __ramtop 0600  
                         ?_read_register 0026                                  __ptext0 0A80  
                                __ptext1 0870                                  __ptext2 0616  
                                __ptext3 12DC                                  __ptext4 0EEA  
                                __ptext5 0CD8                                  __ptext6 0BC2  
                                __ptext7 0F2C                                  __ptext8 11A0  
                                __ptext9 1052                      __end_of_do_I2C_IDLE 11E8  
                        __size_of_printf 012A                      __end_of_do_I2C_RCEN 11D6  
                       ??i2_mssp1_setIRQ 0026                                  _dpowers 0601  
                  _OSCILLATOR_Initialize 1238              __end_of_do_I2C_SEND_RESTART 129A  
                         ??_mssp1_setIRQ 003A                     ??_i2c1_driver_TXData 003A  
                     _EUSART1_Initialize 0DC6                 ??_PIN_MANAGER_Initialize 003A  
                 i2c_masterOperation@ret 003E                          ?_mssp1_clearIRQ 0026  
             _do_I2C_SEND_STOP$intlevel0 1284              ?i2_do_I2C_SEND_RESTART_READ 0026  
               _do_I2C_SEND_RESTART_READ 12A8               __size_of_SYSTEM_Initialize 0012  
                   __size_of_returnReset 000A                     end_of_initialization 0BB4  
             ??_do_I2C_SEND_INITIAL_READ 003B         __end_of_ACCELEROMETER_Initialize 0B5C  
                   ??_i2c1_driver_isNACK 003A                      ?_EUSART1_Initialize 0026  
           __end_of_i2c1_driver_sendNACK 1378                            __Lmediumconst 0000  
                   __size_of_printString 0060                         ?_i2c_masterWrite 0026  
           __end_of_i2c1_driver_resetBus 13DA    __end_of_EUSART1_SetRxInterruptHandler 12FA  
 __size_of_EUSART1_SetRxInterruptHandler 000A            _EUSART1_SetRxInterruptHandler 12F0  
         __size_ofi2_do_I2C_SEND_RESTART 0008                                  printf@c 006E  
                                printf@f 0060            __end_ofi2_do_I2C_SEND_RESTART 135A  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __size_ofi2_returnReset 0004             ?i2_do_I2C_SEND_RESTART_WRITE 0026  
              _do_I2C_SEND_RESTART_WRITE 129A                  ?i2_i2c1_driver_sendNACK 0026  
                   ??_EUSART1_Initialize 003C             __end_ofi2_do_I2C_TX_REGISTER 12C4  
                ?i2_i2c1_driver_resetBus 0026                               _returnStop 1318  
               __end_of_do_I2C_SEND_STOP 128C                                i2_i2c_ISR 0E5A  
        __size_ofi2_do_I2C_SEND_ADR_READ 0010                 read_xyzvalues@readbuffer 001D  
                            returnStop@p 003A                      EUSART1_Write@txData 003A  
               __end_of_mssp1_disableIRQ 13B0                     __size_ofi2_do_I2C_RX 0074  
                   __size_ofi2_do_I2C_TX 0090                ??i2_i2c1_driver_getRXData 0026  
             __size_ofi2_do_I2C_TX_EMPTY 0058            __size_of_do_I2C_SEND_ADR_READ 0016  
                           ??_i2c_poller 003D           __end_ofi2_i2c1_driver_sendNACK 1384  
                            _do_I2C_IDLE 11D6                              _do_I2C_RCEN 11C4  
           __end_of_INTERRUPT_Initialize 1394                          ??_read_register 0040  
         __end_ofi2_i2c1_driver_resetBus 13DC                      read_register@status 0016  
             ??i2_do_I2C_DO_ADDRESS_NACK 0026         __end_ofi2_do_I2C_DO_NACK_RESTART 133A  
          ??i2_do_I2C_SEND_RESTART_WRITE 0026                       _mssp1_IRQisEnabled 11E8  
                 ?_OSCILLATOR_Initialize 0026                               ?i2_i2c_ISR 0026  
           __size_of_do_I2C_DO_NACK_STOP 000E                 read_xyzvalues@sensorData 0060  
                         __end_of_printf 0740                       _mssp1_waitForEvent 11B2  
                ?_do_I2C_DO_NACK_RESTART 0026                      start_initialization 0B5C  
                              _i2c_close 10A0                      _i2c_busCollisionISR 138A  
        __size_of_PIN_MANAGER_Initialize 002A                      ?_mssp1_IRQisEnabled 0026  
                        i2_do_I2C_DO_ACK 1342                            i2_returnReset 13C4  
                        i2_do_I2C_TX$315 0026                      ?_mssp1_waitForEvent 003A  
            __end_of_i2c_masterAccelRead 1254                              putch@txData 003B  
                     __end_of_i2c_poller 10F2             __size_of_i2c1_driver_sendACK 0006  
                  __end_of_EUSART1_Write 0F66                          i2c_open@address 003D  
                     printString@welcome 0060                  i2c_setBuffer@bufferSize 003C  
                ??_i2c1_driver_getRXData 003A             __size_of_i2c1_driver_restart 0004  
            __size_ofi2_i2c1_driver_stop 0004             __size_of_i2c1_driver_startRX 0004  
                  i2_do_I2C_DO_NACK_STOP 133A                   i2_do_I2C_SEND_ADR_READ 1218  
                  __end_of_i2c_setBuffer 10D8                 _ACCELEROMETER_Initialize 0AF0  
                      __size_of_i2c_open 009A                     ?_i2c_busCollisionISR 0026  
                   __end_of_mssp1_setIRQ 1398                     ??_mssp1_IRQisEnabled 003A  
                __size_of_read_xyzvalues 0092                     read_xyzvalues@status 0015  
                __size_of_write_register 0032                       i2_do_I2C_SEND_STOP 134A  
                   ??_mssp1_waitForEvent 003C           ?_EUSART1_SetRxInterruptHandler 003A  
                  i2_i2c1_driver_sendACK 1384                            ?_do_I2C_RESET 0026  
           __end_ofi2_i2c1_driver_TXData 1372                              __pdataBANK0 00BF  
                            __pdataBANK1 0100                    i2i2c1_driver_TXData@d 0026  
              _do_I2C_TX_EMPTY$intlevel0 0C28      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 13D0                              ?_returnStop 003A  
                               ??_printf 0046                      ?i2_do_I2C_SEND_STOP 0026  
                ??_i2c1_driver_setI2cISR 003C                    i2_i2c1_driver_startRX 13C0  
         __end_of_do_I2C_DO_NACK_RESTART 1262                           _eusart1RxCount 0018  
                   _i2c1_driver_sendNACK 1372             __end_ofi2_i2c1_driver_isNACK 118C  
                            __pbssCOMRAM 0001        _EUSART1_RxDefaultInterruptHandler 00E3  
                             ?_i2c_close 0026                     _i2c1_driver_resetBus 13D8  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 0060  
                         ?i2_returnReset 0026                                _do_I2C_RX 0992  
                              _do_I2C_TX 07DA              __size_of_do_I2C_TX_REGISTER 0014  
       __end_of_do_I2C_SEND_INITIAL_READ 1134           __size_of_do_I2C_SEND_ADR_WRITE 0016  
        ??_EUSART1_SetTxInterruptHandler 003C            __end_of_do_I2C_SEND_ADR_WRITE 111E  
           __size_of_EUSART1_Receive_ISR 002C                     ??i2_do_I2C_SEND_STOP 0026  
              __size_of_i2c1_driver_open 0016                        ?i2_mssp1_clearIRQ 0026  
                   i2_do_I2C_TX_REGISTER 12B6                __size_of_i2c1_driver_stop 0004  
                               ?_i2c_ISR 0026          _do_I2C_SEND_ADR_WRITE$intlevel0 110E  
                        _do_I2C_TX_EMPTY 0C22                                __pnvBANK0 00E3  
                     ??i2_mssp1_clearIRQ 0026                    ??_i2c_busCollisionISR 0026  
                       ___lwdiv@dividend 003A                   _PIN_MANAGER_Initialize 1052  
                       ??i2_do_I2C_RESET 0026                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 12DC                    __end_ofi2_do_I2C_RCEN 12D0  
                         ??_do_I2C_RESET 003A                                __ptext100 1026  
                              __ptext101 0000              __end_of_i2c_masterOperation 0E5A  
                               ?___lwdiv 003A                 ??_do_I2C_DO_ADDRESS_NACK 003A  
                               ?___lwmod 0041              _i2c1_driver_busCollisionISR 0013  
                  __end_of_do_I2C_DO_ACK 127E             ??_INTERRUPT_InterruptManager 0028  
                       __CFG_PRICLKEN$ON 000000               ??_do_I2C_SEND_RESTART_READ 003A  
                  ?_i2c1_driver_sendNACK 0026                              ??i2_i2c_ISR 0028  
                __end_ofi2_do_I2C_DO_ACK 134A                         ??_mssp1_clearIRQ 003A  
                            __smallconst 0600                                 _BAUDCON1 000FB8  
               i2_do_I2C_DO_NACK_RESTART 1332                    ?_i2c1_driver_resetBus 0026  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0026  
                             ?_do_I2C_RX 0026                               ?_do_I2C_TX 0026  
                       ___lwdiv@quotient 003F                        _i2c1_driver_start 13A8  
             read_register@receivebuffer 0025                           __size_of_putch 000A  
                   _INTERRUPT_Initialize 1390                        _i2c_ISR$intlevel0 0D30  
                     ?_i2c1_driver_start 0026                   ?i2_do_I2C_DO_NACK_STOP 0026  
                  ?i2_do_I2C_TX_REGISTER 0026                      __size_of_returnStop 000A  
                               _PIE1bits 000F9D                                 _PIE2bits 000FA0  
     _do_I2C_SEND_INITIAL_READ$intlevel0 1124                      ??_i2c1_driver_start 003A  
                               i2u202_48 0060                                 i2u211_48 00A4  
                               i2u211_49 00BA                                 i2u205_48 0076  
    __size_of_INTERRUPT_InterruptManager 00FE                                 i2u208_48 008C  
                               i2u180_48 0A56                                 i2u180_49 0A6A  
                               i2u181_48 0CAA                                 i2u181_49 0CBE  
                               i2u175_48 0EC8                                 i2u175_49 0EDC  
                               _PIR1bits 000F9E                                 i2u177_48 092E  
                               i2u177_49 0942                                 _PIR2bits 000FA1  
                               i2u197_48 0E88                                 i2u197_49 0E9C  
           ??i2_do_I2C_SEND_INITIAL_READ 0026                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                   ?i2_i2c1_driver_sendACK 0026  
                               _SSP1CON1 000FC6                                 _SSP1CON2 000FC5  
                               _SSP1STAT 000FC7                   ?i2_i2c1_driver_restart 0026  
                 ?i2_i2c1_driver_startRX 0026                        ?_do_I2C_SEND_STOP 0026  
                             printf@flag 006A                               printf@prec 006B  
                        ??i2_returnReset 0028                              ??_i2c_close 003A  
              __end_of_i2c1_driver_start 13AC                            ??_returnReset 003C  
                     ??_do_I2C_SEND_STOP 003A              __size_of_i2c1_driver_TXData 0008  
      __end_of_do_I2C_SEND_RESTART_WRITE 12A8                  __end_of_do_I2C_TX_EMPTY 0C80  
                            _INTCON2bits 000FF1                                copy_data0 0B70  
                              copy_data1 0B90                    ?_INTERRUPT_Initialize 0026  
                          ??_printString 003B                        ?_mssp1_disableIRQ 0026  
           __size_of_do_I2C_SEND_RESTART 000E              __size_of_i2c1_driver_isNACK 0016  
                   i2_i2c1_driver_TXData 136A                  _do_I2C_DO_ACK$intlevel0 1276  
                               _i2c_open 0740                    __size_of_mssp1_setIRQ 0004  
                     ??_mssp1_disableIRQ 003A                      _do_I2C_DO_NACK_STOP 1262  
                       __size_of_i2c_ISR 004E    __end_of_EUSART1_SetTxInterruptHandler 12F0  
 __size_of_EUSART1_SetTxInterruptHandler 000A            _EUSART1_SetTxInterruptHandler 12E6  
                               __Hrparam 0000                     i2_i2c1_driver_isNACK 1176  
                         _read_xyzvalues 0870                           _write_register 0F98  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                           ?_do_I2C_IDLE 0026                             ?_do_I2C_RCEN 0026  
                      __CFG_P2BMX$PORTB5 000000        __size_of_do_I2C_SEND_INITIAL_READ 0016  
                ??_OSCILLATOR_Initialize 003A                ?_do_I2C_SEND_INITIAL_READ 0026  
                    _i2c1_driver_sendACK 1378                 __size_of_i2c_masterWrite 0008  
                  i2_do_I2C_SEND_RESTART 1352          __size_of_do_I2C_DO_ADDRESS_NACK 004E  
                    i2c1_driver_TXData@d 003A              __size_of_EUSART1_Initialize 004C  
                       __size_of___lwdiv 0052                   ??_i2c1_driver_sendNACK 003A  
                       __size_of___lwmod 0042          __end_ofi2_do_I2C_SEND_ADR_WRITE 1208  
       ??_i2c1_driver_setBusCollisionISR 003C          ?_i2c1_driver_setBusCollisionISR 003A  
                       read_register@reg 0040       _do_I2C_SEND_RESTART_READ$intlevel0 12AE  
                    _i2c1_driver_restart 13A4                            ?i2_returnStop 0026  
                   ?_do_I2C_DO_NACK_STOP 0026                      _i2c1_driver_startRX 139C  
           __end_of_do_I2C_SEND_ADR_READ 114A                   ??_i2c1_driver_resetBus 003A  
                       ?i2_do_I2C_DO_ACK 0026                          ___lwdiv@divisor 003C  
                          ??i2_do_I2C_RX 0026                            ??i2_do_I2C_TX 0026  
                           _mssp1_setIRQ 1394                              ??_do_I2C_RX 003A  
                            ??_do_I2C_TX 003B                          ___lwdiv@counter 003E  
                               __ptext10 1238                                 __ptext11 1390  
                               __ptext20 0740                                 __ptext12 0DC6  
                               __ptext21 12FA                                 __ptext13 12E6  
                               __ptext30 0C22                                 __ptext22 1304  
                               __ptext14 12F0                                 __ptext31 0992  
                               __ptext23 10F2                                 __ptext15 0AF0  
                               __ptext40 1134                                 __ptext32 07DA  
                               __ptext24 1246                                 __ptext16 0F98  
                               __ptext41 127E                                 __ptext33 0D78  
                               __ptext25 0E12                                 __ptext17 1322  
                               __ptext50 132A                                 __ptext42 128C  
                               __ptext34 1254                                 __ptext26 11E8  
                               __ptext18 0FCA                                 __ptext51 1398  
                               __ptext43 129A                                 __ptext35 1262  
                               __ptext27 10D8                                 __ptext19 10BE  
                               __ptext60 13A8                                 __ptext52 1372  
                               __ptext44 12A8                                 __ptext36 1270  
                               __ptext28 11B2                                 __ptext61 10A0  
                               __ptext53 13D8                                 __ptext45 11D6  
                               __ptext37 11C4                                 __ptext29 0D2A  
                               __ptext70 0EA2                                 __ptext62 13AC  
                               __ptext54 139C                                 __ptext46 114A  
                               __ptext38 1108                                 __ptext71 1332  
                               __ptext63 13B0                                 __ptext55 130E  
                               __ptext47 118C                                 __ptext39 111E  
                               __ptext80 135A                                 __ptext72 133A  
                               __ptext56 1318                                 __ptext48 1394  
                               __ptext81 1362                                 __ptext73 1342  
                               __ptext65 0E5A                                 __ptext57 13A0  
                               __ptext49 1160                                 __ptext90 13DA  
                               __ptext82 12D0                                 __ptext74 12C4  
                               __ptext66 13B4                                 __ptext58 13A4  
                               __ptext91 13C0                                 __ptext83 1228  
                               __ptext75 11F8                                 __ptext67 0C80  
                               __ptext59 1378                                 __ptext92 13C4  
                               __ptext84 12B6                                 __ptext76 1208  
                               __ptext68 0A0C                                 __ptext93 13C8  
                               __ptext85 13B8                                 __ptext77 1218  
                               __ptext69 0902                                 __ptext94 13CC  
                               __ptext86 1176                                 __ptext78 134A  
                               __ptext95 13D0                                 __ptext87 136A  
                               __ptext79 1352                                 __ptext96 1384  
                               __ptext88 13BC                                 __ptext97 138A  
                               __ptext89 137E                                 __ptext98 13D4  
                               __ptext99 0FF8                             _SSP1CON1bits 000FC6  
             ??_ACCELEROMETER_Initialize 0041                             _SSP1CON2bits 000FC5  
                   ?_i2c1_driver_sendACK 0026                     __end_of_do_I2C_RESET 1160  
                 ??i2_do_I2C_TX_REGISTER 0026                    ?i2_i2c1_driver_TXData 0026  
                ?i2_do_I2C_SEND_ADR_READ 0026                  __size_ofi2_mssp1_setIRQ 0004  
                   write_register@buffer 0023                     ?_i2c1_driver_restart 0026  
                    __end_of_returnReset 1318                         _i2c1_driver_open 10F2  
                       _i2c1_driver_stop 13A0                            __size_of_main 0070  
                   ?_i2c1_driver_startRX 0026           __size_of_i2c1_driver_getRXData 0004  
                 __end_of_read_xyzvalues 0902                     write_register@status 0017  
          __end_of_i2c1_driver_getRXData 139C                   __end_of_write_register 0FCA  
                 i2c_masterAccelRead@reg 003F                    ?i2_i2c1_driver_isNACK 0026  
                    __end_of_printString 0C22                         printString@F7170 0100  
                               int$flags 004A     EUSART1_SetRxInterruptHandler@handler 003A  
     __end_of_INTERRUPT_InterruptManager 0106               _INTERRUPT_InterruptManager 0008  
                               main@data 0094                                printf@val 006C  
                           _SSP1STATbits 000FC7                           ??i2_returnStop 0028  
       __end_of_do_I2C_SEND_RESTART_READ 12B6                    __end_of_read_register 0FF8  
                           ??_returnStop 003C                      _EUSART1_Receive_ISR 1026  
                  ??_do_I2C_DO_NACK_STOP 003A                mssp1_waitForEvent@timeout 003A  
         __size_of_i2c1_driver_setI2cISR 000A            __end_of_i2c1_driver_setI2cISR 1304  
                             _INTCONbits 000FF2               __size_of_i2c1_driver_start 0004  
                 ??_INTERRUPT_Initialize 003A                 ?i2_i2c1_driver_getRXData 0026  
         __end_ofi2_do_I2C_SEND_ADR_READ 1228                    ??_i2c1_driver_sendACK 003A  
                       ?_do_I2C_TX_EMPTY 0026        __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048  
             __end_ofi2_i2c1_driver_stop 13D0                ?i2_do_I2C_DO_ADDRESS_NACK 0026  
                 _do_I2C_DO_ADDRESS_NACK 0D78                                 intlevel2 0000  
                 _do_I2C_RESET$intlevel0 1150                    ??_i2c1_driver_restart 003A  
                   ?_EUSART1_Receive_ISR 0026                    ??_i2c1_driver_startRX 003A  
                       ___lwmod@dividend 0041                      __end_ofi2_do_I2C_RX 0A80  
                    __end_ofi2_do_I2C_TX 0992                  ?_PIN_MANAGER_Initialize 0026  
                        ?_read_xyzvalues 0040                               _RCSTA1bits 000FAB  
                        ?_write_register 003F                       __end_of_returnStop 1322  
           __end_of_EUSART1_Transmit_ISR 1026             __size_of_i2c_masterAccelRead 000E  
     __end_ofi2_do_I2C_SEND_INITIAL_READ 1218               i2_do_I2C_SEND_INITIAL_READ 1208  
            __size_of_mssp1_IRQisEnabled 0010      __end_ofi2_do_I2C_SEND_RESTART_WRITE 1362  
            i2_do_I2C_SEND_RESTART_WRITE 135A                                 printf@ap 0068  
                 ?i2_do_I2C_SEND_RESTART 0026               ??i2_do_I2C_DO_NACK_RESTART 0026  
            __size_of_mssp1_waitForEvent 0012           ?_EUSART1_SetTxInterruptHandler 003A  
              __size_ofi2_mssp1_clearIRQ 0004                   __size_of_EUSART1_Write 003A  
                        ___lwmod@divisor 0043               __end_of_do_I2C_TX_REGISTER 11A0  
                      ??_i2c_masterWrite 003F                          ___lwmod@counter 0045  
                 __size_of_i2c_setBuffer 001A                        __CFG_T3CMX$PORTC0 000000  
                            _returnReset 130E         _do_I2C_DO_NACK_RESTART$intlevel0 125A  
                ??i2_do_I2C_DO_NACK_STOP 0026                   ??i2_i2c1_driver_TXData 0026  
           ??i2_do_I2C_SEND_RESTART_READ 0026                    ??_EUSART1_Receive_ISR 0026  
         __end_of_PIN_MANAGER_Initialize 107C              __end_of_i2c_busCollisionISR 1390  
                            _printString 0BC2              __size_ofi2_do_I2C_SEND_STOP 0008  
               ??i2_i2c1_driver_sendNACK 0026                        __CFG_FOSC$INTIO67 000000  
                 ??i2_i2c1_driver_isNACK 0026         __size_ofi2_do_I2C_SEND_ADR_WRITE 0010  
                  _do_I2C_SEND_ADR_WRITE 1108                  ??i2_i2c1_driver_sendACK 0026  
                   _do_I2C_SEND_ADR_READ 1134                 ??i2_i2c1_driver_resetBus 0026  
                ??i2_i2c1_driver_restart 0026  
