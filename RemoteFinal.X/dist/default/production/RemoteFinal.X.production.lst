

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 27 16:06:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,inline
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1,inline
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1,inline
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1,inline
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1,inline
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1,inline
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   115                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   116  0000                     
   117                           ; Version 1.45
   118                           ; Generated 16/11/2017 GMT
   119                           ; 
   120                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   121                           ; All rights reserved.
   122                           ; 
   123                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   124                           ; 
   125                           ; Redistribution and use in source and binary forms, with or without modification, are
   126                           ; permitted provided that the following conditions are met:
   127                           ; 
   128                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   129                           ;        conditions and the following disclaimer.
   130                           ; 
   131                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   132                           ;        of conditions and the following disclaimer in the documentation and/or other
   133                           ;        materials provided with the distribution.
   134                           ; 
   135                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   136                           ;        software without specific prior written permission.
   137                           ; 
   138                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   139                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   140                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   141                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   142                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   143                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   144                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   145                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   146                           ; 
   147                           ; 
   148                           ; Code-generator required, PIC18F25K22 Definitions
   149                           ; 
   150                           ; SFR Addresses
   151  0000                     
   152                           	psect	idataBANK0
   153  000ADC                     __pidataBANK0:
   154                           	opt stack 0
   155                           
   156                           ;initializer for printString@F7170
   157  000ADC  0A                 	db	10
   158  000ADD  0D                 	db	13
   159  000ADE  47                 	db	71
   160  000ADF  4F                 	db	79
   161  000AE0  54                 	db	84
   162  000AE1  20                 	db	32
   163  000AE2  48                 	db	72
   164  000AE3  45                 	db	69
   165  000AE4  52                 	db	82
   166  000AE5  45                 	db	69
   167  000AE6  2E                 	db	46
   168  000AE7  20                 	db	32
   169  000AE8  0A                 	db	10
   170  000AE9  0D                 	db	13
   171  000AEA  00                 	db	0
   172  000AEB  00                 	db	0
   173  000AEC  00                 	db	0
   174  000AED  00                 	db	0
   175  000AEE  00                 	db	0
   176  000AEF  00                 	db	0
   177  000AF0  00                 	db	0
   178  000AF1  00                 	db	0
   179  000AF2  00                 	db	0
   180  000AF3  00                 	db	0
   181  000AF4  00                 	db	0
   182  000AF5  00                 	db	0
   183  000AF6  00                 	db	0
   184  000AF7  00                 	db	0
   185  000AF8  00                 	db	0
   186  000AF9  00                 	db	0
   187  000AFA  00                 	db	0
   188  000AFB  00                 	db	0
   189  000AFC  00                 	db	0
   190  000AFD  00                 	db	0
   191  000AFE  00                 	db	0
   192  000AFF  00                 	db	0
   193  000B00  00                 	db	0
   194  000B01  00                 	db	0
   195  000B02  00                 	db	0
   196  000B03  00                 	db	0
   197  000B04  00                 	db	0
   198  000B05  00                 	db	0
   199  000B06  00                 	db	0
   200  000B07  00                 	db	0
   201  000B08  00                 	db	0
   202  000B09  00                 	db	0
   203  000B0A  00                 	db	0
   204  000B0B  00                 	db	0
   205  000B0C  00                 	db	0
   206  000B0D  00                 	db	0
   207                           
   208                           ;initializer for _fsmStateTable
   209  000B0E  B6                 	db	low _do_I2C_IDLE
   210  000B0F  0F                 	db	high _do_I2C_IDLE
   211  000B10  14                 	db	low _do_I2C_SEND_ADR_READ
   212  000B11  0F                 	db	high _do_I2C_SEND_ADR_READ
   213  000B12  E8                 	db	low _do_I2C_SEND_ADR_WRITE
   214  000B13  0E                 	db	high _do_I2C_SEND_ADR_WRITE
   215  000B14  A0                 	db	low _do_I2C_TX
   216  000B15  06                 	db	high _do_I2C_TX
   217  000B16  58                 	db	low _do_I2C_RX
   218  000B17  08                 	db	high _do_I2C_RX
   219  000B18  A4                 	db	low _do_I2C_RCEN
   220  000B19  0F                 	db	high _do_I2C_RCEN
   221  000B1A  26                 	db	low _do_I2C_TX_EMPTY
   222  000B1B  0A                 	db	high _do_I2C_TX_EMPTY
   223  000B1C  88                 	db	low _do_I2C_SEND_RESTART_READ
   224  000B1D  10                 	db	high _do_I2C_SEND_RESTART_READ
   225  000B1E  7A                 	db	low _do_I2C_SEND_RESTART_WRITE
   226  000B1F  10                 	db	high _do_I2C_SEND_RESTART_WRITE
   227  000B20  6C                 	db	low _do_I2C_SEND_RESTART
   228  000B21  10                 	db	high _do_I2C_SEND_RESTART
   229  000B22  5E                 	db	low _do_I2C_SEND_STOP
   230  000B23  10                 	db	high _do_I2C_SEND_STOP
   231  000B24  50                 	db	low _do_I2C_DO_ACK
   232  000B25  10                 	db	high _do_I2C_DO_ACK
   233  000B26  42                 	db	low _do_I2C_DO_NACK_STOP
   234  000B27  10                 	db	high _do_I2C_DO_NACK_STOP
   235  000B28  34                 	db	low _do_I2C_DO_NACK_RESTART
   236  000B29  10                 	db	high _do_I2C_DO_NACK_RESTART
   237  000B2A  2A                 	db	low _do_I2C_RESET
   238  000B2B  0F                 	db	high _do_I2C_RESET
   239  000B2C  80                 	db	low _do_I2C_DO_ADDRESS_NACK
   240  000B2D  0B                 	db	high _do_I2C_DO_ADDRESS_NACK
   241  000B2E  FE                 	db	low _do_I2C_SEND_INITIAL_READ
   242  000B2F  0E                 	db	high _do_I2C_SEND_INITIAL_READ
   243  000B30  6C                 	db	low _do_I2C_TX_REGISTER
   244  000B31  0F                 	db	high _do_I2C_TX_REGISTER
   245                           
   246                           	psect	nvCOMRAM
   247  000046                     __pnvCOMRAM:
   248                           	opt stack 0
   249  000046                     _EUSART1_RxDefaultInterruptHandler:
   250                           	opt stack 0
   251  000046                     	ds	2
   252  000048                     _EUSART1_TxDefaultInterruptHandler:
   253                           	opt stack 0
   254  000048                     	ds	2
   255  00004A                     _eusart1TxBufferRemaining:
   256                           	opt stack 0
   257  00004A                     	ds	1
   258  0000                     _ANSELA	set	3896
   259  0000                     _ANSELB	set	3897
   260  0000                     _ANSELC	set	3898
   261  0000                     _PIE2bits	set	4000
   262  0000                     _INTCONbits	set	4082
   263  0000                     _RCONbits	set	4048
   264  0000                     _INTCON2bits	set	4081
   265  0000                     _WPUB	set	3937
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISB	set	3987
   268  0000                     _TRISA	set	3986
   269  0000                     _LATC	set	3979
   270  0000                     _LATB	set	3978
   271  0000                     _LATA	set	3977
   272  0000                     _PIR2bits	set	4001
   273  0000                     _SSP1STATbits	set	4039
   274  0000                     _SSP1MSK	set	4042
   275  0000                     _SSP1BUF	set	4041
   276  0000                     _SSP1CON2bits	set	4037
   277  0000                     _SSP1ADD	set	4040
   278  0000                     _SSP1CON2	set	4037
   279  0000                     _SSP1CON1	set	4038
   280  0000                     _SSP1STAT	set	4039
   281  0000                     _PIR1bits	set	3998
   282  0000                     _SSP1CON1bits	set	4038
   283  0000                     _OSCTUNE	set	3995
   284  0000                     _OSCCON2	set	4050
   285  0000                     _OSCCON	set	4051
   286  0000                     _RCREG1	set	4014
   287  0000                     _RCSTA1bits	set	4011
   288  0000                     _TXREG1	set	4013
   289  0000                     _TXSTA1bits	set	4012
   290  0000                     _SPBRGH1	set	4016
   291  0000                     _SPBRG1	set	4015
   292  0000                     _TXSTA1	set	4012
   293  0000                     _RCSTA1	set	4011
   294  0000                     _BAUDCON1	set	4024
   295  0000                     _PIE1bits	set	3997
   296                           
   297                           	psect	smallconst
   298  000600                     __psmallconst:
   299                           	opt stack 0
   300  000600  00                 	db	0
   301  000601                     STR_1:
   302  000601  0D                 	db	13
   303  000602  0A                 	db	10
   304  000603  00                 	db	0
   305                           
   306                           ; #config settings
   307  000604  00                 	db	0	; dummy byte at the end
   308  0000                     
   309                           	psect	cinit
   310  000CF2                     __pcinit:
   311                           	opt stack 0
   312  000CF2                     start_initialization:
   313                           	opt stack 0
   314  000CF2                     __initialization:
   315                           	opt stack 0
   316                           
   317                           ; Initialize objects allocated to BANK0 (86 bytes)
   318                           ; load TBLPTR registers with __pidataBANK0
   319  000CF2  0EDC               	movlw	low __pidataBANK0
   320  000CF4  6EF6               	movwf	tblptrl,c
   321  000CF6  0E0A               	movlw	high __pidataBANK0
   322  000CF8  6EF7               	movwf	tblptrh,c
   323  000CFA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   324  000CFC  6EF8               	movwf	tblptru,c
   325  000CFE  EE00  F060         	lfsr	0,__pdataBANK0
   326  000D02  EE10 F056          	lfsr	1,86
   327  000D06                     copy_data0:
   328  000D06  0009               	tblrd		*+
   329  000D08  CFF5 FFEE          	movff	tablat,postinc0
   330  000D0C  50E5               	movf	postdec1,w,c
   331  000D0E  50E1               	movf	fsr1l,w,c
   332  000D10  E1FA               	bnz	copy_data0
   333                           
   334                           ; Clear objects allocated to BANK0 (37 bytes)
   335  000D12  EE00  F0B6         	lfsr	0,__pbssBANK0
   336  000D16  0E25               	movlw	37
   337  000D18                     clear_0:
   338  000D18  6AEE               	clrf	postinc0,c
   339  000D1A  06E8               	decf	wreg,f,c
   340  000D1C  E1FD               	bnz	clear_0
   341                           
   342                           ; Clear objects allocated to COMRAM (37 bytes)
   343  000D1E  EE00  F001         	lfsr	0,__pbssCOMRAM
   344  000D22  0E25               	movlw	37
   345  000D24                     clear_1:
   346  000D24  6AEE               	clrf	postinc0,c
   347  000D26  06E8               	decf	wreg,f,c
   348  000D28  E1FD               	bnz	clear_1
   349  000D2A                     end_of_initialization:
   350                           	opt stack 0
   351  000D2A                     __end_of__initialization:
   352                           	opt stack 0
   353  000D2A  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   354  000D2C  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   355  000D2E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   356  000D30  6EF8               	movwf	tblptru,c
   357  000D32  0100               	movlb	0
   358  000D34  EF69  F004         	goto	_main	;jump to C main() function
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           postdec1	equ	0xFE5
   366                           fsr1l	equ	0xFE1
   367                           
   368                           	psect	bssCOMRAM
   369  000001                     __pbssCOMRAM:
   370                           	opt stack 0
   371  000001                     _eusart1RxBuffer:
   372                           	opt stack 0
   373  000001                     	ds	8
   374  000009                     _eusart1TxBuffer:
   375                           	opt stack 0
   376  000009                     	ds	8
   377  000011                     _i2c1_driver_i2cISR:
   378                           	opt stack 0
   379  000011                     	ds	2
   380  000013                     _i2c1_driver_busCollisionISR:
   381                           	opt stack 0
   382  000013                     	ds	2
   383  000015                     read_xyzvalues@status:
   384                           	opt stack 0
   385  000015                     	ds	1
   386  000016                     read_register@status:
   387                           	opt stack 0
   388  000016                     	ds	1
   389  000017                     write_register@status:
   390                           	opt stack 0
   391  000017                     	ds	1
   392  000018                     _eusart1RxCount:
   393                           	opt stack 0
   394  000018                     	ds	1
   395  000019                     _eusart1RxTail:
   396                           	opt stack 0
   397  000019                     	ds	1
   398  00001A                     _eusart1RxHead:
   399                           	opt stack 0
   400  00001A                     	ds	1
   401  00001B                     _eusart1TxTail:
   402                           	opt stack 0
   403  00001B                     	ds	1
   404  00001C                     _eusart1TxHead:
   405                           	opt stack 0
   406  00001C                     	ds	1
   407  00001D                     read_xyzvalues@readbuffer:
   408                           	opt stack 0
   409  00001D                     	ds	6
   410  000023                     write_register@buffer:
   411                           	opt stack 0
   412  000023                     	ds	2
   413  000025                     read_register@receivebuffer:
   414                           	opt stack 0
   415  000025                     	ds	1
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           postdec1	equ	0xFE5
   423                           fsr1l	equ	0xFE1
   424                           
   425                           	psect	bssBANK0
   426  0000B6                     __pbssBANK0:
   427                           	opt stack 0
   428  0000B6                     _i2c_status:
   429                           	opt stack 0
   430  0000B6                     	ds	37
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	dataBANK0
   441  000060                     __pdataBANK0:
   442                           	opt stack 0
   443  000060                     printString@F7170:
   444                           	opt stack 0
   445  000060                     	ds	50
   446  000092                     _fsmStateTable:
   447                           	opt stack 0
   448  000092                     	ds	36
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1l	equ	0xFE1
   457                           
   458                           	psect	cstackBANK0
   459  0000DB                     __pcstackBANK0:
   460                           	opt stack 0
   461  0000DB                     read_xyzvalues@sensorData:
   462                           	opt stack 0
   463                           
   464                           ; 6 bytes @ 0x0
   465  0000DB                     	ds	6
   466  0000E1                     ??_main:
   467                           
   468                           ; 1 bytes @ 0x6
   469  0000E1                     	ds	2
   470  0000E3                     main@data:
   471                           	opt stack 0
   472                           
   473                           ; 6 bytes @ 0x8
   474  0000E3                     	ds	6
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	cstackCOMRAM
   485  000026                     __pcstackCOMRAM:
   486                           	opt stack 0
   487  000026                     ??i2_i2c1_driver_isNACK:
   488  000026                     i2i2c1_driver_TXData@d:
   489                           	opt stack 0
   490  000026                     i2_do_I2C_TX$315:
   491                           	opt stack 0
   492  000026                     i2returnReset@p:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x0
   496  000026                     	ds	2
   497  000028                     ??_INTERRUPT_InterruptManager:
   498  000028                     
   499                           ; 1 bytes @ 0x2
   500  000028                     	ds	18
   501  00003A                     ??_mssp1_IRQisEnabled:
   502  00003A                     ??_i2c1_driver_isNACK:
   503  00003A                     i2c_close@ret:
   504                           	opt stack 0
   505  00003A                     EUSART1_Write@txData:
   506                           	opt stack 0
   507  00003A                     i2c1_driver_TXData@d:
   508                           	opt stack 0
   509  00003A                     i2c_setBuffer@buffer:
   510                           	opt stack 0
   511  00003A                     returnReset@p:
   512                           	opt stack 0
   513  00003A                     EUSART1_SetTxInterruptHandler@handler:
   514                           	opt stack 0
   515  00003A                     EUSART1_SetRxInterruptHandler@handler:
   516                           	opt stack 0
   517  00003A                     mssp1_waitForEvent@timeout:
   518                           	opt stack 0
   519  00003A                     i2c1_driver_setBusCollisionISR@f:
   520                           	opt stack 0
   521  00003A                     i2c1_driver_setI2cISR@f:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x14
   525  00003A                     	ds	1
   526  00003B                     putch@txData:
   527                           	opt stack 0
   528  00003B                     _do_I2C_TX$315:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x15
   532  00003B                     	ds	1
   533  00003C                     ?_printf:
   534                           	opt stack 0
   535  00003C                     i2c_open@ret:
   536                           	opt stack 0
   537  00003C                     i2c_setBuffer@bufferSize:
   538                           	opt stack 0
   539  00003C                     printf@f:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x16
   543  00003C                     	ds	1
   544  00003D                     i2c_open@address:
   545                           	opt stack 0
   546  00003D                     i2c_masterOperation@operation:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x17
   550  00003D                     	ds	1
   551  00003E                     i2c_masterOperation@ret:
   552                           	opt stack 0
   553  00003E                     printf@ap:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x18
   557  00003E                     	ds	1
   558  00003F                     i2c_masterAccelRead@reg:
   559                           	opt stack 0
   560  00003F                     write_register@data:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x19
   564  00003F                     	ds	1
   565  000040                     ?_read_xyzvalues:
   566                           	opt stack 0
   567  000040                     write_register@reg:
   568                           	opt stack 0
   569  000040                     read_register@reg:
   570                           	opt stack 0
   571  000040                     printf@c:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x1A
   575  000040                     	ds	1
   576  000041                     ??_ACCELEROMETER_Initialize:
   577                           
   578                           ; 1 bytes @ 0x1B
   579  000041                     	ds	5
   580  000046                     tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           tblptrl	equ	0xFF6
   583                           tablat	equ	0xFF5
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           postdec1	equ	0xFE5
   587                           fsr1l	equ	0xFE1
   588                           
   589                           ; 1 bytes @ 0x20
   590 ;;
   591 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   592 ;;
   593 ;; *************** function _main *****************
   594 ;; Defined at:
   595 ;;		line 70 in file "main.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;		None
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  data            6    8[BANK0 ] struct .
   600 ;; Return value:  Size  Location     Type
   601 ;;                  1    wreg      void 
   602 ;; Registers used:
   603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   609 ;;      Params:         0       0       0       0       0       0       0
   610 ;;      Locals:         0       6       0       0       0       0       0
   611 ;;      Temps:          0       2       0       0       0       0       0
   612 ;;      Totals:         0       8       0       0       0       0       0
   613 ;;Total ram usage:        8 bytes
   614 ;; Hardware stack levels required when called:   14
   615 ;; This function calls:
   616 ;;		_ACCELEROMETER_Initialize
   617 ;;		_EUSART1_Write
   618 ;;		_SYSTEM_Initialize
   619 ;;		_printf
   620 ;;		_read_xyzvalues
   621 ;; This function is called by:
   622 ;;		Startup code after reset
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text0
   627  0008D2                     __ptext0:
   628                           	opt stack 0
   629  0008D2                     _main:
   630                           	opt stack 17
   631                           
   632                           ;main.c: 71: accelerometer_data_t data;
   633                           ;main.c: 74: SYSTEM_Initialize();
   634                           
   635                           ;incstack = 0
   636  0008D2  ECC0  F007         	call	_SYSTEM_Initialize	;wreg free
   637                           
   638                           ;main.c: 77: (INTCONbits.GIE = 1);
   639  0008D6  8EF2               	bsf	intcon,7,c	;volatile
   640                           
   641                           ;main.c: 80: (INTCONbits.PEIE = 1);
   642  0008D8  8CF2               	bsf	intcon,6,c	;volatile
   643                           
   644                           ;main.c: 82: ACCELEROMETER_Initialize();
   645  0008DA  ECDD  F004         	call	_ACCELEROMETER_Initialize	;wreg free
   646  0008DE                     
   647                           ;main.c: 88: data = read_xyzvalues();
   648  0008DE  EC9B  F003         	call	_read_xyzvalues	;wreg free
   649  0008E2  EE20  F0E3         	lfsr	2,main@data
   650  0008E6  0E05               	movlw	5
   651  0008E8                     u1691:
   652  0008E8  CFEB FFDB          	movff	plusw0,plusw2
   653  0008EC  06E8               	decf	wreg,f,c
   654  0008EE  E2FC               	bc	u1691
   655                           
   656                           ;main.c: 89: _delay((unsigned long)((100)*(16000000/4000.0)));
   657  0008F0  0E03               	movlw	3
   658  0008F2  0100               	movlb	0	; () banked
   659  0008F4  6FE2               	movwf	(??_main+1)& (0+255),b
   660  0008F6  0E08               	movlw	8
   661  0008F8  6FE1               	movwf	??_main& (0+255),b
   662  0008FA  0E77               	movlw	119
   663  0008FC                     u1707:
   664  0008FC  2EE8               	decfsz	wreg,f,c
   665  0008FE  D7FE               	bra	u1707
   666  000900  2FE1               	decfsz	??_main& (0+255),f,b
   667  000902  D7FC               	bra	u1707
   668  000904  2FE2               	decfsz	(??_main+1)& (0+255),f,b
   669  000906  D7FA               	bra	u1707
   670                           
   671                           ;main.c: 92: EUSART1_Write(data.x & 0xff);
   672  000908  0100               	movlb	0	; () banked
   673  00090A  51E3               	movf	main@data& (0+255),w,b
   674  00090C  EC9C  F006         	call	_EUSART1_Write
   675                           
   676                           ;main.c: 93: EUSART1_Write((data.x>>8) & 0xff);
   677  000910  0100               	movlb	0	; () banked
   678  000912  51E4               	movf	(main@data+1)& (0+255),w,b
   679  000914  EC9C  F006         	call	_EUSART1_Write
   680                           
   681                           ;main.c: 94: EUSART1_Write(data.y & 0xff);
   682  000918  0100               	movlb	0	; () banked
   683  00091A  51E5               	movf	(main@data+2)& (0+255),w,b
   684  00091C  EC9C  F006         	call	_EUSART1_Write
   685                           
   686                           ;main.c: 95: EUSART1_Write((data.y>>8) & 0xff);
   687  000920  0100               	movlb	0	; () banked
   688  000922  51E6               	movf	(main@data+3)& (0+255),w,b
   689  000924  EC9C  F006         	call	_EUSART1_Write
   690                           
   691                           ;main.c: 96: EUSART1_Write(data.z & 0xff);
   692  000928  0100               	movlb	0	; () banked
   693  00092A  51E7               	movf	(main@data+4)& (0+255),w,b
   694  00092C  EC9C  F006         	call	_EUSART1_Write
   695                           
   696                           ;main.c: 97: EUSART1_Write((data.z>>8) & 0xff);
   697  000930  0100               	movlb	0	; () banked
   698  000932  51E8               	movf	(main@data+5)& (0+255),w,b
   699  000934  EC9C  F006         	call	_EUSART1_Write
   700                           
   701                           ;main.c: 98: printf("\r\n");
   702  000938  0E01               	movlw	low STR_1
   703  00093A  6E3C               	movwf	printf@f,c
   704  00093C  0E06               	movlw	high STR_1
   705  00093E  6E3D               	movwf	printf@f+1,c
   706  000940  EC16  F007         	call	_printf	;wreg free
   707  000944  D7CC               	goto	l613
   708  000946                     __end_of_main:
   709                           	opt stack 0
   710                           tblptru	equ	0xFF8
   711                           tblptrh	equ	0xFF7
   712                           tblptrl	equ	0xFF6
   713                           tablat	equ	0xFF5
   714                           intcon	equ	0xFF2
   715                           postinc0	equ	0xFEE
   716                           plusw0	equ	0xFEB
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1l	equ	0xFE1
   720                           plusw2	equ	0xFDB
   721                           
   722 ;; *************** function _read_xyzvalues *****************
   723 ;; Defined at:
   724 ;;		line 67 in file "accelerometer.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  sensorData      6    0[BANK0 ] struct .
   729 ;; Return value:  Size  Location     Type
   730 ;;                  6   26[COMRAM] struct .
   731 ;; Registers used:
   732 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   738 ;;      Params:         6       0       0       0       0       0       0
   739 ;;      Locals:         0       6       0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0
   741 ;;      Totals:         6       6       0       0       0       0       0
   742 ;;Total ram usage:       12 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:   12
   745 ;; This function calls:
   746 ;;		_i2c_close
   747 ;;		_i2c_masterAccelRead
   748 ;;		_i2c_open
   749 ;;		_i2c_setBuffer
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text1
   756  000736                     __ptext1:
   757                           	opt stack 0
   758  000736                     _read_xyzvalues:
   759                           	opt stack 18
   760                           
   761                           ;accelerometer.c: 68: static i2c_error_t status;
   762                           ;accelerometer.c: 69: static volatile uint8_t readbuffer[6];
   763                           ;accelerometer.c: 70: accelerometer_data_t sensorData;
   764                           ;accelerometer.c: 73: i2c_open(0x1D);
   765                           
   766                           ;incstack = 0
   767  000736  0E1D               	movlw	29
   768  000738  EC03  F003         	call	_i2c_open
   769                           
   770                           ;accelerometer.c: 74: i2c_setBuffer(readbuffer, 6);
   771  00073C  0E1D               	movlw	low read_xyzvalues@readbuffer
   772  00073E  6E3A               	movwf	i2c_setBuffer@buffer,c
   773  000740  0E00               	movlw	high read_xyzvalues@readbuffer
   774  000742  6E3B               	movwf	i2c_setBuffer@buffer+1,c
   775  000744  0E00               	movlw	0
   776  000746  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
   777  000748  0E06               	movlw	6
   778  00074A  6E3C               	movwf	i2c_setBuffer@bufferSize,c
   779  00074C  EC4F  F007         	call	_i2c_setBuffer	;wreg free
   780                           
   781                           ;accelerometer.c: 77: status = i2c_masterAccelRead(0x01);
   782  000750  0E01               	movlw	1
   783  000752  EC13  F008         	call	_i2c_masterAccelRead
   784  000756  6E15               	movwf	read_xyzvalues@status,c
   785                           
   786                           ;accelerometer.c: 80: status = i2c_close();
   787  000758  EC40  F007         	call	_i2c_close	;wreg free
   788  00075C  6E15               	movwf	read_xyzvalues@status,c
   789                           
   790                           ;accelerometer.c: 82: sensorData.x = readbuffer[0];
   791  00075E  C01D  F0DB         	movff	read_xyzvalues@readbuffer,read_xyzvalues@sensorData	;volatile
   792  000762  0100               	movlb	0	; () banked
   793  000764  6BDC               	clrf	(read_xyzvalues@sensorData+1)& (0+255),b
   794                           
   795                           ; BSR set to: 0
   796                           ;accelerometer.c: 83: sensorData.x <<= 8;
   797  000766  51DB               	movf	read_xyzvalues@sensorData& (0+255),w,b
   798  000768  6FDC               	movwf	(read_xyzvalues@sensorData+1)& (0+255),b
   799  00076A  6BDB               	clrf	read_xyzvalues@sensorData& (0+255),b
   800                           
   801                           ; BSR set to: 0
   802                           ;accelerometer.c: 84: sensorData.x |= readbuffer[1];
   803  00076C  501E               	movf	read_xyzvalues@readbuffer+1,w,c	;volatile
   804  00076E  13DB               	iorwf	read_xyzvalues@sensorData& (0+255),f,b
   805                           
   806                           ; BSR set to: 0
   807                           ;accelerometer.c: 85: sensorData.x >>= 2;
   808  000770  35DC               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   809  000772  33DC               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   810  000774  33DB               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   811  000776  35DC               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   812  000778  33DC               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   813  00077A  33DB               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   814                           
   815                           ; BSR set to: 0
   816                           ;accelerometer.c: 87: sensorData.y = readbuffer[2];
   817  00077C  C01F  F0DD         	movff	read_xyzvalues@readbuffer+2,read_xyzvalues@sensorData+2	;volatile
   818  000780  6BDE               	clrf	(read_xyzvalues@sensorData+3)& (0+255),b
   819                           
   820                           ; BSR set to: 0
   821                           ;accelerometer.c: 88: sensorData.y <<= 8;
   822  000782  51DD               	movf	(read_xyzvalues@sensorData+2)& (0+255),w,b
   823  000784  6FDE               	movwf	(read_xyzvalues@sensorData+3)& (0+255),b
   824  000786  6BDD               	clrf	(read_xyzvalues@sensorData+2)& (0+255),b
   825                           
   826                           ; BSR set to: 0
   827                           ;accelerometer.c: 89: sensorData.y |= readbuffer[3];
   828  000788  5020               	movf	read_xyzvalues@readbuffer+3,w,c	;volatile
   829  00078A  13DD               	iorwf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   830                           
   831                           ; BSR set to: 0
   832                           ;accelerometer.c: 90: sensorData.y >>= 2;
   833  00078C  35DE               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   834  00078E  33DE               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   835  000790  33DD               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   836  000792  35DE               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   837  000794  33DE               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   838  000796  33DD               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   839                           
   840                           ; BSR set to: 0
   841                           ;accelerometer.c: 92: sensorData.z = readbuffer[4];
   842  000798  C021  F0DF         	movff	read_xyzvalues@readbuffer+4,read_xyzvalues@sensorData+4	;volatile
   843  00079C  6BE0               	clrf	(read_xyzvalues@sensorData+5)& (0+255),b
   844                           
   845                           ; BSR set to: 0
   846                           ;accelerometer.c: 93: sensorData.z <<= 8;
   847  00079E  51DF               	movf	(read_xyzvalues@sensorData+4)& (0+255),w,b
   848  0007A0  6FE0               	movwf	(read_xyzvalues@sensorData+5)& (0+255),b
   849  0007A2  6BDF               	clrf	(read_xyzvalues@sensorData+4)& (0+255),b
   850                           
   851                           ; BSR set to: 0
   852                           ;accelerometer.c: 94: sensorData.z |= readbuffer[5];
   853  0007A4  5022               	movf	read_xyzvalues@readbuffer+5,w,c	;volatile
   854  0007A6  13DF               	iorwf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   855                           
   856                           ; BSR set to: 0
   857                           ;accelerometer.c: 95: sensorData.z >>= 2;
   858  0007A8  35E0               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   859  0007AA  33E0               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   860  0007AC  33DF               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   861  0007AE  35E0               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   862  0007B0  33E0               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   863  0007B2  33DF               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   864                           
   865                           ; BSR set to: 0
   866                           ;accelerometer.c: 97: return sensorData;
   867  0007B4  EE20  F0DB         	lfsr	2,read_xyzvalues@sensorData
   868  0007B8  EE00  F040         	lfsr	0,?_read_xyzvalues
   869  0007BC  0E05               	movlw	5
   870  0007BE                     u1471:
   871  0007BE  CFDB FFEB          	movff	plusw2,plusw0
   872  0007C2  06E8               	decf	wreg,f,c
   873  0007C4  E2FC               	bc	u1471
   874  0007C6  0012               	return	
   875  0007C8                     __end_of_read_xyzvalues:
   876                           	opt stack 0
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           intcon	equ	0xFF2
   882                           postinc0	equ	0xFEE
   883                           plusw0	equ	0xFEB
   884                           wreg	equ	0xFE8
   885                           postdec1	equ	0xFE5
   886                           fsr1l	equ	0xFE1
   887                           plusw2	equ	0xFDB
   888                           
   889 ;; *************** function _printf *****************
   890 ;; Defined at:
   891 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  f               2   22[COMRAM] PTR const unsigned char 
   894 ;;		 -> STR_1(3), 
   895 ;; Auto vars:     Size  Location     Type
   896 ;;  tmpval          4    0        struct .
   897 ;;  cp              3    0        PTR const unsigned char 
   898 ;;  ap              2   24[COMRAM] PTR void [1]
   899 ;;		 -> ?_printf(2), 
   900 ;;  len             2    0        unsigned int 
   901 ;;  val             2    0        unsigned int 
   902 ;;  c               1   26[COMRAM] char 
   903 ;;  flag            1    0        unsigned char 
   904 ;;  prec            1    0        char 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  2   22[COMRAM] int 
   907 ;; Registers used:
   908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   914 ;;      Params:         2       0       0       0       0       0       0
   915 ;;      Locals:         3       0       0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0
   917 ;;      Totals:         5       0       0       0       0       0       0
   918 ;;Total ram usage:        5 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    7
   921 ;; This function calls:
   922 ;;		_putch
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text2
   929  000E2C                     __ptext2:
   930                           	opt stack 0
   931  000E2C                     _printf:
   932                           	opt stack 23
   933                           
   934                           ;doprnt.c: 466: va_list ap;
   935                           ;doprnt.c: 499: signed char c;
   936                           ;doprnt.c: 506: signed char prec;
   937                           ;doprnt.c: 508: unsigned char flag;
   938                           ;doprnt.c: 523: union {
   939                           ;doprnt.c: 524: unsigned long vd;
   940                           ;doprnt.c: 525: double integ;
   941                           ;doprnt.c: 526: } tmpval;
   942                           ;doprnt.c: 528: unsigned int val;
   943                           ;doprnt.c: 529: unsigned len;
   944                           ;doprnt.c: 530: const char * cp;
   945                           ;doprnt.c: 533: *ap = __va_start();
   946                           
   947                           ; BSR set to: 0
   948                           ;incstack = 0
   949  000E2C  0E3E               	movlw	low (?_printf+2)
   950  000E2E  6E3E               	movwf	printf@ap,c
   951  000E30  0E00               	movlw	high (?_printf+2)
   952  000E32  6E3F               	movwf	printf@ap+1,c
   953                           
   954                           ;doprnt.c: 536: while(c = *f++) {
   955  000E34  D003               	goto	l666
   956  000E36                     
   957                           ;doprnt.c: 540: {
   958                           ;doprnt.c: 541: (putch(c) );
   959  000E36  5040               	movf	printf@c,w,c
   960  000E38  EC5E  F008         	call	_putch
   961  000E3C                     l666:
   962  000E3C  C03C  FFF6         	movff	printf@f,tblptrl
   963  000E40  C03D  FFF7         	movff	printf@f+1,tblptrh
   964  000E44  4A3C               	infsnz	printf@f,f,c
   965  000E46  2A3D               	incf	printf@f+1,f,c
   966  000E48                     	if	0	;tblptru may be non-zero
   967  000E48                     	endif
   968  000E48                     	if	0	;tblptru may be non-zero
   969  000E48                     	endif
   970  000E48  0008               	tblrd		*
   971  000E4A  CFF5 F040          	movff	tablat,printf@c
   972  000E4E  5040               	movf	printf@c,w,c
   973  000E50  B4D8               	btfsc	status,2,c
   974  000E52  0012               	return	
   975  000E54  D7F0               	goto	l667
   976  000E56                     __end_of_printf:
   977                           	opt stack 0
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           intcon	equ	0xFF2
   983                           postinc0	equ	0xFEE
   984                           plusw0	equ	0xFEB
   985                           wreg	equ	0xFE8
   986                           postdec1	equ	0xFE5
   987                           fsr1l	equ	0xFE1
   988                           plusw2	equ	0xFDB
   989                           status	equ	0xFD8
   990                           
   991 ;; *************** function _putch *****************
   992 ;; Defined at:
   993 ;;		line 178 in file "mcc_generated_files/eusart1.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;  txData          1    wreg     unsigned char 
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  txData          1   21[COMRAM] unsigned char 
   998 ;; Return value:  Size  Location     Type
   999 ;;                  1    wreg      void 
  1000 ;; Registers used:
  1001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1007 ;;      Params:         0       0       0       0       0       0       0
  1008 ;;      Locals:         1       0       0       0       0       0       0
  1009 ;;      Temps:          0       0       0       0       0       0       0
  1010 ;;      Totals:         1       0       0       0       0       0       0
  1011 ;;Total ram usage:        1 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    6
  1014 ;; This function calls:
  1015 ;;		_EUSART1_Write
  1016 ;; This function is called by:
  1017 ;;		_printf
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text3
  1022  0010BC                     __ptext3:
  1023                           	opt stack 0
  1024  0010BC                     _putch:
  1025                           	opt stack 23
  1026                           
  1027                           ;incstack = 0
  1028                           ;putch@txData stored from wreg
  1029  0010BC  6E3B               	movwf	putch@txData,c
  1030                           
  1031                           ;eusart1.c: 180: EUSART1_Write(txData);
  1032  0010BE  503B               	movf	putch@txData,w,c
  1033  0010C0  EC9C  F006         	call	_EUSART1_Write
  1034  0010C4  0012               	return		;funcret
  1035  0010C6                     __end_of_putch:
  1036                           	opt stack 0
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           intcon	equ	0xFF2
  1042                           postinc0	equ	0xFEE
  1043                           plusw0	equ	0xFEB
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1l	equ	0xFE1
  1047                           plusw2	equ	0xFDB
  1048                           status	equ	0xFD8
  1049                           
  1050 ;; *************** function _EUSART1_Write *****************
  1051 ;; Defined at:
  1052 ;;		line 150 in file "mcc_generated_files/eusart1.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  txData          1    wreg     unsigned char 
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;  txData          1   20[COMRAM] unsigned char 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1066 ;;      Params:         0       0       0       0       0       0       0
  1067 ;;      Locals:         1       0       0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0
  1069 ;;      Totals:         1       0       0       0       0       0       0
  1070 ;;Total ram usage:        1 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; Hardware stack levels required when called:    5
  1073 ;; This function calls:
  1074 ;;		Nothing
  1075 ;; This function is called by:
  1076 ;;		_putch
  1077 ;;		_main
  1078 ;;		_Send_UART
  1079 ;;		_printString
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text4
  1084  000D38                     __ptext4:
  1085                           	opt stack 0
  1086  000D38                     _EUSART1_Write:
  1087                           	opt stack 23
  1088                           
  1089                           ;incstack = 0
  1090                           ;EUSART1_Write@txData stored from wreg
  1091  000D38  6E3A               	movwf	EUSART1_Write@txData,c
  1092  000D3A                     
  1093                           ;eusart1.c: 153: {
  1094                           
  1095                           ;eusart1.c: 152: while(0 == eusart1TxBufferRemaining)
  1096  000D3A  504A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  1097  000D3C  B4D8               	btfsc	status,2,c
  1098  000D3E  D7FD               	goto	l3517
  1099                           
  1100                           ;eusart1.c: 154: }
  1101                           ;eusart1.c: 156: if(0 == PIE1bits.TX1IE)
  1102  000D40  B89D               	btfsc	3997,4,c	;volatile
  1103  000D42  D003               	goto	l309
  1104                           
  1105                           ;eusart1.c: 157: {
  1106                           ;eusart1.c: 158: TXREG1 = txData;
  1107  000D44  C03A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1108                           
  1109                           ;eusart1.c: 159: }
  1110  000D48  D012               	goto	l310
  1111  000D4A                     l309:
  1112                           
  1113                           ;eusart1.c: 160: else
  1114                           ;eusart1.c: 161: {
  1115                           ;eusart1.c: 162: PIE1bits.TX1IE = 0;
  1116  000D4A  989D               	bcf	3997,4,c	;volatile
  1117                           
  1118                           ;eusart1.c: 163: eusart1TxBuffer[eusart1TxHead++] = txData;
  1119  000D4C  501C               	movf	_eusart1TxHead,w,c	;volatile
  1120  000D4E  0D01               	mullw	1
  1121  000D50  0E09               	movlw	low _eusart1TxBuffer
  1122  000D52  24F3               	addwf	prodl,w,c
  1123  000D54  6ED9               	movwf	fsr2l,c
  1124  000D56  0E00               	movlw	high _eusart1TxBuffer
  1125  000D58  20F4               	addwfc	prodh,w,c
  1126  000D5A  6EDA               	movwf	fsr2h,c
  1127  000D5C  C03A  FFDF         	movff	EUSART1_Write@txData,indf2
  1128  000D60  2A1C               	incf	_eusart1TxHead,f,c	;volatile
  1129                           
  1130                           ;eusart1.c: 164: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  1131  000D62  0E07               	movlw	7
  1132  000D64  641C               	cpfsgt	_eusart1TxHead,c	;volatile
  1133  000D66  D002               	goto	l311
  1134                           
  1135                           ;eusart1.c: 165: {
  1136                           ;eusart1.c: 166: eusart1TxHead = 0;
  1137  000D68  0E00               	movlw	0
  1138  000D6A  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1139  000D6C                     l311:
  1140                           
  1141                           ;eusart1.c: 167: }
  1142                           ;eusart1.c: 168: eusart1TxBufferRemaining--;
  1143  000D6C  064A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1144  000D6E                     l310:
  1145                           
  1146                           ;eusart1.c: 169: }
  1147                           ;eusart1.c: 170: PIE1bits.TX1IE = 1;
  1148  000D6E  889D               	bsf	3997,4,c	;volatile
  1149  000D70  0012               	return		;funcret
  1150  000D72                     __end_of_EUSART1_Write:
  1151                           	opt stack 0
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           prodh	equ	0xFF4
  1157                           prodl	equ	0xFF3
  1158                           intcon	equ	0xFF2
  1159                           postinc0	equ	0xFEE
  1160                           plusw0	equ	0xFEB
  1161                           wreg	equ	0xFE8
  1162                           postdec1	equ	0xFE5
  1163                           fsr1l	equ	0xFE1
  1164                           indf2	equ	0xFDF
  1165                           plusw2	equ	0xFDB
  1166                           fsr2h	equ	0xFDA
  1167                           fsr2l	equ	0xFD9
  1168                           status	equ	0xFD8
  1169                           
  1170 ;; *************** function _SYSTEM_Initialize *****************
  1171 ;; Defined at:
  1172 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;		None
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, status,2, status,0, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1186 ;;      Params:         0       0       0       0       0       0       0
  1187 ;;      Locals:         0       0       0       0       0       0       0
  1188 ;;      Temps:          0       0       0       0       0       0       0
  1189 ;;      Totals:         0       0       0       0       0       0       0
  1190 ;;Total ram usage:        0 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    7
  1193 ;; This function calls:
  1194 ;;		_EUSART1_Initialize
  1195 ;;		_INTERRUPT_Initialize
  1196 ;;		_OSCILLATOR_Initialize
  1197 ;;		_PIN_MANAGER_Initialize
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text5
  1204  000F80                     __ptext5:
  1205                           	opt stack 0
  1206  000F80                     _SYSTEM_Initialize:
  1207                           	opt stack 23
  1208                           
  1209                           ;mcc.c: 114: INTERRUPT_Initialize();
  1210                           
  1211                           ;incstack = 0
  1212  000F80  ECB8  F008         	call	_INTERRUPT_Initialize	;wreg free
  1213                           
  1214                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1215  000F84  EC2B  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  1216                           
  1217                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1218  000F88  EC0C  F008         	call	_OSCILLATOR_Initialize	;wreg free
  1219                           
  1220                           ;mcc.c: 117: EUSART1_Initialize();
  1221  000F8C  ECE7  F005         	call	_EUSART1_Initialize	;wreg free
  1222  000F90  0012               	return		;funcret
  1223  000F92                     __end_of_SYSTEM_Initialize:
  1224                           	opt stack 0
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           tblptrl	equ	0xFF6
  1228                           tablat	equ	0xFF5
  1229                           prodh	equ	0xFF4
  1230                           prodl	equ	0xFF3
  1231                           intcon	equ	0xFF2
  1232                           postinc0	equ	0xFEE
  1233                           plusw0	equ	0xFEB
  1234                           wreg	equ	0xFE8
  1235                           postdec1	equ	0xFE5
  1236                           fsr1l	equ	0xFE1
  1237                           indf2	equ	0xFDF
  1238                           plusw2	equ	0xFDB
  1239                           fsr2h	equ	0xFDA
  1240                           fsr2l	equ	0xFD9
  1241                           status	equ	0xFD8
  1242                           
  1243 ;; *************** function _PIN_MANAGER_Initialize *****************
  1244 ;; Defined at:
  1245 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;		None
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, status,2
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1259 ;;      Params:         0       0       0       0       0       0       0
  1260 ;;      Locals:         0       0       0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0       0       0
  1262 ;;      Totals:         0       0       0       0       0       0       0
  1263 ;;Total ram usage:        0 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    5
  1266 ;; This function calls:
  1267 ;;		Nothing
  1268 ;; This function is called by:
  1269 ;;		_SYSTEM_Initialize
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           	psect	text6
  1274  000E56                     __ptext6:
  1275                           	opt stack 0
  1276  000E56                     _PIN_MANAGER_Initialize:
  1277                           	opt stack 24
  1278                           
  1279                           ;pin_manager.c: 57: LATA = 0x00;
  1280                           
  1281                           ;incstack = 0
  1282  000E56  0E00               	movlw	0
  1283  000E58  6E89               	movwf	3977,c	;volatile
  1284                           
  1285                           ;pin_manager.c: 58: LATB = 0x00;
  1286  000E5A  0E00               	movlw	0
  1287  000E5C  6E8A               	movwf	3978,c	;volatile
  1288                           
  1289                           ;pin_manager.c: 59: LATC = 0x00;
  1290  000E5E  0E00               	movlw	0
  1291  000E60  6E8B               	movwf	3979,c	;volatile
  1292                           
  1293                           ;pin_manager.c: 64: TRISA = 0xFF;
  1294  000E62  6892               	setf	3986,c	;volatile
  1295                           
  1296                           ;pin_manager.c: 65: TRISB = 0xFF;
  1297  000E64  6893               	setf	3987,c	;volatile
  1298                           
  1299                           ;pin_manager.c: 66: TRISC = 0xBF;
  1300  000E66  0EBF               	movlw	191
  1301  000E68  6E94               	movwf	3988,c	;volatile
  1302                           
  1303                           ;pin_manager.c: 71: ANSELC = 0x24;
  1304  000E6A  0E24               	movlw	36
  1305  000E6C  010F               	movlb	15	; () banked
  1306  000E6E  6F3A               	movwf	58,b	;volatile
  1307                           
  1308                           ;pin_manager.c: 72: ANSELB = 0x3F;
  1309  000E70  0E3F               	movlw	63
  1310  000E72  6F39               	movwf	57,b	;volatile
  1311                           
  1312                           ;pin_manager.c: 73: ANSELA = 0x2F;
  1313  000E74  0E2F               	movlw	47
  1314  000E76  6F38               	movwf	56,b	;volatile
  1315                           
  1316                           ;pin_manager.c: 78: WPUB = 0x00;
  1317  000E78  0E00               	movlw	0
  1318  000E7A  6E61               	movwf	3937,c	;volatile
  1319                           
  1320                           ; BSR set to: 15
  1321                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  1322  000E7C  8EF1               	bsf	intcon2,7,c	;volatile
  1323                           
  1324                           ; BSR set to: 15
  1325  000E7E  0012               	return		;funcret
  1326  000E80                     __end_of_PIN_MANAGER_Initialize:
  1327                           	opt stack 0
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           prodh	equ	0xFF4
  1333                           prodl	equ	0xFF3
  1334                           intcon	equ	0xFF2
  1335                           intcon2	equ	0xFF1
  1336                           postinc0	equ	0xFEE
  1337                           plusw0	equ	0xFEB
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1l	equ	0xFE1
  1341                           indf2	equ	0xFDF
  1342                           plusw2	equ	0xFDB
  1343                           fsr2h	equ	0xFDA
  1344                           fsr2l	equ	0xFD9
  1345                           status	equ	0xFD8
  1346                           
  1347 ;; *************** function _OSCILLATOR_Initialize *****************
  1348 ;; Defined at:
  1349 ;;		line 120 in file "mcc_generated_files/mcc.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;		None
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;		None
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, status,2
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1363 ;;      Params:         0       0       0       0       0       0       0
  1364 ;;      Locals:         0       0       0       0       0       0       0
  1365 ;;      Temps:          0       0       0       0       0       0       0
  1366 ;;      Totals:         0       0       0       0       0       0       0
  1367 ;;Total ram usage:        0 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    5
  1370 ;; This function calls:
  1371 ;;		Nothing
  1372 ;; This function is called by:
  1373 ;;		_SYSTEM_Initialize
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text7
  1378  001018                     __ptext7:
  1379                           	opt stack 0
  1380  001018                     _OSCILLATOR_Initialize:
  1381                           	opt stack 24
  1382                           
  1383                           ;mcc.c: 123: OSCCON = 0x72;
  1384                           
  1385                           ; BSR set to: 15
  1386                           ;incstack = 0
  1387  001018  0E72               	movlw	114
  1388  00101A  6ED3               	movwf	4051,c	;volatile
  1389                           
  1390                           ;mcc.c: 125: OSCCON2 = 0x04;
  1391  00101C  0E04               	movlw	4
  1392  00101E  6ED2               	movwf	4050,c	;volatile
  1393                           
  1394                           ;mcc.c: 127: OSCTUNE = 0x40;
  1395  001020  0E40               	movlw	64
  1396  001022  6E9B               	movwf	3995,c	;volatile
  1397  001024  0012               	return		;funcret
  1398  001026                     __end_of_OSCILLATOR_Initialize:
  1399                           	opt stack 0
  1400                           tblptru	equ	0xFF8
  1401                           tblptrh	equ	0xFF7
  1402                           tblptrl	equ	0xFF6
  1403                           tablat	equ	0xFF5
  1404                           prodh	equ	0xFF4
  1405                           prodl	equ	0xFF3
  1406                           intcon	equ	0xFF2
  1407                           intcon2	equ	0xFF1
  1408                           postinc0	equ	0xFEE
  1409                           plusw0	equ	0xFEB
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1l	equ	0xFE1
  1413                           indf2	equ	0xFDF
  1414                           plusw2	equ	0xFDB
  1415                           fsr2h	equ	0xFDA
  1416                           fsr2l	equ	0xFD9
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _INTERRUPT_Initialize *****************
  1420 ;; Defined at:
  1421 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		None
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1435 ;;      Params:         0       0       0       0       0       0       0
  1436 ;;      Locals:         0       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0
  1438 ;;      Totals:         0       0       0       0       0       0       0
  1439 ;;Total ram usage:        0 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    5
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_SYSTEM_Initialize
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text8
  1450  001170                     __ptext8:
  1451                           	opt stack 0
  1452  001170                     _INTERRUPT_Initialize:
  1453                           	opt stack 24
  1454                           
  1455                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  1456                           
  1457                           ;incstack = 0
  1458  001170  9ED0               	bcf	4048,7,c	;volatile
  1459  001172  0012               	return		;funcret
  1460  001174                     __end_of_INTERRUPT_Initialize:
  1461                           	opt stack 0
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           prodh	equ	0xFF4
  1467                           prodl	equ	0xFF3
  1468                           intcon	equ	0xFF2
  1469                           intcon2	equ	0xFF1
  1470                           postinc0	equ	0xFEE
  1471                           plusw0	equ	0xFEB
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           indf2	equ	0xFDF
  1476                           plusw2	equ	0xFDB
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _EUSART1_Initialize *****************
  1482 ;; Defined at:
  1483 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;		None
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1497 ;;      Params:         0       0       0       0       0       0       0
  1498 ;;      Locals:         0       0       0       0       0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0
  1500 ;;      Totals:         0       0       0       0       0       0       0
  1501 ;;Total ram usage:        0 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    6
  1504 ;; This function calls:
  1505 ;;		_EUSART1_SetRxInterruptHandler
  1506 ;;		_EUSART1_SetTxInterruptHandler
  1507 ;; This function is called by:
  1508 ;;		_SYSTEM_Initialize
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text9
  1513  000BCE                     __ptext9:
  1514                           	opt stack 0
  1515  000BCE                     _EUSART1_Initialize:
  1516                           	opt stack 23
  1517                           
  1518                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  1519                           
  1520                           ;incstack = 0
  1521  000BCE  9A9D               	bcf	3997,5,c	;volatile
  1522                           
  1523                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  1524  000BD0  989D               	bcf	3997,4,c	;volatile
  1525                           
  1526                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  1527  000BD2  0ED2               	movlw	low _EUSART1_Transmit_ISR
  1528  000BD4  6E3A               	movwf	EUSART1_SetTxInterruptHandler@handler,c
  1529  000BD6  0E0D               	movlw	high _EUSART1_Transmit_ISR
  1530  000BD8  6E3B               	movwf	EUSART1_SetTxInterruptHandler@handler+1,c
  1531  000BDA  EC63  F008         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  1532                           
  1533                           ;eusart1.c: 82: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  1534  000BDE  0E00               	movlw	low _EUSART1_Receive_ISR
  1535  000BE0  6E3A               	movwf	EUSART1_SetRxInterruptHandler@handler,c
  1536  000BE2  0E0E               	movlw	high _EUSART1_Receive_ISR
  1537  000BE4  6E3B               	movwf	EUSART1_SetRxInterruptHandler@handler+1,c
  1538  000BE6  EC68  F008         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  1539                           
  1540                           ;eusart1.c: 87: BAUDCON1 = 0x08;
  1541  000BEA  0E08               	movlw	8
  1542  000BEC  6EB8               	movwf	4024,c	;volatile
  1543                           
  1544                           ;eusart1.c: 90: RCSTA1 = 0x90;
  1545  000BEE  0E90               	movlw	144
  1546  000BF0  6EAB               	movwf	4011,c	;volatile
  1547                           
  1548                           ;eusart1.c: 93: TXSTA1 = 0x24;
  1549  000BF2  0E24               	movlw	36
  1550  000BF4  6EAC               	movwf	4012,c	;volatile
  1551                           
  1552                           ;eusart1.c: 96: SPBRG1 = 0x22;
  1553  000BF6  0E22               	movlw	34
  1554  000BF8  6EAF               	movwf	4015,c	;volatile
  1555                           
  1556                           ;eusart1.c: 99: SPBRGH1 = 0x00;
  1557  000BFA  0E00               	movlw	0
  1558  000BFC  6EB0               	movwf	4016,c	;volatile
  1559                           
  1560                           ;eusart1.c: 103: eusart1TxHead = 0;
  1561  000BFE  0E00               	movlw	0
  1562  000C00  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1563                           
  1564                           ;eusart1.c: 104: eusart1TxTail = 0;
  1565  000C02  0E00               	movlw	0
  1566  000C04  6E1B               	movwf	_eusart1TxTail,c	;volatile
  1567                           
  1568                           ;eusart1.c: 105: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1569  000C06  0E08               	movlw	8
  1570  000C08  6E4A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1571                           
  1572                           ;eusart1.c: 107: eusart1RxHead = 0;
  1573  000C0A  0E00               	movlw	0
  1574  000C0C  6E1A               	movwf	_eusart1RxHead,c	;volatile
  1575                           
  1576                           ;eusart1.c: 108: eusart1RxTail = 0;
  1577  000C0E  0E00               	movlw	0
  1578  000C10  6E19               	movwf	_eusart1RxTail,c	;volatile
  1579                           
  1580                           ;eusart1.c: 109: eusart1RxCount = 0;
  1581  000C12  0E00               	movlw	0
  1582  000C14  6E18               	movwf	_eusart1RxCount,c	;volatile
  1583                           
  1584                           ;eusart1.c: 112: PIE1bits.RC1IE = 1;
  1585  000C16  8A9D               	bsf	3997,5,c	;volatile
  1586  000C18  0012               	return		;funcret
  1587  000C1A                     __end_of_EUSART1_Initialize:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           prodh	equ	0xFF4
  1594                           prodl	equ	0xFF3
  1595                           intcon	equ	0xFF2
  1596                           intcon2	equ	0xFF1
  1597                           postinc0	equ	0xFEE
  1598                           plusw0	equ	0xFEB
  1599                           wreg	equ	0xFE8
  1600                           postdec1	equ	0xFE5
  1601                           fsr1l	equ	0xFE1
  1602                           indf2	equ	0xFDF
  1603                           plusw2	equ	0xFDB
  1604                           fsr2h	equ	0xFDA
  1605                           fsr2l	equ	0xFD9
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  1609 ;; Defined at:
  1610 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1613 ;;		 -> EUSART1_Transmit_ISR(1), 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1625 ;;      Params:         2       0       0       0       0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0
  1628 ;;      Totals:         2       0       0       0       0       0       0
  1629 ;;Total ram usage:        2 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    5
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_EUSART1_Initialize
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text10
  1640  0010C6                     __ptext10:
  1641                           	opt stack 0
  1642  0010C6                     _EUSART1_SetTxInterruptHandler:
  1643                           	opt stack 23
  1644                           
  1645                           ;eusart1.c: 223: EUSART1_TxDefaultInterruptHandler = handler;
  1646                           
  1647                           ;incstack = 0
  1648  0010C6  C03A  F048         	movff	EUSART1_SetTxInterruptHandler@handler,_EUSART1_TxDefaultInterruptHandler
  1649  0010CA  C03B  F049         	movff	EUSART1_SetTxInterruptHandler@handler+1,_EUSART1_TxDefaultInterruptHandler+1
  1650  0010CE  0012               	return		;funcret
  1651  0010D0                     __end_of_EUSART1_SetTxInterruptHandler:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           prodh	equ	0xFF4
  1658                           prodl	equ	0xFF3
  1659                           intcon	equ	0xFF2
  1660                           intcon2	equ	0xFF1
  1661                           postinc0	equ	0xFEE
  1662                           plusw0	equ	0xFEB
  1663                           wreg	equ	0xFE8
  1664                           postdec1	equ	0xFE5
  1665                           fsr1l	equ	0xFE1
  1666                           indf2	equ	0xFDF
  1667                           plusw2	equ	0xFDB
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  1673 ;; Defined at:
  1674 ;;		line 226 in file "mcc_generated_files/eusart1.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1677 ;;		 -> EUSART1_Receive_ISR(1), 
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;		None
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      void 
  1682 ;; Registers used:
  1683 ;;		wreg, status,2, status,0
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1689 ;;      Params:         2       0       0       0       0       0       0
  1690 ;;      Locals:         0       0       0       0       0       0       0
  1691 ;;      Temps:          0       0       0       0       0       0       0
  1692 ;;      Totals:         2       0       0       0       0       0       0
  1693 ;;Total ram usage:        2 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    5
  1696 ;; This function calls:
  1697 ;;		Nothing
  1698 ;; This function is called by:
  1699 ;;		_EUSART1_Initialize
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text11
  1704  0010D0                     __ptext11:
  1705                           	opt stack 0
  1706  0010D0                     _EUSART1_SetRxInterruptHandler:
  1707                           	opt stack 23
  1708                           
  1709                           ;eusart1.c: 227: EUSART1_RxDefaultInterruptHandler = handler;
  1710                           
  1711                           ;incstack = 0
  1712  0010D0  C03A  F046         	movff	EUSART1_SetRxInterruptHandler@handler,_EUSART1_RxDefaultInterruptHandler
  1713  0010D4  C03B  F047         	movff	EUSART1_SetRxInterruptHandler@handler+1,_EUSART1_RxDefaultInterruptHandler+1
  1714  0010D8  0012               	return		;funcret
  1715  0010DA                     __end_of_EUSART1_SetRxInterruptHandler:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           prodh	equ	0xFF4
  1722                           prodl	equ	0xFF3
  1723                           intcon	equ	0xFF2
  1724                           intcon2	equ	0xFF1
  1725                           postinc0	equ	0xFEE
  1726                           plusw0	equ	0xFEB
  1727                           wreg	equ	0xFE8
  1728                           postdec1	equ	0xFE5
  1729                           fsr1l	equ	0xFE1
  1730                           indf2	equ	0xFDF
  1731                           plusw2	equ	0xFDB
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function _ACCELEROMETER_Initialize *****************
  1737 ;; Defined at:
  1738 ;;		line 4 in file "accelerometer.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;		None
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1752 ;;      Params:         0       0       0       0       0       0       0
  1753 ;;      Locals:         0       0       0       0       0       0       0
  1754 ;;      Temps:          2       0       0       0       0       0       0
  1755 ;;      Totals:         2       0       0       0       0       0       0
  1756 ;;Total ram usage:        2 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:   13
  1759 ;; This function calls:
  1760 ;;		_read_register
  1761 ;;		_write_register
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text12
  1768  0009BA                     __ptext12:
  1769                           	opt stack 0
  1770  0009BA                     _ACCELEROMETER_Initialize:
  1771                           	opt stack 17
  1772                           
  1773                           ;accelerometer.c: 6: write_register(0x2B, 0x40);
  1774                           
  1775                           ;incstack = 0
  1776  0009BA  0E40               	movlw	64
  1777  0009BC  6E3F               	movwf	write_register@data,c
  1778  0009BE  0E2B               	movlw	43
  1779  0009C0  ECB9  F006         	call	_write_register
  1780                           
  1781                           ;accelerometer.c: 8: _delay((unsigned long)((100)*(16000000/4000.0)));
  1782  0009C4  0E03               	movlw	3
  1783  0009C6  6E42               	movwf	(??_ACCELEROMETER_Initialize+1)& (0+255),c
  1784  0009C8  0E08               	movlw	8
  1785  0009CA  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1786  0009CC  0E77               	movlw	119
  1787  0009CE                     u1717:
  1788  0009CE  2EE8               	decfsz	wreg,f,c
  1789  0009D0  D7FE               	bra	u1717
  1790  0009D2  2E41               	decfsz	??_ACCELEROMETER_Initialize& (0+255),f,c
  1791  0009D4  D7FC               	bra	u1717
  1792  0009D6  2E42               	decfsz	(??_ACCELEROMETER_Initialize+1)& (0+255),f,c
  1793  0009D8  D7FA               	bra	u1717
  1794  0009DA  F000               	nop	
  1795  0009DC  0E2B               	movlw	43
  1796  0009DE  ECD2  F006         	call	_read_register
  1797  0009E2  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1798  0009E4  BC41               	btfsc	??_ACCELEROMETER_Initialize,6,c
  1799  0009E6  D7FA               	goto	l636
  1800                           
  1801                           ;accelerometer.c: 14: write_register(0x0E, MMA8451_RANGE_4_G);
  1802  0009E8  0E01               	movlw	1
  1803  0009EA  6E3F               	movwf	write_register@data,c
  1804  0009EC  0E0E               	movlw	14
  1805  0009EE  ECB9  F006         	call	_write_register
  1806                           
  1807                           ;accelerometer.c: 16: write_register(0x2B, 0x02);
  1808  0009F2  0E02               	movlw	2
  1809  0009F4  6E3F               	movwf	write_register@data,c
  1810  0009F6  0E2B               	movlw	43
  1811  0009F8  ECB9  F006         	call	_write_register
  1812                           
  1813                           ;accelerometer.c: 18: write_register(0x2D, 0x01);
  1814  0009FC  0E01               	movlw	1
  1815  0009FE  6E3F               	movwf	write_register@data,c
  1816  000A00  0E2D               	movlw	45
  1817  000A02  ECB9  F006         	call	_write_register
  1818                           
  1819                           ;accelerometer.c: 19: write_register(0x2E, 0x01);
  1820  000A06  0E01               	movlw	1
  1821  000A08  6E3F               	movwf	write_register@data,c
  1822  000A0A  0E2E               	movlw	46
  1823  000A0C  ECB9  F006         	call	_write_register
  1824                           
  1825                           ;accelerometer.c: 22: write_register(0x11, 0x40);
  1826  000A10  0E40               	movlw	64
  1827  000A12  6E3F               	movwf	write_register@data,c
  1828  000A14  0E11               	movlw	17
  1829  000A16  ECB9  F006         	call	_write_register
  1830                           
  1831                           ;accelerometer.c: 25: write_register(0x2A, 0x01 | 0x04);
  1832  000A1A  0E05               	movlw	5
  1833  000A1C  6E3F               	movwf	write_register@data,c
  1834  000A1E  0E2A               	movlw	42
  1835  000A20  ECB9  F006         	call	_write_register
  1836  000A24  0012               	return		;funcret
  1837  000A26                     __end_of_ACCELEROMETER_Initialize:
  1838                           	opt stack 0
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           prodh	equ	0xFF4
  1844                           prodl	equ	0xFF3
  1845                           intcon	equ	0xFF2
  1846                           intcon2	equ	0xFF1
  1847                           postinc0	equ	0xFEE
  1848                           plusw0	equ	0xFEB
  1849                           wreg	equ	0xFE8
  1850                           postdec1	equ	0xFE5
  1851                           fsr1l	equ	0xFE1
  1852                           indf2	equ	0xFDF
  1853                           plusw2	equ	0xFDB
  1854                           fsr2h	equ	0xFDA
  1855                           fsr2l	equ	0xFD9
  1856                           status	equ	0xFD8
  1857                           
  1858 ;; *************** function _write_register *****************
  1859 ;; Defined at:
  1860 ;;		line 29 in file "accelerometer.c"
  1861 ;; Parameters:    Size  Location     Type
  1862 ;;  reg             1    wreg     unsigned char 
  1863 ;;  data            1   25[COMRAM] unsigned char 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  reg             1   26[COMRAM] unsigned char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  1    wreg      void 
  1868 ;; Registers used:
  1869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1875 ;;      Params:         1       0       0       0       0       0       0
  1876 ;;      Locals:         1       0       0       0       0       0       0
  1877 ;;      Temps:          0       0       0       0       0       0       0
  1878 ;;      Totals:         2       0       0       0       0       0       0
  1879 ;;Total ram usage:        2 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:   12
  1882 ;; This function calls:
  1883 ;;		_i2c_close
  1884 ;;		_i2c_masterWrite
  1885 ;;		_i2c_open
  1886 ;;		_i2c_setBuffer
  1887 ;; This function is called by:
  1888 ;;		_ACCELEROMETER_Initialize
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text13
  1893  000D72                     __ptext13:
  1894                           	opt stack 0
  1895  000D72                     _write_register:
  1896                           	opt stack 17
  1897                           
  1898                           ;incstack = 0
  1899                           ;write_register@reg stored from wreg
  1900  000D72  6E40               	movwf	write_register@reg,c
  1901                           
  1902                           ;accelerometer.c: 30: static i2c_error_t status;
  1903                           ;accelerometer.c: 31: static uint8_t buffer[2];
  1904                           ;accelerometer.c: 34: buffer[0] = reg;
  1905  000D74  C040  F023         	movff	write_register@reg,write_register@buffer
  1906                           
  1907                           ;accelerometer.c: 35: buffer[1] = data;
  1908  000D78  C03F  F024         	movff	write_register@data,write_register@buffer+1
  1909                           
  1910                           ;accelerometer.c: 36: i2c_open(0x1D);
  1911  000D7C  0E1D               	movlw	29
  1912  000D7E  EC03  F003         	call	_i2c_open
  1913                           
  1914                           ;accelerometer.c: 37: i2c_setBuffer(buffer, 2);
  1915  000D82  0E23               	movlw	low write_register@buffer
  1916  000D84  6E3A               	movwf	i2c_setBuffer@buffer,c
  1917  000D86  0E00               	movlw	high write_register@buffer
  1918  000D88  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  1919  000D8A  0E00               	movlw	0
  1920  000D8C  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  1921  000D8E  0E02               	movlw	2
  1922  000D90  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  1923  000D92  EC4F  F007         	call	_i2c_setBuffer	;wreg free
  1924                           
  1925                           ;accelerometer.c: 40: status = i2c_masterWrite();
  1926  000D96  EC81  F008         	call	_i2c_masterWrite	;wreg free
  1927  000D9A  6E17               	movwf	write_register@status,c
  1928                           
  1929                           ;accelerometer.c: 41: status = i2c_close();
  1930  000D9C  EC40  F007         	call	_i2c_close	;wreg free
  1931  000DA0  6E17               	movwf	write_register@status,c
  1932  000DA2  0012               	return		;funcret
  1933  000DA4                     __end_of_write_register:
  1934                           	opt stack 0
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           prodh	equ	0xFF4
  1940                           prodl	equ	0xFF3
  1941                           intcon	equ	0xFF2
  1942                           intcon2	equ	0xFF1
  1943                           postinc0	equ	0xFEE
  1944                           plusw0	equ	0xFEB
  1945                           wreg	equ	0xFE8
  1946                           postdec1	equ	0xFE5
  1947                           fsr1l	equ	0xFE1
  1948                           indf2	equ	0xFDF
  1949                           plusw2	equ	0xFDB
  1950                           fsr2h	equ	0xFDA
  1951                           fsr2l	equ	0xFD9
  1952                           status	equ	0xFD8
  1953                           
  1954 ;; *************** function _i2c_masterWrite *****************
  1955 ;; Defined at:
  1956 ;;		line 264 in file "mcc_generated_files/drivers/i2c_master.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;		None
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;		None
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      enum E6837
  1963 ;; Registers used:
  1964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1970 ;;      Params:         0       0       0       0       0       0       0
  1971 ;;      Locals:         0       0       0       0       0       0       0
  1972 ;;      Temps:          0       0       0       0       0       0       0
  1973 ;;      Totals:         0       0       0       0       0       0       0
  1974 ;;Total ram usage:        0 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:   11
  1977 ;; This function calls:
  1978 ;;		_i2c_masterOperation
  1979 ;; This function is called by:
  1980 ;;		_write_register
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           	psect	text14
  1985  001102                     __ptext14:
  1986                           	opt stack 0
  1987  001102                     _i2c_masterWrite:
  1988                           	opt stack 17
  1989                           
  1990                           ;i2c_master.c: 266: return i2c_masterOperation(OPERATIONWRITE);
  1991                           
  1992                           ;incstack = 0
  1993  001102  0E02               	movlw	2
  1994  001104  EC0D  F006         	call	_i2c_masterOperation
  1995  001108  0012               	return	
  1996  00110A                     __end_of_i2c_masterWrite:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           prodh	equ	0xFF4
  2003                           prodl	equ	0xFF3
  2004                           intcon	equ	0xFF2
  2005                           intcon2	equ	0xFF1
  2006                           postinc0	equ	0xFEE
  2007                           plusw0	equ	0xFEB
  2008                           wreg	equ	0xFE8
  2009                           postdec1	equ	0xFE5
  2010                           fsr1l	equ	0xFE1
  2011                           indf2	equ	0xFDF
  2012                           plusw2	equ	0xFDB
  2013                           fsr2h	equ	0xFDA
  2014                           fsr2l	equ	0xFD9
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function _read_register *****************
  2018 ;; Defined at:
  2019 ;;		line 46 in file "accelerometer.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  reg             1    wreg     unsigned char 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;  reg             1   26[COMRAM] unsigned char 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      unsigned char 
  2026 ;; Registers used:
  2027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2033 ;;      Params:         0       0       0       0       0       0       0
  2034 ;;      Locals:         1       0       0       0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0
  2036 ;;      Totals:         1       0       0       0       0       0       0
  2037 ;;Total ram usage:        1 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:   12
  2040 ;; This function calls:
  2041 ;;		_i2c_close
  2042 ;;		_i2c_masterAccelRead
  2043 ;;		_i2c_open
  2044 ;;		_i2c_setBuffer
  2045 ;; This function is called by:
  2046 ;;		_ACCELEROMETER_Initialize
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text15
  2051  000DA4                     __ptext15:
  2052                           	opt stack 0
  2053  000DA4                     _read_register:
  2054                           	opt stack 17
  2055                           
  2056                           ;incstack = 0
  2057                           ;read_register@reg stored from wreg
  2058  000DA4  6E40               	movwf	read_register@reg,c
  2059                           
  2060                           ;accelerometer.c: 47: static i2c_error_t status;
  2061                           ;accelerometer.c: 48: static volatile uint8_t receivebuffer[1];
  2062                           ;accelerometer.c: 51: i2c_open(0x1D);
  2063  000DA6  0E1D               	movlw	29
  2064  000DA8  EC03  F003         	call	_i2c_open
  2065                           
  2066                           ;accelerometer.c: 55: i2c_setBuffer(receivebuffer, 1);
  2067  000DAC  0E25               	movlw	low read_register@receivebuffer
  2068  000DAE  6E3A               	movwf	i2c_setBuffer@buffer,c
  2069  000DB0  0E00               	movlw	high read_register@receivebuffer
  2070  000DB2  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2071  000DB4  0E00               	movlw	0
  2072  000DB6  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2073  000DB8  0E01               	movlw	1
  2074  000DBA  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2075  000DBC  EC4F  F007         	call	_i2c_setBuffer	;wreg free
  2076                           
  2077                           ;accelerometer.c: 58: status = i2c_masterAccelRead(reg);
  2078  000DC0  5040               	movf	read_register@reg,w,c
  2079  000DC2  EC13  F008         	call	_i2c_masterAccelRead
  2080  000DC6  6E16               	movwf	read_register@status,c
  2081                           
  2082                           ;accelerometer.c: 61: status = i2c_close();
  2083  000DC8  EC40  F007         	call	_i2c_close	;wreg free
  2084  000DCC  6E16               	movwf	read_register@status,c
  2085                           
  2086                           ;accelerometer.c: 63: return receivebuffer[0];
  2087  000DCE  5025               	movf	read_register@receivebuffer,w,c	;volatile
  2088  000DD0  0012               	return	
  2089  000DD2                     __end_of_read_register:
  2090                           	opt stack 0
  2091                           tblptru	equ	0xFF8
  2092                           tblptrh	equ	0xFF7
  2093                           tblptrl	equ	0xFF6
  2094                           tablat	equ	0xFF5
  2095                           prodh	equ	0xFF4
  2096                           prodl	equ	0xFF3
  2097                           intcon	equ	0xFF2
  2098                           intcon2	equ	0xFF1
  2099                           postinc0	equ	0xFEE
  2100                           plusw0	equ	0xFEB
  2101                           wreg	equ	0xFE8
  2102                           postdec1	equ	0xFE5
  2103                           fsr1l	equ	0xFE1
  2104                           indf2	equ	0xFDF
  2105                           plusw2	equ	0xFDB
  2106                           fsr2h	equ	0xFDA
  2107                           fsr2l	equ	0xFD9
  2108                           status	equ	0xFD8
  2109                           
  2110 ;; *************** function _i2c_setBuffer *****************
  2111 ;; Defined at:
  2112 ;;		line 192 in file "mcc_generated_files/drivers/i2c_master.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  buffer          2   20[COMRAM] PTR void 
  2115 ;;		 -> read_xyzvalues@readbuffer(6), read_register@receivebuffer(1), write_register@buffer(2), 
  2116 ;;  bufferSize      2   22[COMRAM] unsigned int 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2128 ;;      Params:         4       0       0       0       0       0       0
  2129 ;;      Locals:         0       0       0       0       0       0       0
  2130 ;;      Temps:          0       0       0       0       0       0       0
  2131 ;;      Totals:         4       0       0       0       0       0       0
  2132 ;;Total ram usage:        4 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    5
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_write_register
  2139 ;;		_read_register
  2140 ;;		_read_xyzvalues
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text16
  2145  000E9E                     __ptext16:
  2146                           	opt stack 0
  2147  000E9E                     _i2c_setBuffer:
  2148                           	opt stack 24
  2149                           
  2150                           ;i2c_master.c: 194: if(i2c_status.bufferFree)
  2151                           
  2152                           ;incstack = 0
  2153  000E9E  0100               	movlb	0	; () banked
  2154  000EA0  A5B6               	btfss	_i2c_status& (0+255),2,b
  2155  000EA2  0012               	return	
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;i2c_master.c: 195: {
  2159                           ;i2c_master.c: 196: i2c_status.data_ptr = buffer;
  2160  000EA4  C03A  F0B8         	movff	i2c_setBuffer@buffer,_i2c_status+2
  2161  000EA8  C03B  F0B9         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;i2c_master.c: 197: i2c_status.data_length = bufferSize;
  2165  000EAC  C03C  F0BA         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  2166  000EB0  C03D  F0BB         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;i2c_master.c: 198: i2c_status.bufferFree = 0;
  2170  000EB4  95B6               	bcf	_i2c_status& (0+255),2,b
  2171  000EB6  0012               	return	
  2172  000EB8                     __end_of_i2c_setBuffer:
  2173                           	opt stack 0
  2174                           tblptru	equ	0xFF8
  2175                           tblptrh	equ	0xFF7
  2176                           tblptrl	equ	0xFF6
  2177                           tablat	equ	0xFF5
  2178                           prodh	equ	0xFF4
  2179                           prodl	equ	0xFF3
  2180                           intcon	equ	0xFF2
  2181                           intcon2	equ	0xFF1
  2182                           postinc0	equ	0xFEE
  2183                           plusw0	equ	0xFEB
  2184                           wreg	equ	0xFE8
  2185                           postdec1	equ	0xFE5
  2186                           fsr1l	equ	0xFE1
  2187                           indf2	equ	0xFDF
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _i2c_open *****************
  2194 ;; Defined at:
  2195 ;;		line 124 in file "mcc_generated_files/drivers/i2c_master.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  address         1    wreg     unsigned char 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  address         1   23[COMRAM] unsigned char 
  2200 ;;  ret             1   22[COMRAM] enum E6837
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      enum E6837
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2210 ;;      Params:         0       0       0       0       0       0       0
  2211 ;;      Locals:         2       0       0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0
  2213 ;;      Totals:         2       0       0       0       0       0       0
  2214 ;;Total ram usage:        2 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    6
  2217 ;; This function calls:
  2218 ;;		_i2c1_driver_open
  2219 ;;		_i2c1_driver_setBusCollisionISR
  2220 ;;		_i2c1_driver_setI2cISR
  2221 ;;		_mssp1_clearIRQ
  2222 ;; This function is called by:
  2223 ;;		_write_register
  2224 ;;		_read_register
  2225 ;;		_read_xyzvalues
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	text17
  2230  000606                     __ptext17:
  2231                           	opt stack 0
  2232  000606                     _i2c_open:
  2233                           	opt stack 23
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;incstack = 0
  2237                           ;i2c_open@address stored from wreg
  2238  000606  6E3D               	movwf	i2c_open@address,c
  2239                           
  2240                           ;i2c_master.c: 126: i2c_error_t ret = I2C_BUSY;
  2241  000608  0E01               	movlw	1
  2242  00060A  6E3C               	movwf	i2c_open@ret,c
  2243                           
  2244                           ;i2c_master.c: 128: if(!i2c_status.inUse)
  2245  00060C  0100               	movlb	0	; () banked
  2246  00060E  B3B6               	btfsc	_i2c_status& (0+255),1,b
  2247  000610  0012               	return	
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;i2c_master.c: 129: {
  2251                           ;i2c_master.c: 130: i2c_status.address = address;
  2252  000612  C03D  F0B7         	movff	i2c_open@address,_i2c_status+1
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;i2c_master.c: 131: i2c_status.busy = 0;
  2256  000616  91B6               	bcf	_i2c_status& (0+255),0,b
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;i2c_master.c: 132: i2c_status.inUse = 1;
  2260  000618  83B6               	bsf	_i2c_status& (0+255),1,b
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;i2c_master.c: 133: i2c_status.addressNACKCheck = 0;
  2264  00061A  97B6               	bcf	_i2c_status& (0+255),3,b
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;i2c_master.c: 134: i2c_status.state = I2C_RESET;
  2268  00061C  0E0E               	movlw	14
  2269  00061E  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;i2c_master.c: 135: i2c_status.time_out_value = 500;
  2273  000620  0E01               	movlw	1
  2274  000622  6FBF               	movwf	(_i2c_status+9)& (0+255),b
  2275  000624  0EF4               	movlw	244
  2276  000626  6FBE               	movwf	(_i2c_status+8)& (0+255),b
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;i2c_master.c: 136: i2c_status.bufferFree = 1;
  2280  000628  85B6               	bsf	_i2c_status& (0+255),2,b
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  2284  00062A  0EF8               	movlw	low _returnStop
  2285  00062C  6FC2               	movwf	(_i2c_status+12)& (0+255),b
  2286  00062E  0E10               	movlw	high _returnStop
  2287  000630  6FC3               	movwf	(_i2c_status+13)& (0+255),b
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  2291  000632  0E00               	movlw	0
  2292  000634  6FCE               	movwf	(_i2c_status+24)& (0+255),b
  2293  000636  0E00               	movlw	0
  2294  000638  6FCF               	movwf	(_i2c_status+25)& (0+255),b
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;i2c_master.c: 141: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  2298  00063A  0EF8               	movlw	low _returnStop
  2299  00063C  6FC4               	movwf	(_i2c_status+14)& (0+255),b
  2300  00063E  0E10               	movlw	high _returnStop
  2301  000640  6FC5               	movwf	(_i2c_status+15)& (0+255),b
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;i2c_master.c: 142: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  2305  000642  0E00               	movlw	0
  2306  000644  6FD0               	movwf	(_i2c_status+26)& (0+255),b
  2307  000646  0E00               	movlw	0
  2308  000648  6FD1               	movwf	(_i2c_status+27)& (0+255),b
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;i2c_master.c: 143: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  2312  00064A  0EF8               	movlw	low _returnStop
  2313  00064C  6FC6               	movwf	(_i2c_status+16)& (0+255),b
  2314  00064E  0E10               	movlw	high _returnStop
  2315  000650  6FC7               	movwf	(_i2c_status+17)& (0+255),b
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;i2c_master.c: 144: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  2319  000652  0E00               	movlw	0
  2320  000654  6FD2               	movwf	(_i2c_status+28)& (0+255),b
  2321  000656  0E00               	movlw	0
  2322  000658  6FD3               	movwf	(_i2c_status+29)& (0+255),b
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;i2c_master.c: 145: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  2326  00065A  0EF8               	movlw	low _returnStop
  2327  00065C  6FC8               	movwf	(_i2c_status+18)& (0+255),b
  2328  00065E  0E10               	movlw	high _returnStop
  2329  000660  6FC9               	movwf	(_i2c_status+19)& (0+255),b
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;i2c_master.c: 146: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  2333  000662  0E00               	movlw	0
  2334  000664  6FD4               	movwf	(_i2c_status+30)& (0+255),b
  2335  000666  0E00               	movlw	0
  2336  000668  6FD5               	movwf	(_i2c_status+31)& (0+255),b
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;i2c_master.c: 147: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  2340  00066A  0EEE               	movlw	low _returnReset
  2341  00066C  6FCA               	movwf	(_i2c_status+20)& (0+255),b
  2342  00066E  0E10               	movlw	high _returnReset
  2343  000670  6FCB               	movwf	(_i2c_status+21)& (0+255),b
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;i2c_master.c: 148: i2c_status.callbackPayload[i2c_timeOut] = (0);
  2347  000672  0E00               	movlw	0
  2348  000674  6FD6               	movwf	(_i2c_status+32)& (0+255),b
  2349  000676  0E00               	movlw	0
  2350  000678  6FD7               	movwf	(_i2c_status+33)& (0+255),b
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;i2c_master.c: 150: i2c1_driver_open();
  2354  00067A  EC69  F007         	call	_i2c1_driver_open	;wreg free
  2355                           
  2356                           ;i2c_master.c: 151: mssp1_clearIRQ();
  2357  00067E  ECC8  F008         	call	_mssp1_clearIRQ	;wreg free
  2358                           
  2359                           ;i2c_master.c: 153: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  2360  000682  0E6A               	movlw	low _i2c_busCollisionISR
  2361  000684  6E3A               	movwf	i2c1_driver_setBusCollisionISR@f,c
  2362  000686  0E11               	movlw	high _i2c_busCollisionISR
  2363  000688  6E3B               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  2364  00068A  EC72  F008         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  2365                           
  2366                           ;i2c_master.c: 154: i2c1_driver_setI2cISR(i2c_ISR);
  2367  00068E  0E32               	movlw	low _i2c_ISR
  2368  000690  6E3A               	movwf	i2c1_driver_setI2cISR@f,c
  2369  000692  0E0B               	movlw	high _i2c_ISR
  2370  000694  6E3B               	movwf	i2c1_driver_setI2cISR@f+1,c
  2371  000696  EC6D  F008         	call	_i2c1_driver_setI2cISR	;wreg free
  2372                           
  2373                           ;i2c_master.c: 159: ret = I2C_NOERR;
  2374  00069A  0E00               	movlw	0
  2375  00069C  6E3C               	movwf	i2c_open@ret,c
  2376  00069E  0012               	return	
  2377  0006A0                     __end_of_i2c_open:
  2378                           	opt stack 0
  2379                           tblptru	equ	0xFF8
  2380                           tblptrh	equ	0xFF7
  2381                           tblptrl	equ	0xFF6
  2382                           tablat	equ	0xFF5
  2383                           prodh	equ	0xFF4
  2384                           prodl	equ	0xFF3
  2385                           intcon	equ	0xFF2
  2386                           intcon2	equ	0xFF1
  2387                           postinc0	equ	0xFEE
  2388                           plusw0	equ	0xFEB
  2389                           wreg	equ	0xFE8
  2390                           postdec1	equ	0xFE5
  2391                           fsr1l	equ	0xFE1
  2392                           indf2	equ	0xFDF
  2393                           plusw2	equ	0xFDB
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           status	equ	0xFD8
  2397                           
  2398 ;; *************** function _i2c1_driver_setI2cISR *****************
  2399 ;; Defined at:
  2400 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  f               2   20[COMRAM] PTR FTN()void 
  2403 ;;		 -> i2c_ISR(1), 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;		None
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, status,2, status,0
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2415 ;;      Params:         2       0       0       0       0       0       0
  2416 ;;      Locals:         0       0       0       0       0       0       0
  2417 ;;      Temps:          0       0       0       0       0       0       0
  2418 ;;      Totals:         2       0       0       0       0       0       0
  2419 ;;Total ram usage:        2 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    5
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_i2c_open
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text18
  2430  0010DA                     __ptext18:
  2431                           	opt stack 0
  2432  0010DA                     _i2c1_driver_setI2cISR:
  2433                           	opt stack 23
  2434                           
  2435                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  2436                           
  2437                           ;incstack = 0
  2438  0010DA  C03A  F011         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  2439  0010DE  C03B  F012         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  2440  0010E2  0012               	return		;funcret
  2441  0010E4                     __end_of_i2c1_driver_setI2cISR:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           prodh	equ	0xFF4
  2448                           prodl	equ	0xFF3
  2449                           intcon	equ	0xFF2
  2450                           intcon2	equ	0xFF1
  2451                           postinc0	equ	0xFEE
  2452                           plusw0	equ	0xFEB
  2453                           wreg	equ	0xFE8
  2454                           postdec1	equ	0xFE5
  2455                           fsr1l	equ	0xFE1
  2456                           indf2	equ	0xFDF
  2457                           plusw2	equ	0xFDB
  2458                           fsr2h	equ	0xFDA
  2459                           fsr2l	equ	0xFD9
  2460                           status	equ	0xFD8
  2461                           
  2462 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  2463 ;; Defined at:
  2464 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  f               2   20[COMRAM] PTR FTN()void 
  2467 ;;		 -> i2c_busCollisionISR(1), 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;		None
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, status,2, status,0
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2479 ;;      Params:         2       0       0       0       0       0       0
  2480 ;;      Locals:         0       0       0       0       0       0       0
  2481 ;;      Temps:          0       0       0       0       0       0       0
  2482 ;;      Totals:         2       0       0       0       0       0       0
  2483 ;;Total ram usage:        2 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    5
  2486 ;; This function calls:
  2487 ;;		Nothing
  2488 ;; This function is called by:
  2489 ;;		_i2c_open
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text19
  2494  0010E4                     __ptext19:
  2495                           	opt stack 0
  2496  0010E4                     _i2c1_driver_setBusCollisionISR:
  2497                           	opt stack 23
  2498                           
  2499                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  2500                           
  2501                           ;incstack = 0
  2502  0010E4  C03A  F013         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  2503  0010E8  C03B  F014         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  2504  0010EC  0012               	return		;funcret
  2505  0010EE                     __end_of_i2c1_driver_setBusCollisionISR:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           prodh	equ	0xFF4
  2512                           prodl	equ	0xFF3
  2513                           intcon	equ	0xFF2
  2514                           intcon2	equ	0xFF1
  2515                           postinc0	equ	0xFEE
  2516                           plusw0	equ	0xFEB
  2517                           wreg	equ	0xFE8
  2518                           postdec1	equ	0xFE5
  2519                           fsr1l	equ	0xFE1
  2520                           indf2	equ	0xFDF
  2521                           plusw2	equ	0xFDB
  2522                           fsr2h	equ	0xFDA
  2523                           fsr2l	equ	0xFD9
  2524                           status	equ	0xFD8
  2525                           
  2526 ;; *************** function _i2c1_driver_open *****************
  2527 ;; Defined at:
  2528 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;		None
  2533 ;; Return value:  Size  Location     Type
  2534 ;;		None               void
  2535 ;; Registers used:
  2536 ;;		wreg, status,2
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2542 ;;      Params:         0       0       0       0       0       0       0
  2543 ;;      Locals:         0       0       0       0       0       0       0
  2544 ;;      Temps:          0       0       0       0       0       0       0
  2545 ;;      Totals:         0       0       0       0       0       0       0
  2546 ;;Total ram usage:        0 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    5
  2549 ;; This function calls:
  2550 ;;		Nothing
  2551 ;; This function is called by:
  2552 ;;		_i2c_open
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text20
  2557  000ED2                     __ptext20:
  2558                           	opt stack 0
  2559  000ED2                     _i2c1_driver_open:
  2560                           	opt stack 23
  2561                           
  2562                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  2563                           
  2564                           ;incstack = 0
  2565  000ED2  BAC6               	btfsc	4038,5,c	;volatile
  2566  000ED4  0012               	return	
  2567                           
  2568                           ;i2c1_driver.c: 86: {
  2569                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  2570  000ED6  0E00               	movlw	0
  2571  000ED8  6EC7               	movwf	4039,c	;volatile
  2572                           
  2573                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  2574  000EDA  0E28               	movlw	40
  2575  000EDC  6EC6               	movwf	4038,c	;volatile
  2576                           
  2577                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  2578  000EDE  0E00               	movlw	0
  2579  000EE0  6EC5               	movwf	4037,c	;volatile
  2580                           
  2581                           ;i2c1_driver.c: 90: SSP1ADD = 0x27;
  2582  000EE2  0E27               	movlw	39
  2583  000EE4  6EC8               	movwf	4040,c	;volatile
  2584                           
  2585                           ;i2c1_driver.c: 93: else
  2586                           ;i2c1_driver.c: 94: return 0;
  2587                           ;	Return value of _i2c1_driver_open is never used
  2588                           
  2589                           ;i2c1_driver.c: 92: }
  2590                           
  2591                           ;i2c1_driver.c: 91: return 1;
  2592                           ;	Return value of _i2c1_driver_open is never used
  2593  000EE6  0012               	return	
  2594  000EE8                     __end_of_i2c1_driver_open:
  2595                           	opt stack 0
  2596                           tblptru	equ	0xFF8
  2597                           tblptrh	equ	0xFF7
  2598                           tblptrl	equ	0xFF6
  2599                           tablat	equ	0xFF5
  2600                           prodh	equ	0xFF4
  2601                           prodl	equ	0xFF3
  2602                           intcon	equ	0xFF2
  2603                           intcon2	equ	0xFF1
  2604                           postinc0	equ	0xFEE
  2605                           plusw0	equ	0xFEB
  2606                           wreg	equ	0xFE8
  2607                           postdec1	equ	0xFE5
  2608                           fsr1l	equ	0xFE1
  2609                           indf2	equ	0xFDF
  2610                           plusw2	equ	0xFDB
  2611                           fsr2h	equ	0xFDA
  2612                           fsr2l	equ	0xFD9
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function _i2c_masterAccelRead *****************
  2616 ;; Defined at:
  2617 ;;		line 249 in file "mcc_generated_files/drivers/i2c_master.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  reg             1    wreg     unsigned char 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;  reg             1   25[COMRAM] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      enum E6837
  2624 ;; Registers used:
  2625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2631 ;;      Params:         0       0       0       0       0       0       0
  2632 ;;      Locals:         1       0       0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0
  2634 ;;      Totals:         1       0       0       0       0       0       0
  2635 ;;Total ram usage:        1 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:   11
  2638 ;; This function calls:
  2639 ;;		_i2c_masterOperation
  2640 ;; This function is called by:
  2641 ;;		_read_register
  2642 ;;		_read_xyzvalues
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text21
  2647  001026                     __ptext21:
  2648                           	opt stack 0
  2649  001026                     _i2c_masterAccelRead:
  2650                           	opt stack 18
  2651                           
  2652                           ;incstack = 0
  2653                           ;i2c_masterAccelRead@reg stored from wreg
  2654  001026  6E3F               	movwf	i2c_masterAccelRead@reg,c
  2655                           
  2656                           ;i2c_master.c: 252: i2c_status.register_address = reg;
  2657  001028  C03F  F0DA         	movff	i2c_masterAccelRead@reg,_i2c_status+36
  2658                           
  2659                           ;i2c_master.c: 254: return i2c_masterOperation(OPERATIONACCELREAD);
  2660  00102C  0E01               	movlw	1
  2661  00102E  EC0D  F006         	call	_i2c_masterOperation
  2662  001032  0012               	return	
  2663  001034                     __end_of_i2c_masterAccelRead:
  2664                           	opt stack 0
  2665                           tblptru	equ	0xFF8
  2666                           tblptrh	equ	0xFF7
  2667                           tblptrl	equ	0xFF6
  2668                           tablat	equ	0xFF5
  2669                           prodh	equ	0xFF4
  2670                           prodl	equ	0xFF3
  2671                           intcon	equ	0xFF2
  2672                           intcon2	equ	0xFF1
  2673                           postinc0	equ	0xFEE
  2674                           plusw0	equ	0xFEB
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1l	equ	0xFE1
  2678                           indf2	equ	0xFDF
  2679                           plusw2	equ	0xFDB
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _i2c_masterOperation *****************
  2685 ;; Defined at:
  2686 ;;		line 210 in file "mcc_generated_files/drivers/i2c_master.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  operation       1    wreg     enum E6863
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  operation       1   23[COMRAM] enum E6863
  2691 ;;  ret             1   24[COMRAM] enum E6837
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      enum E6837
  2694 ;; Registers used:
  2695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2701 ;;      Params:         0       0       0       0       0       0       0
  2702 ;;      Locals:         2       0       0       0       0       0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0
  2704 ;;      Totals:         2       0       0       0       0       0       0
  2705 ;;Total ram usage:        2 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:   10
  2708 ;; This function calls:
  2709 ;;		_i2c1_driver_start
  2710 ;;		_i2c_poller
  2711 ;;		_mssp1_IRQisEnabled
  2712 ;; This function is called by:
  2713 ;;		_i2c_masterAccelRead
  2714 ;;		_i2c_masterWrite
  2715 ;;		_i2c_masterRead
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text22
  2720  000C1A                     __ptext22:
  2721                           	opt stack 0
  2722  000C1A                     _i2c_masterOperation:
  2723                           	opt stack 18
  2724                           
  2725                           ;incstack = 0
  2726                           ;i2c_masterOperation@operation stored from wreg
  2727  000C1A  6E3D               	movwf	i2c_masterOperation@operation,c
  2728                           
  2729                           ;i2c_master.c: 212: i2c_error_t ret = I2C_BUSY;
  2730  000C1C  0E01               	movlw	1
  2731  000C1E  6E3E               	movwf	i2c_masterOperation@ret,c
  2732                           
  2733                           ;i2c_master.c: 213: if(!i2c_status.busy)
  2734  000C20  0100               	movlb	0	; () banked
  2735  000C22  B1B6               	btfsc	_i2c_status& (0+255),0,b
  2736  000C24  D01C               	goto	l100
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;i2c_master.c: 214: {
  2740                           ;i2c_master.c: 215: i2c_status.busy = 1;
  2741  000C26  81B6               	bsf	_i2c_status& (0+255),0,b
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;i2c_master.c: 216: ret = I2C_NOERR;
  2745  000C28  0E00               	movlw	0
  2746  000C2A  6E3E               	movwf	i2c_masterOperation@ret,c
  2747                           
  2748                           ;i2c_master.c: 218: switch(operation) {
  2749  000C2C  D007               	goto	l95
  2750  000C2E                     
  2751                           ; BSR set to: 0
  2752                           ;i2c_master.c: 220: i2c_status.state = I2C_SEND_ADR_READ;
  2753                           
  2754                           ; BSR set to: 0
  2755  000C2E  0E01               	movlw	1
  2756  000C30  D003               	goto	L2
  2757  000C32                     
  2758                           ; BSR set to: 0
  2759                           ;i2c_master.c: 224: i2c_status.state = I2C_SEND_INITIAL_READ;
  2760                           
  2761                           ; BSR set to: 0
  2762  000C32  0E10               	movlw	16
  2763  000C34  D001               	goto	L2
  2764  000C36                     
  2765                           ; BSR set to: 0
  2766                           ;i2c_master.c: 228: i2c_status.state = I2C_SEND_ADR_WRITE;
  2767                           
  2768                           ; BSR set to: 0
  2769  000C36  0E02               	movlw	2
  2770  000C38                     L2:
  2771  000C38  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;i2c_master.c: 230: }
  2775                           
  2776                           ;i2c_master.c: 229: break;
  2777  000C3A  D00A               	goto	l97
  2778  000C3C                     l95:
  2779                           
  2780                           ; BSR set to: 0
  2781                           
  2782                           ; BSR set to: 0
  2783  000C3C  503D               	movf	i2c_masterOperation@operation,w,c
  2784                           
  2785                           ; Switch size 1, requested type "space"
  2786                           ; Number of cases is 3, Range of values is 0 to 2
  2787                           ; switch strategies available:
  2788                           ; Name         Instructions Cycles
  2789                           ; simple_byte           10     6 (average)
  2790                           ;	Chosen strategy is simple_byte
  2791  000C3E  0A00               	xorlw	0	; case 0
  2792  000C40  B4D8               	btfsc	status,2,c
  2793  000C42  D7F5               	goto	l96
  2794  000C44  0A01               	xorlw	1	; case 1
  2795  000C46  B4D8               	btfsc	status,2,c
  2796  000C48  D7F4               	goto	l98
  2797  000C4A  0A03               	xorlw	3	; case 2
  2798  000C4C  B4D8               	btfsc	status,2,c
  2799  000C4E  D7F3               	goto	l99
  2800  000C50                     l97:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;i2c_master.c: 241: i2c1_driver_start();
  2804                           
  2805                           ; BSR set to: 0
  2806  000C50  ECC4  F008         	call	_i2c1_driver_start	;wreg free
  2807                           
  2808                           ;i2c_master.c: 243: if(! mssp1_IRQisEnabled())
  2809  000C54  ECE4  F007         	call	_mssp1_IRQisEnabled	;wreg free
  2810  000C58  A0D8               	btfss	status,0,c
  2811                           
  2812                           ;i2c_master.c: 244: i2c_poller();
  2813  000C5A  EC5C  F007         	call	_i2c_poller	;wreg free
  2814  000C5E                     l100:
  2815                           
  2816                           ;i2c_master.c: 245: }
  2817                           ;i2c_master.c: 246: return ret;
  2818  000C5E  503E               	movf	i2c_masterOperation@ret,w,c
  2819  000C60  0012               	return	
  2820  000C62                     __end_of_i2c_masterOperation:
  2821                           	opt stack 0
  2822                           tblptru	equ	0xFF8
  2823                           tblptrh	equ	0xFF7
  2824                           tblptrl	equ	0xFF6
  2825                           tablat	equ	0xFF5
  2826                           prodh	equ	0xFF4
  2827                           prodl	equ	0xFF3
  2828                           intcon	equ	0xFF2
  2829                           intcon2	equ	0xFF1
  2830                           postinc0	equ	0xFEE
  2831                           plusw0	equ	0xFEB
  2832                           wreg	equ	0xFE8
  2833                           postdec1	equ	0xFE5
  2834                           fsr1l	equ	0xFE1
  2835                           indf2	equ	0xFDF
  2836                           plusw2	equ	0xFDB
  2837                           fsr2h	equ	0xFDA
  2838                           fsr2l	equ	0xFD9
  2839                           status	equ	0xFD8
  2840                           
  2841 ;; *************** function _mssp1_IRQisEnabled *****************
  2842 ;; Defined at:
  2843 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;		None
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;		None
  2848 ;; Return value:  Size  Location     Type
  2849 ;;		None               void
  2850 ;; Registers used:
  2851 ;;		wreg, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2857 ;;      Params:         0       0       0       0       0       0       0
  2858 ;;      Locals:         0       0       0       0       0       0       0
  2859 ;;      Temps:          1       0       0       0       0       0       0
  2860 ;;      Totals:         1       0       0       0       0       0       0
  2861 ;;Total ram usage:        1 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    5
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_i2c_masterOperation
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text23
  2872  000FC8                     __ptext23:
  2873                           	opt stack 0
  2874  000FC8                     _mssp1_IRQisEnabled:
  2875                           	opt stack 22
  2876                           
  2877                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
  2878                           
  2879                           ;incstack = 0
  2880  000FC8  A69D               	btfss	3997,3,c	;volatile
  2881  000FCA  D003               	goto	u1280
  2882  000FCC  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2883  000FCE  2A3A               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  2884  000FD0  D001               	goto	u1288
  2885  000FD2                     u1280:
  2886  000FD2  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2887  000FD4                     u1288:
  2888  000FD4  303A               	rrcf	??_mssp1_IRQisEnabled,w,c
  2889  000FD6  0012               	return	
  2890  000FD8                     __end_of_mssp1_IRQisEnabled:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           prodh	equ	0xFF4
  2897                           prodl	equ	0xFF3
  2898                           intcon	equ	0xFF2
  2899                           intcon2	equ	0xFF1
  2900                           postinc0	equ	0xFEE
  2901                           plusw0	equ	0xFEB
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1l	equ	0xFE1
  2905                           indf2	equ	0xFDF
  2906                           plusw2	equ	0xFDB
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function _i2c_poller *****************
  2912 ;; Defined at:
  2913 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;		None
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;		None
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      void 
  2920 ;; Registers used:
  2921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2927 ;;      Params:         0       0       0       0       0       0       0
  2928 ;;      Locals:         0       0       0       0       0       0       0
  2929 ;;      Temps:          0       0       0       0       0       0       0
  2930 ;;      Totals:         0       0       0       0       0       0       0
  2931 ;;Total ram usage:        0 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:    9
  2934 ;; This function calls:
  2935 ;;		_i2c_ISR
  2936 ;;		_mssp1_waitForEvent
  2937 ;; This function is called by:
  2938 ;;		_i2c_masterOperation
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text24
  2943  000EB8                     __ptext24:
  2944                           	opt stack 0
  2945  000EB8                     _i2c_poller:
  2946                           	opt stack 18
  2947                           
  2948                           ;i2c_master.c: 274: while(i2c_status.busy)
  2949                           
  2950                           ;incstack = 0
  2951  000EB8  D008               	goto	l113
  2952  000EBA                     
  2953                           ;i2c_master.c: 275: {
  2954                           ;i2c_master.c: 276: mssp1_waitForEvent((0));
  2955  000EBA  0E00               	movlw	0
  2956  000EBC  6E3A               	movwf	mssp1_waitForEvent@timeout,c
  2957  000EBE  0E00               	movlw	0
  2958  000EC0  6E3B               	movwf	mssp1_waitForEvent@timeout+1,c
  2959  000EC2  ECC9  F007         	call	_mssp1_waitForEvent	;wreg free
  2960                           
  2961                           ;i2c_master.c: 277: i2c_ISR();
  2962  000EC6  EC99  F005         	call	_i2c_ISR	;wreg free
  2963  000ECA                     l113:
  2964  000ECA  0100               	movlb	0	; () banked
  2965  000ECC  A1B6               	btfss	_i2c_status& (0+255),0,b
  2966  000ECE  0012               	return	
  2967  000ED0  D7F4               	goto	l114
  2968  000ED2                     __end_of_i2c_poller:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           intcon	equ	0xFF2
  2977                           intcon2	equ	0xFF1
  2978                           postinc0	equ	0xFEE
  2979                           plusw0	equ	0xFEB
  2980                           wreg	equ	0xFE8
  2981                           postdec1	equ	0xFE5
  2982                           fsr1l	equ	0xFE1
  2983                           indf2	equ	0xFDF
  2984                           plusw2	equ	0xFDB
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function _mssp1_waitForEvent *****************
  2990 ;; Defined at:
  2991 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  timeout         2   20[COMRAM] PTR unsigned int 
  2994 ;;		 -> NULL(0), 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;		None
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      void 
  2999 ;; Registers used:
  3000 ;;		wreg
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3006 ;;      Params:         2       0       0       0       0       0       0
  3007 ;;      Locals:         0       0       0       0       0       0       0
  3008 ;;      Temps:          0       0       0       0       0       0       0
  3009 ;;      Totals:         2       0       0       0       0       0       0
  3010 ;;Total ram usage:        2 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    5
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_i2c_poller
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text25
  3021  000F92                     __ptext25:
  3022                           	opt stack 0
  3023  000F92                     _mssp1_waitForEvent:
  3024                           	opt stack 21
  3025                           
  3026                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;incstack = 0
  3030  000F92  B69E               	btfsc	3998,3,c	;volatile
  3031  000F94  0012               	return	
  3032  000F96                     u1230:
  3033                           
  3034                           ;i2c1_driver.c: 76: {
  3035                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
  3036                           
  3037                           ;i2c1_driver.c: 74: {
  3038                           ;i2c1_driver.c: 75: while(1)
  3039  000F96  B69E               	btfsc	3998,3,c	;volatile
  3040  000F98  0012               	return	
  3041                           
  3042                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3043  000F9A  0E85               	movlw	133
  3044  000F9C                     u1727:
  3045  000F9C  2EE8               	decfsz	wreg,f,c
  3046  000F9E  D7FE               	bra	u1727
  3047  000FA0  F000               	nop	
  3048  000FA2  D7F9               	goto	u1230
  3049  000FA4                     __end_of_mssp1_waitForEvent:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           tblptrh	equ	0xFF7
  3053                           tblptrl	equ	0xFF6
  3054                           tablat	equ	0xFF5
  3055                           prodh	equ	0xFF4
  3056                           prodl	equ	0xFF3
  3057                           intcon	equ	0xFF2
  3058                           intcon2	equ	0xFF1
  3059                           postinc0	equ	0xFEE
  3060                           plusw0	equ	0xFEB
  3061                           wreg	equ	0xFE8
  3062                           postdec1	equ	0xFE5
  3063                           fsr1l	equ	0xFE1
  3064                           indf2	equ	0xFDF
  3065                           plusw2	equ	0xFDB
  3066                           fsr2h	equ	0xFDA
  3067                           fsr2l	equ	0xFD9
  3068                           status	equ	0xFD8
  3069                           
  3070 ;; *************** function _i2c_ISR *****************
  3071 ;; Defined at:
  3072 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;		None
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3086 ;;      Params:         0       0       0       0       0       0       0
  3087 ;;      Locals:         0       0       0       0       0       0       0
  3088 ;;      Temps:          0       0       0       0       0       0       0
  3089 ;;      Totals:         0       0       0       0       0       0       0
  3090 ;;Total ram usage:        0 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    8
  3093 ;; This function calls:
  3094 ;;		_do_I2C_DO_ACK
  3095 ;;		_do_I2C_DO_ADDRESS_NACK
  3096 ;;		_do_I2C_DO_NACK_RESTART
  3097 ;;		_do_I2C_DO_NACK_STOP
  3098 ;;		_do_I2C_IDLE
  3099 ;;		_do_I2C_RCEN
  3100 ;;		_do_I2C_RESET
  3101 ;;		_do_I2C_RX
  3102 ;;		_do_I2C_SEND_ADR_READ
  3103 ;;		_do_I2C_SEND_ADR_WRITE
  3104 ;;		_do_I2C_SEND_INITIAL_READ
  3105 ;;		_do_I2C_SEND_RESTART
  3106 ;;		_do_I2C_SEND_RESTART_READ
  3107 ;;		_do_I2C_SEND_RESTART_WRITE
  3108 ;;		_do_I2C_SEND_STOP
  3109 ;;		_do_I2C_TX
  3110 ;;		_do_I2C_TX_EMPTY
  3111 ;;		_do_I2C_TX_REGISTER
  3112 ;;		_i2c1_driver_isNACK
  3113 ;;		_mssp1_clearIRQ
  3114 ;; This function is called by:
  3115 ;;		_i2c_open
  3116 ;;		_i2c_poller
  3117 ;;		_INTERRUPT_InterruptManager
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text26
  3122  000B32                     __ptext26:
  3123                           	opt stack 0
  3124  000B32                     _i2c_ISR:
  3125                           	opt stack 0
  3126                           
  3127                           ;Skip over the trampoline to the duplicate function for level 2
  3128  000B32  B24B               	btfsc	btemp,1,c
  3129  000B34  EF31  F006         	goto	i2_i2c_ISR
  3130  000B38                     _i2c_ISR$intlevel0:
  3131                           	opt stack 18
  3132                           
  3133                           ;i2c_master.c: 486: mssp1_clearIRQ();
  3134                           
  3135                           ;incstack = 0
  3136  000B38  ECC8  F008         	call	_mssp1_clearIRQ	;wreg free
  3137                           
  3138                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  3139  000B3C  0100               	movlb	0	; () banked
  3140  000B3E  A7B6               	btfss	_i2c_status& (0+255),3,b
  3141  000B40  D007               	goto	l209
  3142                           
  3143                           ; BSR set to: 0
  3144  000B42  ECA0  F007         	call	_i2c1_driver_isNACK	;wreg free
  3145  000B46  A0D8               	btfss	status,0,c
  3146  000B48  D003               	goto	l209
  3147                           
  3148                           ;i2c_master.c: 493: {
  3149                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  3150  000B4A  0E0F               	movlw	15
  3151  000B4C  0100               	movlb	0	; () banked
  3152  000B4E  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  3153  000B50                     l209:
  3154                           
  3155                           ;i2c_master.c: 495: }
  3156                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  3157                           
  3158                           ; BSR set to: 0
  3159  000B50  0100               	movlb	0	; () banked
  3160  000B52  51C0               	movf	(_i2c_status+10)& (0+255),w,b
  3161  000B54  0D02               	mullw	2
  3162  000B56  0E92               	movlw	low _fsmStateTable
  3163  000B58  24F3               	addwf	prodl,w,c
  3164  000B5A  6ED9               	movwf	fsr2l,c
  3165  000B5C  0E00               	movlw	high _fsmStateTable
  3166  000B5E  20F4               	addwfc	prodh,w,c
  3167  000B60  6EDA               	movwf	fsr2h,c
  3168  000B62  D801               	call	u1278
  3169  000B64  D00A               	goto	u1279
  3170  000B66                     u1278:
  3171  000B66  0005               	push	
  3172  000B68  6EFA               	movwf	pclath,c
  3173  000B6A  50DE               	movf	postinc2,w,c
  3174  000B6C  6EFD               	movwf	tosl,c
  3175  000B6E  50DE               	movf	postinc2,w,c
  3176  000B70  6EFE               	movwf	tosh,c
  3177  000B72  50F8               	movf	tblptru,w,c
  3178  000B74  6EFF               	movwf	tosu,c
  3179  000B76  50FA               	movf	pclath,w,c
  3180  000B78  0012               	return		;indir
  3181  000B7A                     u1279:
  3182  000B7A  0100               	movlb	0	; () banked
  3183  000B7C  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  3184                           
  3185                           ; BSR set to: 0
  3186  000B7E  0012               	return		;funcret
  3187  000B80                     __end_of_i2c_ISR:
  3188                           	opt stack 0
  3189                           tosu	equ	0xFFF
  3190                           tosh	equ	0xFFE
  3191                           tosl	equ	0xFFD
  3192                           pclath	equ	0xFFA
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           prodh	equ	0xFF4
  3198                           prodl	equ	0xFF3
  3199                           intcon	equ	0xFF2
  3200                           intcon2	equ	0xFF1
  3201                           postinc0	equ	0xFEE
  3202                           plusw0	equ	0xFEB
  3203                           wreg	equ	0xFE8
  3204                           postdec1	equ	0xFE5
  3205                           fsr1l	equ	0xFE1
  3206                           indf2	equ	0xFDF
  3207                           postinc2	equ	0xFDE
  3208                           plusw2	equ	0xFDB
  3209                           fsr2h	equ	0xFDA
  3210                           fsr2l	equ	0xFD9
  3211                           status	equ	0xFD8
  3212                           
  3213 ;; *************** function _do_I2C_TX_EMPTY *****************
  3214 ;; Defined at:
  3215 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;		None
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      enum E7019
  3222 ;; Registers used:
  3223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3229 ;;      Params:         0       0       0       0       0       0       0
  3230 ;;      Locals:         0       0       0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0       0       0
  3232 ;;      Totals:         0       0       0       0       0       0       0
  3233 ;;Total ram usage:        0 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    7
  3236 ;; This function calls:
  3237 ;;		_do_I2C_SEND_RESTART
  3238 ;;		_do_I2C_SEND_STOP
  3239 ;;		_mssp1_setIRQ
  3240 ;;		_returnReset
  3241 ;;		_returnStop
  3242 ;; This function is called by:
  3243 ;;		_i2c_ISR
  3244 ;;		i2_i2c_ISR
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text27
  3249  000A26                     __ptext27:
  3250                           	opt stack 0
  3251  000A26                     _do_I2C_TX_EMPTY:
  3252                           	opt stack 0
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;Skip over the trampoline to the duplicate function for level 2
  3256  000A26  B24B               	btfsc	btemp,1,c
  3257  000A28  EF42  F005         	goto	i2_do_I2C_TX_EMPTY
  3258  000A2C                     _do_I2C_TX_EMPTY$intlevel0:
  3259                           	opt stack 18
  3260                           
  3261                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  3262                           
  3263                           ;incstack = 0
  3264  000A2C  0100               	movlb	0	; () banked
  3265  000A2E  85B6               	bsf	_i2c_status& (0+255),2,b
  3266                           
  3267                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3268  000A30  D00A               	goto	l197
  3269  000A32                     
  3270                           ;i2c_master.c: 448: case i2c_restart_write:
  3271                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  3272                           
  3273                           ; BSR set to: 0
  3274                           
  3275                           ; BSR set to: 0
  3276  000A32  EC36  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3277  000A36  0012               	return	
  3278  000A38                     
  3279                           ;i2c_master.c: 451: mssp1_setIRQ();
  3280  000A38  ECBA  F008         	call	_mssp1_setIRQ	;wreg free
  3281                           
  3282                           ;i2c_master.c: 452: return I2C_TX;
  3283  000A3C  0E03               	movlw	3
  3284  000A3E  0012               	return	
  3285  000A40                     
  3286                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  3287                           
  3288                           ;i2c_master.c: 454: case i2c_stop:
  3289  000A40  EC2F  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3290                           
  3291                           ;i2c_master.c: 456: }
  3292  000A44  0012               	return	
  3293  000A46                     l197:
  3294  000A46  C0CE  F03A         	movff	_i2c_status+24,returnReset@p
  3295  000A4A  C0CF  F03B         	movff	_i2c_status+25,returnReset@p+1
  3296  000A4E  EE20  F0C2         	lfsr	2,_i2c_status+12
  3297  000A52  D801               	call	u1228
  3298  000A54  D00A               	goto	u1229
  3299  000A56                     u1228:
  3300  000A56  0005               	push	
  3301  000A58  6EFA               	movwf	pclath,c
  3302  000A5A  50DE               	movf	postinc2,w,c
  3303  000A5C  6EFD               	movwf	tosl,c
  3304  000A5E  50DE               	movf	postinc2,w,c
  3305  000A60  6EFE               	movwf	tosh,c
  3306  000A62  50F8               	movf	tblptru,w,c
  3307  000A64  6EFF               	movwf	tosu,c
  3308  000A66  50FA               	movf	pclath,w,c
  3309  000A68  0012               	return		;indir
  3310  000A6A                     u1229:
  3311                           
  3312                           ; Switch size 1, requested type "space"
  3313                           ; Number of cases is 4, Range of values is 1 to 4
  3314                           ; switch strategies available:
  3315                           ; Name         Instructions Cycles
  3316                           ; simple_byte           13     7 (average)
  3317                           ;	Chosen strategy is simple_byte
  3318  000A6A  0A01               	xorlw	1	; case 1
  3319  000A6C  B4D8               	btfsc	status,2,c
  3320  000A6E  D7E8               	goto	l202
  3321  000A70  0A03               	xorlw	3	; case 2
  3322  000A72  B4D8               	btfsc	status,2,c
  3323  000A74  D7DE               	goto	l198
  3324  000A76  0A01               	xorlw	1	; case 3
  3325  000A78  B4D8               	btfsc	status,2,c
  3326  000A7A  D7DB               	goto	l198
  3327  000A7C  0A07               	xorlw	7	; case 4
  3328  000A7E  B4D8               	btfsc	status,2,c
  3329  000A80  D7DB               	goto	l201
  3330  000A82  D7DE               	goto	l202
  3331  000A84                     __end_of_do_I2C_TX_EMPTY:
  3332                           	opt stack 0
  3333                           tosu	equ	0xFFF
  3334                           tosh	equ	0xFFE
  3335                           tosl	equ	0xFFD
  3336                           pclath	equ	0xFFA
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           intcon2	equ	0xFF1
  3345                           postinc0	equ	0xFEE
  3346                           plusw0	equ	0xFEB
  3347                           wreg	equ	0xFE8
  3348                           postdec1	equ	0xFE5
  3349                           fsr1l	equ	0xFE1
  3350                           indf2	equ	0xFDF
  3351                           postinc2	equ	0xFDE
  3352                           plusw2	equ	0xFDB
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function _do_I2C_RX *****************
  3358 ;; Defined at:
  3359 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;		None
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;		None
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      enum E7019
  3366 ;; Registers used:
  3367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3373 ;;      Params:         0       0       0       0       0       0       0
  3374 ;;      Locals:         0       0       0       0       0       0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0
  3376 ;;      Totals:         0       0       0       0       0       0       0
  3377 ;;Total ram usage:        0 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    7
  3380 ;; This function calls:
  3381 ;;		_do_I2C_DO_NACK_RESTART
  3382 ;;		_do_I2C_DO_NACK_STOP
  3383 ;;		_i2c1_driver_getRXData
  3384 ;;		_i2c1_driver_sendACK
  3385 ;;		_returnReset
  3386 ;;		_returnStop
  3387 ;; This function is called by:
  3388 ;;		_i2c_ISR
  3389 ;;		i2_i2c_ISR
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text28
  3394  000858                     __ptext28:
  3395                           	opt stack 0
  3396  000858                     _do_I2C_RX:
  3397                           	opt stack 0
  3398                           
  3399                           ;Skip over the trampoline to the duplicate function for level 2
  3400  000858  B24B               	btfsc	btemp,1,c
  3401  00085A  EFA3  F004         	goto	i2_do_I2C_RX
  3402  00085E                     _do_I2C_RX$intlevel0:
  3403                           	opt stack 18
  3404                           
  3405                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  3406                           
  3407                           ;incstack = 0
  3408  00085E  ECBC  F008         	call	_i2c1_driver_getRXData	;wreg free
  3409  000862  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  3410  000866  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  3411  00086A  6EDF               	movwf	indf2,c
  3412  00086C  0100               	movlb	0	; () banked
  3413  00086E  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  3414  000870  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  3418  000872  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  3419  000874  A0D8               	btfss	status,0,c
  3420  000876  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  3421  000878  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  3422  00087A  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  3423  00087C  B4D8               	btfsc	status,2,c
  3424  00087E  D004               	goto	l185
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;i2c_master.c: 421: {
  3428                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  3429  000880  ECAC  F008         	call	_i2c1_driver_sendACK	;wreg free
  3430                           
  3431                           ;i2c_master.c: 423: return I2C_RCEN;
  3432  000884  0E05               	movlw	5
  3433                           
  3434                           ;i2c_master.c: 424: }
  3435  000886  0012               	return	
  3436  000888                     l185:
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;i2c_master.c: 425: else
  3440                           ;i2c_master.c: 426: {
  3441                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  3442  000888  85B6               	bsf	_i2c_status& (0+255),2,b
  3443                           
  3444                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3445  00088A  D006               	goto	l188
  3446  00088C                     
  3447                           ;i2c_master.c: 431: case i2c_restart_read:
  3448                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  3449                           
  3450                           ; BSR set to: 0
  3451                           
  3452                           ; BSR set to: 0
  3453  00088C  EC1A  F008         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  3454  000890  0012               	return	
  3455  000892                     
  3456                           ;i2c_master.c: 435: case i2c_stop:
  3457                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  3458                           
  3459                           ;i2c_master.c: 434: case i2c_continue:
  3460  000892  EC21  F008         	call	_do_I2C_DO_NACK_STOP	;wreg free
  3461                           
  3462                           ;i2c_master.c: 437: }
  3463  000896  0012               	return	
  3464  000898                     l188:
  3465  000898  C0CE  F03A         	movff	_i2c_status+24,returnReset@p
  3466  00089C  C0CF  F03B         	movff	_i2c_status+25,returnReset@p+1
  3467  0008A0  EE20  F0C2         	lfsr	2,_i2c_status+12
  3468  0008A4  D801               	call	u1218
  3469  0008A6  D00A               	goto	u1219
  3470  0008A8                     u1218:
  3471  0008A8  0005               	push	
  3472  0008AA  6EFA               	movwf	pclath,c
  3473  0008AC  50DE               	movf	postinc2,w,c
  3474  0008AE  6EFD               	movwf	tosl,c
  3475  0008B0  50DE               	movf	postinc2,w,c
  3476  0008B2  6EFE               	movwf	tosh,c
  3477  0008B4  50F8               	movf	tblptru,w,c
  3478  0008B6  6EFF               	movwf	tosu,c
  3479  0008B8  50FA               	movf	pclath,w,c
  3480  0008BA  0012               	return		;indir
  3481  0008BC                     u1219:
  3482                           
  3483                           ; Switch size 1, requested type "space"
  3484                           ; Number of cases is 4, Range of values is 1 to 4
  3485                           ; switch strategies available:
  3486                           ; Name         Instructions Cycles
  3487                           ; simple_byte           13     7 (average)
  3488                           ;	Chosen strategy is simple_byte
  3489  0008BC  0A01               	xorlw	1	; case 1
  3490  0008BE  B4D8               	btfsc	status,2,c
  3491  0008C0  D7E8               	goto	l191
  3492  0008C2  0A03               	xorlw	3	; case 2
  3493  0008C4  B4D8               	btfsc	status,2,c
  3494  0008C6  D7E2               	goto	l189
  3495  0008C8  0A01               	xorlw	1	; case 3
  3496  0008CA  B4D8               	btfsc	status,2,c
  3497  0008CC  D7DF               	goto	l189
  3498  0008CE  0A07               	xorlw	7	; case 4
  3499  0008D0  D7E0               	goto	l191
  3500  0008D2                     __end_of_do_I2C_RX:
  3501                           	opt stack 0
  3502                           tosu	equ	0xFFF
  3503                           tosh	equ	0xFFE
  3504                           tosl	equ	0xFFD
  3505                           pclath	equ	0xFFA
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           intcon	equ	0xFF2
  3513                           intcon2	equ	0xFF1
  3514                           postinc0	equ	0xFEE
  3515                           plusw0	equ	0xFEB
  3516                           wreg	equ	0xFE8
  3517                           postdec1	equ	0xFE5
  3518                           fsr1l	equ	0xFE1
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           plusw2	equ	0xFDB
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _do_I2C_TX *****************
  3527 ;; Defined at:
  3528 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      enum E7019
  3535 ;; Registers used:
  3536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3542 ;;      Params:         0       0       0       0       0       0       0
  3543 ;;      Locals:         2       0       0       0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0       0       0
  3545 ;;      Totals:         2       0       0       0       0       0       0
  3546 ;;Total ram usage:        2 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    7
  3549 ;; This function calls:
  3550 ;;		_do_I2C_SEND_RESTART_READ
  3551 ;;		_do_I2C_SEND_RESTART_WRITE
  3552 ;;		_do_I2C_SEND_STOP
  3553 ;;		_i2c1_driver_TXData
  3554 ;;		_i2c1_driver_isNACK
  3555 ;;		_returnReset
  3556 ;;		_returnStop
  3557 ;; This function is called by:
  3558 ;;		_i2c_ISR
  3559 ;;		i2_i2c_ISR
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text29
  3564  0006A0                     __ptext29:
  3565                           	opt stack 0
  3566  0006A0                     _do_I2C_TX:
  3567                           	opt stack 0
  3568                           
  3569                           ;Skip over the trampoline to the duplicate function for level 2
  3570  0006A0  B24B               	btfsc	btemp,1,c
  3571  0006A2  EFE4  F003         	goto	i2_do_I2C_TX
  3572  0006A6                     _do_I2C_TX$intlevel0:
  3573                           	opt stack 18
  3574                           
  3575                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  3576                           
  3577                           ;incstack = 0
  3578  0006A6  ECA0  F007         	call	_i2c1_driver_isNACK	;wreg free
  3579  0006AA  B0D8               	btfsc	status,0,c
  3580  0006AC  D00A               	goto	l170
  3581  0006AE  D026               	goto	l169
  3582  0006B0                     
  3583                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  3584  0006B0  EC44  F008         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  3585  0006B4  0012               	return	
  3586  0006B6                     
  3587                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  3588  0006B6  EC3D  F008         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  3589  0006BA  0012               	return	
  3590  0006BC                     
  3591                           ;i2c_master.c: 405: case i2c_stop:
  3592                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  3593                           
  3594                           ;i2c_master.c: 404: case i2c_continue:
  3595  0006BC  EC2F  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3596                           
  3597                           ;i2c_master.c: 407: }
  3598  0006C0  0012               	return	
  3599  0006C2                     l170:
  3600  0006C2  C0D4  F03A         	movff	_i2c_status+30,returnReset@p
  3601  0006C6  C0D5  F03B         	movff	_i2c_status+31,returnReset@p+1
  3602  0006CA  EE20  F0C8         	lfsr	2,_i2c_status+18
  3603  0006CE  D801               	call	u1188
  3604  0006D0  D00A               	goto	u1189
  3605  0006D2                     u1188:
  3606  0006D2  0005               	push	
  3607  0006D4  6EFA               	movwf	pclath,c
  3608  0006D6  50DE               	movf	postinc2,w,c
  3609  0006D8  6EFD               	movwf	tosl,c
  3610  0006DA  50DE               	movf	postinc2,w,c
  3611  0006DC  6EFE               	movwf	tosh,c
  3612  0006DE  50F8               	movf	tblptru,w,c
  3613  0006E0  6EFF               	movwf	tosu,c
  3614  0006E2  50FA               	movf	pclath,w,c
  3615  0006E4  0012               	return		;indir
  3616  0006E6                     u1189:
  3617                           
  3618                           ; Switch size 1, requested type "space"
  3619                           ; Number of cases is 4, Range of values is 1 to 4
  3620                           ; switch strategies available:
  3621                           ; Name         Instructions Cycles
  3622                           ; simple_byte           13     7 (average)
  3623                           ;	Chosen strategy is simple_byte
  3624  0006E6  0A01               	xorlw	1	; case 1
  3625  0006E8  B4D8               	btfsc	status,2,c
  3626  0006EA  D7E8               	goto	l174
  3627  0006EC  0A03               	xorlw	3	; case 2
  3628  0006EE  B4D8               	btfsc	status,2,c
  3629  0006F0  D7DF               	goto	l171
  3630  0006F2  0A01               	xorlw	1	; case 3
  3631  0006F4  B4D8               	btfsc	status,2,c
  3632  0006F6  D7DF               	goto	l173
  3633  0006F8  0A07               	xorlw	7	; case 4
  3634  0006FA  D7E0               	goto	l174
  3635  0006FC                     l169:
  3636                           
  3637                           ;i2c_master.c: 409: else
  3638                           ;i2c_master.c: 410: {
  3639                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  3640  0006FC  0100               	movlb	0	; () banked
  3641  0006FE  97B6               	bcf	_i2c_status& (0+255),3,b
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  3645  000700  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  3646  000704  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  3647  000708  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  3648  00070A  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  3649  00070C  50DF               	movf	indf2,w,c
  3650  00070E  EC85  F008         	call	_i2c1_driver_TXData
  3651                           
  3652                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  3653  000712  0100               	movlb	0	; () banked
  3654  000714  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  3655  000716  A0D8               	btfss	status,0,c
  3656  000718  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  3657  00071A  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  3658  00071C  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  3659  00071E  A4D8               	btfss	status,2,c
  3660  000720  D004               	goto	l180
  3661                           
  3662                           ; BSR set to: 0
  3663  000722  0E00               	movlw	0
  3664  000724  6E3C               	movwf	_do_I2C_TX$315+1,c
  3665  000726  0E06               	movlw	6
  3666  000728  D003               	goto	L3
  3667  00072A                     l180:
  3668                           
  3669                           ; BSR set to: 0
  3670                           
  3671                           ; BSR set to: 0
  3672  00072A  0E00               	movlw	0
  3673  00072C  6E3C               	movwf	_do_I2C_TX$315+1,c
  3674  00072E  0E03               	movlw	3
  3675  000730                     L3:
  3676  000730  6E3B               	movwf	_do_I2C_TX$315,c
  3677                           
  3678                           ; BSR set to: 0
  3679  000732  503B               	movf	_do_I2C_TX$315,w,c
  3680                           
  3681                           ; BSR set to: 0
  3682  000734  0012               	return	
  3683  000736                     __end_of_do_I2C_TX:
  3684                           	opt stack 0
  3685                           tosu	equ	0xFFF
  3686                           tosh	equ	0xFFE
  3687                           tosl	equ	0xFFD
  3688                           pclath	equ	0xFFA
  3689                           tblptru	equ	0xFF8
  3690                           tblptrh	equ	0xFF7
  3691                           tblptrl	equ	0xFF6
  3692                           tablat	equ	0xFF5
  3693                           prodh	equ	0xFF4
  3694                           prodl	equ	0xFF3
  3695                           intcon	equ	0xFF2
  3696                           intcon2	equ	0xFF1
  3697                           postinc0	equ	0xFEE
  3698                           plusw0	equ	0xFEB
  3699                           wreg	equ	0xFE8
  3700                           postdec1	equ	0xFE5
  3701                           fsr1l	equ	0xFE1
  3702                           indf2	equ	0xFDF
  3703                           postinc2	equ	0xFDE
  3704                           plusw2	equ	0xFDB
  3705                           fsr2h	equ	0xFDA
  3706                           fsr2l	equ	0xFD9
  3707                           status	equ	0xFD8
  3708                           
  3709 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  3710 ;; Defined at:
  3711 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;		None
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;		None
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      enum E7019
  3718 ;; Registers used:
  3719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3725 ;;      Params:         0       0       0       0       0       0       0
  3726 ;;      Locals:         0       0       0       0       0       0       0
  3727 ;;      Temps:          0       0       0       0       0       0       0
  3728 ;;      Totals:         0       0       0       0       0       0       0
  3729 ;;Total ram usage:        0 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    7
  3732 ;; This function calls:
  3733 ;;		_do_I2C_SEND_RESTART
  3734 ;;		_do_I2C_SEND_STOP
  3735 ;;		_returnReset
  3736 ;;		_returnStop
  3737 ;; This function is called by:
  3738 ;;		_i2c_ISR
  3739 ;;		i2_i2c_ISR
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           	psect	text30
  3744  000B80                     __ptext30:
  3745                           	opt stack 0
  3746  000B80                     _do_I2C_DO_ADDRESS_NACK:
  3747                           	opt stack 0
  3748                           
  3749                           ;Skip over the trampoline to the duplicate function for level 2
  3750  000B80  B24B               	btfsc	btemp,1,c
  3751  000B82  EF55  F006         	goto	i2_do_I2C_DO_ADDRESS_NACK
  3752  000B86                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  3753                           	opt stack 18
  3754                           
  3755                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  3756                           
  3757                           ;incstack = 0
  3758  000B86  0100               	movlb	0	; () banked
  3759  000B88  97B6               	bcf	_i2c_status& (0+255),3,b
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  3763  000B8A  0E02               	movlw	2
  3764  000B8C  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  3765                           
  3766                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  3767  000B8E  D006               	goto	l161
  3768  000B90                     
  3769                           ;i2c_master.c: 386: case i2c_restart_write:
  3770                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  3771                           
  3772                           ; BSR set to: 0
  3773                           
  3774                           ; BSR set to: 0
  3775  000B90  EC36  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3776  000B94  0012               	return	
  3777  000B96                     
  3778                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  3779  000B96  EC2F  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3780                           
  3781                           ;i2c_master.c: 390: }
  3782  000B9A  0012               	return	
  3783  000B9C                     l161:
  3784  000B9C  C0D2  F03A         	movff	_i2c_status+28,returnReset@p
  3785  000BA0  C0D3  F03B         	movff	_i2c_status+29,returnReset@p+1
  3786  000BA4  EE20  F0C6         	lfsr	2,_i2c_status+16
  3787  000BA8  D801               	call	u1168
  3788  000BAA  D00A               	goto	u1169
  3789  000BAC                     u1168:
  3790  000BAC  0005               	push	
  3791  000BAE  6EFA               	movwf	pclath,c
  3792  000BB0  50DE               	movf	postinc2,w,c
  3793  000BB2  6EFD               	movwf	tosl,c
  3794  000BB4  50DE               	movf	postinc2,w,c
  3795  000BB6  6EFE               	movwf	tosh,c
  3796  000BB8  50F8               	movf	tblptru,w,c
  3797  000BBA  6EFF               	movwf	tosu,c
  3798  000BBC  50FA               	movf	pclath,w,c
  3799  000BBE  0012               	return		;indir
  3800  000BC0                     u1169:
  3801                           
  3802                           ; Switch size 1, requested type "space"
  3803                           ; Number of cases is 2, Range of values is 2 to 3
  3804                           ; switch strategies available:
  3805                           ; Name         Instructions Cycles
  3806                           ; simple_byte            7     4 (average)
  3807                           ;	Chosen strategy is simple_byte
  3808  000BC0  0A02               	xorlw	2	; case 2
  3809  000BC2  B4D8               	btfsc	status,2,c
  3810  000BC4  D7E5               	goto	l162
  3811  000BC6  0A01               	xorlw	1	; case 3
  3812  000BC8  B4D8               	btfsc	status,2,c
  3813  000BCA  D7E2               	goto	l162
  3814  000BCC  D7E4               	goto	l165
  3815  000BCE                     __end_of_do_I2C_DO_ADDRESS_NACK:
  3816                           	opt stack 0
  3817                           tosu	equ	0xFFF
  3818                           tosh	equ	0xFFE
  3819                           tosl	equ	0xFFD
  3820                           pclath	equ	0xFFA
  3821                           tblptru	equ	0xFF8
  3822                           tblptrh	equ	0xFF7
  3823                           tblptrl	equ	0xFF6
  3824                           tablat	equ	0xFF5
  3825                           prodh	equ	0xFF4
  3826                           prodl	equ	0xFF3
  3827                           intcon	equ	0xFF2
  3828                           intcon2	equ	0xFF1
  3829                           postinc0	equ	0xFEE
  3830                           plusw0	equ	0xFEB
  3831                           wreg	equ	0xFE8
  3832                           postdec1	equ	0xFE5
  3833                           fsr1l	equ	0xFE1
  3834                           indf2	equ	0xFDF
  3835                           postinc2	equ	0xFDE
  3836                           plusw2	equ	0xFDB
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  3842 ;; Defined at:
  3843 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;		None
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;		None
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      enum E7019
  3850 ;; Registers used:
  3851 ;;		wreg, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3857 ;;      Params:         0       0       0       0       0       0       0
  3858 ;;      Locals:         0       0       0       0       0       0       0
  3859 ;;      Temps:          0       0       0       0       0       0       0
  3860 ;;      Totals:         0       0       0       0       0       0       0
  3861 ;;Total ram usage:        0 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    6
  3864 ;; This function calls:
  3865 ;;		_i2c1_driver_sendNACK
  3866 ;; This function is called by:
  3867 ;;		_do_I2C_RX
  3868 ;;		_i2c_ISR
  3869 ;;		i2_i2c_ISR
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text31
  3874  001034                     __ptext31:
  3875                           	opt stack 0
  3876  001034                     _do_I2C_DO_NACK_RESTART:
  3877                           	opt stack 0
  3878                           
  3879                           ;Skip over the trampoline to the duplicate function for level 2
  3880  001034  B24B               	btfsc	btemp,1,c
  3881  001036  EF89  F008         	goto	i2_do_I2C_DO_NACK_RESTART
  3882  00103A                     _do_I2C_DO_NACK_RESTART$intlevel0:
  3883                           	opt stack 18
  3884                           
  3885                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  3886                           
  3887                           ;incstack = 0
  3888  00103A  ECA9  F008         	call	_i2c1_driver_sendNACK	;wreg free
  3889                           
  3890                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  3891  00103E  0E09               	movlw	9
  3892  001040  0012               	return	
  3893  001042                     __end_of_do_I2C_DO_NACK_RESTART:
  3894                           	opt stack 0
  3895                           tosu	equ	0xFFF
  3896                           tosh	equ	0xFFE
  3897                           tosl	equ	0xFFD
  3898                           pclath	equ	0xFFA
  3899                           tblptru	equ	0xFF8
  3900                           tblptrh	equ	0xFF7
  3901                           tblptrl	equ	0xFF6
  3902                           tablat	equ	0xFF5
  3903                           prodh	equ	0xFF4
  3904                           prodl	equ	0xFF3
  3905                           intcon	equ	0xFF2
  3906                           intcon2	equ	0xFF1
  3907                           postinc0	equ	0xFEE
  3908                           plusw0	equ	0xFEB
  3909                           wreg	equ	0xFE8
  3910                           postdec1	equ	0xFE5
  3911                           fsr1l	equ	0xFE1
  3912                           indf2	equ	0xFDF
  3913                           postinc2	equ	0xFDE
  3914                           plusw2	equ	0xFDB
  3915                           fsr2h	equ	0xFDA
  3916                           fsr2l	equ	0xFD9
  3917                           status	equ	0xFD8
  3918                           
  3919 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  3920 ;; Defined at:
  3921 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      enum E7019
  3928 ;; Registers used:
  3929 ;;		wreg, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3935 ;;      Params:         0       0       0       0       0       0       0
  3936 ;;      Locals:         0       0       0       0       0       0       0
  3937 ;;      Temps:          0       0       0       0       0       0       0
  3938 ;;      Totals:         0       0       0       0       0       0       0
  3939 ;;Total ram usage:        0 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    6
  3942 ;; This function calls:
  3943 ;;		_i2c1_driver_sendNACK
  3944 ;; This function is called by:
  3945 ;;		_do_I2C_RX
  3946 ;;		_i2c_ISR
  3947 ;;		i2_i2c_ISR
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text32
  3952  001042                     __ptext32:
  3953                           	opt stack 0
  3954  001042                     _do_I2C_DO_NACK_STOP:
  3955                           	opt stack 0
  3956                           
  3957                           ;Skip over the trampoline to the duplicate function for level 2
  3958  001042  B24B               	btfsc	btemp,1,c
  3959  001044  EF8D  F008         	goto	i2_do_I2C_DO_NACK_STOP
  3960  001048                     _do_I2C_DO_NACK_STOP$intlevel0:
  3961                           	opt stack 18
  3962                           
  3963                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  3964                           
  3965                           ;incstack = 0
  3966  001048  ECA9  F008         	call	_i2c1_driver_sendNACK	;wreg free
  3967                           
  3968                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  3969  00104C  0E0A               	movlw	10
  3970  00104E  0012               	return	
  3971  001050                     __end_of_do_I2C_DO_NACK_STOP:
  3972                           	opt stack 0
  3973                           tosu	equ	0xFFF
  3974                           tosh	equ	0xFFE
  3975                           tosl	equ	0xFFD
  3976                           pclath	equ	0xFFA
  3977                           tblptru	equ	0xFF8
  3978                           tblptrh	equ	0xFF7
  3979                           tblptrl	equ	0xFF6
  3980                           tablat	equ	0xFF5
  3981                           prodh	equ	0xFF4
  3982                           prodl	equ	0xFF3
  3983                           intcon	equ	0xFF2
  3984                           intcon2	equ	0xFF1
  3985                           postinc0	equ	0xFEE
  3986                           plusw0	equ	0xFEB
  3987                           wreg	equ	0xFE8
  3988                           postdec1	equ	0xFE5
  3989                           fsr1l	equ	0xFE1
  3990                           indf2	equ	0xFDF
  3991                           postinc2	equ	0xFDE
  3992                           plusw2	equ	0xFDB
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _do_I2C_DO_ACK *****************
  3998 ;; Defined at:
  3999 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  1    wreg      enum E7019
  4006 ;; Registers used:
  4007 ;;		wreg, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4013 ;;      Params:         0       0       0       0       0       0       0
  4014 ;;      Locals:         0       0       0       0       0       0       0
  4015 ;;      Temps:          0       0       0       0       0       0       0
  4016 ;;      Totals:         0       0       0       0       0       0       0
  4017 ;;Total ram usage:        0 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    6
  4020 ;; This function calls:
  4021 ;;		_i2c1_driver_sendACK
  4022 ;; This function is called by:
  4023 ;;		_i2c_ISR
  4024 ;;		i2_i2c_ISR
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text33
  4029  001050                     __ptext33:
  4030                           	opt stack 0
  4031  001050                     _do_I2C_DO_ACK:
  4032                           	opt stack 0
  4033                           
  4034                           ;Skip over the trampoline to the duplicate function for level 2
  4035  001050  B24B               	btfsc	btemp,1,c
  4036  001052  EF91  F008         	goto	i2_do_I2C_DO_ACK
  4037  001056                     _do_I2C_DO_ACK$intlevel0:
  4038                           	opt stack 19
  4039                           
  4040                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  4041                           
  4042                           ;incstack = 0
  4043  001056  ECAC  F008         	call	_i2c1_driver_sendACK	;wreg free
  4044                           
  4045                           ;i2c_master.c: 362: return I2C_RCEN;
  4046  00105A  0E05               	movlw	5
  4047  00105C  0012               	return	
  4048  00105E                     __end_of_do_I2C_DO_ACK:
  4049                           	opt stack 0
  4050                           tosu	equ	0xFFF
  4051                           tosh	equ	0xFFE
  4052                           tosl	equ	0xFFD
  4053                           pclath	equ	0xFFA
  4054                           tblptru	equ	0xFF8
  4055                           tblptrh	equ	0xFF7
  4056                           tblptrl	equ	0xFF6
  4057                           tablat	equ	0xFF5
  4058                           prodh	equ	0xFF4
  4059                           prodl	equ	0xFF3
  4060                           intcon	equ	0xFF2
  4061                           intcon2	equ	0xFF1
  4062                           postinc0	equ	0xFEE
  4063                           plusw0	equ	0xFEB
  4064                           wreg	equ	0xFE8
  4065                           postdec1	equ	0xFE5
  4066                           fsr1l	equ	0xFE1
  4067                           indf2	equ	0xFDF
  4068                           postinc2	equ	0xFDE
  4069                           plusw2	equ	0xFDB
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _do_I2C_RCEN *****************
  4075 ;; Defined at:
  4076 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      enum E7019
  4083 ;; Registers used:
  4084 ;;		wreg, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4090 ;;      Params:         0       0       0       0       0       0       0
  4091 ;;      Locals:         0       0       0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0
  4093 ;;      Totals:         0       0       0       0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    6
  4097 ;; This function calls:
  4098 ;;		_i2c1_driver_startRX
  4099 ;; This function is called by:
  4100 ;;		_i2c_ISR
  4101 ;;		i2_i2c_ISR
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text34
  4106  000FA4                     __ptext34:
  4107                           	opt stack 0
  4108  000FA4                     _do_I2C_RCEN:
  4109                           	opt stack 0
  4110                           
  4111                           ;Skip over the trampoline to the duplicate function for level 2
  4112  000FA4  B24B               	btfsc	btemp,1,c
  4113  000FA6  EF52  F008         	goto	i2_do_I2C_RCEN
  4114  000FAA                     _do_I2C_RCEN$intlevel0:
  4115                           	opt stack 19
  4116                           
  4117                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  4118                           
  4119                           ;incstack = 0
  4120  000FAA  0100               	movlb	0	; () banked
  4121  000FAC  97B6               	bcf	_i2c_status& (0+255),3,b
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;i2c_master.c: 355: i2c1_driver_startRX();
  4125  000FAE  ECBE  F008         	call	_i2c1_driver_startRX	;wreg free
  4126                           
  4127                           ;i2c_master.c: 356: return I2C_RX;
  4128  000FB2  0E04               	movlw	4
  4129  000FB4  0012               	return	
  4130  000FB6                     __end_of_do_I2C_RCEN:
  4131                           	opt stack 0
  4132                           tosu	equ	0xFFF
  4133                           tosh	equ	0xFFE
  4134                           tosl	equ	0xFFD
  4135                           pclath	equ	0xFFA
  4136                           tblptru	equ	0xFF8
  4137                           tblptrh	equ	0xFF7
  4138                           tblptrl	equ	0xFF6
  4139                           tablat	equ	0xFF5
  4140                           prodh	equ	0xFF4
  4141                           prodl	equ	0xFF3
  4142                           intcon	equ	0xFF2
  4143                           intcon2	equ	0xFF1
  4144                           postinc0	equ	0xFEE
  4145                           plusw0	equ	0xFEB
  4146                           wreg	equ	0xFE8
  4147                           postdec1	equ	0xFE5
  4148                           fsr1l	equ	0xFE1
  4149                           indf2	equ	0xFDF
  4150                           postinc2	equ	0xFDE
  4151                           plusw2	equ	0xFDB
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  4157 ;; Defined at:
  4158 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;		None
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      enum E7019
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4172 ;;      Params:         0       0       0       0       0       0       0
  4173 ;;      Locals:         0       0       0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0
  4175 ;;      Totals:         0       0       0       0       0       0       0
  4176 ;;Total ram usage:        0 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    6
  4179 ;; This function calls:
  4180 ;;		_i2c1_driver_TXData
  4181 ;; This function is called by:
  4182 ;;		_i2c_ISR
  4183 ;;		i2_i2c_ISR
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text35
  4188  000EE8                     __ptext35:
  4189                           	opt stack 0
  4190  000EE8                     _do_I2C_SEND_ADR_WRITE:
  4191                           	opt stack 0
  4192                           
  4193                           ;Skip over the trampoline to the duplicate function for level 2
  4194  000EE8  B24B               	btfsc	btemp,1,c
  4195  000EEA  EFEC  F007         	goto	i2_do_I2C_SEND_ADR_WRITE
  4196  000EEE                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  4197                           	opt stack 19
  4198                           
  4199                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  4200                           
  4201                           ;incstack = 0
  4202  000EEE  0100               	movlb	0	; () banked
  4203  000EF0  87B6               	bsf	_i2c_status& (0+255),3,b
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  4207  000EF2  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  4208  000EF4  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  4209  000EF6  EC85  F008         	call	_i2c1_driver_TXData
  4210                           
  4211                           ;i2c_master.c: 349: return I2C_TX;
  4212  000EFA  0E03               	movlw	3
  4213  000EFC  0012               	return	
  4214  000EFE                     __end_of_do_I2C_SEND_ADR_WRITE:
  4215                           	opt stack 0
  4216                           tosu	equ	0xFFF
  4217                           tosh	equ	0xFFE
  4218                           tosl	equ	0xFFD
  4219                           pclath	equ	0xFFA
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           intcon	equ	0xFF2
  4227                           intcon2	equ	0xFF1
  4228                           postinc0	equ	0xFEE
  4229                           plusw0	equ	0xFEB
  4230                           wreg	equ	0xFE8
  4231                           postdec1	equ	0xFE5
  4232                           fsr1l	equ	0xFE1
  4233                           indf2	equ	0xFDF
  4234                           postinc2	equ	0xFDE
  4235                           plusw2	equ	0xFDB
  4236                           fsr2h	equ	0xFDA
  4237                           fsr2l	equ	0xFD9
  4238                           status	equ	0xFD8
  4239                           
  4240 ;; *************** function _do_I2C_SEND_INITIAL_READ *****************
  4241 ;; Defined at:
  4242 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      enum E7019
  4249 ;; Registers used:
  4250 ;;		wreg, status,2, status,0, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4256 ;;      Params:         0       0       0       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0
  4259 ;;      Totals:         0       0       0       0       0       0       0
  4260 ;;Total ram usage:        0 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    6
  4263 ;; This function calls:
  4264 ;;		_i2c1_driver_TXData
  4265 ;; This function is called by:
  4266 ;;		_i2c_ISR
  4267 ;;		i2_i2c_ISR
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text36
  4272  000EFE                     __ptext36:
  4273                           	opt stack 0
  4274  000EFE                     _do_I2C_SEND_INITIAL_READ:
  4275                           	opt stack 0
  4276                           
  4277                           ;Skip over the trampoline to the duplicate function for level 2
  4278  000EFE  B24B               	btfsc	btemp,1,c
  4279  000F00  EFF4  F007         	goto	i2_do_I2C_SEND_INITIAL_READ
  4280  000F04                     _do_I2C_SEND_INITIAL_READ$intlevel0:
  4281                           	opt stack 19
  4282                           
  4283                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  4284                           
  4285                           ;incstack = 0
  4286  000F04  0100               	movlb	0	; () banked
  4287  000F06  87B6               	bsf	_i2c_status& (0+255),3,b
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  4291  000F08  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  4292  000F0A  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  4293  000F0C  EC85  F008         	call	_i2c1_driver_TXData
  4294                           
  4295                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  4296  000F10  0E11               	movlw	17
  4297  000F12  0012               	return	
  4298  000F14                     __end_of_do_I2C_SEND_INITIAL_READ:
  4299                           	opt stack 0
  4300                           tosu	equ	0xFFF
  4301                           tosh	equ	0xFFE
  4302                           tosl	equ	0xFFD
  4303                           pclath	equ	0xFFA
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           prodh	equ	0xFF4
  4309                           prodl	equ	0xFF3
  4310                           intcon	equ	0xFF2
  4311                           intcon2	equ	0xFF1
  4312                           postinc0	equ	0xFEE
  4313                           plusw0	equ	0xFEB
  4314                           wreg	equ	0xFE8
  4315                           postdec1	equ	0xFE5
  4316                           fsr1l	equ	0xFE1
  4317                           indf2	equ	0xFDF
  4318                           postinc2	equ	0xFDE
  4319                           plusw2	equ	0xFDB
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  4325 ;; Defined at:
  4326 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;		None
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      enum E7019
  4333 ;; Registers used:
  4334 ;;		wreg, status,0, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4340 ;;      Params:         0       0       0       0       0       0       0
  4341 ;;      Locals:         0       0       0       0       0       0       0
  4342 ;;      Temps:          0       0       0       0       0       0       0
  4343 ;;      Totals:         0       0       0       0       0       0       0
  4344 ;;Total ram usage:        0 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    6
  4347 ;; This function calls:
  4348 ;;		_i2c1_driver_TXData
  4349 ;; This function is called by:
  4350 ;;		_i2c_ISR
  4351 ;;		i2_i2c_ISR
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text37
  4356  000F14                     __ptext37:
  4357                           	opt stack 0
  4358  000F14                     _do_I2C_SEND_ADR_READ:
  4359                           	opt stack 0
  4360                           
  4361                           ;Skip over the trampoline to the duplicate function for level 2
  4362  000F14  B24B               	btfsc	btemp,1,c
  4363  000F16  EFFC  F007         	goto	i2_do_I2C_SEND_ADR_READ
  4364  000F1A                     _do_I2C_SEND_ADR_READ$intlevel0:
  4365                           	opt stack 19
  4366                           
  4367                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  4368                           
  4369                           ;incstack = 0
  4370  000F1A  0100               	movlb	0	; () banked
  4371  000F1C  87B6               	bsf	_i2c_status& (0+255),3,b
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  4375  000F1E  80D8               	bsf	status,0,c
  4376  000F20  35B7               	rlcf	(_i2c_status+1)& (0+255),w,b
  4377  000F22  EC85  F008         	call	_i2c1_driver_TXData
  4378                           
  4379                           ;i2c_master.c: 325: return I2C_RCEN;
  4380  000F26  0E05               	movlw	5
  4381  000F28  0012               	return	
  4382  000F2A                     __end_of_do_I2C_SEND_ADR_READ:
  4383                           	opt stack 0
  4384                           tosu	equ	0xFFF
  4385                           tosh	equ	0xFFE
  4386                           tosl	equ	0xFFD
  4387                           pclath	equ	0xFFA
  4388                           tblptru	equ	0xFF8
  4389                           tblptrh	equ	0xFF7
  4390                           tblptrl	equ	0xFF6
  4391                           tablat	equ	0xFF5
  4392                           prodh	equ	0xFF4
  4393                           prodl	equ	0xFF3
  4394                           intcon	equ	0xFF2
  4395                           intcon2	equ	0xFF1
  4396                           postinc0	equ	0xFEE
  4397                           plusw0	equ	0xFEB
  4398                           wreg	equ	0xFE8
  4399                           postdec1	equ	0xFE5
  4400                           fsr1l	equ	0xFE1
  4401                           indf2	equ	0xFDF
  4402                           postinc2	equ	0xFDE
  4403                           plusw2	equ	0xFDB
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function _do_I2C_SEND_STOP *****************
  4409 ;; Defined at:
  4410 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;		None
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  1    wreg      enum E7019
  4417 ;; Registers used:
  4418 ;;		wreg, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4424 ;;      Params:         0       0       0       0       0       0       0
  4425 ;;      Locals:         0       0       0       0       0       0       0
  4426 ;;      Temps:          0       0       0       0       0       0       0
  4427 ;;      Totals:         0       0       0       0       0       0       0
  4428 ;;Total ram usage:        0 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    6
  4431 ;; This function calls:
  4432 ;;		_i2c1_driver_stop
  4433 ;; This function is called by:
  4434 ;;		_do_I2C_DO_ADDRESS_NACK
  4435 ;;		_do_I2C_TX
  4436 ;;		_do_I2C_TX_EMPTY
  4437 ;;		_i2c_ISR
  4438 ;;		i2_i2c_ISR
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text38
  4443  00105E                     __ptext38:
  4444                           	opt stack 0
  4445  00105E                     _do_I2C_SEND_STOP:
  4446                           	opt stack 0
  4447                           
  4448                           ;Skip over the trampoline to the duplicate function for level 2
  4449  00105E  B24B               	btfsc	btemp,1,c
  4450  001060  EF95  F008         	goto	i2_do_I2C_SEND_STOP
  4451  001064                     _do_I2C_SEND_STOP$intlevel0:
  4452                           	opt stack 18
  4453                           
  4454                           ;i2c_master.c: 316: i2c1_driver_stop();
  4455                           
  4456                           ;incstack = 0
  4457  001064  ECC0  F008         	call	_i2c1_driver_stop	;wreg free
  4458                           
  4459                           ;i2c_master.c: 317: return I2C_IDLE;
  4460  001068  0E00               	movlw	0
  4461  00106A  0012               	return	
  4462  00106C                     __end_of_do_I2C_SEND_STOP:
  4463                           	opt stack 0
  4464                           tosu	equ	0xFFF
  4465                           tosh	equ	0xFFE
  4466                           tosl	equ	0xFFD
  4467                           pclath	equ	0xFFA
  4468                           tblptru	equ	0xFF8
  4469                           tblptrh	equ	0xFF7
  4470                           tblptrl	equ	0xFF6
  4471                           tablat	equ	0xFF5
  4472                           prodh	equ	0xFF4
  4473                           prodl	equ	0xFF3
  4474                           intcon	equ	0xFF2
  4475                           intcon2	equ	0xFF1
  4476                           postinc0	equ	0xFEE
  4477                           plusw0	equ	0xFEB
  4478                           wreg	equ	0xFE8
  4479                           postdec1	equ	0xFE5
  4480                           fsr1l	equ	0xFE1
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           plusw2	equ	0xFDB
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function _do_I2C_SEND_RESTART *****************
  4489 ;; Defined at:
  4490 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;		None
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      enum E7019
  4497 ;; Registers used:
  4498 ;;		wreg, cstack
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4504 ;;      Params:         0       0       0       0       0       0       0
  4505 ;;      Locals:         0       0       0       0       0       0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0
  4507 ;;      Totals:         0       0       0       0       0       0       0
  4508 ;;Total ram usage:        0 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    6
  4511 ;; This function calls:
  4512 ;;		_i2c1_driver_restart
  4513 ;; This function is called by:
  4514 ;;		_do_I2C_DO_ADDRESS_NACK
  4515 ;;		_do_I2C_TX_EMPTY
  4516 ;;		_i2c_ISR
  4517 ;;		i2_i2c_ISR
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text39
  4522  00106C                     __ptext39:
  4523                           	opt stack 0
  4524  00106C                     _do_I2C_SEND_RESTART:
  4525                           	opt stack 0
  4526                           
  4527                           ;Skip over the trampoline to the duplicate function for level 2
  4528  00106C  B24B               	btfsc	btemp,1,c
  4529  00106E  EF99  F008         	goto	i2_do_I2C_SEND_RESTART
  4530  001072                     _do_I2C_SEND_RESTART$intlevel0:
  4531                           	opt stack 18
  4532                           
  4533                           ;i2c_master.c: 310: i2c1_driver_restart();
  4534                           
  4535                           ;incstack = 0
  4536  001072  ECC2  F008         	call	_i2c1_driver_restart	;wreg free
  4537                           
  4538                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  4539  001076  0E01               	movlw	1
  4540  001078  0012               	return	
  4541  00107A                     __end_of_do_I2C_SEND_RESTART:
  4542                           	opt stack 0
  4543                           tosu	equ	0xFFF
  4544                           tosh	equ	0xFFE
  4545                           tosl	equ	0xFFD
  4546                           pclath	equ	0xFFA
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           intcon	equ	0xFF2
  4554                           intcon2	equ	0xFF1
  4555                           postinc0	equ	0xFEE
  4556                           plusw0	equ	0xFEB
  4557                           wreg	equ	0xFE8
  4558                           postdec1	equ	0xFE5
  4559                           fsr1l	equ	0xFE1
  4560                           indf2	equ	0xFDF
  4561                           postinc2	equ	0xFDE
  4562                           plusw2	equ	0xFDB
  4563                           fsr2h	equ	0xFDA
  4564                           fsr2l	equ	0xFD9
  4565                           status	equ	0xFD8
  4566                           
  4567 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  4568 ;; Defined at:
  4569 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;		None
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      enum E7019
  4576 ;; Registers used:
  4577 ;;		wreg, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4583 ;;      Params:         0       0       0       0       0       0       0
  4584 ;;      Locals:         0       0       0       0       0       0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0
  4586 ;;      Totals:         0       0       0       0       0       0       0
  4587 ;;Total ram usage:        0 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    6
  4590 ;; This function calls:
  4591 ;;		_i2c1_driver_restart
  4592 ;; This function is called by:
  4593 ;;		_do_I2C_TX
  4594 ;;		_i2c_ISR
  4595 ;;		i2_i2c_ISR
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text40
  4600  00107A                     __ptext40:
  4601                           	opt stack 0
  4602  00107A                     _do_I2C_SEND_RESTART_WRITE:
  4603                           	opt stack 0
  4604                           
  4605                           ;Skip over the trampoline to the duplicate function for level 2
  4606  00107A  B24B               	btfsc	btemp,1,c
  4607  00107C  EF9D  F008         	goto	i2_do_I2C_SEND_RESTART_WRITE
  4608  001080                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  4609                           	opt stack 18
  4610                           
  4611                           ;i2c_master.c: 304: i2c1_driver_restart();
  4612                           
  4613                           ;incstack = 0
  4614  001080  ECC2  F008         	call	_i2c1_driver_restart	;wreg free
  4615                           
  4616                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  4617  001084  0E02               	movlw	2
  4618  001086  0012               	return	
  4619  001088                     __end_of_do_I2C_SEND_RESTART_WRITE:
  4620                           	opt stack 0
  4621                           tosu	equ	0xFFF
  4622                           tosh	equ	0xFFE
  4623                           tosl	equ	0xFFD
  4624                           pclath	equ	0xFFA
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           intcon2	equ	0xFF1
  4633                           postinc0	equ	0xFEE
  4634                           plusw0	equ	0xFEB
  4635                           wreg	equ	0xFE8
  4636                           postdec1	equ	0xFE5
  4637                           fsr1l	equ	0xFE1
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           plusw2	equ	0xFDB
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  4646 ;; Defined at:
  4647 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;		None
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  1    wreg      enum E7019
  4654 ;; Registers used:
  4655 ;;		wreg, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4661 ;;      Params:         0       0       0       0       0       0       0
  4662 ;;      Locals:         0       0       0       0       0       0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0
  4664 ;;      Totals:         0       0       0       0       0       0       0
  4665 ;;Total ram usage:        0 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    6
  4668 ;; This function calls:
  4669 ;;		_i2c1_driver_restart
  4670 ;; This function is called by:
  4671 ;;		_do_I2C_TX
  4672 ;;		_i2c_ISR
  4673 ;;		i2_i2c_ISR
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text41
  4678  001088                     __ptext41:
  4679                           	opt stack 0
  4680  001088                     _do_I2C_SEND_RESTART_READ:
  4681                           	opt stack 0
  4682                           
  4683                           ;Skip over the trampoline to the duplicate function for level 2
  4684  001088  B24B               	btfsc	btemp,1,c
  4685  00108A  EFA1  F008         	goto	i2_do_I2C_SEND_RESTART_READ
  4686  00108E                     _do_I2C_SEND_RESTART_READ$intlevel0:
  4687                           	opt stack 18
  4688                           
  4689                           ;i2c_master.c: 298: i2c1_driver_restart();
  4690                           
  4691                           ;incstack = 0
  4692  00108E  ECC2  F008         	call	_i2c1_driver_restart	;wreg free
  4693                           
  4694                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  4695  001092  0E01               	movlw	1
  4696  001094  0012               	return	
  4697  001096                     __end_of_do_I2C_SEND_RESTART_READ:
  4698                           	opt stack 0
  4699                           tosu	equ	0xFFF
  4700                           tosh	equ	0xFFE
  4701                           tosl	equ	0xFFD
  4702                           pclath	equ	0xFFA
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           intcon2	equ	0xFF1
  4711                           postinc0	equ	0xFEE
  4712                           plusw0	equ	0xFEB
  4713                           wreg	equ	0xFE8
  4714                           postdec1	equ	0xFE5
  4715                           fsr1l	equ	0xFE1
  4716                           indf2	equ	0xFDF
  4717                           postinc2	equ	0xFDE
  4718                           plusw2	equ	0xFDB
  4719                           fsr2h	equ	0xFDA
  4720                           fsr2l	equ	0xFD9
  4721                           status	equ	0xFD8
  4722                           
  4723 ;; *************** function _do_I2C_IDLE *****************
  4724 ;; Defined at:
  4725 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;		None
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;		None
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      enum E7019
  4732 ;; Registers used:
  4733 ;;		wreg, status,2
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4739 ;;      Params:         0       0       0       0       0       0       0
  4740 ;;      Locals:         0       0       0       0       0       0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0
  4742 ;;      Totals:         0       0       0       0       0       0       0
  4743 ;;Total ram usage:        0 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    5
  4746 ;; This function calls:
  4747 ;;		Nothing
  4748 ;; This function is called by:
  4749 ;;		_i2c_ISR
  4750 ;;		i2_i2c_ISR
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text42
  4755  000FB6                     __ptext42:
  4756                           	opt stack 0
  4757  000FB6                     _do_I2C_IDLE:
  4758                           	opt stack 0
  4759                           
  4760                           ;Skip over the trampoline to the duplicate function for level 2
  4761  000FB6  B24B               	btfsc	btemp,1,c
  4762  000FB8  EF58  F008         	goto	i2_do_I2C_IDLE
  4763  000FBC                     _do_I2C_IDLE$intlevel0:
  4764                           	opt stack 20
  4765                           
  4766                           ;i2c_master.c: 291: i2c_status.busy = 0;
  4767                           
  4768                           ;incstack = 0
  4769  000FBC  0100               	movlb	0	; () banked
  4770  000FBE  91B6               	bcf	_i2c_status& (0+255),0,b
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  4774  000FC0  0E00               	movlw	0
  4775  000FC2  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;i2c_master.c: 293: return I2C_RESET;
  4779  000FC4  0E0E               	movlw	14
  4780  000FC6  0012               	return	
  4781  000FC8                     __end_of_do_I2C_IDLE:
  4782                           	opt stack 0
  4783                           tosu	equ	0xFFF
  4784                           tosh	equ	0xFFE
  4785                           tosl	equ	0xFFD
  4786                           pclath	equ	0xFFA
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           intcon2	equ	0xFF1
  4795                           postinc0	equ	0xFEE
  4796                           plusw0	equ	0xFEB
  4797                           wreg	equ	0xFE8
  4798                           postdec1	equ	0xFE5
  4799                           fsr1l	equ	0xFE1
  4800                           indf2	equ	0xFDF
  4801                           postinc2	equ	0xFDE
  4802                           plusw2	equ	0xFDB
  4803                           fsr2h	equ	0xFDA
  4804                           fsr2l	equ	0xFD9
  4805                           status	equ	0xFD8
  4806                           
  4807 ;; *************** function _do_I2C_RESET *****************
  4808 ;; Defined at:
  4809 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      enum E7019
  4816 ;; Registers used:
  4817 ;;		wreg, status,2, cstack
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4823 ;;      Params:         0       0       0       0       0       0       0
  4824 ;;      Locals:         0       0       0       0       0       0       0
  4825 ;;      Temps:          0       0       0       0       0       0       0
  4826 ;;      Totals:         0       0       0       0       0       0       0
  4827 ;;Total ram usage:        0 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    6
  4830 ;; This function calls:
  4831 ;;		_i2c1_driver_resetBus
  4832 ;; This function is called by:
  4833 ;;		_i2c_ISR
  4834 ;;		i2_i2c_ISR
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           	psect	text43
  4839  000F2A                     __ptext43:
  4840                           	opt stack 0
  4841  000F2A                     _do_I2C_RESET:
  4842                           	opt stack 0
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;Skip over the trampoline to the duplicate function for level 2
  4846  000F2A  B24B               	btfsc	btemp,1,c
  4847  000F2C  EF04  F008         	goto	i2_do_I2C_RESET
  4848  000F30                     _do_I2C_RESET$intlevel0:
  4849                           	opt stack 19
  4850                           
  4851                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  4852                           
  4853                           ;incstack = 0
  4854  000F30  ECDC  F008         	call	_i2c1_driver_resetBus	;wreg free
  4855                           
  4856                           ;i2c_master.c: 284: i2c_status.busy = 0;
  4857  000F34  0100               	movlb	0	; () banked
  4858  000F36  91B6               	bcf	_i2c_status& (0+255),0,b
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  4862  000F38  0E00               	movlw	0
  4863  000F3A  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;i2c_master.c: 286: return I2C_RESET;
  4867  000F3C  0E0E               	movlw	14
  4868  000F3E  0012               	return	
  4869  000F40                     __end_of_do_I2C_RESET:
  4870                           	opt stack 0
  4871                           tosu	equ	0xFFF
  4872                           tosh	equ	0xFFE
  4873                           tosl	equ	0xFFD
  4874                           pclath	equ	0xFFA
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           intcon	equ	0xFF2
  4882                           intcon2	equ	0xFF1
  4883                           postinc0	equ	0xFEE
  4884                           plusw0	equ	0xFEB
  4885                           wreg	equ	0xFE8
  4886                           postdec1	equ	0xFE5
  4887                           fsr1l	equ	0xFE1
  4888                           indf2	equ	0xFDF
  4889                           postinc2	equ	0xFDE
  4890                           plusw2	equ	0xFDB
  4891                           fsr2h	equ	0xFDA
  4892                           fsr2l	equ	0xFD9
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _do_I2C_TX_REGISTER *****************
  4896 ;; Defined at:
  4897 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  1    wreg      enum E7019
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4911 ;;      Params:         0       0       0       0       0       0       0
  4912 ;;      Locals:         0       0       0       0       0       0       0
  4913 ;;      Temps:          0       0       0       0       0       0       0
  4914 ;;      Totals:         0       0       0       0       0       0       0
  4915 ;;Total ram usage:        0 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    6
  4918 ;; This function calls:
  4919 ;;		_i2c1_driver_TXData
  4920 ;; This function is called by:
  4921 ;;		_i2c_ISR
  4922 ;;		i2_i2c_ISR
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text44
  4927  000F6C                     __ptext44:
  4928                           	opt stack 0
  4929  000F6C                     _do_I2C_TX_REGISTER:
  4930                           	opt stack 0
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;Skip over the trampoline to the duplicate function for level 2
  4934  000F6C  B24B               	btfsc	btemp,1,c
  4935  000F6E  EF4B  F008         	goto	i2_do_I2C_TX_REGISTER
  4936  000F72                     _do_I2C_TX_REGISTER$intlevel0:
  4937                           	opt stack 19
  4938                           
  4939                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  4940                           
  4941                           ;incstack = 0
  4942  000F72  0100               	movlb	0	; () banked
  4943  000F74  87B6               	bsf	_i2c_status& (0+255),3,b
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  4947  000F76  51DA               	movf	(_i2c_status+36)& (0+255),w,b
  4948  000F78  EC85  F008         	call	_i2c1_driver_TXData
  4949                           
  4950                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  4951  000F7C  0E07               	movlw	7
  4952  000F7E  0012               	return	
  4953  000F80                     __end_of_do_I2C_TX_REGISTER:
  4954                           	opt stack 0
  4955                           tosu	equ	0xFFF
  4956                           tosh	equ	0xFFE
  4957                           tosl	equ	0xFFD
  4958                           pclath	equ	0xFFA
  4959                           tblptru	equ	0xFF8
  4960                           tblptrh	equ	0xFF7
  4961                           tblptrl	equ	0xFF6
  4962                           tablat	equ	0xFF5
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           intcon	equ	0xFF2
  4966                           intcon2	equ	0xFF1
  4967                           postinc0	equ	0xFEE
  4968                           plusw0	equ	0xFEB
  4969                           wreg	equ	0xFE8
  4970                           postdec1	equ	0xFE5
  4971                           fsr1l	equ	0xFE1
  4972                           indf2	equ	0xFDF
  4973                           postinc2	equ	0xFDE
  4974                           plusw2	equ	0xFDB
  4975                           fsr2h	equ	0xFDA
  4976                           fsr2l	equ	0xFD9
  4977                           status	equ	0xFD8
  4978                           
  4979 ;; *************** function _mssp1_setIRQ *****************
  4980 ;; Defined at:
  4981 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;		None
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      void 
  4988 ;; Registers used:
  4989 ;;		None
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4995 ;;      Params:         0       0       0       0       0       0       0
  4996 ;;      Locals:         0       0       0       0       0       0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0
  4998 ;;      Totals:         0       0       0       0       0       0       0
  4999 ;;Total ram usage:        0 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    5
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_do_I2C_TX_EMPTY
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text45
  5010  001174                     __ptext45:
  5011                           	opt stack 0
  5012  001174                     _mssp1_setIRQ:
  5013                           	opt stack 19
  5014                           
  5015                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  5016                           
  5017                           ;incstack = 0
  5018  001174  869E               	bsf	3998,3,c	;volatile
  5019  001176  0012               	return		;funcret
  5020  001178                     __end_of_mssp1_setIRQ:
  5021                           	opt stack 0
  5022                           tosu	equ	0xFFF
  5023                           tosh	equ	0xFFE
  5024                           tosl	equ	0xFFD
  5025                           pclath	equ	0xFFA
  5026                           tblptru	equ	0xFF8
  5027                           tblptrh	equ	0xFF7
  5028                           tblptrl	equ	0xFF6
  5029                           tablat	equ	0xFF5
  5030                           prodh	equ	0xFF4
  5031                           prodl	equ	0xFF3
  5032                           intcon	equ	0xFF2
  5033                           intcon2	equ	0xFF1
  5034                           postinc0	equ	0xFEE
  5035                           plusw0	equ	0xFEB
  5036                           wreg	equ	0xFE8
  5037                           postdec1	equ	0xFE5
  5038                           fsr1l	equ	0xFE1
  5039                           indf2	equ	0xFDF
  5040                           postinc2	equ	0xFDE
  5041                           plusw2	equ	0xFDB
  5042                           fsr2h	equ	0xFDA
  5043                           fsr2l	equ	0xFD9
  5044                           status	equ	0xFD8
  5045                           
  5046 ;; *************** function _i2c1_driver_isNACK *****************
  5047 ;; Defined at:
  5048 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;		None
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;		None               void
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5062 ;;      Params:         0       0       0       0       0       0       0
  5063 ;;      Locals:         0       0       0       0       0       0       0
  5064 ;;      Temps:          1       0       0       0       0       0       0
  5065 ;;      Totals:         1       0       0       0       0       0       0
  5066 ;;Total ram usage:        1 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    5
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_do_I2C_TX
  5073 ;;		_i2c_ISR
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text46
  5078  000F40                     __ptext46:
  5079                           	opt stack 0
  5080  000F40                     _i2c1_driver_isNACK:
  5081                           	opt stack 20
  5082                           
  5083                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  5084                           
  5085                           ;incstack = 0
  5086  000F40  50C5               	movf	4037,w,c	;volatile
  5087  000F42  0BBF               	andlw	-65
  5088  000F44  0940               	iorlw	64
  5089  000F46  6EC5               	movwf	4037,c	;volatile
  5090  000F48  38C5               	swapf	4037,w,c	;volatile
  5091  000F4A  32E8               	rrcf	wreg,f,c
  5092  000F4C  32E8               	rrcf	wreg,f,c
  5093  000F4E  0B01               	andlw	1
  5094  000F50  6E3A               	movwf	??_i2c1_driver_isNACK& (0+255),c
  5095  000F52  303A               	rrcf	??_i2c1_driver_isNACK,w,c
  5096  000F54  0012               	return	
  5097  000F56                     __end_of_i2c1_driver_isNACK:
  5098                           	opt stack 0
  5099                           tosu	equ	0xFFF
  5100                           tosh	equ	0xFFE
  5101                           tosl	equ	0xFFD
  5102                           pclath	equ	0xFFA
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           intcon	equ	0xFF2
  5110                           intcon2	equ	0xFF1
  5111                           postinc0	equ	0xFEE
  5112                           plusw0	equ	0xFEB
  5113                           wreg	equ	0xFE8
  5114                           postdec1	equ	0xFE5
  5115                           fsr1l	equ	0xFE1
  5116                           indf2	equ	0xFDF
  5117                           postinc2	equ	0xFDE
  5118                           plusw2	equ	0xFDB
  5119                           fsr2h	equ	0xFDA
  5120                           fsr2l	equ	0xFD9
  5121                           status	equ	0xFD8
  5122                           
  5123 ;; *************** function _i2c1_driver_TXData *****************
  5124 ;; Defined at:
  5125 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  d               1    wreg     unsigned char 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  d               1   20[COMRAM] unsigned char 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5139 ;;      Params:         0       0       0       0       0       0       0
  5140 ;;      Locals:         1       0       0       0       0       0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0
  5142 ;;      Totals:         1       0       0       0       0       0       0
  5143 ;;Total ram usage:        1 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    5
  5146 ;; This function calls:
  5147 ;;		Nothing
  5148 ;; This function is called by:
  5149 ;;		_do_I2C_SEND_ADR_READ
  5150 ;;		_do_I2C_SEND_INITIAL_READ
  5151 ;;		_do_I2C_TX_REGISTER
  5152 ;;		_do_I2C_SEND_ADR_WRITE
  5153 ;;		_do_I2C_TX
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text47
  5158  00110A                     __ptext47:
  5159                           	opt stack 0
  5160  00110A                     _i2c1_driver_TXData:
  5161                           	opt stack 19
  5162                           
  5163                           ;incstack = 0
  5164                           ;i2c1_driver_TXData@d stored from wreg
  5165  00110A  6E3A               	movwf	i2c1_driver_TXData@d,c
  5166                           
  5167                           ;i2c1_driver.c: 188: SSP1BUF = d;
  5168  00110C  C03A  FFC9         	movff	i2c1_driver_TXData@d,4041	;volatile
  5169  001110  0012               	return		;funcret
  5170  001112                     __end_of_i2c1_driver_TXData:
  5171                           	opt stack 0
  5172                           tosu	equ	0xFFF
  5173                           tosh	equ	0xFFE
  5174                           tosl	equ	0xFFD
  5175                           pclath	equ	0xFFA
  5176                           tblptru	equ	0xFF8
  5177                           tblptrh	equ	0xFF7
  5178                           tblptrl	equ	0xFF6
  5179                           tablat	equ	0xFF5
  5180                           prodh	equ	0xFF4
  5181                           prodl	equ	0xFF3
  5182                           intcon	equ	0xFF2
  5183                           intcon2	equ	0xFF1
  5184                           postinc0	equ	0xFEE
  5185                           plusw0	equ	0xFEB
  5186                           wreg	equ	0xFE8
  5187                           postdec1	equ	0xFE5
  5188                           fsr1l	equ	0xFE1
  5189                           indf2	equ	0xFDF
  5190                           postinc2	equ	0xFDE
  5191                           plusw2	equ	0xFDB
  5192                           fsr2h	equ	0xFDA
  5193                           fsr2l	equ	0xFD9
  5194                           status	equ	0xFD8
  5195                           
  5196 ;; *************** function _i2c1_driver_getRXData *****************
  5197 ;; Defined at:
  5198 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;		None
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;		None
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  1    wreg      unsigned char 
  5205 ;; Registers used:
  5206 ;;		wreg, status,2
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5212 ;;      Params:         0       0       0       0       0       0       0
  5213 ;;      Locals:         0       0       0       0       0       0       0
  5214 ;;      Temps:          0       0       0       0       0       0       0
  5215 ;;      Totals:         0       0       0       0       0       0       0
  5216 ;;Total ram usage:        0 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; Hardware stack levels required when called:    5
  5219 ;; This function calls:
  5220 ;;		Nothing
  5221 ;; This function is called by:
  5222 ;;		_do_I2C_RX
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text48
  5227  001178                     __ptext48:
  5228                           	opt stack 0
  5229  001178                     _i2c1_driver_getRXData:
  5230                           	opt stack 19
  5231                           
  5232                           ;i2c1_driver.c: 173: return SSP1BUF;
  5233                           
  5234                           ;incstack = 0
  5235  001178  50C9               	movf	4041,w,c	;volatile
  5236  00117A  0012               	return	
  5237  00117C                     __end_of_i2c1_driver_getRXData:
  5238                           	opt stack 0
  5239                           tosu	equ	0xFFF
  5240                           tosh	equ	0xFFE
  5241                           tosl	equ	0xFFD
  5242                           pclath	equ	0xFFA
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           prodh	equ	0xFF4
  5248                           prodl	equ	0xFF3
  5249                           intcon	equ	0xFF2
  5250                           intcon2	equ	0xFF1
  5251                           postinc0	equ	0xFEE
  5252                           plusw0	equ	0xFEB
  5253                           wreg	equ	0xFE8
  5254                           postdec1	equ	0xFE5
  5255                           fsr1l	equ	0xFE1
  5256                           indf2	equ	0xFDF
  5257                           postinc2	equ	0xFDE
  5258                           plusw2	equ	0xFDB
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function _i2c1_driver_sendNACK *****************
  5264 ;; Defined at:
  5265 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;		None
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      void 
  5272 ;; Registers used:
  5273 ;;		None
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5279 ;;      Params:         0       0       0       0       0       0       0
  5280 ;;      Locals:         0       0       0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0
  5282 ;;      Totals:         0       0       0       0       0       0       0
  5283 ;;Total ram usage:        0 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    5
  5286 ;; This function calls:
  5287 ;;		Nothing
  5288 ;; This function is called by:
  5289 ;;		_do_I2C_DO_NACK_STOP
  5290 ;;		_do_I2C_DO_NACK_RESTART
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           	psect	text49
  5295  001152                     __ptext49:
  5296                           	opt stack 0
  5297  001152                     _i2c1_driver_sendNACK:
  5298                           	opt stack 18
  5299                           
  5300                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  5301                           
  5302                           ;incstack = 0
  5303  001152  8AC5               	bsf	4037,5,c	;volatile
  5304                           
  5305                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  5306  001154  88C5               	bsf	4037,4,c	;volatile
  5307  001156  0012               	return		;funcret
  5308  001158                     __end_of_i2c1_driver_sendNACK:
  5309                           	opt stack 0
  5310                           tosu	equ	0xFFF
  5311                           tosh	equ	0xFFE
  5312                           tosl	equ	0xFFD
  5313                           pclath	equ	0xFFA
  5314                           tblptru	equ	0xFF8
  5315                           tblptrh	equ	0xFF7
  5316                           tblptrl	equ	0xFF6
  5317                           tablat	equ	0xFF5
  5318                           prodh	equ	0xFF4
  5319                           prodl	equ	0xFF3
  5320                           intcon	equ	0xFF2
  5321                           intcon2	equ	0xFF1
  5322                           postinc0	equ	0xFEE
  5323                           plusw0	equ	0xFEB
  5324                           wreg	equ	0xFE8
  5325                           postdec1	equ	0xFE5
  5326                           fsr1l	equ	0xFE1
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           plusw2	equ	0xFDB
  5330                           fsr2h	equ	0xFDA
  5331                           fsr2l	equ	0xFD9
  5332                           status	equ	0xFD8
  5333                           
  5334 ;; *************** function _i2c1_driver_resetBus *****************
  5335 ;; Defined at:
  5336 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;		None
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;		None
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		None
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5350 ;;      Params:         0       0       0       0       0       0       0
  5351 ;;      Locals:         0       0       0       0       0       0       0
  5352 ;;      Temps:          0       0       0       0       0       0       0
  5353 ;;      Totals:         0       0       0       0       0       0       0
  5354 ;;Total ram usage:        0 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    5
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_do_I2C_RESET
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text50
  5365  0011B8                     __ptext50:
  5366                           	opt stack 0
  5367  0011B8                     _i2c1_driver_resetBus:
  5368                           	opt stack 19
  5369                           
  5370                           ;incstack = 0
  5371  0011B8  0012               	return		;funcret
  5372  0011BA                     __end_of_i2c1_driver_resetBus:
  5373                           	opt stack 0
  5374                           tosu	equ	0xFFF
  5375                           tosh	equ	0xFFE
  5376                           tosl	equ	0xFFD
  5377                           pclath	equ	0xFFA
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           intcon	equ	0xFF2
  5385                           intcon2	equ	0xFF1
  5386                           postinc0	equ	0xFEE
  5387                           plusw0	equ	0xFEB
  5388                           wreg	equ	0xFE8
  5389                           postdec1	equ	0xFE5
  5390                           fsr1l	equ	0xFE1
  5391                           indf2	equ	0xFDF
  5392                           postinc2	equ	0xFDE
  5393                           plusw2	equ	0xFDB
  5394                           fsr2h	equ	0xFDA
  5395                           fsr2l	equ	0xFD9
  5396                           status	equ	0xFD8
  5397                           
  5398 ;; *************** function _i2c1_driver_startRX *****************
  5399 ;; Defined at:
  5400 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      void 
  5407 ;; Registers used:
  5408 ;;		None
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5414 ;;      Params:         0       0       0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0       0       0
  5416 ;;      Temps:          0       0       0       0       0       0       0
  5417 ;;      Totals:         0       0       0       0       0       0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    5
  5421 ;; This function calls:
  5422 ;;		Nothing
  5423 ;; This function is called by:
  5424 ;;		_do_I2C_RCEN
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           	psect	text51
  5429  00117C                     __ptext51:
  5430                           	opt stack 0
  5431  00117C                     _i2c1_driver_startRX:
  5432                           	opt stack 19
  5433                           
  5434                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  5435                           
  5436                           ;incstack = 0
  5437  00117C  86C5               	bsf	4037,3,c	;volatile
  5438  00117E  0012               	return		;funcret
  5439  001180                     __end_of_i2c1_driver_startRX:
  5440                           	opt stack 0
  5441                           tosu	equ	0xFFF
  5442                           tosh	equ	0xFFE
  5443                           tosl	equ	0xFFD
  5444                           pclath	equ	0xFFA
  5445                           tblptru	equ	0xFF8
  5446                           tblptrh	equ	0xFF7
  5447                           tblptrl	equ	0xFF6
  5448                           tablat	equ	0xFF5
  5449                           prodh	equ	0xFF4
  5450                           prodl	equ	0xFF3
  5451                           intcon	equ	0xFF2
  5452                           intcon2	equ	0xFF1
  5453                           postinc0	equ	0xFEE
  5454                           plusw0	equ	0xFEB
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           plusw2	equ	0xFDB
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _returnReset *****************
  5466 ;; Defined at:
  5467 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  p               2   20[COMRAM] PTR void 
  5470 ;;		 -> NULL(0), 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      enum E6842
  5475 ;; Registers used:
  5476 ;;		wreg
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5482 ;;      Params:         2       0       0       0       0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0
  5485 ;;      Totals:         2       0       0       0       0       0       0
  5486 ;;Total ram usage:        2 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    5
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_i2c_open
  5493 ;;		_do_I2C_DO_ADDRESS_NACK
  5494 ;;		_do_I2C_TX
  5495 ;;		_do_I2C_RX
  5496 ;;		_do_I2C_TX_EMPTY
  5497 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5498 ;;		i2_do_I2C_TX
  5499 ;;		i2_do_I2C_RX
  5500 ;;		i2_do_I2C_TX_EMPTY
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           	psect	text52
  5505  0010EE                     __ptext52:
  5506                           	opt stack 0
  5507  0010EE                     _returnReset:
  5508                           	opt stack 0
  5509                           
  5510                           ;Skip over the trampoline to the duplicate function for level 2
  5511  0010EE  B24B               	btfsc	btemp,1,c
  5512  0010F0  EFD2  F008         	goto	i2_returnReset
  5513  0010F4                     _returnReset$intlevel0:
  5514                           	opt stack 19
  5515                           
  5516                           ;i2c_master.c: 515: return i2c_reset_link;
  5517                           
  5518                           ;incstack = 0
  5519  0010F4  0E05               	movlw	5
  5520  0010F6  0012               	return	
  5521  0010F8                     __end_of_returnReset:
  5522                           	opt stack 0
  5523                           tosu	equ	0xFFF
  5524                           tosh	equ	0xFFE
  5525                           tosl	equ	0xFFD
  5526                           pclath	equ	0xFFA
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           intcon	equ	0xFF2
  5534                           intcon2	equ	0xFF1
  5535                           postinc0	equ	0xFEE
  5536                           plusw0	equ	0xFEB
  5537                           wreg	equ	0xFE8
  5538                           postdec1	equ	0xFE5
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           plusw2	equ	0xFDB
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _returnStop *****************
  5548 ;; Defined at:
  5549 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  p               2   20[COMRAM] PTR void 
  5552 ;;		 -> NULL(0), 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      enum E6842
  5557 ;; Registers used:
  5558 ;;		wreg
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5564 ;;      Params:         2       0       0       0       0       0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0
  5567 ;;      Totals:         2       0       0       0       0       0       0
  5568 ;;Total ram usage:        2 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    5
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_i2c_open
  5575 ;;		_setCallBack
  5576 ;;		_do_I2C_DO_ADDRESS_NACK
  5577 ;;		_do_I2C_TX
  5578 ;;		_do_I2C_RX
  5579 ;;		_do_I2C_TX_EMPTY
  5580 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5581 ;;		i2_do_I2C_TX
  5582 ;;		i2_do_I2C_RX
  5583 ;;		i2_do_I2C_TX_EMPTY
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text53
  5588  0010F8                     __ptext53:
  5589                           	opt stack 0
  5590  0010F8                     _returnStop:
  5591                           	opt stack 0
  5592                           
  5593                           ;Skip over the trampoline to the duplicate function for level 2
  5594  0010F8  B24B               	btfsc	btemp,1,c
  5595  0010FA  EFD4  F008         	goto	i2_returnStop
  5596  0010FE                     _returnStop$intlevel0:
  5597                           	opt stack 19
  5598                           
  5599                           ;i2c_master.c: 510: return i2c_stop;
  5600                           
  5601                           ;incstack = 0
  5602  0010FE  0E01               	movlw	1
  5603  001100  0012               	return	
  5604  001102                     __end_of_returnStop:
  5605                           	opt stack 0
  5606                           tosu	equ	0xFFF
  5607                           tosh	equ	0xFFE
  5608                           tosl	equ	0xFFD
  5609                           pclath	equ	0xFFA
  5610                           tblptru	equ	0xFF8
  5611                           tblptrh	equ	0xFF7
  5612                           tblptrl	equ	0xFF6
  5613                           tablat	equ	0xFF5
  5614                           prodh	equ	0xFF4
  5615                           prodl	equ	0xFF3
  5616                           intcon	equ	0xFF2
  5617                           intcon2	equ	0xFF1
  5618                           postinc0	equ	0xFEE
  5619                           plusw0	equ	0xFEB
  5620                           wreg	equ	0xFE8
  5621                           postdec1	equ	0xFE5
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           plusw2	equ	0xFDB
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function _i2c1_driver_stop *****************
  5631 ;; Defined at:
  5632 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;		None
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		None
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5646 ;;      Params:         0       0       0       0       0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0
  5649 ;;      Totals:         0       0       0       0       0       0       0
  5650 ;;Total ram usage:        0 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    5
  5653 ;; This function calls:
  5654 ;;		Nothing
  5655 ;; This function is called by:
  5656 ;;		_do_I2C_SEND_STOP
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text54
  5661  001180                     __ptext54:
  5662                           	opt stack 0
  5663  001180                     _i2c1_driver_stop:
  5664                           	opt stack 18
  5665                           
  5666                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  5667                           
  5668                           ;incstack = 0
  5669  001180  84C5               	bsf	4037,2,c	;volatile
  5670  001182  0012               	return		;funcret
  5671  001184                     __end_of_i2c1_driver_stop:
  5672                           	opt stack 0
  5673                           tosu	equ	0xFFF
  5674                           tosh	equ	0xFFE
  5675                           tosl	equ	0xFFD
  5676                           pclath	equ	0xFFA
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           prodh	equ	0xFF4
  5682                           prodl	equ	0xFF3
  5683                           intcon	equ	0xFF2
  5684                           intcon2	equ	0xFF1
  5685                           postinc0	equ	0xFEE
  5686                           plusw0	equ	0xFEB
  5687                           wreg	equ	0xFE8
  5688                           postdec1	equ	0xFE5
  5689                           fsr1l	equ	0xFE1
  5690                           indf2	equ	0xFDF
  5691                           postinc2	equ	0xFDE
  5692                           plusw2	equ	0xFDB
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function _i2c1_driver_restart *****************
  5698 ;; Defined at:
  5699 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;		None
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      void 
  5706 ;; Registers used:
  5707 ;;		None
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5713 ;;      Params:         0       0       0       0       0       0       0
  5714 ;;      Locals:         0       0       0       0       0       0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0
  5716 ;;      Totals:         0       0       0       0       0       0       0
  5717 ;;Total ram usage:        0 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    5
  5720 ;; This function calls:
  5721 ;;		Nothing
  5722 ;; This function is called by:
  5723 ;;		_do_I2C_SEND_RESTART_READ
  5724 ;;		_do_I2C_SEND_RESTART_WRITE
  5725 ;;		_do_I2C_SEND_RESTART
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           	psect	text55
  5730  001184                     __ptext55:
  5731                           	opt stack 0
  5732  001184                     _i2c1_driver_restart:
  5733                           	opt stack 18
  5734                           
  5735                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  5736                           
  5737                           ;incstack = 0
  5738  001184  82C5               	bsf	4037,1,c	;volatile
  5739  001186  0012               	return		;funcret
  5740  001188                     __end_of_i2c1_driver_restart:
  5741                           	opt stack 0
  5742                           tosu	equ	0xFFF
  5743                           tosh	equ	0xFFE
  5744                           tosl	equ	0xFFD
  5745                           pclath	equ	0xFFA
  5746                           tblptru	equ	0xFF8
  5747                           tblptrh	equ	0xFF7
  5748                           tblptrl	equ	0xFF6
  5749                           tablat	equ	0xFF5
  5750                           prodh	equ	0xFF4
  5751                           prodl	equ	0xFF3
  5752                           intcon	equ	0xFF2
  5753                           intcon2	equ	0xFF1
  5754                           postinc0	equ	0xFEE
  5755                           plusw0	equ	0xFEB
  5756                           wreg	equ	0xFE8
  5757                           postdec1	equ	0xFE5
  5758                           fsr1l	equ	0xFE1
  5759                           indf2	equ	0xFDF
  5760                           postinc2	equ	0xFDE
  5761                           plusw2	equ	0xFDB
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function _i2c1_driver_sendACK *****************
  5767 ;; Defined at:
  5768 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;		None
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      void 
  5775 ;; Registers used:
  5776 ;;		None
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5782 ;;      Params:         0       0       0       0       0       0       0
  5783 ;;      Locals:         0       0       0       0       0       0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0
  5785 ;;      Totals:         0       0       0       0       0       0       0
  5786 ;;Total ram usage:        0 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    5
  5789 ;; This function calls:
  5790 ;;		Nothing
  5791 ;; This function is called by:
  5792 ;;		_do_I2C_DO_ACK
  5793 ;;		_do_I2C_RX
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text56
  5798  001158                     __ptext56:
  5799                           	opt stack 0
  5800  001158                     _i2c1_driver_sendACK:
  5801                           	opt stack 19
  5802                           
  5803                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  5804                           
  5805                           ;incstack = 0
  5806  001158  9AC5               	bcf	4037,5,c	;volatile
  5807                           
  5808                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  5809  00115A  88C5               	bsf	4037,4,c	;volatile
  5810  00115C  0012               	return		;funcret
  5811  00115E                     __end_of_i2c1_driver_sendACK:
  5812                           	opt stack 0
  5813                           tosu	equ	0xFFF
  5814                           tosh	equ	0xFFE
  5815                           tosl	equ	0xFFD
  5816                           pclath	equ	0xFFA
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           prodh	equ	0xFF4
  5822                           prodl	equ	0xFF3
  5823                           intcon	equ	0xFF2
  5824                           intcon2	equ	0xFF1
  5825                           postinc0	equ	0xFEE
  5826                           plusw0	equ	0xFEB
  5827                           wreg	equ	0xFE8
  5828                           postdec1	equ	0xFE5
  5829                           fsr1l	equ	0xFE1
  5830                           indf2	equ	0xFDF
  5831                           postinc2	equ	0xFDE
  5832                           plusw2	equ	0xFDB
  5833                           fsr2h	equ	0xFDA
  5834                           fsr2l	equ	0xFD9
  5835                           status	equ	0xFD8
  5836                           
  5837 ;; *************** function _i2c1_driver_start *****************
  5838 ;; Defined at:
  5839 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      void 
  5846 ;; Registers used:
  5847 ;;		None
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5853 ;;      Params:         0       0       0       0       0       0       0
  5854 ;;      Locals:         0       0       0       0       0       0       0
  5855 ;;      Temps:          0       0       0       0       0       0       0
  5856 ;;      Totals:         0       0       0       0       0       0       0
  5857 ;;Total ram usage:        0 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:    5
  5860 ;; This function calls:
  5861 ;;		Nothing
  5862 ;; This function is called by:
  5863 ;;		_i2c_masterOperation
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text57
  5868  001188                     __ptext57:
  5869                           	opt stack 0
  5870  001188                     _i2c1_driver_start:
  5871                           	opt stack 22
  5872                           
  5873                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  5874                           
  5875                           ;incstack = 0
  5876  001188  80C5               	bsf	4037,0,c	;volatile
  5877  00118A  0012               	return		;funcret
  5878  00118C                     __end_of_i2c1_driver_start:
  5879                           	opt stack 0
  5880                           tosu	equ	0xFFF
  5881                           tosh	equ	0xFFE
  5882                           tosl	equ	0xFFD
  5883                           pclath	equ	0xFFA
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           intcon	equ	0xFF2
  5891                           intcon2	equ	0xFF1
  5892                           postinc0	equ	0xFEE
  5893                           plusw0	equ	0xFEB
  5894                           wreg	equ	0xFE8
  5895                           postdec1	equ	0xFE5
  5896                           fsr1l	equ	0xFE1
  5897                           indf2	equ	0xFDF
  5898                           postinc2	equ	0xFDE
  5899                           plusw2	equ	0xFDB
  5900                           fsr2h	equ	0xFDA
  5901                           fsr2l	equ	0xFD9
  5902                           status	equ	0xFD8
  5903                           
  5904 ;; *************** function _i2c_close *****************
  5905 ;; Defined at:
  5906 ;;		line 170 in file "mcc_generated_files/drivers/i2c_master.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;		None
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;  ret             1   20[COMRAM] enum E6837
  5911 ;; Return value:  Size  Location     Type
  5912 ;;                  1    wreg      enum E6837
  5913 ;; Registers used:
  5914 ;;		wreg, status,2, cstack
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5920 ;;      Params:         0       0       0       0       0       0       0
  5921 ;;      Locals:         1       0       0       0       0       0       0
  5922 ;;      Temps:          0       0       0       0       0       0       0
  5923 ;;      Totals:         1       0       0       0       0       0       0
  5924 ;;Total ram usage:        1 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; Hardware stack levels required when called:    6
  5927 ;; This function calls:
  5928 ;;		_mssp1_clearIRQ
  5929 ;;		_mssp1_disableIRQ
  5930 ;; This function is called by:
  5931 ;;		_write_register
  5932 ;;		_read_register
  5933 ;;		_read_xyzvalues
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text58
  5938  000E80                     __ptext58:
  5939                           	opt stack 0
  5940  000E80                     _i2c_close:
  5941                           	opt stack 23
  5942                           
  5943                           ;i2c_master.c: 172: i2c_error_t ret = I2C_BUSY;
  5944                           
  5945                           ;incstack = 0
  5946  000E80  0E01               	movlw	1
  5947  000E82  6E3A               	movwf	i2c_close@ret,c
  5948                           
  5949                           ;i2c_master.c: 173: if(!i2c_status.busy)
  5950  000E84  0100               	movlb	0	; () banked
  5951  000E86  B1B6               	btfsc	_i2c_status& (0+255),0,b
  5952  000E88  D008               	goto	l83
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;i2c_master.c: 174: {
  5956                           ;i2c_master.c: 175: i2c_status.inUse = 0;
  5957  000E8A  93B6               	bcf	_i2c_status& (0+255),1,b
  5958                           
  5959                           ;i2c_master.c: 177: i2c_status.address = 0xff;
  5960  000E8C  69B7               	setf	(_i2c_status+1)& (0+255),b
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;i2c_master.c: 178: mssp1_clearIRQ();
  5964  000E8E  ECC8  F008         	call	_mssp1_clearIRQ	;wreg free
  5965                           
  5966                           ;i2c_master.c: 179: mssp1_disableIRQ();
  5967  000E92  ECC6  F008         	call	_mssp1_disableIRQ	;wreg free
  5968                           
  5969                           ;i2c_master.c: 180: ret = i2c_status.error;
  5970  000E96  C0C1  F03A         	movff	_i2c_status+11,i2c_close@ret
  5971  000E9A                     l83:
  5972                           
  5973                           ;i2c_master.c: 181: }
  5974                           ;i2c_master.c: 182: return ret;
  5975  000E9A  503A               	movf	i2c_close@ret,w,c
  5976  000E9C  0012               	return	
  5977  000E9E                     __end_of_i2c_close:
  5978                           	opt stack 0
  5979                           tosu	equ	0xFFF
  5980                           tosh	equ	0xFFE
  5981                           tosl	equ	0xFFD
  5982                           pclath	equ	0xFFA
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           intcon2	equ	0xFF1
  5991                           postinc0	equ	0xFEE
  5992                           plusw0	equ	0xFEB
  5993                           wreg	equ	0xFE8
  5994                           postdec1	equ	0xFE5
  5995                           fsr1l	equ	0xFE1
  5996                           indf2	equ	0xFDF
  5997                           postinc2	equ	0xFDE
  5998                           plusw2	equ	0xFDB
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function _mssp1_disableIRQ *****************
  6004 ;; Defined at:
  6005 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;		None
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;		None
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		None
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6019 ;;      Params:         0       0       0       0       0       0       0
  6020 ;;      Locals:         0       0       0       0       0       0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0
  6022 ;;      Totals:         0       0       0       0       0       0       0
  6023 ;;Total ram usage:        0 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    5
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_i2c_close
  6030 ;;		_i2c_setTimeOut
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text59
  6035  00118C                     __ptext59:
  6036                           	opt stack 0
  6037  00118C                     _mssp1_disableIRQ:
  6038                           	opt stack 23
  6039                           
  6040                           ;i2c1_driver.c: 50: PIE1bits.SSP1IE = 0;
  6041                           
  6042                           ;incstack = 0
  6043  00118C  969D               	bcf	3997,3,c	;volatile
  6044  00118E  0012               	return		;funcret
  6045  001190                     __end_of_mssp1_disableIRQ:
  6046                           	opt stack 0
  6047                           tosu	equ	0xFFF
  6048                           tosh	equ	0xFFE
  6049                           tosl	equ	0xFFD
  6050                           pclath	equ	0xFFA
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           intcon	equ	0xFF2
  6058                           intcon2	equ	0xFF1
  6059                           postinc0	equ	0xFEE
  6060                           plusw0	equ	0xFEB
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           plusw2	equ	0xFDB
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _mssp1_clearIRQ *****************
  6072 ;; Defined at:
  6073 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;		None
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;		None
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      void 
  6080 ;; Registers used:
  6081 ;;		None
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6087 ;;      Params:         0       0       0       0       0       0       0
  6088 ;;      Locals:         0       0       0       0       0       0       0
  6089 ;;      Temps:          0       0       0       0       0       0       0
  6090 ;;      Totals:         0       0       0       0       0       0       0
  6091 ;;Total ram usage:        0 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    5
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_i2c_open
  6098 ;;		_i2c_close
  6099 ;;		_i2c_ISR
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text60
  6104  001190                     __ptext60:
  6105                           	opt stack 0
  6106  001190                     _mssp1_clearIRQ:
  6107                           	opt stack 23
  6108                           
  6109                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6110                           
  6111                           ;incstack = 0
  6112  001190  969E               	bcf	3998,3,c	;volatile
  6113  001192  0012               	return		;funcret
  6114  001194                     __end_of_mssp1_clearIRQ:
  6115                           	opt stack 0
  6116                           tosu	equ	0xFFF
  6117                           tosh	equ	0xFFE
  6118                           tosl	equ	0xFFD
  6119                           pclath	equ	0xFFA
  6120                           tblptru	equ	0xFF8
  6121                           tblptrh	equ	0xFF7
  6122                           tblptrl	equ	0xFF6
  6123                           tablat	equ	0xFF5
  6124                           prodh	equ	0xFF4
  6125                           prodl	equ	0xFF3
  6126                           intcon	equ	0xFF2
  6127                           intcon2	equ	0xFF1
  6128                           postinc0	equ	0xFEE
  6129                           plusw0	equ	0xFEB
  6130                           wreg	equ	0xFE8
  6131                           postdec1	equ	0xFE5
  6132                           fsr1l	equ	0xFE1
  6133                           indf2	equ	0xFDF
  6134                           postinc2	equ	0xFDE
  6135                           plusw2	equ	0xFDB
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _INTERRUPT_InterruptManager *****************
  6141 ;; Defined at:
  6142 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;		None
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      void 
  6149 ;; Registers used:
  6150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6156 ;;      Params:         0       0       0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0
  6158 ;;      Temps:         18       0       0       0       0       0       0
  6159 ;;      Totals:        18       0       0       0       0       0       0
  6160 ;;Total ram usage:       18 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    4
  6163 ;; This function calls:
  6164 ;;		Absolute function
  6165 ;;		_EUSART1_Receive_ISR
  6166 ;;		_EUSART1_Transmit_ISR
  6167 ;;		_i2c_busCollisionISR
  6168 ;;		i2_i2c_ISR
  6169 ;; This function is called by:
  6170 ;;		Interrupt level 2
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           	psect	intcode
  6175  000008                     __pintcode:
  6176                           	opt stack 0
  6177  000008                     _INTERRUPT_InterruptManager:
  6178                           	opt stack 17
  6179                           
  6180                           ;incstack = 0
  6181  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6182  00000A  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
  6183  00000E  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6184  000012  CFE9 F02A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6185  000016  CFEA F02B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6186  00001A  CFE1 F02C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6187  00001E  CFE2 F02D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6188  000022  CFD9 F02E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6189  000026  CFDA F02F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6190  00002A  CFF3 F030          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6191  00002E  CFF4 F031          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6192  000032  CFF6 F032          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6193  000036  CFF7 F033          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6194  00003A  CFF8 F034          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6195  00003E  CFF5 F035          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6196  000042  C04B  F036         	movff	btemp,??_INTERRUPT_InterruptManager+14
  6197  000046  C04C  F037         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  6198  00004A  C04D  F038         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  6199  00004E  C04E  F039         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  6200                           
  6201                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  6202  000052  ACF2               	btfss	intcon,6,c	;volatile
  6203  000054  D030               	goto	i2u165_49
  6204                           
  6205                           ;interrupt_manager.c: 61: {
  6206                           ;interrupt_manager.c: 62: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  6207  000056  B6A0               	btfsc	4000,3,c	;volatile
  6208  000058  A6A1               	btfss	4001,3,c	;volatile
  6209  00005A  D008               	goto	i2l567
  6210                           
  6211                           ;interrupt_manager.c: 63: {
  6212                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  6213  00005C  D801               	call	i2u156_48
  6214  00005E  D02B               	goto	i2u165_49
  6215  000060                     i2u156_48:
  6216  000060  0005               	push	
  6217  000062  6EFA               	movwf	pclath,c
  6218  000064  5013               	movf	_i2c1_driver_busCollisionISR,w,c
  6219  000066  6EFD               	movwf	tosl,c
  6220  000068  5014               	movf	_i2c1_driver_busCollisionISR+1,w,c
  6221  00006A  D020               	goto	L6
  6222  00006C                     i2l567:
  6223                           
  6224                           ;interrupt_manager.c: 66: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  6225  00006C  B69D               	btfsc	3997,3,c	;volatile
  6226  00006E  A69E               	btfss	3998,3,c	;volatile
  6227  000070  D008               	goto	i2l569
  6228                           
  6229                           ;interrupt_manager.c: 67: {
  6230                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  6231  000072  D801               	call	i2u159_48
  6232  000074  D020               	goto	i2u165_49
  6233  000076                     i2u159_48:
  6234  000076  0005               	push	
  6235  000078  6EFA               	movwf	pclath,c
  6236  00007A  5011               	movf	_i2c1_driver_i2cISR,w,c
  6237  00007C  6EFD               	movwf	tosl,c
  6238  00007E  5012               	movf	_i2c1_driver_i2cISR+1,w,c
  6239  000080  D015               	goto	L6
  6240  000082                     i2l569:
  6241                           
  6242                           ;interrupt_manager.c: 70: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6243  000082  B89D               	btfsc	3997,4,c	;volatile
  6244  000084  A89E               	btfss	3998,4,c	;volatile
  6245  000086  D008               	goto	i2l571
  6246                           
  6247                           ;interrupt_manager.c: 71: {
  6248                           ;interrupt_manager.c: 72: EUSART1_TxDefaultInterruptHandler();
  6249  000088  D801               	call	i2u162_48
  6250  00008A  D015               	goto	i2u165_49
  6251  00008C                     i2u162_48:
  6252  00008C  0005               	push	
  6253  00008E  6EFA               	movwf	pclath,c
  6254  000090  5048               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  6255  000092  6EFD               	movwf	tosl,c
  6256  000094  5049               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  6257  000096  D00A               	goto	L6
  6258  000098                     i2l571:
  6259                           
  6260                           ;interrupt_manager.c: 74: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6261  000098  BA9D               	btfsc	3997,5,c	;volatile
  6262  00009A  AA9E               	btfss	3998,5,c	;volatile
  6263  00009C  D00C               	goto	i2u165_49
  6264                           
  6265                           ;interrupt_manager.c: 75: {
  6266                           ;interrupt_manager.c: 76: EUSART1_RxDefaultInterruptHandler();
  6267  00009E  D801               	call	i2u165_48
  6268  0000A0  D00A               	goto	i2u165_49
  6269  0000A2                     i2u165_48:
  6270  0000A2  0005               	push	
  6271  0000A4  6EFA               	movwf	pclath,c
  6272  0000A6  5046               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  6273  0000A8  6EFD               	movwf	tosl,c
  6274  0000AA  5047               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  6275  0000AC                     L6:
  6276  0000AC  6EFE               	movwf	tosh,c
  6277  0000AE  50F8               	movf	tblptru,w,c
  6278  0000B0  6EFF               	movwf	tosu,c
  6279  0000B2  50FA               	movf	pclath,w,c
  6280  0000B4  0012               	return		;indir
  6281  0000B6                     i2u165_49:
  6282                           
  6283                           ;interrupt_manager.c: 83: else
  6284                           ;interrupt_manager.c: 84: {
  6285                           
  6286                           ;interrupt_manager.c: 81: }
  6287                           ;interrupt_manager.c: 82: }
  6288                           
  6289                           ;interrupt_manager.c: 78: else
  6290                           ;interrupt_manager.c: 79: {
  6291                           
  6292                           ;interrupt_manager.c: 77: }
  6293  0000B6  C039  F04E         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  6294  0000BA  C038  F04D         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  6295  0000BE  C037  F04C         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  6296  0000C2  C036  F04B         	movff	??_INTERRUPT_InterruptManager+14,btemp
  6297  0000C6  C035  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6298  0000CA  C034  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6299  0000CE  C033  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6300  0000D2  C032  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6301  0000D6  C031  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6302  0000DA  C030  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6303  0000DE  C02F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6304  0000E2  C02E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6305  0000E6  C02D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6306  0000EA  C02C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6307  0000EE  C02B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6308  0000F2  C02A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6309  0000F6  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6310  0000FA  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6311  0000FE  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6312  000100  0011               	retfie		f
  6313  000102                     __end_of_INTERRUPT_InterruptManager:
  6314                           	opt stack 0
  6315                           tosu	equ	0xFFF
  6316                           tosh	equ	0xFFE
  6317                           tosl	equ	0xFFD
  6318                           pclatu	equ	0xFFB
  6319                           pclath	equ	0xFFA
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           intcon2	equ	0xFF1
  6328                           postinc0	equ	0xFEE
  6329                           plusw0	equ	0xFEB
  6330                           fsr0h	equ	0xFEA
  6331                           fsr0l	equ	0xFE9
  6332                           wreg	equ	0xFE8
  6333                           postdec1	equ	0xFE5
  6334                           fsr1h	equ	0xFE2
  6335                           fsr1l	equ	0xFE1
  6336                           indf2	equ	0xFDF
  6337                           postinc2	equ	0xFDE
  6338                           plusw2	equ	0xFDB
  6339                           fsr2h	equ	0xFDA
  6340                           fsr2l	equ	0xFD9
  6341                           status	equ	0xFD8
  6342                           
  6343 ;; *************** function i2_i2c_ISR *****************
  6344 ;; Defined at:
  6345 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;		None
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;		None
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  1    wreg      void 
  6352 ;; Registers used:
  6353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6359 ;;      Params:         0       0       0       0       0       0       0
  6360 ;;      Locals:         0       0       0       0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0
  6362 ;;      Totals:         0       0       0       0       0       0       0
  6363 ;;Total ram usage:        0 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    3
  6366 ;; This function calls:
  6367 ;;		i2_do_I2C_DO_ACK
  6368 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6369 ;;		i2_do_I2C_DO_NACK_RESTART
  6370 ;;		i2_do_I2C_DO_NACK_STOP
  6371 ;;		i2_do_I2C_IDLE
  6372 ;;		i2_do_I2C_RCEN
  6373 ;;		i2_do_I2C_RESET
  6374 ;;		i2_do_I2C_RX
  6375 ;;		i2_do_I2C_SEND_ADR_READ
  6376 ;;		i2_do_I2C_SEND_ADR_WRITE
  6377 ;;		i2_do_I2C_SEND_INITIAL_READ
  6378 ;;		i2_do_I2C_SEND_RESTART
  6379 ;;		i2_do_I2C_SEND_RESTART_READ
  6380 ;;		i2_do_I2C_SEND_RESTART_WRITE
  6381 ;;		i2_do_I2C_SEND_STOP
  6382 ;;		i2_do_I2C_TX
  6383 ;;		i2_do_I2C_TX_EMPTY
  6384 ;;		i2_do_I2C_TX_REGISTER
  6385 ;;		i2_i2c1_driver_isNACK
  6386 ;;		i2_mssp1_clearIRQ
  6387 ;; This function is called by:
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text62
  6392  000C62                     __ptext62:
  6393                           	opt stack 0
  6394  000C62                     i2_i2c_ISR:
  6395                           	opt stack 17
  6396                           
  6397                           ;i2c_master.c: 486: mssp1_clearIRQ();
  6398                           
  6399                           ;incstack = 0
  6400  000C62  ECCA  F008         	call	i2_mssp1_clearIRQ	;wreg free
  6401                           
  6402                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  6403  000C66  0100               	movlb	0	; () banked
  6404  000C68  A7B6               	btfss	_i2c_status& (0+255),3,b
  6405  000C6A  D007               	goto	i2l209
  6406                           
  6407                           ; BSR set to: 0
  6408  000C6C  ECAB  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  6409  000C70  A0D8               	btfss	status,0,c
  6410  000C72  D003               	goto	i2l209
  6411                           
  6412                           ;i2c_master.c: 493: {
  6413                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  6414  000C74  0E0F               	movlw	15
  6415  000C76  0100               	movlb	0	; () banked
  6416  000C78  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  6417  000C7A                     i2l209:
  6418                           
  6419                           ;i2c_master.c: 495: }
  6420                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  6421                           
  6422                           ; BSR set to: 0
  6423  000C7A  0100               	movlb	0	; () banked
  6424  000C7C  51C0               	movf	(_i2c_status+10)& (0+255),w,b
  6425  000C7E  0D02               	mullw	2
  6426  000C80  0E92               	movlw	low _fsmStateTable
  6427  000C82  24F3               	addwf	prodl,w,c
  6428  000C84  6ED9               	movwf	fsr2l,c
  6429  000C86  0E00               	movlw	high _fsmStateTable
  6430  000C88  20F4               	addwfc	prodh,w,c
  6431  000C8A  6EDA               	movwf	fsr2h,c
  6432  000C8C  D801               	call	i2u151_48
  6433  000C8E  D00A               	goto	i2u151_49
  6434  000C90                     i2u151_48:
  6435  000C90  0005               	push	
  6436  000C92  6EFA               	movwf	pclath,c
  6437  000C94  50DE               	movf	postinc2,w,c
  6438  000C96  6EFD               	movwf	tosl,c
  6439  000C98  50DE               	movf	postinc2,w,c
  6440  000C9A  6EFE               	movwf	tosh,c
  6441  000C9C  50F8               	movf	tblptru,w,c
  6442  000C9E  6EFF               	movwf	tosu,c
  6443  000CA0  50FA               	movf	pclath,w,c
  6444  000CA2  0012               	return		;indir
  6445  000CA4                     i2u151_49:
  6446  000CA4  0100               	movlb	0	; () banked
  6447  000CA6  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  6448                           
  6449                           ; BSR set to: 0
  6450  000CA8  0012               	return		;funcret
  6451  000CAA                     __end_ofi2_i2c_ISR:
  6452                           	opt stack 0
  6453                           tosu	equ	0xFFF
  6454                           tosh	equ	0xFFE
  6455                           tosl	equ	0xFFD
  6456                           pclatu	equ	0xFFB
  6457                           pclath	equ	0xFFA
  6458                           tblptru	equ	0xFF8
  6459                           tblptrh	equ	0xFF7
  6460                           tblptrl	equ	0xFF6
  6461                           tablat	equ	0xFF5
  6462                           prodh	equ	0xFF4
  6463                           prodl	equ	0xFF3
  6464                           intcon	equ	0xFF2
  6465                           intcon2	equ	0xFF1
  6466                           postinc0	equ	0xFEE
  6467                           plusw0	equ	0xFEB
  6468                           fsr0h	equ	0xFEA
  6469                           fsr0l	equ	0xFE9
  6470                           wreg	equ	0xFE8
  6471                           postdec1	equ	0xFE5
  6472                           fsr1h	equ	0xFE2
  6473                           fsr1l	equ	0xFE1
  6474                           indf2	equ	0xFDF
  6475                           postinc2	equ	0xFDE
  6476                           plusw2	equ	0xFDB
  6477                           fsr2h	equ	0xFDA
  6478                           fsr2l	equ	0xFD9
  6479                           status	equ	0xFD8
  6480                           
  6481 ;; *************** function i2_mssp1_clearIRQ *****************
  6482 ;; Defined at:
  6483 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;		None
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;		None
  6488 ;; Return value:  Size  Location     Type
  6489 ;;                  1    wreg      void 
  6490 ;; Registers used:
  6491 ;;		None
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6497 ;;      Params:         0       0       0       0       0       0       0
  6498 ;;      Locals:         0       0       0       0       0       0       0
  6499 ;;      Temps:          0       0       0       0       0       0       0
  6500 ;;      Totals:         0       0       0       0       0       0       0
  6501 ;;Total ram usage:        0 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		i2_i2c_ISR
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text63
  6511  001194                     __ptext63:
  6512                           	opt stack 0
  6513  001194                     i2_mssp1_clearIRQ:
  6514                           	opt stack 19
  6515                           
  6516                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;incstack = 0
  6520  001194  969E               	bcf	3998,3,c	;volatile
  6521  001196  0012               	return		;funcret
  6522  001198                     __end_ofi2_mssp1_clearIRQ:
  6523                           	opt stack 0
  6524                           tosu	equ	0xFFF
  6525                           tosh	equ	0xFFE
  6526                           tosl	equ	0xFFD
  6527                           pclatu	equ	0xFFB
  6528                           pclath	equ	0xFFA
  6529                           tblptru	equ	0xFF8
  6530                           tblptrh	equ	0xFF7
  6531                           tblptrl	equ	0xFF6
  6532                           tablat	equ	0xFF5
  6533                           prodh	equ	0xFF4
  6534                           prodl	equ	0xFF3
  6535                           intcon	equ	0xFF2
  6536                           intcon2	equ	0xFF1
  6537                           postinc0	equ	0xFEE
  6538                           plusw0	equ	0xFEB
  6539                           fsr0h	equ	0xFEA
  6540                           fsr0l	equ	0xFE9
  6541                           wreg	equ	0xFE8
  6542                           postdec1	equ	0xFE5
  6543                           fsr1h	equ	0xFE2
  6544                           fsr1l	equ	0xFE1
  6545                           indf2	equ	0xFDF
  6546                           postinc2	equ	0xFDE
  6547                           plusw2	equ	0xFDB
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552 ;; *************** function i2_do_I2C_TX_EMPTY *****************
  6553 ;; Defined at:
  6554 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  1    wreg      enum E7019
  6561 ;; Registers used:
  6562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6568 ;;      Params:         0       0       0       0       0       0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0
  6571 ;;      Totals:         0       0       0       0       0       0       0
  6572 ;;Total ram usage:        0 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    2
  6575 ;; This function calls:
  6576 ;;		i2_do_I2C_SEND_RESTART
  6577 ;;		i2_do_I2C_SEND_STOP
  6578 ;;		i2_mssp1_setIRQ
  6579 ;;		i2_returnReset
  6580 ;;		i2_returnStop
  6581 ;; This function is called by:
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text64
  6586  000A84                     __ptext64:
  6587                           	opt stack 0
  6588  000A84                     i2_do_I2C_TX_EMPTY:
  6589                           	opt stack 17
  6590                           
  6591                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  6592                           
  6593                           ;incstack = 0
  6594  000A84  0100               	movlb	0	; () banked
  6595  000A86  85B6               	bsf	_i2c_status& (0+255),2,b
  6596                           
  6597                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6598  000A88  D00A               	goto	i2l197
  6599  000A8A                     
  6600                           ;i2c_master.c: 448: case i2c_restart_write:
  6601                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  6602                           
  6603                           ; BSR set to: 0
  6604                           
  6605                           ; BSR set to: 0
  6606  000A8A  EC99  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  6607  000A8E  0012               	return	
  6608  000A90                     
  6609                           ;i2c_master.c: 451: mssp1_setIRQ();
  6610  000A90  ECCC  F008         	call	i2_mssp1_setIRQ	;wreg free
  6611                           
  6612                           ;i2c_master.c: 452: return I2C_TX;
  6613  000A94  0E03               	movlw	3
  6614  000A96  0012               	return	
  6615  000A98                     
  6616                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  6617                           
  6618                           ;i2c_master.c: 454: case i2c_stop:
  6619  000A98  EC95  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  6620                           
  6621                           ;i2c_master.c: 456: }
  6622  000A9C  0012               	return	
  6623  000A9E                     i2l197:
  6624  000A9E  C0CE  F026         	movff	_i2c_status+24,i2returnReset@p
  6625  000AA2  C0CF  F027         	movff	_i2c_status+25,i2returnReset@p+1
  6626  000AA6  EE20  F0C2         	lfsr	2,_i2c_status+12
  6627  000AAA  D801               	call	i2u145_48
  6628  000AAC  D00A               	goto	i2u145_49
  6629  000AAE                     i2u145_48:
  6630  000AAE  0005               	push	
  6631  000AB0  6EFA               	movwf	pclath,c
  6632  000AB2  50DE               	movf	postinc2,w,c
  6633  000AB4  6EFD               	movwf	tosl,c
  6634  000AB6  50DE               	movf	postinc2,w,c
  6635  000AB8  6EFE               	movwf	tosh,c
  6636  000ABA  50F8               	movf	tblptru,w,c
  6637  000ABC  6EFF               	movwf	tosu,c
  6638  000ABE  50FA               	movf	pclath,w,c
  6639  000AC0  0012               	return		;indir
  6640  000AC2                     i2u145_49:
  6641                           
  6642                           ; Switch size 1, requested type "space"
  6643                           ; Number of cases is 4, Range of values is 1 to 4
  6644                           ; switch strategies available:
  6645                           ; Name         Instructions Cycles
  6646                           ; simple_byte           13     7 (average)
  6647                           ;	Chosen strategy is simple_byte
  6648  000AC2  0A01               	xorlw	1	; case 1
  6649  000AC4  B4D8               	btfsc	status,2,c
  6650  000AC6  D7E8               	goto	i2l202
  6651  000AC8  0A03               	xorlw	3	; case 2
  6652  000ACA  B4D8               	btfsc	status,2,c
  6653  000ACC  D7DE               	goto	i2l198
  6654  000ACE  0A01               	xorlw	1	; case 3
  6655  000AD0  B4D8               	btfsc	status,2,c
  6656  000AD2  D7DB               	goto	i2l198
  6657  000AD4  0A07               	xorlw	7	; case 4
  6658  000AD6  B4D8               	btfsc	status,2,c
  6659  000AD8  D7DB               	goto	i2l201
  6660  000ADA  D7DE               	goto	i2l202
  6661  000ADC                     __end_ofi2_do_I2C_TX_EMPTY:
  6662                           	opt stack 0
  6663                           tosu	equ	0xFFF
  6664                           tosh	equ	0xFFE
  6665                           tosl	equ	0xFFD
  6666                           pclatu	equ	0xFFB
  6667                           pclath	equ	0xFFA
  6668                           tblptru	equ	0xFF8
  6669                           tblptrh	equ	0xFF7
  6670                           tblptrl	equ	0xFF6
  6671                           tablat	equ	0xFF5
  6672                           prodh	equ	0xFF4
  6673                           prodl	equ	0xFF3
  6674                           intcon	equ	0xFF2
  6675                           intcon2	equ	0xFF1
  6676                           postinc0	equ	0xFEE
  6677                           plusw0	equ	0xFEB
  6678                           fsr0h	equ	0xFEA
  6679                           fsr0l	equ	0xFE9
  6680                           wreg	equ	0xFE8
  6681                           postdec1	equ	0xFE5
  6682                           fsr1h	equ	0xFE2
  6683                           fsr1l	equ	0xFE1
  6684                           indf2	equ	0xFDF
  6685                           postinc2	equ	0xFDE
  6686                           plusw2	equ	0xFDB
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function i2_do_I2C_RX *****************
  6692 ;; Defined at:
  6693 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;		None
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;		None
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  1    wreg      enum E7019
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6707 ;;      Params:         0       0       0       0       0       0       0
  6708 ;;      Locals:         0       0       0       0       0       0       0
  6709 ;;      Temps:          0       0       0       0       0       0       0
  6710 ;;      Totals:         0       0       0       0       0       0       0
  6711 ;;Total ram usage:        0 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    2
  6714 ;; This function calls:
  6715 ;;		i2_do_I2C_DO_NACK_RESTART
  6716 ;;		i2_do_I2C_DO_NACK_STOP
  6717 ;;		i2_i2c1_driver_getRXData
  6718 ;;		i2_i2c1_driver_sendACK
  6719 ;;		i2_returnReset
  6720 ;;		i2_returnStop
  6721 ;; This function is called by:
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text65
  6726  000946                     __ptext65:
  6727                           	opt stack 0
  6728  000946                     i2_do_I2C_RX:
  6729                           	opt stack 17
  6730                           
  6731                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  6732                           
  6733                           ;incstack = 0
  6734  000946  ECCE  F008         	call	i2_i2c1_driver_getRXData	;wreg free
  6735  00094A  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  6736  00094E  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  6737  000952  6EDF               	movwf	indf2,c
  6738  000954  0100               	movlb	0	; () banked
  6739  000956  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  6740  000958  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  6744  00095A  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  6745  00095C  A0D8               	btfss	status,0,c
  6746  00095E  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  6747  000960  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  6748  000962  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  6749  000964  B4D8               	btfsc	status,2,c
  6750  000966  D004               	goto	i2l185
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;i2c_master.c: 421: {
  6754                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  6755  000968  ECB2  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  6756                           
  6757                           ;i2c_master.c: 423: return I2C_RCEN;
  6758  00096C  0E05               	movlw	5
  6759                           
  6760                           ;i2c_master.c: 424: }
  6761  00096E  0012               	return	
  6762  000970                     i2l185:
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;i2c_master.c: 425: else
  6766                           ;i2c_master.c: 426: {
  6767                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  6768  000970  85B6               	bsf	_i2c_status& (0+255),2,b
  6769                           
  6770                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6771  000972  D006               	goto	i2l188
  6772  000974                     
  6773                           ;i2c_master.c: 431: case i2c_restart_read:
  6774                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  6775                           
  6776                           ; BSR set to: 0
  6777                           
  6778                           ; BSR set to: 0
  6779  000974  EC89  F008         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  6780  000978  0012               	return	
  6781  00097A                     
  6782                           ;i2c_master.c: 435: case i2c_stop:
  6783                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  6784                           
  6785                           ;i2c_master.c: 434: case i2c_continue:
  6786  00097A  EC8D  F008         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  6787                           
  6788                           ;i2c_master.c: 437: }
  6789  00097E  0012               	return	
  6790  000980                     i2l188:
  6791  000980  C0CE  F026         	movff	_i2c_status+24,i2returnReset@p
  6792  000984  C0CF  F027         	movff	_i2c_status+25,i2returnReset@p+1
  6793  000988  EE20  F0C2         	lfsr	2,_i2c_status+12
  6794  00098C  D801               	call	i2u144_48
  6795  00098E  D00A               	goto	i2u144_49
  6796  000990                     i2u144_48:
  6797  000990  0005               	push	
  6798  000992  6EFA               	movwf	pclath,c
  6799  000994  50DE               	movf	postinc2,w,c
  6800  000996  6EFD               	movwf	tosl,c
  6801  000998  50DE               	movf	postinc2,w,c
  6802  00099A  6EFE               	movwf	tosh,c
  6803  00099C  50F8               	movf	tblptru,w,c
  6804  00099E  6EFF               	movwf	tosu,c
  6805  0009A0  50FA               	movf	pclath,w,c
  6806  0009A2  0012               	return		;indir
  6807  0009A4                     i2u144_49:
  6808                           
  6809                           ; Switch size 1, requested type "space"
  6810                           ; Number of cases is 4, Range of values is 1 to 4
  6811                           ; switch strategies available:
  6812                           ; Name         Instructions Cycles
  6813                           ; simple_byte           13     7 (average)
  6814                           ;	Chosen strategy is simple_byte
  6815  0009A4  0A01               	xorlw	1	; case 1
  6816  0009A6  B4D8               	btfsc	status,2,c
  6817  0009A8  D7E8               	goto	i2l191
  6818  0009AA  0A03               	xorlw	3	; case 2
  6819  0009AC  B4D8               	btfsc	status,2,c
  6820  0009AE  D7E2               	goto	i2l189
  6821  0009B0  0A01               	xorlw	1	; case 3
  6822  0009B2  B4D8               	btfsc	status,2,c
  6823  0009B4  D7DF               	goto	i2l189
  6824  0009B6  0A07               	xorlw	7	; case 4
  6825  0009B8  D7E0               	goto	i2l191
  6826  0009BA                     __end_ofi2_do_I2C_RX:
  6827                           	opt stack 0
  6828                           tosu	equ	0xFFF
  6829                           tosh	equ	0xFFE
  6830                           tosl	equ	0xFFD
  6831                           pclatu	equ	0xFFB
  6832                           pclath	equ	0xFFA
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           prodh	equ	0xFF4
  6838                           prodl	equ	0xFF3
  6839                           intcon	equ	0xFF2
  6840                           intcon2	equ	0xFF1
  6841                           postinc0	equ	0xFEE
  6842                           plusw0	equ	0xFEB
  6843                           fsr0h	equ	0xFEA
  6844                           fsr0l	equ	0xFE9
  6845                           wreg	equ	0xFE8
  6846                           postdec1	equ	0xFE5
  6847                           fsr1h	equ	0xFE2
  6848                           fsr1l	equ	0xFE1
  6849                           indf2	equ	0xFDF
  6850                           postinc2	equ	0xFDE
  6851                           plusw2	equ	0xFDB
  6852                           fsr2h	equ	0xFDA
  6853                           fsr2l	equ	0xFD9
  6854                           status	equ	0xFD8
  6855                           
  6856 ;; *************** function i2_do_I2C_TX *****************
  6857 ;; Defined at:
  6858 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;		None
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;		None
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  1    wreg      enum E7019
  6865 ;; Registers used:
  6866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6872 ;;      Params:         0       0       0       0       0       0       0
  6873 ;;      Locals:         2       0       0       0       0       0       0
  6874 ;;      Temps:          0       0       0       0       0       0       0
  6875 ;;      Totals:         2       0       0       0       0       0       0
  6876 ;;Total ram usage:        2 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    2
  6879 ;; This function calls:
  6880 ;;		i2_do_I2C_SEND_RESTART_READ
  6881 ;;		i2_do_I2C_SEND_RESTART_WRITE
  6882 ;;		i2_do_I2C_SEND_STOP
  6883 ;;		i2_i2c1_driver_TXData
  6884 ;;		i2_i2c1_driver_isNACK
  6885 ;;		i2_returnReset
  6886 ;;		i2_returnStop
  6887 ;; This function is called by:
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           	psect	text66
  6892  0007C8                     __ptext66:
  6893                           	opt stack 0
  6894  0007C8                     i2_do_I2C_TX:
  6895                           	opt stack 17
  6896                           
  6897                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  6898                           
  6899                           ;incstack = 0
  6900  0007C8  ECAB  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  6901  0007CC  B0D8               	btfsc	status,0,c
  6902  0007CE  D00A               	goto	i2l170
  6903  0007D0  D026               	goto	i2l169
  6904  0007D2                     
  6905                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  6906  0007D2  ECA1  F008         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  6907  0007D6  0012               	return	
  6908  0007D8                     
  6909                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  6910  0007D8  EC9D  F008         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  6911  0007DC  0012               	return	
  6912  0007DE                     
  6913                           ;i2c_master.c: 405: case i2c_stop:
  6914                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  6915                           
  6916                           ;i2c_master.c: 404: case i2c_continue:
  6917  0007DE  EC95  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  6918                           
  6919                           ;i2c_master.c: 407: }
  6920  0007E2  0012               	return	
  6921  0007E4                     i2l170:
  6922  0007E4  C0D4  F026         	movff	_i2c_status+30,i2returnReset@p
  6923  0007E8  C0D5  F027         	movff	_i2c_status+31,i2returnReset@p+1
  6924  0007EC  EE20  F0C8         	lfsr	2,_i2c_status+18
  6925  0007F0  D801               	call	i2u141_48
  6926  0007F2  D00A               	goto	i2u141_49
  6927  0007F4                     i2u141_48:
  6928  0007F4  0005               	push	
  6929  0007F6  6EFA               	movwf	pclath,c
  6930  0007F8  50DE               	movf	postinc2,w,c
  6931  0007FA  6EFD               	movwf	tosl,c
  6932  0007FC  50DE               	movf	postinc2,w,c
  6933  0007FE  6EFE               	movwf	tosh,c
  6934  000800  50F8               	movf	tblptru,w,c
  6935  000802  6EFF               	movwf	tosu,c
  6936  000804  50FA               	movf	pclath,w,c
  6937  000806  0012               	return		;indir
  6938  000808                     i2u141_49:
  6939                           
  6940                           ; Switch size 1, requested type "space"
  6941                           ; Number of cases is 4, Range of values is 1 to 4
  6942                           ; switch strategies available:
  6943                           ; Name         Instructions Cycles
  6944                           ; simple_byte           13     7 (average)
  6945                           ;	Chosen strategy is simple_byte
  6946  000808  0A01               	xorlw	1	; case 1
  6947  00080A  B4D8               	btfsc	status,2,c
  6948  00080C  D7E8               	goto	i2l174
  6949  00080E  0A03               	xorlw	3	; case 2
  6950  000810  B4D8               	btfsc	status,2,c
  6951  000812  D7DF               	goto	i2l171
  6952  000814  0A01               	xorlw	1	; case 3
  6953  000816  B4D8               	btfsc	status,2,c
  6954  000818  D7DF               	goto	i2l173
  6955  00081A  0A07               	xorlw	7	; case 4
  6956  00081C  D7E0               	goto	i2l174
  6957  00081E                     i2l169:
  6958                           
  6959                           ;i2c_master.c: 409: else
  6960                           ;i2c_master.c: 410: {
  6961                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  6962  00081E  0100               	movlb	0	; () banked
  6963  000820  97B6               	bcf	_i2c_status& (0+255),3,b
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  6967  000822  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  6968  000826  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  6969  00082A  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  6970  00082C  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  6971  00082E  50DF               	movf	indf2,w,c
  6972  000830  ECA5  F008         	call	i2_i2c1_driver_TXData
  6973                           
  6974                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  6975  000834  0100               	movlb	0	; () banked
  6976  000836  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  6977  000838  A0D8               	btfss	status,0,c
  6978  00083A  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  6979  00083C  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  6980  00083E  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  6981  000840  A4D8               	btfss	status,2,c
  6982  000842  D004               	goto	i2l180
  6983                           
  6984                           ; BSR set to: 0
  6985  000844  0E00               	movlw	0
  6986  000846  6E27               	movwf	i2_do_I2C_TX$315+1,c
  6987  000848  0E06               	movlw	6
  6988  00084A  D003               	goto	L7
  6989  00084C                     i2l180:
  6990                           
  6991                           ; BSR set to: 0
  6992                           
  6993                           ; BSR set to: 0
  6994  00084C  0E00               	movlw	0
  6995  00084E  6E27               	movwf	i2_do_I2C_TX$315+1,c
  6996  000850  0E03               	movlw	3
  6997  000852                     L7:
  6998  000852  6E26               	movwf	i2_do_I2C_TX$315,c
  6999                           
  7000                           ; BSR set to: 0
  7001  000854  5026               	movf	i2_do_I2C_TX$315,w,c
  7002                           
  7003                           ; BSR set to: 0
  7004  000856  0012               	return	
  7005  000858                     __end_ofi2_do_I2C_TX:
  7006                           	opt stack 0
  7007                           tosu	equ	0xFFF
  7008                           tosh	equ	0xFFE
  7009                           tosl	equ	0xFFD
  7010                           pclatu	equ	0xFFB
  7011                           pclath	equ	0xFFA
  7012                           tblptru	equ	0xFF8
  7013                           tblptrh	equ	0xFF7
  7014                           tblptrl	equ	0xFF6
  7015                           tablat	equ	0xFF5
  7016                           prodh	equ	0xFF4
  7017                           prodl	equ	0xFF3
  7018                           intcon	equ	0xFF2
  7019                           intcon2	equ	0xFF1
  7020                           postinc0	equ	0xFEE
  7021                           plusw0	equ	0xFEB
  7022                           fsr0h	equ	0xFEA
  7023                           fsr0l	equ	0xFE9
  7024                           wreg	equ	0xFE8
  7025                           postdec1	equ	0xFE5
  7026                           fsr1h	equ	0xFE2
  7027                           fsr1l	equ	0xFE1
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           plusw2	equ	0xFDB
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  7036 ;; Defined at:
  7037 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;		None
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;		None
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  1    wreg      enum E7019
  7044 ;; Registers used:
  7045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7051 ;;      Params:         0       0       0       0       0       0       0
  7052 ;;      Locals:         0       0       0       0       0       0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0
  7054 ;;      Totals:         0       0       0       0       0       0       0
  7055 ;;Total ram usage:        0 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    2
  7058 ;; This function calls:
  7059 ;;		i2_do_I2C_SEND_RESTART
  7060 ;;		i2_do_I2C_SEND_STOP
  7061 ;;		i2_returnReset
  7062 ;;		i2_returnStop
  7063 ;; This function is called by:
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           	psect	text67
  7068  000CAA                     __ptext67:
  7069                           	opt stack 0
  7070  000CAA                     i2_do_I2C_DO_ADDRESS_NACK:
  7071                           	opt stack 17
  7072                           
  7073                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  7074                           
  7075                           ;incstack = 0
  7076  000CAA  0100               	movlb	0	; () banked
  7077  000CAC  97B6               	bcf	_i2c_status& (0+255),3,b
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  7081  000CAE  0E02               	movlw	2
  7082  000CB0  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  7083                           
  7084                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7085  000CB2  D006               	goto	i2l161
  7086  000CB4                     
  7087                           ;i2c_master.c: 386: case i2c_restart_write:
  7088                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  7089                           
  7090                           ; BSR set to: 0
  7091                           
  7092                           ; BSR set to: 0
  7093  000CB4  EC99  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7094  000CB8  0012               	return	
  7095  000CBA                     
  7096                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  7097  000CBA  EC95  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7098                           
  7099                           ;i2c_master.c: 390: }
  7100  000CBE  0012               	return	
  7101  000CC0                     i2l161:
  7102  000CC0  C0D2  F026         	movff	_i2c_status+28,i2returnReset@p
  7103  000CC4  C0D3  F027         	movff	_i2c_status+29,i2returnReset@p+1
  7104  000CC8  EE20  F0C6         	lfsr	2,_i2c_status+16
  7105  000CCC  D801               	call	i2u139_48
  7106  000CCE  D00A               	goto	i2u139_49
  7107  000CD0                     i2u139_48:
  7108  000CD0  0005               	push	
  7109  000CD2  6EFA               	movwf	pclath,c
  7110  000CD4  50DE               	movf	postinc2,w,c
  7111  000CD6  6EFD               	movwf	tosl,c
  7112  000CD8  50DE               	movf	postinc2,w,c
  7113  000CDA  6EFE               	movwf	tosh,c
  7114  000CDC  50F8               	movf	tblptru,w,c
  7115  000CDE  6EFF               	movwf	tosu,c
  7116  000CE0  50FA               	movf	pclath,w,c
  7117  000CE2  0012               	return		;indir
  7118  000CE4                     i2u139_49:
  7119                           
  7120                           ; Switch size 1, requested type "space"
  7121                           ; Number of cases is 2, Range of values is 2 to 3
  7122                           ; switch strategies available:
  7123                           ; Name         Instructions Cycles
  7124                           ; simple_byte            7     4 (average)
  7125                           ;	Chosen strategy is simple_byte
  7126  000CE4  0A02               	xorlw	2	; case 2
  7127  000CE6  B4D8               	btfsc	status,2,c
  7128  000CE8  D7E5               	goto	i2l162
  7129  000CEA  0A01               	xorlw	1	; case 3
  7130  000CEC  B4D8               	btfsc	status,2,c
  7131  000CEE  D7E2               	goto	i2l162
  7132  000CF0  D7E4               	goto	i2l165
  7133  000CF2                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  7134                           	opt stack 0
  7135                           tosu	equ	0xFFF
  7136                           tosh	equ	0xFFE
  7137                           tosl	equ	0xFFD
  7138                           pclatu	equ	0xFFB
  7139                           pclath	equ	0xFFA
  7140                           tblptru	equ	0xFF8
  7141                           tblptrh	equ	0xFF7
  7142                           tblptrl	equ	0xFF6
  7143                           tablat	equ	0xFF5
  7144                           prodh	equ	0xFF4
  7145                           prodl	equ	0xFF3
  7146                           intcon	equ	0xFF2
  7147                           intcon2	equ	0xFF1
  7148                           postinc0	equ	0xFEE
  7149                           plusw0	equ	0xFEB
  7150                           fsr0h	equ	0xFEA
  7151                           fsr0l	equ	0xFE9
  7152                           wreg	equ	0xFE8
  7153                           postdec1	equ	0xFE5
  7154                           fsr1h	equ	0xFE2
  7155                           fsr1l	equ	0xFE1
  7156                           indf2	equ	0xFDF
  7157                           postinc2	equ	0xFDE
  7158                           plusw2	equ	0xFDB
  7159                           fsr2h	equ	0xFDA
  7160                           fsr2l	equ	0xFD9
  7161                           status	equ	0xFD8
  7162                           
  7163 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  7164 ;; Defined at:
  7165 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;		None
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;		None
  7170 ;; Return value:  Size  Location     Type
  7171 ;;                  1    wreg      enum E7019
  7172 ;; Registers used:
  7173 ;;		wreg, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7179 ;;      Params:         0       0       0       0       0       0       0
  7180 ;;      Locals:         0       0       0       0       0       0       0
  7181 ;;      Temps:          0       0       0       0       0       0       0
  7182 ;;      Totals:         0       0       0       0       0       0       0
  7183 ;;Total ram usage:        0 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:    1
  7186 ;; This function calls:
  7187 ;;		i2_i2c1_driver_sendNACK
  7188 ;; This function is called by:
  7189 ;;		i2_do_I2C_RX
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text68
  7194  001112                     __ptext68:
  7195                           	opt stack 0
  7196  001112                     i2_do_I2C_DO_NACK_RESTART:
  7197                           	opt stack 17
  7198                           
  7199                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  7200                           
  7201                           ;incstack = 0
  7202  001112  ECAF  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7203                           
  7204                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  7205  001116  0E09               	movlw	9
  7206  001118  0012               	return	
  7207  00111A                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  7208                           	opt stack 0
  7209                           tosu	equ	0xFFF
  7210                           tosh	equ	0xFFE
  7211                           tosl	equ	0xFFD
  7212                           pclatu	equ	0xFFB
  7213                           pclath	equ	0xFFA
  7214                           tblptru	equ	0xFF8
  7215                           tblptrh	equ	0xFF7
  7216                           tblptrl	equ	0xFF6
  7217                           tablat	equ	0xFF5
  7218                           prodh	equ	0xFF4
  7219                           prodl	equ	0xFF3
  7220                           intcon	equ	0xFF2
  7221                           intcon2	equ	0xFF1
  7222                           postinc0	equ	0xFEE
  7223                           plusw0	equ	0xFEB
  7224                           fsr0h	equ	0xFEA
  7225                           fsr0l	equ	0xFE9
  7226                           wreg	equ	0xFE8
  7227                           postdec1	equ	0xFE5
  7228                           fsr1h	equ	0xFE2
  7229                           fsr1l	equ	0xFE1
  7230                           indf2	equ	0xFDF
  7231                           postinc2	equ	0xFDE
  7232                           plusw2	equ	0xFDB
  7233                           fsr2h	equ	0xFDA
  7234                           fsr2l	equ	0xFD9
  7235                           status	equ	0xFD8
  7236                           
  7237 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  7238 ;; Defined at:
  7239 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;		None
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      enum E7019
  7246 ;; Registers used:
  7247 ;;		wreg, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7253 ;;      Params:         0       0       0       0       0       0       0
  7254 ;;      Locals:         0       0       0       0       0       0       0
  7255 ;;      Temps:          0       0       0       0       0       0       0
  7256 ;;      Totals:         0       0       0       0       0       0       0
  7257 ;;Total ram usage:        0 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    1
  7260 ;; This function calls:
  7261 ;;		i2_i2c1_driver_sendNACK
  7262 ;; This function is called by:
  7263 ;;		i2_do_I2C_RX
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text69
  7268  00111A                     __ptext69:
  7269                           	opt stack 0
  7270  00111A                     i2_do_I2C_DO_NACK_STOP:
  7271                           	opt stack 17
  7272                           
  7273                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  7274                           
  7275                           ;incstack = 0
  7276  00111A  ECAF  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7277                           
  7278                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  7279  00111E  0E0A               	movlw	10
  7280  001120  0012               	return	
  7281  001122                     __end_ofi2_do_I2C_DO_NACK_STOP:
  7282                           	opt stack 0
  7283                           tosu	equ	0xFFF
  7284                           tosh	equ	0xFFE
  7285                           tosl	equ	0xFFD
  7286                           pclatu	equ	0xFFB
  7287                           pclath	equ	0xFFA
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           intcon2	equ	0xFF1
  7296                           postinc0	equ	0xFEE
  7297                           plusw0	equ	0xFEB
  7298                           fsr0h	equ	0xFEA
  7299                           fsr0l	equ	0xFE9
  7300                           wreg	equ	0xFE8
  7301                           postdec1	equ	0xFE5
  7302                           fsr1h	equ	0xFE2
  7303                           fsr1l	equ	0xFE1
  7304                           indf2	equ	0xFDF
  7305                           postinc2	equ	0xFDE
  7306                           plusw2	equ	0xFDB
  7307                           fsr2h	equ	0xFDA
  7308                           fsr2l	equ	0xFD9
  7309                           status	equ	0xFD8
  7310                           
  7311 ;; *************** function i2_do_I2C_DO_ACK *****************
  7312 ;; Defined at:
  7313 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;		None
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;		None
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  1    wreg      enum E7019
  7320 ;; Registers used:
  7321 ;;		wreg, cstack
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7327 ;;      Params:         0       0       0       0       0       0       0
  7328 ;;      Locals:         0       0       0       0       0       0       0
  7329 ;;      Temps:          0       0       0       0       0       0       0
  7330 ;;      Totals:         0       0       0       0       0       0       0
  7331 ;;Total ram usage:        0 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:    1
  7334 ;; This function calls:
  7335 ;;		i2_i2c1_driver_sendACK
  7336 ;; This function is called by:
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           	psect	text70
  7341  001122                     __ptext70:
  7342                           	opt stack 0
  7343  001122                     i2_do_I2C_DO_ACK:
  7344                           	opt stack 18
  7345                           
  7346                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  7347                           
  7348                           ;incstack = 0
  7349  001122  ECB2  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  7350                           
  7351                           ;i2c_master.c: 362: return I2C_RCEN;
  7352  001126  0E05               	movlw	5
  7353  001128  0012               	return	
  7354  00112A                     __end_ofi2_do_I2C_DO_ACK:
  7355                           	opt stack 0
  7356                           tosu	equ	0xFFF
  7357                           tosh	equ	0xFFE
  7358                           tosl	equ	0xFFD
  7359                           pclatu	equ	0xFFB
  7360                           pclath	equ	0xFFA
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           intcon	equ	0xFF2
  7368                           intcon2	equ	0xFF1
  7369                           postinc0	equ	0xFEE
  7370                           plusw0	equ	0xFEB
  7371                           fsr0h	equ	0xFEA
  7372                           fsr0l	equ	0xFE9
  7373                           wreg	equ	0xFE8
  7374                           postdec1	equ	0xFE5
  7375                           fsr1h	equ	0xFE2
  7376                           fsr1l	equ	0xFE1
  7377                           indf2	equ	0xFDF
  7378                           postinc2	equ	0xFDE
  7379                           plusw2	equ	0xFDB
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384 ;; *************** function i2_do_I2C_RCEN *****************
  7385 ;; Defined at:
  7386 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;		None
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;		None
  7391 ;; Return value:  Size  Location     Type
  7392 ;;                  1    wreg      enum E7019
  7393 ;; Registers used:
  7394 ;;		wreg, cstack
  7395 ;; Tracked objects:
  7396 ;;		On entry : 0/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7400 ;;      Params:         0       0       0       0       0       0       0
  7401 ;;      Locals:         0       0       0       0       0       0       0
  7402 ;;      Temps:          0       0       0       0       0       0       0
  7403 ;;      Totals:         0       0       0       0       0       0       0
  7404 ;;Total ram usage:        0 bytes
  7405 ;; Hardware stack levels used:    1
  7406 ;; Hardware stack levels required when called:    1
  7407 ;; This function calls:
  7408 ;;		i2_i2c1_driver_startRX
  7409 ;; This function is called by:
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           	psect	text71
  7414  0010A4                     __ptext71:
  7415                           	opt stack 0
  7416  0010A4                     i2_do_I2C_RCEN:
  7417                           	opt stack 18
  7418                           
  7419                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  7420                           
  7421                           ;incstack = 0
  7422  0010A4  0100               	movlb	0	; () banked
  7423  0010A6  97B6               	bcf	_i2c_status& (0+255),3,b
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;i2c_master.c: 355: i2c1_driver_startRX();
  7427  0010A8  ECD0  F008         	call	i2_i2c1_driver_startRX	;wreg free
  7428                           
  7429                           ;i2c_master.c: 356: return I2C_RX;
  7430  0010AC  0E04               	movlw	4
  7431  0010AE  0012               	return	
  7432  0010B0                     __end_ofi2_do_I2C_RCEN:
  7433                           	opt stack 0
  7434                           tosu	equ	0xFFF
  7435                           tosh	equ	0xFFE
  7436                           tosl	equ	0xFFD
  7437                           pclatu	equ	0xFFB
  7438                           pclath	equ	0xFFA
  7439                           tblptru	equ	0xFF8
  7440                           tblptrh	equ	0xFF7
  7441                           tblptrl	equ	0xFF6
  7442                           tablat	equ	0xFF5
  7443                           prodh	equ	0xFF4
  7444                           prodl	equ	0xFF3
  7445                           intcon	equ	0xFF2
  7446                           intcon2	equ	0xFF1
  7447                           postinc0	equ	0xFEE
  7448                           plusw0	equ	0xFEB
  7449                           fsr0h	equ	0xFEA
  7450                           fsr0l	equ	0xFE9
  7451                           wreg	equ	0xFE8
  7452                           postdec1	equ	0xFE5
  7453                           fsr1h	equ	0xFE2
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           plusw2	equ	0xFDB
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  7463 ;; Defined at:
  7464 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;		None
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;		None
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  1    wreg      enum E7019
  7471 ;; Registers used:
  7472 ;;		wreg, status,2, status,0, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7478 ;;      Params:         0       0       0       0       0       0       0
  7479 ;;      Locals:         0       0       0       0       0       0       0
  7480 ;;      Temps:          0       0       0       0       0       0       0
  7481 ;;      Totals:         0       0       0       0       0       0       0
  7482 ;;Total ram usage:        0 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:    1
  7485 ;; This function calls:
  7486 ;;		i2_i2c1_driver_TXData
  7487 ;; This function is called by:
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           	psect	text72
  7492  000FD8                     __ptext72:
  7493                           	opt stack 0
  7494  000FD8                     i2_do_I2C_SEND_ADR_WRITE:
  7495                           	opt stack 18
  7496                           
  7497                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  7498                           
  7499                           ;incstack = 0
  7500  000FD8  0100               	movlb	0	; () banked
  7501  000FDA  87B6               	bsf	_i2c_status& (0+255),3,b
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  7505  000FDC  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  7506  000FDE  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  7507  000FE0  ECA5  F008         	call	i2_i2c1_driver_TXData
  7508                           
  7509                           ;i2c_master.c: 349: return I2C_TX;
  7510  000FE4  0E03               	movlw	3
  7511  000FE6  0012               	return	
  7512  000FE8                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  7513                           	opt stack 0
  7514                           tosu	equ	0xFFF
  7515                           tosh	equ	0xFFE
  7516                           tosl	equ	0xFFD
  7517                           pclatu	equ	0xFFB
  7518                           pclath	equ	0xFFA
  7519                           tblptru	equ	0xFF8
  7520                           tblptrh	equ	0xFF7
  7521                           tblptrl	equ	0xFF6
  7522                           tablat	equ	0xFF5
  7523                           prodh	equ	0xFF4
  7524                           prodl	equ	0xFF3
  7525                           intcon	equ	0xFF2
  7526                           intcon2	equ	0xFF1
  7527                           postinc0	equ	0xFEE
  7528                           plusw0	equ	0xFEB
  7529                           fsr0h	equ	0xFEA
  7530                           fsr0l	equ	0xFE9
  7531                           wreg	equ	0xFE8
  7532                           postdec1	equ	0xFE5
  7533                           fsr1h	equ	0xFE2
  7534                           fsr1l	equ	0xFE1
  7535                           indf2	equ	0xFDF
  7536                           postinc2	equ	0xFDE
  7537                           plusw2	equ	0xFDB
  7538                           fsr2h	equ	0xFDA
  7539                           fsr2l	equ	0xFD9
  7540                           status	equ	0xFD8
  7541                           
  7542 ;; *************** function i2_do_I2C_SEND_INITIAL_READ *****************
  7543 ;; Defined at:
  7544 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;		None
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;		None
  7549 ;; Return value:  Size  Location     Type
  7550 ;;                  1    wreg      enum E7019
  7551 ;; Registers used:
  7552 ;;		wreg, status,2, status,0, cstack
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7558 ;;      Params:         0       0       0       0       0       0       0
  7559 ;;      Locals:         0       0       0       0       0       0       0
  7560 ;;      Temps:          0       0       0       0       0       0       0
  7561 ;;      Totals:         0       0       0       0       0       0       0
  7562 ;;Total ram usage:        0 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:    1
  7565 ;; This function calls:
  7566 ;;		i2_i2c1_driver_TXData
  7567 ;; This function is called by:
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           	psect	text73
  7572  000FE8                     __ptext73:
  7573                           	opt stack 0
  7574  000FE8                     i2_do_I2C_SEND_INITIAL_READ:
  7575                           	opt stack 18
  7576                           
  7577                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  7578                           
  7579                           ;incstack = 0
  7580  000FE8  0100               	movlb	0	; () banked
  7581  000FEA  87B6               	bsf	_i2c_status& (0+255),3,b
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  7585  000FEC  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  7586  000FEE  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  7587  000FF0  ECA5  F008         	call	i2_i2c1_driver_TXData
  7588                           
  7589                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  7590  000FF4  0E11               	movlw	17
  7591  000FF6  0012               	return	
  7592  000FF8                     __end_ofi2_do_I2C_SEND_INITIAL_READ:
  7593                           	opt stack 0
  7594                           tosu	equ	0xFFF
  7595                           tosh	equ	0xFFE
  7596                           tosl	equ	0xFFD
  7597                           pclatu	equ	0xFFB
  7598                           pclath	equ	0xFFA
  7599                           tblptru	equ	0xFF8
  7600                           tblptrh	equ	0xFF7
  7601                           tblptrl	equ	0xFF6
  7602                           tablat	equ	0xFF5
  7603                           prodh	equ	0xFF4
  7604                           prodl	equ	0xFF3
  7605                           intcon	equ	0xFF2
  7606                           intcon2	equ	0xFF1
  7607                           postinc0	equ	0xFEE
  7608                           plusw0	equ	0xFEB
  7609                           fsr0h	equ	0xFEA
  7610                           fsr0l	equ	0xFE9
  7611                           wreg	equ	0xFE8
  7612                           postdec1	equ	0xFE5
  7613                           fsr1h	equ	0xFE2
  7614                           fsr1l	equ	0xFE1
  7615                           indf2	equ	0xFDF
  7616                           postinc2	equ	0xFDE
  7617                           plusw2	equ	0xFDB
  7618                           fsr2h	equ	0xFDA
  7619                           fsr2l	equ	0xFD9
  7620                           status	equ	0xFD8
  7621                           
  7622 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  7623 ;; Defined at:
  7624 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;		None
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;		None
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      enum E7019
  7631 ;; Registers used:
  7632 ;;		wreg, status,0, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7638 ;;      Params:         0       0       0       0       0       0       0
  7639 ;;      Locals:         0       0       0       0       0       0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0
  7641 ;;      Totals:         0       0       0       0       0       0       0
  7642 ;;Total ram usage:        0 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    1
  7645 ;; This function calls:
  7646 ;;		i2_i2c1_driver_TXData
  7647 ;; This function is called by:
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           	psect	text74
  7652  000FF8                     __ptext74:
  7653                           	opt stack 0
  7654  000FF8                     i2_do_I2C_SEND_ADR_READ:
  7655                           	opt stack 18
  7656                           
  7657                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  7658                           
  7659                           ;incstack = 0
  7660  000FF8  0100               	movlb	0	; () banked
  7661  000FFA  87B6               	bsf	_i2c_status& (0+255),3,b
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  7665  000FFC  80D8               	bsf	status,0,c
  7666  000FFE  35B7               	rlcf	(_i2c_status+1)& (0+255),w,b
  7667  001000  ECA5  F008         	call	i2_i2c1_driver_TXData
  7668                           
  7669                           ;i2c_master.c: 325: return I2C_RCEN;
  7670  001004  0E05               	movlw	5
  7671  001006  0012               	return	
  7672  001008                     __end_ofi2_do_I2C_SEND_ADR_READ:
  7673                           	opt stack 0
  7674                           tosu	equ	0xFFF
  7675                           tosh	equ	0xFFE
  7676                           tosl	equ	0xFFD
  7677                           pclatu	equ	0xFFB
  7678                           pclath	equ	0xFFA
  7679                           tblptru	equ	0xFF8
  7680                           tblptrh	equ	0xFF7
  7681                           tblptrl	equ	0xFF6
  7682                           tablat	equ	0xFF5
  7683                           prodh	equ	0xFF4
  7684                           prodl	equ	0xFF3
  7685                           intcon	equ	0xFF2
  7686                           intcon2	equ	0xFF1
  7687                           postinc0	equ	0xFEE
  7688                           plusw0	equ	0xFEB
  7689                           fsr0h	equ	0xFEA
  7690                           fsr0l	equ	0xFE9
  7691                           wreg	equ	0xFE8
  7692                           postdec1	equ	0xFE5
  7693                           fsr1h	equ	0xFE2
  7694                           fsr1l	equ	0xFE1
  7695                           indf2	equ	0xFDF
  7696                           postinc2	equ	0xFDE
  7697                           plusw2	equ	0xFDB
  7698                           fsr2h	equ	0xFDA
  7699                           fsr2l	equ	0xFD9
  7700                           status	equ	0xFD8
  7701                           
  7702 ;; *************** function i2_do_I2C_SEND_STOP *****************
  7703 ;; Defined at:
  7704 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;		None
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;		None
  7709 ;; Return value:  Size  Location     Type
  7710 ;;                  1    wreg      enum E7019
  7711 ;; Registers used:
  7712 ;;		wreg, cstack
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7718 ;;      Params:         0       0       0       0       0       0       0
  7719 ;;      Locals:         0       0       0       0       0       0       0
  7720 ;;      Temps:          0       0       0       0       0       0       0
  7721 ;;      Totals:         0       0       0       0       0       0       0
  7722 ;;Total ram usage:        0 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    1
  7725 ;; This function calls:
  7726 ;;		i2_i2c1_driver_stop
  7727 ;; This function is called by:
  7728 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7729 ;;		i2_do_I2C_TX
  7730 ;;		i2_do_I2C_TX_EMPTY
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text75
  7735  00112A                     __ptext75:
  7736                           	opt stack 0
  7737  00112A                     i2_do_I2C_SEND_STOP:
  7738                           	opt stack 17
  7739                           
  7740                           ;i2c_master.c: 316: i2c1_driver_stop();
  7741                           
  7742                           ;incstack = 0
  7743  00112A  ECD6  F008         	call	i2_i2c1_driver_stop	;wreg free
  7744                           
  7745                           ;i2c_master.c: 317: return I2C_IDLE;
  7746  00112E  0E00               	movlw	0
  7747  001130  0012               	return	
  7748  001132                     __end_ofi2_do_I2C_SEND_STOP:
  7749                           	opt stack 0
  7750                           tosu	equ	0xFFF
  7751                           tosh	equ	0xFFE
  7752                           tosl	equ	0xFFD
  7753                           pclatu	equ	0xFFB
  7754                           pclath	equ	0xFFA
  7755                           tblptru	equ	0xFF8
  7756                           tblptrh	equ	0xFF7
  7757                           tblptrl	equ	0xFF6
  7758                           tablat	equ	0xFF5
  7759                           prodh	equ	0xFF4
  7760                           prodl	equ	0xFF3
  7761                           intcon	equ	0xFF2
  7762                           intcon2	equ	0xFF1
  7763                           postinc0	equ	0xFEE
  7764                           plusw0	equ	0xFEB
  7765                           fsr0h	equ	0xFEA
  7766                           fsr0l	equ	0xFE9
  7767                           wreg	equ	0xFE8
  7768                           postdec1	equ	0xFE5
  7769                           fsr1h	equ	0xFE2
  7770                           fsr1l	equ	0xFE1
  7771                           indf2	equ	0xFDF
  7772                           postinc2	equ	0xFDE
  7773                           plusw2	equ	0xFDB
  7774                           fsr2h	equ	0xFDA
  7775                           fsr2l	equ	0xFD9
  7776                           status	equ	0xFD8
  7777                           
  7778 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  7779 ;; Defined at:
  7780 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;		None
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;		None
  7785 ;; Return value:  Size  Location     Type
  7786 ;;                  1    wreg      enum E7019
  7787 ;; Registers used:
  7788 ;;		wreg, cstack
  7789 ;; Tracked objects:
  7790 ;;		On entry : 0/0
  7791 ;;		On exit  : 0/0
  7792 ;;		Unchanged: 0/0
  7793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7794 ;;      Params:         0       0       0       0       0       0       0
  7795 ;;      Locals:         0       0       0       0       0       0       0
  7796 ;;      Temps:          0       0       0       0       0       0       0
  7797 ;;      Totals:         0       0       0       0       0       0       0
  7798 ;;Total ram usage:        0 bytes
  7799 ;; Hardware stack levels used:    1
  7800 ;; Hardware stack levels required when called:    1
  7801 ;; This function calls:
  7802 ;;		i2_i2c1_driver_restart
  7803 ;; This function is called by:
  7804 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7805 ;;		i2_do_I2C_TX_EMPTY
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text76
  7810  001132                     __ptext76:
  7811                           	opt stack 0
  7812  001132                     i2_do_I2C_SEND_RESTART:
  7813                           	opt stack 17
  7814                           
  7815                           ;i2c_master.c: 310: i2c1_driver_restart();
  7816                           
  7817                           ;incstack = 0
  7818  001132  ECD8  F008         	call	i2_i2c1_driver_restart	;wreg free
  7819                           
  7820                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  7821  001136  0E01               	movlw	1
  7822  001138  0012               	return	
  7823  00113A                     __end_ofi2_do_I2C_SEND_RESTART:
  7824                           	opt stack 0
  7825                           tosu	equ	0xFFF
  7826                           tosh	equ	0xFFE
  7827                           tosl	equ	0xFFD
  7828                           pclatu	equ	0xFFB
  7829                           pclath	equ	0xFFA
  7830                           tblptru	equ	0xFF8
  7831                           tblptrh	equ	0xFF7
  7832                           tblptrl	equ	0xFF6
  7833                           tablat	equ	0xFF5
  7834                           prodh	equ	0xFF4
  7835                           prodl	equ	0xFF3
  7836                           intcon	equ	0xFF2
  7837                           intcon2	equ	0xFF1
  7838                           postinc0	equ	0xFEE
  7839                           plusw0	equ	0xFEB
  7840                           fsr0h	equ	0xFEA
  7841                           fsr0l	equ	0xFE9
  7842                           wreg	equ	0xFE8
  7843                           postdec1	equ	0xFE5
  7844                           fsr1h	equ	0xFE2
  7845                           fsr1l	equ	0xFE1
  7846                           indf2	equ	0xFDF
  7847                           postinc2	equ	0xFDE
  7848                           plusw2	equ	0xFDB
  7849                           fsr2h	equ	0xFDA
  7850                           fsr2l	equ	0xFD9
  7851                           status	equ	0xFD8
  7852                           
  7853 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  7854 ;; Defined at:
  7855 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  7856 ;; Parameters:    Size  Location     Type
  7857 ;;		None
  7858 ;; Auto vars:     Size  Location     Type
  7859 ;;		None
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  1    wreg      enum E7019
  7862 ;; Registers used:
  7863 ;;		wreg, cstack
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7869 ;;      Params:         0       0       0       0       0       0       0
  7870 ;;      Locals:         0       0       0       0       0       0       0
  7871 ;;      Temps:          0       0       0       0       0       0       0
  7872 ;;      Totals:         0       0       0       0       0       0       0
  7873 ;;Total ram usage:        0 bytes
  7874 ;; Hardware stack levels used:    1
  7875 ;; Hardware stack levels required when called:    1
  7876 ;; This function calls:
  7877 ;;		i2_i2c1_driver_restart
  7878 ;; This function is called by:
  7879 ;;		i2_do_I2C_TX
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	text77
  7884  00113A                     __ptext77:
  7885                           	opt stack 0
  7886  00113A                     i2_do_I2C_SEND_RESTART_WRITE:
  7887                           	opt stack 17
  7888                           
  7889                           ;i2c_master.c: 304: i2c1_driver_restart();
  7890                           
  7891                           ;incstack = 0
  7892  00113A  ECD8  F008         	call	i2_i2c1_driver_restart	;wreg free
  7893                           
  7894                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  7895  00113E  0E02               	movlw	2
  7896  001140  0012               	return	
  7897  001142                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  7898                           	opt stack 0
  7899                           tosu	equ	0xFFF
  7900                           tosh	equ	0xFFE
  7901                           tosl	equ	0xFFD
  7902                           pclatu	equ	0xFFB
  7903                           pclath	equ	0xFFA
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           intcon	equ	0xFF2
  7911                           intcon2	equ	0xFF1
  7912                           postinc0	equ	0xFEE
  7913                           plusw0	equ	0xFEB
  7914                           fsr0h	equ	0xFEA
  7915                           fsr0l	equ	0xFE9
  7916                           wreg	equ	0xFE8
  7917                           postdec1	equ	0xFE5
  7918                           fsr1h	equ	0xFE2
  7919                           fsr1l	equ	0xFE1
  7920                           indf2	equ	0xFDF
  7921                           postinc2	equ	0xFDE
  7922                           plusw2	equ	0xFDB
  7923                           fsr2h	equ	0xFDA
  7924                           fsr2l	equ	0xFD9
  7925                           status	equ	0xFD8
  7926                           
  7927 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  7928 ;; Defined at:
  7929 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      enum E7019
  7936 ;; Registers used:
  7937 ;;		wreg, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7943 ;;      Params:         0       0       0       0       0       0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0
  7946 ;;      Totals:         0       0       0       0       0       0       0
  7947 ;;Total ram usage:        0 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    1
  7950 ;; This function calls:
  7951 ;;		i2_i2c1_driver_restart
  7952 ;; This function is called by:
  7953 ;;		i2_do_I2C_TX
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           	psect	text78
  7958  001142                     __ptext78:
  7959                           	opt stack 0
  7960  001142                     i2_do_I2C_SEND_RESTART_READ:
  7961                           	opt stack 17
  7962                           
  7963                           ;i2c_master.c: 298: i2c1_driver_restart();
  7964                           
  7965                           ;incstack = 0
  7966  001142  ECD8  F008         	call	i2_i2c1_driver_restart	;wreg free
  7967                           
  7968                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  7969  001146  0E01               	movlw	1
  7970  001148  0012               	return	
  7971  00114A                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  7972                           	opt stack 0
  7973                           tosu	equ	0xFFF
  7974                           tosh	equ	0xFFE
  7975                           tosl	equ	0xFFD
  7976                           pclatu	equ	0xFFB
  7977                           pclath	equ	0xFFA
  7978                           tblptru	equ	0xFF8
  7979                           tblptrh	equ	0xFF7
  7980                           tblptrl	equ	0xFF6
  7981                           tablat	equ	0xFF5
  7982                           prodh	equ	0xFF4
  7983                           prodl	equ	0xFF3
  7984                           intcon	equ	0xFF2
  7985                           intcon2	equ	0xFF1
  7986                           postinc0	equ	0xFEE
  7987                           plusw0	equ	0xFEB
  7988                           fsr0h	equ	0xFEA
  7989                           fsr0l	equ	0xFE9
  7990                           wreg	equ	0xFE8
  7991                           postdec1	equ	0xFE5
  7992                           fsr1h	equ	0xFE2
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           plusw2	equ	0xFDB
  7997                           fsr2h	equ	0xFDA
  7998                           fsr2l	equ	0xFD9
  7999                           status	equ	0xFD8
  8000                           
  8001 ;; *************** function i2_do_I2C_IDLE *****************
  8002 ;; Defined at:
  8003 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;		None
  8006 ;; Auto vars:     Size  Location     Type
  8007 ;;		None
  8008 ;; Return value:  Size  Location     Type
  8009 ;;                  1    wreg      enum E7019
  8010 ;; Registers used:
  8011 ;;		wreg, status,2
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8017 ;;      Params:         0       0       0       0       0       0       0
  8018 ;;      Locals:         0       0       0       0       0       0       0
  8019 ;;      Temps:          0       0       0       0       0       0       0
  8020 ;;      Totals:         0       0       0       0       0       0       0
  8021 ;;Total ram usage:        0 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; This function calls:
  8024 ;;		Nothing
  8025 ;; This function is called by:
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text79
  8030  0010B0                     __ptext79:
  8031                           	opt stack 0
  8032  0010B0                     i2_do_I2C_IDLE:
  8033                           	opt stack 19
  8034                           
  8035                           ;i2c_master.c: 291: i2c_status.busy = 0;
  8036                           
  8037                           ;incstack = 0
  8038  0010B0  0100               	movlb	0	; () banked
  8039  0010B2  91B6               	bcf	_i2c_status& (0+255),0,b
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  8043  0010B4  0E00               	movlw	0
  8044  0010B6  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  8045                           
  8046                           ; BSR set to: 0
  8047                           ;i2c_master.c: 293: return I2C_RESET;
  8048  0010B8  0E0E               	movlw	14
  8049  0010BA  0012               	return	
  8050  0010BC                     __end_ofi2_do_I2C_IDLE:
  8051                           	opt stack 0
  8052                           tosu	equ	0xFFF
  8053                           tosh	equ	0xFFE
  8054                           tosl	equ	0xFFD
  8055                           pclatu	equ	0xFFB
  8056                           pclath	equ	0xFFA
  8057                           tblptru	equ	0xFF8
  8058                           tblptrh	equ	0xFF7
  8059                           tblptrl	equ	0xFF6
  8060                           tablat	equ	0xFF5
  8061                           prodh	equ	0xFF4
  8062                           prodl	equ	0xFF3
  8063                           intcon	equ	0xFF2
  8064                           intcon2	equ	0xFF1
  8065                           postinc0	equ	0xFEE
  8066                           plusw0	equ	0xFEB
  8067                           fsr0h	equ	0xFEA
  8068                           fsr0l	equ	0xFE9
  8069                           wreg	equ	0xFE8
  8070                           postdec1	equ	0xFE5
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           plusw2	equ	0xFDB
  8076                           fsr2h	equ	0xFDA
  8077                           fsr2l	equ	0xFD9
  8078                           status	equ	0xFD8
  8079                           
  8080 ;; *************** function i2_do_I2C_RESET *****************
  8081 ;; Defined at:
  8082 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      enum E7019
  8089 ;; Registers used:
  8090 ;;		wreg, status,2, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8096 ;;      Params:         0       0       0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0
  8099 ;;      Totals:         0       0       0       0       0       0       0
  8100 ;;Total ram usage:        0 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    1
  8103 ;; This function calls:
  8104 ;;		i2_i2c1_driver_resetBus
  8105 ;; This function is called by:
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text80
  8110  001008                     __ptext80:
  8111                           	opt stack 0
  8112  001008                     i2_do_I2C_RESET:
  8113                           	opt stack 18
  8114                           
  8115                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;incstack = 0
  8119  001008  ECDD  F008         	call	i2_i2c1_driver_resetBus	;wreg free
  8120                           
  8121                           ;i2c_master.c: 284: i2c_status.busy = 0;
  8122  00100C  0100               	movlb	0	; () banked
  8123  00100E  91B6               	bcf	_i2c_status& (0+255),0,b
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  8127  001010  0E00               	movlw	0
  8128  001012  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;i2c_master.c: 286: return I2C_RESET;
  8132  001014  0E0E               	movlw	14
  8133  001016  0012               	return	
  8134  001018                     __end_ofi2_do_I2C_RESET:
  8135                           	opt stack 0
  8136                           tosu	equ	0xFFF
  8137                           tosh	equ	0xFFE
  8138                           tosl	equ	0xFFD
  8139                           pclatu	equ	0xFFB
  8140                           pclath	equ	0xFFA
  8141                           tblptru	equ	0xFF8
  8142                           tblptrh	equ	0xFF7
  8143                           tblptrl	equ	0xFF6
  8144                           tablat	equ	0xFF5
  8145                           prodh	equ	0xFF4
  8146                           prodl	equ	0xFF3
  8147                           intcon	equ	0xFF2
  8148                           intcon2	equ	0xFF1
  8149                           postinc0	equ	0xFEE
  8150                           plusw0	equ	0xFEB
  8151                           fsr0h	equ	0xFEA
  8152                           fsr0l	equ	0xFE9
  8153                           wreg	equ	0xFE8
  8154                           postdec1	equ	0xFE5
  8155                           fsr1h	equ	0xFE2
  8156                           fsr1l	equ	0xFE1
  8157                           indf2	equ	0xFDF
  8158                           postinc2	equ	0xFDE
  8159                           plusw2	equ	0xFDB
  8160                           fsr2h	equ	0xFDA
  8161                           fsr2l	equ	0xFD9
  8162                           status	equ	0xFD8
  8163                           
  8164 ;; *************** function i2_do_I2C_TX_REGISTER *****************
  8165 ;; Defined at:
  8166 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;		None
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;		None
  8171 ;; Return value:  Size  Location     Type
  8172 ;;                  1    wreg      enum E7019
  8173 ;; Registers used:
  8174 ;;		wreg, status,2, cstack
  8175 ;; Tracked objects:
  8176 ;;		On entry : 0/0
  8177 ;;		On exit  : 0/0
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8180 ;;      Params:         0       0       0       0       0       0       0
  8181 ;;      Locals:         0       0       0       0       0       0       0
  8182 ;;      Temps:          0       0       0       0       0       0       0
  8183 ;;      Totals:         0       0       0       0       0       0       0
  8184 ;;Total ram usage:        0 bytes
  8185 ;; Hardware stack levels used:    1
  8186 ;; Hardware stack levels required when called:    1
  8187 ;; This function calls:
  8188 ;;		i2_i2c1_driver_TXData
  8189 ;; This function is called by:
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           	psect	text81
  8194  001096                     __ptext81:
  8195                           	opt stack 0
  8196  001096                     i2_do_I2C_TX_REGISTER:
  8197                           	opt stack 18
  8198                           
  8199                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;incstack = 0
  8203  001096  0100               	movlb	0	; () banked
  8204  001098  87B6               	bsf	_i2c_status& (0+255),3,b
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  8208  00109A  51DA               	movf	(_i2c_status+36)& (0+255),w,b
  8209  00109C  ECA5  F008         	call	i2_i2c1_driver_TXData
  8210                           
  8211                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  8212  0010A0  0E07               	movlw	7
  8213  0010A2  0012               	return	
  8214  0010A4                     __end_ofi2_do_I2C_TX_REGISTER:
  8215                           	opt stack 0
  8216                           tosu	equ	0xFFF
  8217                           tosh	equ	0xFFE
  8218                           tosl	equ	0xFFD
  8219                           pclatu	equ	0xFFB
  8220                           pclath	equ	0xFFA
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           prodh	equ	0xFF4
  8226                           prodl	equ	0xFF3
  8227                           intcon	equ	0xFF2
  8228                           intcon2	equ	0xFF1
  8229                           postinc0	equ	0xFEE
  8230                           plusw0	equ	0xFEB
  8231                           fsr0h	equ	0xFEA
  8232                           fsr0l	equ	0xFE9
  8233                           wreg	equ	0xFE8
  8234                           postdec1	equ	0xFE5
  8235                           fsr1h	equ	0xFE2
  8236                           fsr1l	equ	0xFE1
  8237                           indf2	equ	0xFDF
  8238                           postinc2	equ	0xFDE
  8239                           plusw2	equ	0xFDB
  8240                           fsr2h	equ	0xFDA
  8241                           fsr2l	equ	0xFD9
  8242                           status	equ	0xFD8
  8243                           
  8244 ;; *************** function i2_mssp1_setIRQ *****************
  8245 ;; Defined at:
  8246 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;		None
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  1    wreg      void 
  8253 ;; Registers used:
  8254 ;;		None
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8260 ;;      Params:         0       0       0       0       0       0       0
  8261 ;;      Locals:         0       0       0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0
  8263 ;;      Totals:         0       0       0       0       0       0       0
  8264 ;;Total ram usage:        0 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; This function calls:
  8267 ;;		Nothing
  8268 ;; This function is called by:
  8269 ;;		i2_do_I2C_TX_EMPTY
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text82
  8274  001198                     __ptext82:
  8275                           	opt stack 0
  8276  001198                     i2_mssp1_setIRQ:
  8277                           	opt stack 18
  8278                           
  8279                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  8280                           
  8281                           ;incstack = 0
  8282  001198  869E               	bsf	3998,3,c	;volatile
  8283  00119A  0012               	return		;funcret
  8284  00119C                     __end_ofi2_mssp1_setIRQ:
  8285                           	opt stack 0
  8286                           tosu	equ	0xFFF
  8287                           tosh	equ	0xFFE
  8288                           tosl	equ	0xFFD
  8289                           pclatu	equ	0xFFB
  8290                           pclath	equ	0xFFA
  8291                           tblptru	equ	0xFF8
  8292                           tblptrh	equ	0xFF7
  8293                           tblptrl	equ	0xFF6
  8294                           tablat	equ	0xFF5
  8295                           prodh	equ	0xFF4
  8296                           prodl	equ	0xFF3
  8297                           intcon	equ	0xFF2
  8298                           intcon2	equ	0xFF1
  8299                           postinc0	equ	0xFEE
  8300                           plusw0	equ	0xFEB
  8301                           fsr0h	equ	0xFEA
  8302                           fsr0l	equ	0xFE9
  8303                           wreg	equ	0xFE8
  8304                           postdec1	equ	0xFE5
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           plusw2	equ	0xFDB
  8310                           fsr2h	equ	0xFDA
  8311                           fsr2l	equ	0xFD9
  8312                           status	equ	0xFD8
  8313                           
  8314 ;; *************** function i2_i2c1_driver_isNACK *****************
  8315 ;; Defined at:
  8316 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;		None
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;		None
  8321 ;; Return value:  Size  Location     Type
  8322 ;;		None               void
  8323 ;; Registers used:
  8324 ;;		wreg, status,2, status,0
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8330 ;;      Params:         0       0       0       0       0       0       0
  8331 ;;      Locals:         0       0       0       0       0       0       0
  8332 ;;      Temps:          1       0       0       0       0       0       0
  8333 ;;      Totals:         1       0       0       0       0       0       0
  8334 ;;Total ram usage:        1 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; This function calls:
  8337 ;;		Nothing
  8338 ;; This function is called by:
  8339 ;;		i2_do_I2C_TX
  8340 ;;		i2_i2c_ISR
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           	psect	text83
  8345  000F56                     __ptext83:
  8346                           	opt stack 0
  8347  000F56                     i2_i2c1_driver_isNACK:
  8348                           	opt stack 19
  8349                           
  8350                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  8351                           
  8352                           ;incstack = 0
  8353  000F56  50C5               	movf	4037,w,c	;volatile
  8354  000F58  0BBF               	andlw	-65
  8355  000F5A  0940               	iorlw	64
  8356  000F5C  6EC5               	movwf	4037,c	;volatile
  8357  000F5E  38C5               	swapf	4037,w,c	;volatile
  8358  000F60  32E8               	rrcf	wreg,f,c
  8359  000F62  32E8               	rrcf	wreg,f,c
  8360  000F64  0B01               	andlw	1
  8361  000F66  6E26               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
  8362  000F68  3026               	rrcf	??i2_i2c1_driver_isNACK,w,c
  8363  000F6A  0012               	return	
  8364  000F6C                     __end_ofi2_i2c1_driver_isNACK:
  8365                           	opt stack 0
  8366                           tosu	equ	0xFFF
  8367                           tosh	equ	0xFFE
  8368                           tosl	equ	0xFFD
  8369                           pclatu	equ	0xFFB
  8370                           pclath	equ	0xFFA
  8371                           tblptru	equ	0xFF8
  8372                           tblptrh	equ	0xFF7
  8373                           tblptrl	equ	0xFF6
  8374                           tablat	equ	0xFF5
  8375                           prodh	equ	0xFF4
  8376                           prodl	equ	0xFF3
  8377                           intcon	equ	0xFF2
  8378                           intcon2	equ	0xFF1
  8379                           postinc0	equ	0xFEE
  8380                           plusw0	equ	0xFEB
  8381                           fsr0h	equ	0xFEA
  8382                           fsr0l	equ	0xFE9
  8383                           wreg	equ	0xFE8
  8384                           postdec1	equ	0xFE5
  8385                           fsr1h	equ	0xFE2
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           plusw2	equ	0xFDB
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function i2_i2c1_driver_TXData *****************
  8395 ;; Defined at:
  8396 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  d               1    wreg     unsigned char 
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;  d               1    0[COMRAM] unsigned char 
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      void 
  8403 ;; Registers used:
  8404 ;;		wreg
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8410 ;;      Params:         0       0       0       0       0       0       0
  8411 ;;      Locals:         1       0       0       0       0       0       0
  8412 ;;      Temps:          0       0       0       0       0       0       0
  8413 ;;      Totals:         1       0       0       0       0       0       0
  8414 ;;Total ram usage:        1 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; This function calls:
  8417 ;;		Nothing
  8418 ;; This function is called by:
  8419 ;;		i2_do_I2C_SEND_ADR_READ
  8420 ;;		i2_do_I2C_SEND_INITIAL_READ
  8421 ;;		i2_do_I2C_TX_REGISTER
  8422 ;;		i2_do_I2C_SEND_ADR_WRITE
  8423 ;;		i2_do_I2C_TX
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           	psect	text84
  8428  00114A                     __ptext84:
  8429                           	opt stack 0
  8430  00114A                     i2_i2c1_driver_TXData:
  8431                           	opt stack 18
  8432                           
  8433                           ;incstack = 0
  8434                           ;i2i2c1_driver_TXData@d stored from wreg
  8435  00114A  6E26               	movwf	i2i2c1_driver_TXData@d,c
  8436                           
  8437                           ;i2c1_driver.c: 188: SSP1BUF = d;
  8438  00114C  C026  FFC9         	movff	i2i2c1_driver_TXData@d,4041	;volatile
  8439  001150  0012               	return		;funcret
  8440  001152                     __end_ofi2_i2c1_driver_TXData:
  8441                           	opt stack 0
  8442                           tosu	equ	0xFFF
  8443                           tosh	equ	0xFFE
  8444                           tosl	equ	0xFFD
  8445                           pclatu	equ	0xFFB
  8446                           pclath	equ	0xFFA
  8447                           tblptru	equ	0xFF8
  8448                           tblptrh	equ	0xFF7
  8449                           tblptrl	equ	0xFF6
  8450                           tablat	equ	0xFF5
  8451                           prodh	equ	0xFF4
  8452                           prodl	equ	0xFF3
  8453                           intcon	equ	0xFF2
  8454                           intcon2	equ	0xFF1
  8455                           postinc0	equ	0xFEE
  8456                           plusw0	equ	0xFEB
  8457                           fsr0h	equ	0xFEA
  8458                           fsr0l	equ	0xFE9
  8459                           wreg	equ	0xFE8
  8460                           postdec1	equ	0xFE5
  8461                           fsr1h	equ	0xFE2
  8462                           fsr1l	equ	0xFE1
  8463                           indf2	equ	0xFDF
  8464                           postinc2	equ	0xFDE
  8465                           plusw2	equ	0xFDB
  8466                           fsr2h	equ	0xFDA
  8467                           fsr2l	equ	0xFD9
  8468                           status	equ	0xFD8
  8469                           
  8470 ;; *************** function i2_i2c1_driver_getRXData *****************
  8471 ;; Defined at:
  8472 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;		None
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;		None
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      unsigned char 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8486 ;;      Params:         0       0       0       0       0       0       0
  8487 ;;      Locals:         0       0       0       0       0       0       0
  8488 ;;      Temps:          0       0       0       0       0       0       0
  8489 ;;      Totals:         0       0       0       0       0       0       0
  8490 ;;Total ram usage:        0 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; This function calls:
  8493 ;;		Nothing
  8494 ;; This function is called by:
  8495 ;;		i2_do_I2C_RX
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           	psect	text85
  8500  00119C                     __ptext85:
  8501                           	opt stack 0
  8502  00119C                     i2_i2c1_driver_getRXData:
  8503                           	opt stack 18
  8504                           
  8505                           ;i2c1_driver.c: 173: return SSP1BUF;
  8506                           
  8507                           ;incstack = 0
  8508  00119C  50C9               	movf	4041,w,c	;volatile
  8509  00119E  0012               	return	
  8510  0011A0                     __end_ofi2_i2c1_driver_getRXData:
  8511                           	opt stack 0
  8512                           tosu	equ	0xFFF
  8513                           tosh	equ	0xFFE
  8514                           tosl	equ	0xFFD
  8515                           pclatu	equ	0xFFB
  8516                           pclath	equ	0xFFA
  8517                           tblptru	equ	0xFF8
  8518                           tblptrh	equ	0xFF7
  8519                           tblptrl	equ	0xFF6
  8520                           tablat	equ	0xFF5
  8521                           prodh	equ	0xFF4
  8522                           prodl	equ	0xFF3
  8523                           intcon	equ	0xFF2
  8524                           intcon2	equ	0xFF1
  8525                           postinc0	equ	0xFEE
  8526                           plusw0	equ	0xFEB
  8527                           fsr0h	equ	0xFEA
  8528                           fsr0l	equ	0xFE9
  8529                           wreg	equ	0xFE8
  8530                           postdec1	equ	0xFE5
  8531                           fsr1h	equ	0xFE2
  8532                           fsr1l	equ	0xFE1
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           plusw2	equ	0xFDB
  8536                           fsr2h	equ	0xFDA
  8537                           fsr2l	equ	0xFD9
  8538                           status	equ	0xFD8
  8539                           
  8540 ;; *************** function i2_i2c1_driver_sendNACK *****************
  8541 ;; Defined at:
  8542 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;		None
  8545 ;; Auto vars:     Size  Location     Type
  8546 ;;		None
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  1    wreg      void 
  8549 ;; Registers used:
  8550 ;;		None
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8556 ;;      Params:         0       0       0       0       0       0       0
  8557 ;;      Locals:         0       0       0       0       0       0       0
  8558 ;;      Temps:          0       0       0       0       0       0       0
  8559 ;;      Totals:         0       0       0       0       0       0       0
  8560 ;;Total ram usage:        0 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; This function calls:
  8563 ;;		Nothing
  8564 ;; This function is called by:
  8565 ;;		i2_do_I2C_DO_NACK_STOP
  8566 ;;		i2_do_I2C_DO_NACK_RESTART
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           	psect	text86
  8571  00115E                     __ptext86:
  8572                           	opt stack 0
  8573  00115E                     i2_i2c1_driver_sendNACK:
  8574                           	opt stack 17
  8575                           
  8576                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  8577                           
  8578                           ;incstack = 0
  8579  00115E  8AC5               	bsf	4037,5,c	;volatile
  8580                           
  8581                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  8582  001160  88C5               	bsf	4037,4,c	;volatile
  8583  001162  0012               	return		;funcret
  8584  001164                     __end_ofi2_i2c1_driver_sendNACK:
  8585                           	opt stack 0
  8586                           tosu	equ	0xFFF
  8587                           tosh	equ	0xFFE
  8588                           tosl	equ	0xFFD
  8589                           pclatu	equ	0xFFB
  8590                           pclath	equ	0xFFA
  8591                           tblptru	equ	0xFF8
  8592                           tblptrh	equ	0xFF7
  8593                           tblptrl	equ	0xFF6
  8594                           tablat	equ	0xFF5
  8595                           prodh	equ	0xFF4
  8596                           prodl	equ	0xFF3
  8597                           intcon	equ	0xFF2
  8598                           intcon2	equ	0xFF1
  8599                           postinc0	equ	0xFEE
  8600                           plusw0	equ	0xFEB
  8601                           fsr0h	equ	0xFEA
  8602                           fsr0l	equ	0xFE9
  8603                           wreg	equ	0xFE8
  8604                           postdec1	equ	0xFE5
  8605                           fsr1h	equ	0xFE2
  8606                           fsr1l	equ	0xFE1
  8607                           indf2	equ	0xFDF
  8608                           postinc2	equ	0xFDE
  8609                           plusw2	equ	0xFDB
  8610                           fsr2h	equ	0xFDA
  8611                           fsr2l	equ	0xFD9
  8612                           status	equ	0xFD8
  8613                           
  8614 ;; *************** function i2_i2c1_driver_resetBus *****************
  8615 ;; Defined at:
  8616 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;		None
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;		None
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      void 
  8623 ;; Registers used:
  8624 ;;		None
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8630 ;;      Params:         0       0       0       0       0       0       0
  8631 ;;      Locals:         0       0       0       0       0       0       0
  8632 ;;      Temps:          0       0       0       0       0       0       0
  8633 ;;      Totals:         0       0       0       0       0       0       0
  8634 ;;Total ram usage:        0 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; This function calls:
  8637 ;;		Nothing
  8638 ;; This function is called by:
  8639 ;;		i2_do_I2C_RESET
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           	psect	text87
  8644  0011BA                     __ptext87:
  8645                           	opt stack 0
  8646  0011BA                     i2_i2c1_driver_resetBus:
  8647                           	opt stack 18
  8648                           
  8649                           ;incstack = 0
  8650  0011BA  0012               	return		;funcret
  8651  0011BC                     __end_ofi2_i2c1_driver_resetBus:
  8652                           	opt stack 0
  8653                           tosu	equ	0xFFF
  8654                           tosh	equ	0xFFE
  8655                           tosl	equ	0xFFD
  8656                           pclatu	equ	0xFFB
  8657                           pclath	equ	0xFFA
  8658                           tblptru	equ	0xFF8
  8659                           tblptrh	equ	0xFF7
  8660                           tblptrl	equ	0xFF6
  8661                           tablat	equ	0xFF5
  8662                           prodh	equ	0xFF4
  8663                           prodl	equ	0xFF3
  8664                           intcon	equ	0xFF2
  8665                           intcon2	equ	0xFF1
  8666                           postinc0	equ	0xFEE
  8667                           plusw0	equ	0xFEB
  8668                           fsr0h	equ	0xFEA
  8669                           fsr0l	equ	0xFE9
  8670                           wreg	equ	0xFE8
  8671                           postdec1	equ	0xFE5
  8672                           fsr1h	equ	0xFE2
  8673                           fsr1l	equ	0xFE1
  8674                           indf2	equ	0xFDF
  8675                           postinc2	equ	0xFDE
  8676                           plusw2	equ	0xFDB
  8677                           fsr2h	equ	0xFDA
  8678                           fsr2l	equ	0xFD9
  8679                           status	equ	0xFD8
  8680                           
  8681 ;; *************** function i2_i2c1_driver_startRX *****************
  8682 ;; Defined at:
  8683 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;		None
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;		None
  8688 ;; Return value:  Size  Location     Type
  8689 ;;                  1    wreg      void 
  8690 ;; Registers used:
  8691 ;;		None
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8697 ;;      Params:         0       0       0       0       0       0       0
  8698 ;;      Locals:         0       0       0       0       0       0       0
  8699 ;;      Temps:          0       0       0       0       0       0       0
  8700 ;;      Totals:         0       0       0       0       0       0       0
  8701 ;;Total ram usage:        0 bytes
  8702 ;; Hardware stack levels used:    1
  8703 ;; This function calls:
  8704 ;;		Nothing
  8705 ;; This function is called by:
  8706 ;;		i2_do_I2C_RCEN
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           	psect	text88
  8711  0011A0                     __ptext88:
  8712                           	opt stack 0
  8713  0011A0                     i2_i2c1_driver_startRX:
  8714                           	opt stack 18
  8715                           
  8716                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  8717                           
  8718                           ;incstack = 0
  8719  0011A0  86C5               	bsf	4037,3,c	;volatile
  8720  0011A2  0012               	return		;funcret
  8721  0011A4                     __end_ofi2_i2c1_driver_startRX:
  8722                           	opt stack 0
  8723                           tosu	equ	0xFFF
  8724                           tosh	equ	0xFFE
  8725                           tosl	equ	0xFFD
  8726                           pclatu	equ	0xFFB
  8727                           pclath	equ	0xFFA
  8728                           tblptru	equ	0xFF8
  8729                           tblptrh	equ	0xFF7
  8730                           tblptrl	equ	0xFF6
  8731                           tablat	equ	0xFF5
  8732                           prodh	equ	0xFF4
  8733                           prodl	equ	0xFF3
  8734                           intcon	equ	0xFF2
  8735                           intcon2	equ	0xFF1
  8736                           postinc0	equ	0xFEE
  8737                           plusw0	equ	0xFEB
  8738                           fsr0h	equ	0xFEA
  8739                           fsr0l	equ	0xFE9
  8740                           wreg	equ	0xFE8
  8741                           postdec1	equ	0xFE5
  8742                           fsr1h	equ	0xFE2
  8743                           fsr1l	equ	0xFE1
  8744                           indf2	equ	0xFDF
  8745                           postinc2	equ	0xFDE
  8746                           plusw2	equ	0xFDB
  8747                           fsr2h	equ	0xFDA
  8748                           fsr2l	equ	0xFD9
  8749                           status	equ	0xFD8
  8750                           
  8751 ;; *************** function i2_returnReset *****************
  8752 ;; Defined at:
  8753 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;  p               2    0[COMRAM] PTR void 
  8756 ;;		 -> NULL(0), 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;		None
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  1    wreg      enum E6842
  8761 ;; Registers used:
  8762 ;;		wreg
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8768 ;;      Params:         2       0       0       0       0       0       0
  8769 ;;      Locals:         0       0       0       0       0       0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0
  8771 ;;      Totals:         2       0       0       0       0       0       0
  8772 ;;Total ram usage:        2 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           	psect	text89
  8781  0011A4                     __ptext89:
  8782                           	opt stack 0
  8783  0011A4                     i2_returnReset:
  8784                           	opt stack 18
  8785                           
  8786                           ;i2c_master.c: 515: return i2c_reset_link;
  8787                           
  8788                           ;incstack = 0
  8789  0011A4  0E05               	movlw	5
  8790  0011A6  0012               	return	
  8791  0011A8                     __end_ofi2_returnReset:
  8792                           	opt stack 0
  8793                           tosu	equ	0xFFF
  8794                           tosh	equ	0xFFE
  8795                           tosl	equ	0xFFD
  8796                           pclatu	equ	0xFFB
  8797                           pclath	equ	0xFFA
  8798                           tblptru	equ	0xFF8
  8799                           tblptrh	equ	0xFF7
  8800                           tblptrl	equ	0xFF6
  8801                           tablat	equ	0xFF5
  8802                           prodh	equ	0xFF4
  8803                           prodl	equ	0xFF3
  8804                           intcon	equ	0xFF2
  8805                           intcon2	equ	0xFF1
  8806                           postinc0	equ	0xFEE
  8807                           plusw0	equ	0xFEB
  8808                           fsr0h	equ	0xFEA
  8809                           fsr0l	equ	0xFE9
  8810                           wreg	equ	0xFE8
  8811                           postdec1	equ	0xFE5
  8812                           fsr1h	equ	0xFE2
  8813                           fsr1l	equ	0xFE1
  8814                           indf2	equ	0xFDF
  8815                           postinc2	equ	0xFDE
  8816                           plusw2	equ	0xFDB
  8817                           fsr2h	equ	0xFDA
  8818                           fsr2l	equ	0xFD9
  8819                           status	equ	0xFD8
  8820                           
  8821 ;; *************** function i2_returnStop *****************
  8822 ;; Defined at:
  8823 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;  p               2    0[COMRAM] PTR void 
  8826 ;;		 -> NULL(0), 
  8827 ;; Auto vars:     Size  Location     Type
  8828 ;;		None
  8829 ;; Return value:  Size  Location     Type
  8830 ;;                  1    wreg      enum E6842
  8831 ;; Registers used:
  8832 ;;		wreg
  8833 ;; Tracked objects:
  8834 ;;		On entry : 0/0
  8835 ;;		On exit  : 0/0
  8836 ;;		Unchanged: 0/0
  8837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8838 ;;      Params:         2       0       0       0       0       0       0
  8839 ;;      Locals:         0       0       0       0       0       0       0
  8840 ;;      Temps:          0       0       0       0       0       0       0
  8841 ;;      Totals:         2       0       0       0       0       0       0
  8842 ;;Total ram usage:        2 bytes
  8843 ;; Hardware stack levels used:    1
  8844 ;; This function calls:
  8845 ;;		Nothing
  8846 ;; This function is called by:
  8847 ;; This function uses a non-reentrant model
  8848 ;;
  8849                           
  8850                           	psect	text90
  8851  0011A8                     __ptext90:
  8852                           	opt stack 0
  8853  0011A8                     i2_returnStop:
  8854                           	opt stack 18
  8855                           
  8856                           ;i2c_master.c: 510: return i2c_stop;
  8857                           
  8858                           ;incstack = 0
  8859  0011A8  0E01               	movlw	1
  8860  0011AA  0012               	return	
  8861  0011AC                     __end_ofi2_returnStop:
  8862                           	opt stack 0
  8863                           tosu	equ	0xFFF
  8864                           tosh	equ	0xFFE
  8865                           tosl	equ	0xFFD
  8866                           pclatu	equ	0xFFB
  8867                           pclath	equ	0xFFA
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           intcon	equ	0xFF2
  8875                           intcon2	equ	0xFF1
  8876                           postinc0	equ	0xFEE
  8877                           plusw0	equ	0xFEB
  8878                           fsr0h	equ	0xFEA
  8879                           fsr0l	equ	0xFE9
  8880                           wreg	equ	0xFE8
  8881                           postdec1	equ	0xFE5
  8882                           fsr1h	equ	0xFE2
  8883                           fsr1l	equ	0xFE1
  8884                           indf2	equ	0xFDF
  8885                           postinc2	equ	0xFDE
  8886                           plusw2	equ	0xFDB
  8887                           fsr2h	equ	0xFDA
  8888                           fsr2l	equ	0xFD9
  8889                           status	equ	0xFD8
  8890                           
  8891 ;; *************** function i2_i2c1_driver_stop *****************
  8892 ;; Defined at:
  8893 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;		None
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;		None
  8898 ;; Return value:  Size  Location     Type
  8899 ;;                  1    wreg      void 
  8900 ;; Registers used:
  8901 ;;		None
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8907 ;;      Params:         0       0       0       0       0       0       0
  8908 ;;      Locals:         0       0       0       0       0       0       0
  8909 ;;      Temps:          0       0       0       0       0       0       0
  8910 ;;      Totals:         0       0       0       0       0       0       0
  8911 ;;Total ram usage:        0 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; This function calls:
  8914 ;;		Nothing
  8915 ;; This function is called by:
  8916 ;;		i2_do_I2C_SEND_STOP
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           	psect	text91
  8921  0011AC                     __ptext91:
  8922                           	opt stack 0
  8923  0011AC                     i2_i2c1_driver_stop:
  8924                           	opt stack 17
  8925                           
  8926                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  8927                           
  8928                           ;incstack = 0
  8929  0011AC  84C5               	bsf	4037,2,c	;volatile
  8930  0011AE  0012               	return		;funcret
  8931  0011B0                     __end_ofi2_i2c1_driver_stop:
  8932                           	opt stack 0
  8933                           tosu	equ	0xFFF
  8934                           tosh	equ	0xFFE
  8935                           tosl	equ	0xFFD
  8936                           pclatu	equ	0xFFB
  8937                           pclath	equ	0xFFA
  8938                           tblptru	equ	0xFF8
  8939                           tblptrh	equ	0xFF7
  8940                           tblptrl	equ	0xFF6
  8941                           tablat	equ	0xFF5
  8942                           prodh	equ	0xFF4
  8943                           prodl	equ	0xFF3
  8944                           intcon	equ	0xFF2
  8945                           intcon2	equ	0xFF1
  8946                           postinc0	equ	0xFEE
  8947                           plusw0	equ	0xFEB
  8948                           fsr0h	equ	0xFEA
  8949                           fsr0l	equ	0xFE9
  8950                           wreg	equ	0xFE8
  8951                           postdec1	equ	0xFE5
  8952                           fsr1h	equ	0xFE2
  8953                           fsr1l	equ	0xFE1
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           plusw2	equ	0xFDB
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           
  8961 ;; *************** function i2_i2c1_driver_restart *****************
  8962 ;; Defined at:
  8963 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;		None
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;		None
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  1    wreg      void 
  8970 ;; Registers used:
  8971 ;;		None
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8977 ;;      Params:         0       0       0       0       0       0       0
  8978 ;;      Locals:         0       0       0       0       0       0       0
  8979 ;;      Temps:          0       0       0       0       0       0       0
  8980 ;;      Totals:         0       0       0       0       0       0       0
  8981 ;;Total ram usage:        0 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; This function calls:
  8984 ;;		Nothing
  8985 ;; This function is called by:
  8986 ;;		i2_do_I2C_SEND_RESTART_READ
  8987 ;;		i2_do_I2C_SEND_RESTART_WRITE
  8988 ;;		i2_do_I2C_SEND_RESTART
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           	psect	text92
  8993  0011B0                     __ptext92:
  8994                           	opt stack 0
  8995  0011B0                     i2_i2c1_driver_restart:
  8996                           	opt stack 17
  8997                           
  8998                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  8999                           
  9000                           ;incstack = 0
  9001  0011B0  82C5               	bsf	4037,1,c	;volatile
  9002  0011B2  0012               	return		;funcret
  9003  0011B4                     __end_ofi2_i2c1_driver_restart:
  9004                           	opt stack 0
  9005                           tosu	equ	0xFFF
  9006                           tosh	equ	0xFFE
  9007                           tosl	equ	0xFFD
  9008                           pclatu	equ	0xFFB
  9009                           pclath	equ	0xFFA
  9010                           tblptru	equ	0xFF8
  9011                           tblptrh	equ	0xFF7
  9012                           tblptrl	equ	0xFF6
  9013                           tablat	equ	0xFF5
  9014                           prodh	equ	0xFF4
  9015                           prodl	equ	0xFF3
  9016                           intcon	equ	0xFF2
  9017                           intcon2	equ	0xFF1
  9018                           postinc0	equ	0xFEE
  9019                           plusw0	equ	0xFEB
  9020                           fsr0h	equ	0xFEA
  9021                           fsr0l	equ	0xFE9
  9022                           wreg	equ	0xFE8
  9023                           postdec1	equ	0xFE5
  9024                           fsr1h	equ	0xFE2
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           plusw2	equ	0xFDB
  9029                           fsr2h	equ	0xFDA
  9030                           fsr2l	equ	0xFD9
  9031                           status	equ	0xFD8
  9032                           
  9033 ;; *************** function i2_i2c1_driver_sendACK *****************
  9034 ;; Defined at:
  9035 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;		None
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;		None
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  1    wreg      void 
  9042 ;; Registers used:
  9043 ;;		None
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9049 ;;      Params:         0       0       0       0       0       0       0
  9050 ;;      Locals:         0       0       0       0       0       0       0
  9051 ;;      Temps:          0       0       0       0       0       0       0
  9052 ;;      Totals:         0       0       0       0       0       0       0
  9053 ;;Total ram usage:        0 bytes
  9054 ;; Hardware stack levels used:    1
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		i2_do_I2C_DO_ACK
  9059 ;;		i2_do_I2C_RX
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text93
  9064  001164                     __ptext93:
  9065                           	opt stack 0
  9066  001164                     i2_i2c1_driver_sendACK:
  9067                           	opt stack 18
  9068                           
  9069                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  9070                           
  9071                           ;incstack = 0
  9072  001164  9AC5               	bcf	4037,5,c	;volatile
  9073                           
  9074                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  9075  001166  88C5               	bsf	4037,4,c	;volatile
  9076  001168  0012               	return		;funcret
  9077  00116A                     __end_ofi2_i2c1_driver_sendACK:
  9078                           	opt stack 0
  9079                           tosu	equ	0xFFF
  9080                           tosh	equ	0xFFE
  9081                           tosl	equ	0xFFD
  9082                           pclatu	equ	0xFFB
  9083                           pclath	equ	0xFFA
  9084                           tblptru	equ	0xFF8
  9085                           tblptrh	equ	0xFF7
  9086                           tblptrl	equ	0xFF6
  9087                           tablat	equ	0xFF5
  9088                           prodh	equ	0xFF4
  9089                           prodl	equ	0xFF3
  9090                           intcon	equ	0xFF2
  9091                           intcon2	equ	0xFF1
  9092                           postinc0	equ	0xFEE
  9093                           plusw0	equ	0xFEB
  9094                           fsr0h	equ	0xFEA
  9095                           fsr0l	equ	0xFE9
  9096                           wreg	equ	0xFE8
  9097                           postdec1	equ	0xFE5
  9098                           fsr1h	equ	0xFE2
  9099                           fsr1l	equ	0xFE1
  9100                           indf2	equ	0xFDF
  9101                           postinc2	equ	0xFDE
  9102                           plusw2	equ	0xFDB
  9103                           fsr2h	equ	0xFDA
  9104                           fsr2l	equ	0xFD9
  9105                           status	equ	0xFD8
  9106                           
  9107 ;; *************** function _i2c_busCollisionISR *****************
  9108 ;; Defined at:
  9109 ;;		line 500 in file "mcc_generated_files/drivers/i2c_master.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;		None
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  1    wreg      void 
  9116 ;; Registers used:
  9117 ;;		cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9123 ;;      Params:         0       0       0       0       0       0       0
  9124 ;;      Locals:         0       0       0       0       0       0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0
  9126 ;;      Totals:         0       0       0       0       0       0       0
  9127 ;;Total ram usage:        0 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    1
  9130 ;; This function calls:
  9131 ;;		_i2c1_driver_clearBusCollision
  9132 ;; This function is called by:
  9133 ;;		_i2c_open
  9134 ;;		_INTERRUPT_InterruptManager
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           	psect	text94
  9139  00116A                     __ptext94:
  9140                           	opt stack 0
  9141  00116A                     _i2c_busCollisionISR:
  9142                           	opt stack 19
  9143                           
  9144                           ;i2c_master.c: 502: i2c1_driver_clearBusCollision();
  9145                           
  9146                           ;incstack = 0
  9147  00116A  ECDA  F008         	call	_i2c1_driver_clearBusCollision	;wreg free
  9148  00116E  0012               	return		;funcret
  9149  001170                     __end_of_i2c_busCollisionISR:
  9150                           	opt stack 0
  9151                           tosu	equ	0xFFF
  9152                           tosh	equ	0xFFE
  9153                           tosl	equ	0xFFD
  9154                           pclatu	equ	0xFFB
  9155                           pclath	equ	0xFFA
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           prodh	equ	0xFF4
  9161                           prodl	equ	0xFF3
  9162                           intcon	equ	0xFF2
  9163                           intcon2	equ	0xFF1
  9164                           postinc0	equ	0xFEE
  9165                           plusw0	equ	0xFEB
  9166                           fsr0h	equ	0xFEA
  9167                           fsr0l	equ	0xFE9
  9168                           wreg	equ	0xFE8
  9169                           postdec1	equ	0xFE5
  9170                           fsr1h	equ	0xFE2
  9171                           fsr1l	equ	0xFE1
  9172                           indf2	equ	0xFDF
  9173                           postinc2	equ	0xFDE
  9174                           plusw2	equ	0xFDB
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _i2c1_driver_clearBusCollision *****************
  9180 ;; Defined at:
  9181 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;		None
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  1    wreg      void 
  9188 ;; Registers used:
  9189 ;;		None
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9195 ;;      Params:         0       0       0       0       0       0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0
  9198 ;;      Totals:         0       0       0       0       0       0       0
  9199 ;;Total ram usage:        0 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; This function calls:
  9202 ;;		Nothing
  9203 ;; This function is called by:
  9204 ;;		_i2c_busCollisionISR
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text95
  9209  0011B4                     __ptext95:
  9210                           	opt stack 0
  9211  0011B4                     _i2c1_driver_clearBusCollision:
  9212                           	opt stack 19
  9213                           
  9214                           ;i2c1_driver.c: 255: PIR2bits.BCL1IF = 0;
  9215                           
  9216                           ;incstack = 0
  9217  0011B4  96A1               	bcf	4001,3,c	;volatile
  9218  0011B6  0012               	return		;funcret
  9219  0011B8                     __end_of_i2c1_driver_clearBusCollision:
  9220                           	opt stack 0
  9221                           tosu	equ	0xFFF
  9222                           tosh	equ	0xFFE
  9223                           tosl	equ	0xFFD
  9224                           pclatu	equ	0xFFB
  9225                           pclath	equ	0xFFA
  9226                           tblptru	equ	0xFF8
  9227                           tblptrh	equ	0xFF7
  9228                           tblptrl	equ	0xFF6
  9229                           tablat	equ	0xFF5
  9230                           prodh	equ	0xFF4
  9231                           prodl	equ	0xFF3
  9232                           intcon	equ	0xFF2
  9233                           intcon2	equ	0xFF1
  9234                           postinc0	equ	0xFEE
  9235                           plusw0	equ	0xFEB
  9236                           fsr0h	equ	0xFEA
  9237                           fsr0l	equ	0xFE9
  9238                           wreg	equ	0xFE8
  9239                           postdec1	equ	0xFE5
  9240                           fsr1h	equ	0xFE2
  9241                           fsr1l	equ	0xFE1
  9242                           indf2	equ	0xFDF
  9243                           postinc2	equ	0xFDE
  9244                           plusw2	equ	0xFDB
  9245                           fsr2h	equ	0xFDA
  9246                           fsr2l	equ	0xFD9
  9247                           status	equ	0xFD8
  9248                           
  9249 ;; *************** function _EUSART1_Transmit_ISR *****************
  9250 ;; Defined at:
  9251 ;;		line 183 in file "mcc_generated_files/eusart1.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;		None
  9254 ;; Auto vars:     Size  Location     Type
  9255 ;;		None
  9256 ;; Return value:  Size  Location     Type
  9257 ;;                  1    wreg      void 
  9258 ;; Registers used:
  9259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9265 ;;      Params:         0       0       0       0       0       0       0
  9266 ;;      Locals:         0       0       0       0       0       0       0
  9267 ;;      Temps:          0       0       0       0       0       0       0
  9268 ;;      Totals:         0       0       0       0       0       0       0
  9269 ;;Total ram usage:        0 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; This function calls:
  9272 ;;		Nothing
  9273 ;; This function is called by:
  9274 ;;		_EUSART1_Initialize
  9275 ;;		_INTERRUPT_InterruptManager
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           	psect	text96
  9280  000DD2                     __ptext96:
  9281                           	opt stack 0
  9282  000DD2                     _EUSART1_Transmit_ISR:
  9283                           	opt stack 20
  9284                           
  9285                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  9286                           
  9287                           ;incstack = 0
  9288  000DD2  0E08               	movlw	8
  9289  000DD4  604A               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  9290  000DD6  D012               	goto	i2l321
  9291                           
  9292                           ;eusart1.c: 188: {
  9293                           ;eusart1.c: 189: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  9294  000DD8  501B               	movf	_eusart1TxTail,w,c	;volatile
  9295  000DDA  0D01               	mullw	1
  9296  000DDC  0E09               	movlw	low _eusart1TxBuffer
  9297  000DDE  24F3               	addwf	prodl,w,c
  9298  000DE0  6ED9               	movwf	fsr2l,c
  9299  000DE2  0E00               	movlw	high _eusart1TxBuffer
  9300  000DE4  20F4               	addwfc	prodh,w,c
  9301  000DE6  6EDA               	movwf	fsr2h,c
  9302  000DE8  50DF               	movf	indf2,w,c
  9303  000DEA  6EAD               	movwf	4013,c	;volatile
  9304  000DEC  2A1B               	incf	_eusart1TxTail,f,c	;volatile
  9305                           
  9306                           ;eusart1.c: 190: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  9307  000DEE  0E07               	movlw	7
  9308  000DF0  641B               	cpfsgt	_eusart1TxTail,c	;volatile
  9309  000DF2  D002               	goto	i2l322
  9310                           
  9311                           ;eusart1.c: 191: {
  9312                           ;eusart1.c: 192: eusart1TxTail = 0;
  9313  000DF4  0E00               	movlw	0
  9314  000DF6  6E1B               	movwf	_eusart1TxTail,c	;volatile
  9315  000DF8                     i2l322:
  9316                           
  9317                           ;eusart1.c: 193: }
  9318                           ;eusart1.c: 194: eusart1TxBufferRemaining++;
  9319  000DF8  2A4A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9320                           
  9321                           ;eusart1.c: 195: }
  9322  000DFA  0012               	return	
  9323  000DFC                     i2l321:
  9324                           
  9325                           ;eusart1.c: 196: else
  9326                           ;eusart1.c: 197: {
  9327                           ;eusart1.c: 198: PIE1bits.TX1IE = 0;
  9328  000DFC  989D               	bcf	3997,4,c	;volatile
  9329  000DFE  0012               	return	
  9330  000E00                     __end_of_EUSART1_Transmit_ISR:
  9331                           	opt stack 0
  9332                           tosu	equ	0xFFF
  9333                           tosh	equ	0xFFE
  9334                           tosl	equ	0xFFD
  9335                           pclatu	equ	0xFFB
  9336                           pclath	equ	0xFFA
  9337                           tblptru	equ	0xFF8
  9338                           tblptrh	equ	0xFF7
  9339                           tblptrl	equ	0xFF6
  9340                           tablat	equ	0xFF5
  9341                           prodh	equ	0xFF4
  9342                           prodl	equ	0xFF3
  9343                           intcon	equ	0xFF2
  9344                           intcon2	equ	0xFF1
  9345                           postinc0	equ	0xFEE
  9346                           plusw0	equ	0xFEB
  9347                           fsr0h	equ	0xFEA
  9348                           fsr0l	equ	0xFE9
  9349                           wreg	equ	0xFE8
  9350                           postdec1	equ	0xFE5
  9351                           fsr1h	equ	0xFE2
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           plusw2	equ	0xFDB
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function _EUSART1_Receive_ISR *****************
  9361 ;; Defined at:
  9362 ;;		line 202 in file "mcc_generated_files/eusart1.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;		None
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;		None
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      void 
  9369 ;; Registers used:
  9370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9376 ;;      Params:         0       0       0       0       0       0       0
  9377 ;;      Locals:         0       0       0       0       0       0       0
  9378 ;;      Temps:          0       0       0       0       0       0       0
  9379 ;;      Totals:         0       0       0       0       0       0       0
  9380 ;;Total ram usage:        0 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; This function calls:
  9383 ;;		Nothing
  9384 ;; This function is called by:
  9385 ;;		_EUSART1_Initialize
  9386 ;;		_INTERRUPT_InterruptManager
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text97
  9391  000E00                     __ptext97:
  9392                           	opt stack 0
  9393  000E00                     _EUSART1_Receive_ISR:
  9394                           	opt stack 20
  9395                           
  9396                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
  9397                           
  9398                           ;incstack = 0
  9399  000E00  A2AB               	btfss	4011,1,c	;volatile
  9400  000E02  D002               	goto	i2l327
  9401                           
  9402                           ;eusart1.c: 206: {
  9403                           ;eusart1.c: 209: RCSTA1bits.CREN = 0;
  9404  000E04  98AB               	bcf	4011,4,c	;volatile
  9405                           
  9406                           ;eusart1.c: 210: RCSTA1bits.CREN = 1;
  9407  000E06  88AB               	bsf	4011,4,c	;volatile
  9408  000E08                     i2l327:
  9409                           
  9410                           ;eusart1.c: 211: }
  9411                           ;eusart1.c: 214: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  9412  000E08  501A               	movf	_eusart1RxHead,w,c	;volatile
  9413  000E0A  0D01               	mullw	1
  9414  000E0C  0E01               	movlw	low _eusart1RxBuffer
  9415  000E0E  24F3               	addwf	prodl,w,c
  9416  000E10  6ED9               	movwf	fsr2l,c
  9417  000E12  0E00               	movlw	high _eusart1RxBuffer
  9418  000E14  20F4               	addwfc	prodh,w,c
  9419  000E16  6EDA               	movwf	fsr2h,c
  9420  000E18  CFAE FFDF          	movff	4014,indf2	;volatile
  9421  000E1C  2A1A               	incf	_eusart1RxHead,f,c	;volatile
  9422                           
  9423                           ;eusart1.c: 215: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  9424  000E1E  0E07               	movlw	7
  9425  000E20  641A               	cpfsgt	_eusart1RxHead,c	;volatile
  9426  000E22  D002               	goto	i2l328
  9427                           
  9428                           ;eusart1.c: 216: {
  9429                           ;eusart1.c: 217: eusart1RxHead = 0;
  9430  000E24  0E00               	movlw	0
  9431  000E26  6E1A               	movwf	_eusart1RxHead,c	;volatile
  9432  000E28                     i2l328:
  9433                           
  9434                           ;eusart1.c: 218: }
  9435                           ;eusart1.c: 219: eusart1RxCount++;
  9436  000E28  2A18               	incf	_eusart1RxCount,f,c	;volatile
  9437  000E2A  0012               	return		;funcret
  9438  000E2C                     __end_of_EUSART1_Receive_ISR:
  9439                           	opt stack 0
  9440                           tosu	equ	0xFFF
  9441                           tosh	equ	0xFFE
  9442                           tosl	equ	0xFFD
  9443                           pclatu	equ	0xFFB
  9444                           pclath	equ	0xFFA
  9445                           tblptru	equ	0xFF8
  9446                           tblptrh	equ	0xFF7
  9447                           tblptrl	equ	0xFF6
  9448                           tablat	equ	0xFF5
  9449                           prodh	equ	0xFF4
  9450                           prodl	equ	0xFF3
  9451                           intcon	equ	0xFF2
  9452                           intcon2	equ	0xFF1
  9453                           postinc0	equ	0xFEE
  9454                           plusw0	equ	0xFEB
  9455                           fsr0h	equ	0xFEA
  9456                           fsr0l	equ	0xFE9
  9457                           wreg	equ	0xFE8
  9458                           postdec1	equ	0xFE5
  9459                           fsr1h	equ	0xFE2
  9460                           fsr1l	equ	0xFE1
  9461                           indf2	equ	0xFDF
  9462                           postinc2	equ	0xFDE
  9463                           plusw2	equ	0xFDB
  9464                           fsr2h	equ	0xFDA
  9465                           fsr2l	equ	0xFD9
  9466                           status	equ	0xFD8
  9467                           tosu	equ	0xFFF
  9468                           tosh	equ	0xFFE
  9469                           tosl	equ	0xFFD
  9470                           pclatu	equ	0xFFB
  9471                           pclath	equ	0xFFA
  9472                           tblptru	equ	0xFF8
  9473                           tblptrh	equ	0xFF7
  9474                           tblptrl	equ	0xFF6
  9475                           tablat	equ	0xFF5
  9476                           prodh	equ	0xFF4
  9477                           prodl	equ	0xFF3
  9478                           intcon	equ	0xFF2
  9479                           intcon2	equ	0xFF1
  9480                           postinc0	equ	0xFEE
  9481                           plusw0	equ	0xFEB
  9482                           fsr0h	equ	0xFEA
  9483                           fsr0l	equ	0xFE9
  9484                           wreg	equ	0xFE8
  9485                           postdec1	equ	0xFE5
  9486                           fsr1h	equ	0xFE2
  9487                           fsr1l	equ	0xFE1
  9488                           indf2	equ	0xFDF
  9489                           postinc2	equ	0xFDE
  9490                           plusw2	equ	0xFDB
  9491                           fsr2h	equ	0xFDA
  9492                           fsr2l	equ	0xFD9
  9493                           status	equ	0xFD8
  9494                           
  9495                           	psect	text98
  9496  000000                     __ptext98:
  9497                           	opt stack 0
  9498                           tosu	equ	0xFFF
  9499                           tosh	equ	0xFFE
  9500                           tosl	equ	0xFFD
  9501                           pclatu	equ	0xFFB
  9502                           pclath	equ	0xFFA
  9503                           tblptru	equ	0xFF8
  9504                           tblptrh	equ	0xFF7
  9505                           tblptrl	equ	0xFF6
  9506                           tablat	equ	0xFF5
  9507                           prodh	equ	0xFF4
  9508                           prodl	equ	0xFF3
  9509                           intcon	equ	0xFF2
  9510                           intcon2	equ	0xFF1
  9511                           postinc0	equ	0xFEE
  9512                           plusw0	equ	0xFEB
  9513                           fsr0h	equ	0xFEA
  9514                           fsr0l	equ	0xFE9
  9515                           wreg	equ	0xFE8
  9516                           postdec1	equ	0xFE5
  9517                           fsr1h	equ	0xFE2
  9518                           fsr1l	equ	0xFE1
  9519                           indf2	equ	0xFDF
  9520                           postinc2	equ	0xFDE
  9521                           plusw2	equ	0xFDB
  9522                           fsr2h	equ	0xFDA
  9523                           fsr2l	equ	0xFD9
  9524                           status	equ	0xFD8
  9525                           
  9526                           	psect	rparam
  9527  0000                     tosu	equ	0xFFF
  9528                           tosh	equ	0xFFE
  9529                           tosl	equ	0xFFD
  9530                           pclatu	equ	0xFFB
  9531                           pclath	equ	0xFFA
  9532                           tblptru	equ	0xFF8
  9533                           tblptrh	equ	0xFF7
  9534                           tblptrl	equ	0xFF6
  9535                           tablat	equ	0xFF5
  9536                           prodh	equ	0xFF4
  9537                           prodl	equ	0xFF3
  9538                           intcon	equ	0xFF2
  9539                           intcon2	equ	0xFF1
  9540                           postinc0	equ	0xFEE
  9541                           plusw0	equ	0xFEB
  9542                           fsr0h	equ	0xFEA
  9543                           fsr0l	equ	0xFE9
  9544                           wreg	equ	0xFE8
  9545                           postdec1	equ	0xFE5
  9546                           fsr1h	equ	0xFE2
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           plusw2	equ	0xFDB
  9551                           fsr2h	equ	0xFDA
  9552                           fsr2l	equ	0xFD9
  9553                           status	equ	0xFD8
  9554                           
  9555                           	psect	temp
  9556  00004B                     btemp:
  9557                           	opt stack 0
  9558  00004B                     	ds	1
  9559  0000                     int$flags	set	btemp
  9560  0000                     wtemp6	set	btemp+1
  9561                           tosu	equ	0xFFF
  9562                           tosh	equ	0xFFE
  9563                           tosl	equ	0xFFD
  9564                           pclatu	equ	0xFFB
  9565                           pclath	equ	0xFFA
  9566                           tblptru	equ	0xFF8
  9567                           tblptrh	equ	0xFF7
  9568                           tblptrl	equ	0xFF6
  9569                           tablat	equ	0xFF5
  9570                           prodh	equ	0xFF4
  9571                           prodl	equ	0xFF3
  9572                           intcon	equ	0xFF2
  9573                           intcon2	equ	0xFF1
  9574                           postinc0	equ	0xFEE
  9575                           plusw0	equ	0xFEB
  9576                           fsr0h	equ	0xFEA
  9577                           fsr0l	equ	0xFE9
  9578                           wreg	equ	0xFE8
  9579                           postdec1	equ	0xFE5
  9580                           fsr1h	equ	0xFE2
  9581                           fsr1l	equ	0xFE1
  9582                           indf2	equ	0xFDF
  9583                           postinc2	equ	0xFDE
  9584                           plusw2	equ	0xFDB
  9585                           fsr2h	equ	0xFDA
  9586                           fsr2l	equ	0xFD9
  9587                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        86
    BSS         74
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      74
    BANK0           160     14     137
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_ISR$2283	PTR const FTN()enum E7019 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$11$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    i2c1_driver_setI2cISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART1_SetRxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_SetTxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E7019[18] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    S53$callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S53$data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_read_xyzvalues
    _read_xyzvalues->_i2c_masterAccelRead
    _printf->_putch
    _putch->_EUSART1_Write
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ACCELEROMETER_Initialize->_read_register
    _ACCELEROMETER_Initialize->_write_register
    _i2c_masterWrite->_i2c_masterOperation
    _read_register->_i2c_masterAccelRead
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterAccelRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_REGISTER->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_INITIAL_READ->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX

Critical Paths under _main in BANK0

    _main->_read_xyzvalues

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    8825
                                              6 BANK0      8     8      0
           _ACCELEROMETER_Initialize
                      _EUSART1_Write
                  _SYSTEM_Initialize
                             _printf
                     _read_xyzvalues
 ---------------------------------------------------------------------------------
 (1) _read_xyzvalues                                      12     6      6    2685
                                             26 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     251
                                             22 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ACCELEROMETER_Initialize                             2     2      0    5384
                                             27 COMRAM     2     2      0
                      _read_register
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _write_register                                       2     1      1    3007
                                             25 COMRAM     2     1      1
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0    1390
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (2) _read_register                                        1     1      0    2377
                                             26 COMRAM     1     1      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4     602
                                             20 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     286
                                             22 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterAccelRead                                  1     1      0    1421
                                             25 COMRAM     1     1      0
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0    1390
                                             23 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0    1322
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0    1232
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
           _do_I2C_SEND_INITIAL_READ *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _do_I2C_TX_REGISTER *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_REGISTER                                   0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0     328
                                             21 COMRAM     2     2      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_INITIAL_READ                             0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0     260
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2     260
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            1     1      0      37
                                             20 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     563
                                              2 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (11) i2_i2c_ISR                                           0     0      0     563
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
         i2_do_I2C_SEND_INITIAL_READ *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_do_I2C_TX_REGISTER *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (12) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_REGISTER                                0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_EMPTY                                   0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                     i2_mssp1_setIRQ
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX                                         2     2      0     163
                                              0 COMRAM     2     2      0
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_INITIAL_READ                          0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RX                                         0     0      0     104
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_returnStop                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_returnReset                                       2     0      2     104
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (12) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACCELEROMETER_Initialize
     _read_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterAccelRead
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
     _write_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printf
     _putch
       _EUSART1_Write
   _read_xyzvalues
     _i2c_close
       _mssp1_clearIRQ
       _mssp1_disableIRQ
     _i2c_masterAccelRead
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _returnReset *
               _returnStop *
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               _do_I2C_DO_NACK_RESTART
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData
               _i2c1_driver_sendACK
               _returnReset *
               _returnStop *
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_INITIAL_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               _do_I2C_SEND_RESTART_READ
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _i2c1_driver_TXData
               _i2c1_driver_isNACK
               _returnReset *
               _returnStop *
             _do_I2C_TX_EMPTY *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _mssp1_setIRQ
               _returnReset *
               _returnStop *
             _do_I2C_TX_REGISTER *
               _i2c1_driver_TXData
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       i2_do_I2C_DO_NACK_RESTART
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData
       i2_i2c1_driver_sendACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_INITIAL_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       i2_do_I2C_SEND_RESTART_READ
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData
       i2_i2c1_driver_isNACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_EMPTY *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_mssp1_setIRQ
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_REGISTER *
       i2_i2c1_driver_TXData
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      E      89       4       85.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      4A       1       78.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3       9        0.0%
DATA                 0      0      D3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 27 16:06:44 2018

                ??i2_i2c1_driver_startRX 0026             _do_I2C_TX_REGISTER$intlevel0 0F72  
                           returnReset@p 003A                 _eusart1TxBufferRemaining 004A  
          _do_I2C_SEND_RESTART$intlevel0 1072                                       l83 0E9A  
                                     l95 0C3C                                       l96 0C2E  
                                     l97 0C50                                       l98 0C32  
                                     l99 0C36                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 106C                     __size_of_do_I2C_RCEN 0012  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                            __CFG_LVP$ON 000000                                      l100 0C5E  
                                    l201 0A38                                      l113 0ECA  
                                    l202 0A40                                      l114 0EBA  
                                    l310 0D6E                                      l311 0D6C  
                                    l161 0B9C                                      l209 0B50  
                                    l162 0B90                                      l170 06C2  
                                    l171 06B0                                      l180 072A  
                                    l165 0B96                                      l173 06B6  
                                    l309 0D4A                                      l174 06BC  
                                    l191 0892                                      l169 06FC  
                                    l185 0888                                      l188 0898  
                                    l189 088C                                      l197 0A46  
                                    l613 08DE                                      l198 0A32  
                                    l636 09DC                                      l666 0E3C  
                                    l667 0E36                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000          __end_ofi2_i2c1_driver_getRXData 11A0  
           __size_of_i2c_masterOperation 0048                     _returnStop$intlevel0 10FE  
                  __size_of_do_I2C_RESET 0016                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                             _TXSTA1bits 000FAC          i2c1_driver_setBusCollisionISR@f 003A  
                            i2_do_I2C_RX 0946                              i2_do_I2C_TX 07C8  
                                   l3517 0D3A                           i2_mssp1_setIRQ 1198  
                 __size_ofi2_do_I2C_IDLE 000C                                     STR_1 0601  
                                   u1230 0F96                   __size_ofi2_do_I2C_RCEN 000C  
                                   u1218 08A8                                     u1219 08BC  
                                   u1228 0A56                                     u1229 0A6A  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u1168 0BAC  
                                   u1280 0FD2                                     u1169 0BC0  
                                   u1188 06D2                                     u1189 06E6  
                                   u1278 0B66                                     u1279 0B7A  
                                   u1471 07BE                                     u1288 0FD4  
                                   u1707 08FC                                     u1717 09CE  
                                   u1727 0F9C                                     u1691 08E8  
                   ?_do_I2C_SEND_RESTART 0026                                     _WPUB 000F61  
                          _EUSART1_Write 0D38        __size_of_do_I2C_SEND_RESTART_READ 000E  
                   __end_ofi2_returnStop 11AC                ?_do_I2C_SEND_RESTART_READ 0026  
                                   _main 08D2                __size_of_do_I2C_SEND_STOP 000E  
                 __size_of_do_I2C_DO_ACK 000E                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   fsr0l 000FE9                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                                   btemp 004B                            __CFG_BORV$190 000000  
                  ?_do_I2C_SEND_ADR_READ 0026                                     prodh 000FF4  
                                   prodl 000FF3          ??_i2c1_driver_clearBusCollision 0026  
                                   start 0102                            __CFG_IESO$OFF 000000  
                          _i2c_setBuffer 0E9E                          __end_of_i2c_ISR 0B80  
                           ___param_bank 000000                 ??_do_I2C_DO_NACK_RESTART 003A  
              __size_of_mssp1_disableIRQ 0004                             _do_I2C_RESET 0F2A  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1026  
               __end_of_i2c1_driver_open 0EE8                                    ?_main 0026  
               __end_of_i2c1_driver_stop 1184               __end_of_i2c1_driver_TXData 1112  
                         __CFG_DEBUG$OFF 000000                                    i2l201 0A90  
                                  i2l202 0A98                  __size_ofi2_do_I2C_RESET 0010  
                                  i2l321 0DFC                                    i2l161 0CC0  
                                  i2l209 0C7A                                    i2l322 0DF8  
                                  i2l162 0CB4                                    i2l170 07E4  
                                  i2l171 07D2                                    i2l180 084C  
                                  i2l165 0CBA                                    i2l173 07D8  
                                  i2l174 07DE                                    i2l327 0E08  
                                  i2l191 097A                                    i2l328 0E28  
                                  i2l169 081E                                    i2l185 0970  
                                  i2l188 0980                                    i2l189 0974  
                                  i2l197 0A9E                                    i2l198 0A8A  
                                  i2l571 0098                                    i2l567 006C  
                                  i2l569 0082                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 0DD2                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                            i2c_open@ret 003C                            __CFG_WRTB$OFF 000000  
                  __end_ofi2_returnReset 11A8                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                   __end_ofi2_mssp1_setIRQ 119C  
                         __CFG_EBTRB$OFF 000000               __end_of_i2c1_driver_isNACK 0F56  
                      write_register@reg 0040                       __size_ofi2_i2c_ISR 0048  
             ?_do_I2C_SEND_RESTART_WRITE 0026                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 10BC                    ??_do_I2C_SEND_RESTART 003A  
                          i2returnStop@p 0026   __end_of_i2c1_driver_setBusCollisionISR 10EE  
__size_of_i2c1_driver_setBusCollisionISR 000A           _i2c1_driver_setBusCollisionISR 10E4  
                         ?_EUSART1_Write 0026                                    pclath 000FFA  
                                  tablat 000FF5                  __size_of_mssp1_clearIRQ 0004  
                                  plusw0 000FEB                                    plusw2 000FDB  
                 ?_do_I2C_SEND_ADR_WRITE 0026                                    status 000FD8  
                                  wtemp6 004C                           __CFG_HFOFST$ON 000000  
        __size_ofi2_i2c1_driver_sendNACK 0006                           ?_i2c_setBuffer 003A  
                         __CFG_PBADEN$ON 000000          __size_ofi2_i2c1_driver_resetBus 0002  
                          _fsmStateTable 0092                          __initialization 0CF2  
                             _i2c_poller 0EB8                               _i2c_status 00B6  
             __end_of_EUSART1_Initialize 0C1A                             __end_of_main 0946  
                          i2_do_I2C_IDLE 10B0                            i2_do_I2C_RCEN 10A4  
                       __end_of_i2c_open 06A0              ?_INTERRUPT_InterruptManager 0026  
                       i2_mssp1_clearIRQ 1194         __end_ofi2_do_I2C_DO_ADDRESS_NACK 0CF2  
                          _do_I2C_DO_ACK 1050                                   ??_main 00E1  
                          _do_I2C_TX$315 003B            __size_of_i2c1_driver_sendNACK 0006  
                          __activetblptr 000002                             i2c_close@ret 003A  
                    _i2c_masterAccelRead 1026                    ?_EUSART1_Transmit_ISR 0026  
          __size_of_i2c1_driver_resetBus 0002                  ?_do_I2C_DO_ADDRESS_NACK 0026  
                        ?i2_mssp1_setIRQ 0026       __end_ofi2_do_I2C_SEND_RESTART_READ 114A  
             i2_do_I2C_SEND_RESTART_READ 1142                         ??_read_xyzvalues 0046  
                                 _ANSELA 000F38                                   ?_putch 0026  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
               __size_ofi2_do_I2C_DO_ACK 0008                         ??_write_register 0040  
                         __CFG_WDTEN$OFF 000000                                   _RCREG1 000FAE  
                                 _RCSTA1 000FAB                       __size_of_i2c_close 001E  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                i2_do_I2C_SEND_ADR_WRITE 0FD8                   ??_do_I2C_SEND_ADR_READ 003A  
          __size_ofi2_do_I2C_TX_REGISTER 000E                                ??_i2c_ISR 003D  
                                 _TXREG1 000FAD                                   _TXSTA1 000FAC  
                   ?_i2c_masterAccelRead 0026             i2c_masterOperation@operation 003D  
                ??i2_do_I2C_SEND_RESTART 0026              ?i2_do_I2C_SEND_INITIAL_READ 0026  
               _do_I2C_SEND_INITIAL_READ 0EFE                           __CFG_XINST$OFF 000000  
       __size_ofi2_i2c1_driver_getRXData 0004                    _i2c1_driver_getRXData 1178  
                     i2_i2c1_driver_stop 11AC                      _do_I2C_RX$intlevel0 085E  
      __size_of_ACCELEROMETER_Initialize 006C              __end_of_do_I2C_DO_NACK_STOP 1050  
              ?_ACCELEROMETER_Initialize 0026                           ?i2_do_I2C_IDLE 0026  
                        _i2c_masterWrite 1102                           ?i2_do_I2C_RCEN 0026  
  __end_of_i2c1_driver_clearBusCollision 11B8   __size_of_i2c1_driver_clearBusCollision 0004  
          _i2c1_driver_clearBusCollision 11B4                           __CFG_STVREN$ON 000000  
                      __end_ofi2_i2c_ISR 0CAA          __size_of_do_I2C_DO_NACK_RESTART 000E  
                     write_register@data 003F                           i2returnReset@p 0026  
                                 clear_0 0D18                                   clear_1 0D24  
                         ?_do_I2C_DO_ACK 0026                                   _printf 0E2C  
                    ?i2_i2c1_driver_stop 0026                   i2_i2c1_driver_sendNACK 115E  
                 i2c1_driver_setI2cISR@f 003A              __end_of_i2c1_driver_sendACK 115E  
         __end_of_do_I2C_DO_ADDRESS_NACK 0BCE                   i2_i2c1_driver_resetBus 11BA  
                           __mediumconst 0000     __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008  
            __end_of_i2c1_driver_restart 1188                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                           ?_returnReset 003A            _do_I2C_DO_NACK_STOP$intlevel0 1048  
                  _i2c1_driver_setI2cISR 10DA              __end_of_i2c1_driver_startRX 1180  
                        ??_EUSART1_Write 003A                    __size_ofi2_returnStop 0004  
                        _eusart1RxBuffer 0001     EUSART1_SetTxInterruptHandler@handler 003A  
         __size_ofi2_do_I2C_DO_NACK_STOP 0008            __size_of_INTERRUPT_Initialize 0004  
          __end_ofi2_do_I2C_DO_NACK_STOP 1122                          _eusart1TxBuffer 0009  
                      _SYSTEM_Initialize 0F80                               __accesstop 0060  
                   ??i2_i2c1_driver_stop 0026                  __end_of__initialization 0D2A  
                        ??_i2c_setBuffer 003E           _do_I2C_SEND_ADR_READ$intlevel0 0F1A  
                       _do_I2C_SEND_STOP 105E                       __size_of_do_I2C_RX 007A  
                     _do_I2C_TX_REGISTER 0F6C                       __size_of_do_I2C_TX 0096  
                 __size_of_read_register 002E                       ?_SYSTEM_Initialize 0026  
                  ??_i2c_masterAccelRead 003F                            ___rparam_used 000001  
             __end_of_mssp1_IRQisEnabled 0FD8                      _i2c_masterOperation 0C1A  
               __size_of_do_I2C_TX_EMPTY 005E           __size_ofi2_i2c1_driver_sendACK 0006  
             __end_of_mssp1_waitForEvent 0FA4            __end_ofi2_i2c1_driver_sendACK 116A  
                            ?_i2c_poller 0026                           __pcstackCOMRAM 0026  
                    ?_do_I2C_TX_REGISTER 0026                      _do_I2C_TX$intlevel0 06A6  
                           __pidataBANK0 0ADC                      ??_SYSTEM_Initialize 003C  
         __size_ofi2_i2c1_driver_restart 0004            __end_ofi2_i2c1_driver_restart 11B4  
                       _mssp1_disableIRQ 118C           __size_ofi2_i2c1_driver_startRX 0004  
          __end_ofi2_i2c1_driver_startRX 11A4                            __end_of_putch 10C6  
                      __end_of_i2c_close 0E9E                             i2_returnStop 11A8  
                         i2_do_I2C_RESET 1008                   ??_EUSART1_Transmit_ISR 0026  
                   ?_i2c_masterOperation 0026                 i2_do_I2C_DO_ADDRESS_NACK 0CAA  
            __end_of_EUSART1_Receive_ISR 0E2C                     ??_do_I2C_TX_REGISTER 003B  
                           ?i2_do_I2C_RX 0026                             ?i2_do_I2C_TX 0026  
      __size_ofi2_do_I2C_DO_NACK_RESTART 0008                ?i2_do_I2C_DO_NACK_RESTART 0026  
                 _do_I2C_DO_NACK_RESTART 1034                __end_of_SYSTEM_Initialize 0F92  
              ??i2_do_I2C_SEND_ADR_WRITE 0026                                  ??_putch 003B  
                          _eusart1RxHead 001A               __end_ofi2_do_I2C_SEND_STOP 1132  
                          _eusart1TxHead 001C                            _eusart1RxTail 0019  
                         _mssp1_clearIRQ 1190                               __pbssBANK0 00B6  
                          _eusart1TxTail 001B        _EUSART1_TxDefaultInterruptHandler 0048  
        ??_EUSART1_SetRxInterruptHandler 003C            __size_ofi2_i2c1_driver_TXData 0008  
                        __CFG_PLLCFG$OFF 000000                                ?_i2c_open 0026  
                             __pnvCOMRAM 0046                  __end_of_i2c_masterWrite 110A  
                 ?_i2c1_driver_getRXData 0026                        ??i2_do_I2C_DO_ACK 0026  
          __size_ofi2_i2c1_driver_isNACK 0016                    _do_I2C_IDLE$intlevel0 0FBC  
                      i2_do_I2C_TX_EMPTY 0A84                          ??i2_do_I2C_IDLE 0026  
           __size_of_i2c_busCollisionISR 0006                          ??i2_do_I2C_RCEN 0026  
                     __CFG_CCP2MX$PORTC1 000000                            ??_do_I2C_IDLE 003A  
                          ??_do_I2C_RCEN 003A                       ?i2_do_I2C_TX_EMPTY 0026  
                     __CFG_CCP3MX$PORTB5 000000                          ??_do_I2C_DO_ACK 003A  
                 __end_ofi2_do_I2C_RESET 1018                      i2c_setBuffer@buffer 003A  
                                ?_printf 003C                            _read_register 0DA4  
         ?_i2c1_driver_clearBusCollision 0026                      ??i2_do_I2C_TX_EMPTY 0026  
                  ??_i2c_masterOperation 003D                        ?_i2c1_driver_open 0026  
                      __end_of_do_I2C_RX 08D2                        __end_of_do_I2C_TX 0736  
               ??i2_do_I2C_SEND_ADR_READ 0026                        ?_i2c1_driver_stop 0026  
                 ?_i2c1_driver_setI2cISR 003A                       ??_i2c1_driver_open 003A  
                     ??_i2c1_driver_stop 003A                                  _OSCCON2 000FD2  
                          ?_mssp1_setIRQ 0026                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9                   __end_of_mssp1_clearIRQ 1194  
                                _SSP1MSK 000FCA      __size_ofi2_do_I2C_SEND_INITIAL_READ 0010  
                    __size_of_i2c_poller 001A                  ??_do_I2C_SEND_ADR_WRITE 003B  
    _do_I2C_SEND_RESTART_WRITE$intlevel0 1080              ??_do_I2C_SEND_RESTART_WRITE 003A  
                     _i2c1_driver_TXData 110A                               ??_i2c_open 003C  
               __end_ofi2_mssp1_clearIRQ 1198                       _i2c1_driver_i2cISR 0011  
                                _i2c_ISR 0B32                __end_ofi2_do_I2C_TX_EMPTY 0ADC  
                i2_i2c1_driver_getRXData 119C                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                    _returnReset$intlevel0 10F4  
                  _do_I2C_RCEN$intlevel0 0FAA                       _i2c1_driver_isNACK 0F40  
                    ?_i2c1_driver_TXData 0026                                  __Lparam 0000  
       _do_I2C_DO_ADDRESS_NACK$intlevel0 0B86                             __psmallconst 0600  
                      ??_do_I2C_TX_EMPTY 003A                      ?_i2c1_driver_isNACK 0026  
                        ?i2_do_I2C_RESET 0026                                  __pcinit 0CF2  
                                __ramtop 0600                           ?_read_register 0026  
                                __ptext0 08D2                                  __ptext1 0736  
                                __ptext2 0E2C                                  __ptext3 10BC  
                                __ptext4 0D38                                  __ptext5 0F80  
                                __ptext6 0E56                                  __ptext7 1018  
                                __ptext8 1170                                  __ptext9 0BCE  
                    __end_of_do_I2C_IDLE 0FC8                          __size_of_printf 002A  
                    __end_of_do_I2C_RCEN 0FB6                         ??i2_mssp1_setIRQ 0026  
                  _OSCILLATOR_Initialize 1018              __end_of_do_I2C_SEND_RESTART 107A  
                         ??_mssp1_setIRQ 003A                     ??_i2c1_driver_TXData 003A  
                     _EUSART1_Initialize 0BCE                 ??_PIN_MANAGER_Initialize 003A  
                 i2c_masterOperation@ret 003E                          ?_mssp1_clearIRQ 0026  
             _do_I2C_SEND_STOP$intlevel0 1064              ?i2_do_I2C_SEND_RESTART_READ 0026  
               _do_I2C_SEND_RESTART_READ 1088               __size_of_SYSTEM_Initialize 0012  
                   __size_of_returnReset 000A                     end_of_initialization 0D2A  
             ??_do_I2C_SEND_INITIAL_READ 003B         __end_of_ACCELEROMETER_Initialize 0A26  
                   ??_i2c1_driver_isNACK 003A                      ?_EUSART1_Initialize 0026  
           __end_of_i2c1_driver_sendNACK 1158                            __Lmediumconst 0000  
                       ?_i2c_masterWrite 0026             __end_of_i2c1_driver_resetBus 11BA  
  __end_of_EUSART1_SetRxInterruptHandler 10DA   __size_of_EUSART1_SetRxInterruptHandler 000A  
          _EUSART1_SetRxInterruptHandler 10D0           __size_ofi2_do_I2C_SEND_RESTART 0008  
                                printf@c 0040                                  printf@f 003C  
          __end_ofi2_do_I2C_SEND_RESTART 113A                                  postdec1 000FE5  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __size_ofi2_returnReset 0004             ?i2_do_I2C_SEND_RESTART_WRITE 0026  
              _do_I2C_SEND_RESTART_WRITE 107A                  ?i2_i2c1_driver_sendNACK 0026  
                   ??_EUSART1_Initialize 003C             __end_ofi2_do_I2C_TX_REGISTER 10A4  
                ?i2_i2c1_driver_resetBus 0026                               _returnStop 10F8  
               __end_of_do_I2C_SEND_STOP 106C                                i2_i2c_ISR 0C62  
        __size_ofi2_do_I2C_SEND_ADR_READ 0010                 read_xyzvalues@readbuffer 001D  
                            returnStop@p 003A                      EUSART1_Write@txData 003A  
               __end_of_mssp1_disableIRQ 1190                     __size_ofi2_do_I2C_RX 0074  
                   __size_ofi2_do_I2C_TX 0090                ??i2_i2c1_driver_getRXData 0026  
             __size_ofi2_do_I2C_TX_EMPTY 0058            __size_of_do_I2C_SEND_ADR_READ 0016  
                           ??_i2c_poller 003D           __end_ofi2_i2c1_driver_sendNACK 1164  
                            _do_I2C_IDLE 0FB6                              _do_I2C_RCEN 0FA4  
           __end_of_INTERRUPT_Initialize 1174                          ??_read_register 0040  
         __end_ofi2_i2c1_driver_resetBus 11BC                      read_register@status 0016  
             ??i2_do_I2C_DO_ADDRESS_NACK 0026         __end_ofi2_do_I2C_DO_NACK_RESTART 111A  
          ??i2_do_I2C_SEND_RESTART_WRITE 0026                       _mssp1_IRQisEnabled 0FC8  
                 ?_OSCILLATOR_Initialize 0026                               ?i2_i2c_ISR 0026  
           __size_of_do_I2C_DO_NACK_STOP 000E                 read_xyzvalues@sensorData 00DB  
                         __end_of_printf 0E56                       _mssp1_waitForEvent 0F92  
                ?_do_I2C_DO_NACK_RESTART 0026                      start_initialization 0CF2  
                              _i2c_close 0E80                      _i2c_busCollisionISR 116A  
        __size_of_PIN_MANAGER_Initialize 002A                      ?_mssp1_IRQisEnabled 0026  
                        i2_do_I2C_DO_ACK 1122                            i2_returnReset 11A4  
                        i2_do_I2C_TX$315 0026                      ?_mssp1_waitForEvent 003A  
            __end_of_i2c_masterAccelRead 1034                              putch@txData 003B  
                     __end_of_i2c_poller 0ED2             __size_of_i2c1_driver_sendACK 0006  
                  __end_of_EUSART1_Write 0D72                          i2c_open@address 003D  
                i2c_setBuffer@bufferSize 003C                  ??_i2c1_driver_getRXData 003A  
           __size_of_i2c1_driver_restart 0004              __size_ofi2_i2c1_driver_stop 0004  
           __size_of_i2c1_driver_startRX 0004                    i2_do_I2C_DO_NACK_STOP 111A  
                 i2_do_I2C_SEND_ADR_READ 0FF8                    __end_of_i2c_setBuffer 0EB8  
               _ACCELEROMETER_Initialize 09BA                        __size_of_i2c_open 009A  
                   ?_i2c_busCollisionISR 0026                     __end_of_mssp1_setIRQ 1178  
                   ??_mssp1_IRQisEnabled 003A                  __size_of_read_xyzvalues 0092  
                   read_xyzvalues@status 0015                  __size_of_write_register 0032  
                     i2_do_I2C_SEND_STOP 112A                     ??_mssp1_waitForEvent 003C  
         ?_EUSART1_SetRxInterruptHandler 003A                    i2_i2c1_driver_sendACK 1164  
                          ?_do_I2C_RESET 0026             __end_ofi2_i2c1_driver_TXData 1152  
                            __pdataBANK0 0060                    i2i2c1_driver_TXData@d 0026  
              _do_I2C_TX_EMPTY$intlevel0 0A2C      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 11B0                              ?_returnStop 003A  
                               ??_printf 003E                      ?i2_do_I2C_SEND_STOP 0026  
                ??_i2c1_driver_setI2cISR 003C                    i2_i2c1_driver_startRX 11A0  
         __end_of_do_I2C_DO_NACK_RESTART 1042                           _eusart1RxCount 0018  
                   _i2c1_driver_sendNACK 1152             __end_ofi2_i2c1_driver_isNACK 0F6C  
                            __pbssCOMRAM 0001        _EUSART1_RxDefaultInterruptHandler 0046  
                             ?_i2c_close 0026                     _i2c1_driver_resetBus 11B8  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 00DB  
                         ?i2_returnReset 0026                                _do_I2C_RX 0858  
                              _do_I2C_TX 06A0              __size_of_do_I2C_TX_REGISTER 0014  
       __end_of_do_I2C_SEND_INITIAL_READ 0F14           __size_of_do_I2C_SEND_ADR_WRITE 0016  
        ??_EUSART1_SetTxInterruptHandler 003C            __end_of_do_I2C_SEND_ADR_WRITE 0EFE  
           __size_of_EUSART1_Receive_ISR 002C                     ??i2_do_I2C_SEND_STOP 0026  
              __size_of_i2c1_driver_open 0016                        ?i2_mssp1_clearIRQ 0026  
                   i2_do_I2C_TX_REGISTER 1096                __size_of_i2c1_driver_stop 0004  
                               ?_i2c_ISR 0026          _do_I2C_SEND_ADR_WRITE$intlevel0 0EEE  
                        _do_I2C_TX_EMPTY 0A26                       ??i2_mssp1_clearIRQ 0026  
                  ??_i2c_busCollisionISR 0026                   _PIN_MANAGER_Initialize 0E56  
                       ??i2_do_I2C_RESET 0026                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 10BC                    __end_ofi2_do_I2C_RCEN 10B0  
                         ??_do_I2C_RESET 003A              __end_of_i2c_masterOperation 0C62  
               ??_do_I2C_DO_ADDRESS_NACK 003A              _i2c1_driver_busCollisionISR 0013  
                  __end_of_do_I2C_DO_ACK 105E             ??_INTERRUPT_InterruptManager 0028  
                       __CFG_PRICLKEN$ON 000000               ??_do_I2C_SEND_RESTART_READ 003A  
                  ?_i2c1_driver_sendNACK 0026                              ??i2_i2c_ISR 0028  
                __end_ofi2_do_I2C_DO_ACK 112A                         ??_mssp1_clearIRQ 003A  
                            __smallconst 0600                                 _BAUDCON1 000FB8  
               i2_do_I2C_DO_NACK_RESTART 1112                    ?_i2c1_driver_resetBus 0026  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0026  
                             ?_do_I2C_RX 0026                               ?_do_I2C_TX 0026  
                      _i2c1_driver_start 1188               read_register@receivebuffer 0025  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 1170  
                      _i2c_ISR$intlevel0 0B38                       ?_i2c1_driver_start 0026  
                 ?i2_do_I2C_DO_NACK_STOP 0026                    ?i2_do_I2C_TX_REGISTER 0026  
                    __size_of_returnStop 000A                                 _PIE1bits 000F9D  
                               _PIE2bits 000FA0       _do_I2C_SEND_INITIAL_READ$intlevel0 0F04  
                    ??_i2c1_driver_start 003A                                 i2u141_48 07F4  
                               i2u141_49 0808      __size_of_INTERRUPT_InterruptManager 00FA  
                               i2u151_48 0C90                                 i2u151_49 0CA4  
                               i2u144_48 0990                                 i2u144_49 09A4  
                               i2u145_48 0AAE                                 i2u145_49 0AC2  
                               i2u162_48 008C                                 i2u139_48 0CD0  
                               i2u139_49 0CE4                                 i2u156_48 0060  
                               i2u165_48 00A2                                 i2u165_49 00B6  
                               i2u159_48 0076                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1             ??i2_do_I2C_SEND_INITIAL_READ 0026  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                 ?i2_i2c1_driver_sendACK 0026                                 _SSP1CON1 000FC6  
                               _SSP1CON2 000FC5                                 _SSP1STAT 000FC7  
                 ?i2_i2c1_driver_restart 0026                   ?i2_i2c1_driver_startRX 0026  
                      ?_do_I2C_SEND_STOP 0026                          ??i2_returnReset 0028  
                            ??_i2c_close 003A                __end_of_i2c1_driver_start 118C  
                          ??_returnReset 003C                       ??_do_I2C_SEND_STOP 003A  
            __size_of_i2c1_driver_TXData 0008        __end_of_do_I2C_SEND_RESTART_WRITE 1088  
                __end_of_do_I2C_TX_EMPTY 0A84                              _INTCON2bits 000FF1  
                              copy_data0 0D06                    ?_INTERRUPT_Initialize 0026  
                      ?_mssp1_disableIRQ 0026             __size_of_do_I2C_SEND_RESTART 000E  
            __size_of_i2c1_driver_isNACK 0016                     i2_i2c1_driver_TXData 114A  
                _do_I2C_DO_ACK$intlevel0 1056                                 _i2c_open 0606  
                  __size_of_mssp1_setIRQ 0004                       ??_mssp1_disableIRQ 003A  
                    _do_I2C_DO_NACK_STOP 1042                         __size_of_i2c_ISR 004E  
  __end_of_EUSART1_SetTxInterruptHandler 10D0   __size_of_EUSART1_SetTxInterruptHandler 000A  
          _EUSART1_SetTxInterruptHandler 10C6                                 __Hrparam 0000  
                   i2_i2c1_driver_isNACK 0F56                           _read_xyzvalues 0736  
                         _write_register 0D72                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                             ?_do_I2C_IDLE 0026  
                           ?_do_I2C_RCEN 0026                        __CFG_P2BMX$PORTB5 000000  
      __size_of_do_I2C_SEND_INITIAL_READ 0016                  ??_OSCILLATOR_Initialize 003A  
              ?_do_I2C_SEND_INITIAL_READ 0026                      _i2c1_driver_sendACK 1158  
               __size_of_i2c_masterWrite 0008                    i2_do_I2C_SEND_RESTART 1132  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                      i2c1_driver_TXData@d 003A  
            __size_of_EUSART1_Initialize 004C                   ??_i2c1_driver_sendNACK 003A  
        __end_ofi2_do_I2C_SEND_ADR_WRITE 0FE8         ??_i2c1_driver_setBusCollisionISR 003C  
        ?_i2c1_driver_setBusCollisionISR 003A                         read_register@reg 0040  
     _do_I2C_SEND_RESTART_READ$intlevel0 108E                      _i2c1_driver_restart 1184  
                          ?i2_returnStop 0026                     ?_do_I2C_DO_NACK_STOP 0026  
                    _i2c1_driver_startRX 117C             __end_of_do_I2C_SEND_ADR_READ 0F2A  
                 ??_i2c1_driver_resetBus 003A                         ?i2_do_I2C_DO_ACK 0026  
                          ??i2_do_I2C_RX 0026                            ??i2_do_I2C_TX 0026  
                           _mssp1_setIRQ 1174                              ??_do_I2C_RX 003A  
                            ??_do_I2C_TX 003B                                 __ptext10 10C6  
                               __ptext11 10D0                                 __ptext20 0ED2  
                               __ptext12 09BA                                 __ptext21 1026  
                               __ptext13 0D72                                 __ptext30 0B80  
                               __ptext22 0C1A                                 __ptext14 1102  
                               __ptext31 1034                                 __ptext23 0FC8  
                               __ptext15 0DA4                                 __ptext40 107A  
                               __ptext32 1042                                 __ptext24 0EB8  
                               __ptext16 0E9E                                 __ptext41 1088  
                               __ptext33 1050                                 __ptext25 0F92  
                               __ptext17 0606                                 __ptext50 11B8  
                               __ptext42 0FB6                                 __ptext34 0FA4  
                               __ptext26 0B32                                 __ptext18 10DA  
                               __ptext51 117C                                 __ptext43 0F2A  
                               __ptext35 0EE8                                 __ptext27 0A26  
                               __ptext19 10E4                                 __ptext60 1190  
                               __ptext52 10EE                                 __ptext44 0F6C  
                               __ptext36 0EFE                                 __ptext28 0858  
                               __ptext53 10F8                                 __ptext45 1174  
                               __ptext37 0F14                                 __ptext29 06A0  
                               __ptext70 1122                                 __ptext62 0C62  
                               __ptext54 1180                                 __ptext46 0F40  
                               __ptext38 105E                                 __ptext71 10A4  
                               __ptext63 1194                                 __ptext55 1184  
                               __ptext47 110A                                 __ptext39 106C  
                               __ptext80 1008                                 __ptext72 0FD8  
                               __ptext64 0A84                                 __ptext56 1158  
                               __ptext48 1178                                 __ptext81 1096  
                               __ptext73 0FE8                                 __ptext65 0946  
                               __ptext57 1188                                 __ptext49 1152  
                               __ptext90 11A8                                 __ptext82 1198  
                               __ptext74 0FF8                                 __ptext66 07C8  
                               __ptext58 0E80                                 __ptext91 11AC  
                               __ptext83 0F56                                 __ptext75 112A  
                               __ptext67 0CAA                                 __ptext59 118C  
                               __ptext92 11B0                                 __ptext84 114A  
                               __ptext76 1132                                 __ptext68 1112  
                               __ptext93 1164                                 __ptext85 119C  
                               __ptext77 113A                                 __ptext69 111A  
                               __ptext94 116A                                 __ptext86 115E  
                               __ptext78 1142                                 __ptext95 11B4  
                               __ptext87 11BA                                 __ptext79 10B0  
                               __ptext96 0DD2                                 __ptext88 11A0  
                               __ptext97 0E00                                 __ptext89 11A4  
                               __ptext98 0000                             _SSP1CON1bits 000FC6  
             ??_ACCELEROMETER_Initialize 0041                             _SSP1CON2bits 000FC5  
                   ?_i2c1_driver_sendACK 0026                     __end_of_do_I2C_RESET 0F40  
                 ??i2_do_I2C_TX_REGISTER 0026                    ?i2_i2c1_driver_TXData 0026  
                ?i2_do_I2C_SEND_ADR_READ 0026                  __size_ofi2_mssp1_setIRQ 0004  
                   write_register@buffer 0023                     ?_i2c1_driver_restart 0026  
                    __end_of_returnReset 10F8                         _i2c1_driver_open 0ED2  
                       _i2c1_driver_stop 1180                            __size_of_main 0074  
                   ?_i2c1_driver_startRX 0026           __size_of_i2c1_driver_getRXData 0004  
                 __end_of_read_xyzvalues 07C8                     write_register@status 0017  
          __end_of_i2c1_driver_getRXData 117C                   __end_of_write_register 0DA4  
                 i2c_masterAccelRead@reg 003F                    ?i2_i2c1_driver_isNACK 0026  
                       printString@F7170 0060                                 int$flags 004B  
   EUSART1_SetRxInterruptHandler@handler 003A       __end_of_INTERRUPT_InterruptManager 0102  
             _INTERRUPT_InterruptManager 0008                                 main@data 00E3  
                           _SSP1STATbits 000FC7                           ??i2_returnStop 0028  
       __end_of_do_I2C_SEND_RESTART_READ 1096                    __end_of_read_register 0DD2  
                           ??_returnStop 003C                      _EUSART1_Receive_ISR 0E00  
                  ??_do_I2C_DO_NACK_STOP 003A                mssp1_waitForEvent@timeout 003A  
         __size_of_i2c1_driver_setI2cISR 000A            __end_of_i2c1_driver_setI2cISR 10E4  
                             _INTCONbits 000FF2               __size_of_i2c1_driver_start 0004  
                 ??_INTERRUPT_Initialize 003A                 ?i2_i2c1_driver_getRXData 0026  
         __end_ofi2_do_I2C_SEND_ADR_READ 1008                    ??_i2c1_driver_sendACK 003A  
                       ?_do_I2C_TX_EMPTY 0026        __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048  
             __end_ofi2_i2c1_driver_stop 11B0                ?i2_do_I2C_DO_ADDRESS_NACK 0026  
                 _do_I2C_DO_ADDRESS_NACK 0B80                                 intlevel2 0000  
                 _do_I2C_RESET$intlevel0 0F30                    ??_i2c1_driver_restart 003A  
                   ?_EUSART1_Receive_ISR 0026                    ??_i2c1_driver_startRX 003A  
                    __end_ofi2_do_I2C_RX 09BA                      __end_ofi2_do_I2C_TX 0858  
                ?_PIN_MANAGER_Initialize 0026                          ?_read_xyzvalues 0040  
                             _RCSTA1bits 000FAB                          ?_write_register 003F  
                     __end_of_returnStop 1102             __end_of_EUSART1_Transmit_ISR 0E00  
           __size_of_i2c_masterAccelRead 000E       __end_ofi2_do_I2C_SEND_INITIAL_READ 0FF8  
             i2_do_I2C_SEND_INITIAL_READ 0FE8              __size_of_mssp1_IRQisEnabled 0010  
    __end_ofi2_do_I2C_SEND_RESTART_WRITE 1142              i2_do_I2C_SEND_RESTART_WRITE 113A  
                               printf@ap 003E                   ?i2_do_I2C_SEND_RESTART 0026  
             ??i2_do_I2C_DO_NACK_RESTART 0026              __size_of_mssp1_waitForEvent 0012  
         ?_EUSART1_SetTxInterruptHandler 003A                __size_ofi2_mssp1_clearIRQ 0004  
                 __size_of_EUSART1_Write 003A               __end_of_do_I2C_TX_REGISTER 0F80  
                      ??_i2c_masterWrite 003F                   __size_of_i2c_setBuffer 001A  
                      __CFG_T3CMX$PORTC0 000000                              _returnReset 10EE  
       _do_I2C_DO_NACK_RESTART$intlevel0 103A                  ??i2_do_I2C_DO_NACK_STOP 0026  
                 ??i2_i2c1_driver_TXData 0026             ??i2_do_I2C_SEND_RESTART_READ 0026  
                  ??_EUSART1_Receive_ISR 0026           __end_of_PIN_MANAGER_Initialize 0E80  
            __end_of_i2c_busCollisionISR 1170              __size_ofi2_do_I2C_SEND_STOP 0008  
               ??i2_i2c1_driver_sendNACK 0026                        __CFG_FOSC$INTIO67 000000  
                 ??i2_i2c1_driver_isNACK 0026         __size_ofi2_do_I2C_SEND_ADR_WRITE 0010  
                  _do_I2C_SEND_ADR_WRITE 0EE8                  ??i2_i2c1_driver_sendACK 0026  
                   _do_I2C_SEND_ADR_READ 0F14                 ??i2_i2c1_driver_resetBus 0026  
                ??i2_i2c1_driver_restart 0026  
