

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar  1 14:01:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,inline
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1,inline
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1,inline
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1,inline
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1,inline
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1,inline
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   115                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   116  0000                     
   117                           ; Version 1.45
   118                           ; Generated 16/11/2017 GMT
   119                           ; 
   120                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   121                           ; All rights reserved.
   122                           ; 
   123                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   124                           ; 
   125                           ; Redistribution and use in source and binary forms, with or without modification, are
   126                           ; permitted provided that the following conditions are met:
   127                           ; 
   128                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   129                           ;        conditions and the following disclaimer.
   130                           ; 
   131                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   132                           ;        of conditions and the following disclaimer in the documentation and/or other
   133                           ;        materials provided with the distribution.
   134                           ; 
   135                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   136                           ;        software without specific prior written permission.
   137                           ; 
   138                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   139                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   140                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   141                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   142                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   143                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   144                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   145                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   146                           ; 
   147                           ; 
   148                           ; Code-generator required, PIC18F25K22 Definitions
   149                           ; 
   150                           ; SFR Addresses
   151  0000                     
   152                           	psect	idataBANK0
   153  000B66                     __pidataBANK0:
   154                           	opt stack 0
   155                           
   156                           ;initializer for printString@F7170
   157  000B66  0A                 	db	10
   158  000B67  0D                 	db	13
   159  000B68  47                 	db	71
   160  000B69  4F                 	db	79
   161  000B6A  54                 	db	84
   162  000B6B  20                 	db	32
   163  000B6C  48                 	db	72
   164  000B6D  45                 	db	69
   165  000B6E  52                 	db	82
   166  000B6F  45                 	db	69
   167  000B70  2E                 	db	46
   168  000B71  20                 	db	32
   169  000B72  0A                 	db	10
   170  000B73  0D                 	db	13
   171  000B74  00                 	db	0
   172  000B75  00                 	db	0
   173  000B76  00                 	db	0
   174  000B77  00                 	db	0
   175  000B78  00                 	db	0
   176  000B79  00                 	db	0
   177  000B7A  00                 	db	0
   178  000B7B  00                 	db	0
   179  000B7C  00                 	db	0
   180  000B7D  00                 	db	0
   181  000B7E  00                 	db	0
   182  000B7F  00                 	db	0
   183  000B80  00                 	db	0
   184  000B81  00                 	db	0
   185  000B82  00                 	db	0
   186  000B83  00                 	db	0
   187  000B84  00                 	db	0
   188  000B85  00                 	db	0
   189  000B86  00                 	db	0
   190  000B87  00                 	db	0
   191  000B88  00                 	db	0
   192  000B89  00                 	db	0
   193  000B8A  00                 	db	0
   194  000B8B  00                 	db	0
   195  000B8C  00                 	db	0
   196  000B8D  00                 	db	0
   197  000B8E  00                 	db	0
   198  000B8F  00                 	db	0
   199  000B90  00                 	db	0
   200  000B91  00                 	db	0
   201  000B92  00                 	db	0
   202  000B93  00                 	db	0
   203  000B94  00                 	db	0
   204  000B95  00                 	db	0
   205  000B96  00                 	db	0
   206  000B97  00                 	db	0
   207                           
   208                           ;initializer for _fsmStateTable
   209  000B98  40                 	db	low _do_I2C_IDLE
   210  000B99  10                 	db	high _do_I2C_IDLE
   211  000B9A  9E                 	db	low _do_I2C_SEND_ADR_READ
   212  000B9B  0F                 	db	high _do_I2C_SEND_ADR_READ
   213  000B9C  72                 	db	low _do_I2C_SEND_ADR_WRITE
   214  000B9D  0F                 	db	high _do_I2C_SEND_ADR_WRITE
   215  000B9E  9E                 	db	low _do_I2C_TX
   216  000B9F  07                 	db	high _do_I2C_TX
   217  000BA0  56                 	db	low _do_I2C_RX
   218  000BA1  09                 	db	high _do_I2C_RX
   219  000BA2  2E                 	db	low _do_I2C_RCEN
   220  000BA3  10                 	db	high _do_I2C_RCEN
   221  000BA4  B0                 	db	low _do_I2C_TX_EMPTY
   222  000BA5  0A                 	db	high _do_I2C_TX_EMPTY
   223  000BA6  12                 	db	low _do_I2C_SEND_RESTART_READ
   224  000BA7  11                 	db	high _do_I2C_SEND_RESTART_READ
   225  000BA8  04                 	db	low _do_I2C_SEND_RESTART_WRITE
   226  000BA9  11                 	db	high _do_I2C_SEND_RESTART_WRITE
   227  000BAA  F6                 	db	low _do_I2C_SEND_RESTART
   228  000BAB  10                 	db	high _do_I2C_SEND_RESTART
   229  000BAC  E8                 	db	low _do_I2C_SEND_STOP
   230  000BAD  10                 	db	high _do_I2C_SEND_STOP
   231  000BAE  DA                 	db	low _do_I2C_DO_ACK
   232  000BAF  10                 	db	high _do_I2C_DO_ACK
   233  000BB0  CC                 	db	low _do_I2C_DO_NACK_STOP
   234  000BB1  10                 	db	high _do_I2C_DO_NACK_STOP
   235  000BB2  BE                 	db	low _do_I2C_DO_NACK_RESTART
   236  000BB3  10                 	db	high _do_I2C_DO_NACK_RESTART
   237  000BB4  B4                 	db	low _do_I2C_RESET
   238  000BB5  0F                 	db	high _do_I2C_RESET
   239  000BB6  0A                 	db	low _do_I2C_DO_ADDRESS_NACK
   240  000BB7  0C                 	db	high _do_I2C_DO_ADDRESS_NACK
   241  000BB8  88                 	db	low _do_I2C_SEND_INITIAL_READ
   242  000BB9  0F                 	db	high _do_I2C_SEND_INITIAL_READ
   243  000BBA  F6                 	db	low _do_I2C_TX_REGISTER
   244  000BBB  0F                 	db	high _do_I2C_TX_REGISTER
   245                           
   246                           	psect	nvCOMRAM
   247  000046                     __pnvCOMRAM:
   248                           	opt stack 0
   249  000046                     _EUSART1_RxDefaultInterruptHandler:
   250                           	opt stack 0
   251  000046                     	ds	2
   252  000048                     _EUSART1_TxDefaultInterruptHandler:
   253                           	opt stack 0
   254  000048                     	ds	2
   255  00004A                     _eusart1TxBufferRemaining:
   256                           	opt stack 0
   257  00004A                     	ds	1
   258  0000                     _ANSELA	set	3896
   259  0000                     _ANSELB	set	3897
   260  0000                     _ANSELC	set	3898
   261  0000                     _PIE2bits	set	4000
   262  0000                     _INTCONbits	set	4082
   263  0000                     _RCONbits	set	4048
   264  0000                     _INTCON2bits	set	4081
   265  0000                     _WPUB	set	3937
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISB	set	3987
   268  0000                     _TRISA	set	3986
   269  0000                     _LATC	set	3979
   270  0000                     _LATB	set	3978
   271  0000                     _LATA	set	3977
   272  0000                     _PIR2bits	set	4001
   273  0000                     _SSP1STATbits	set	4039
   274  0000                     _SSP1MSK	set	4042
   275  0000                     _SSP1BUF	set	4041
   276  0000                     _SSP1CON2bits	set	4037
   277  0000                     _SSP1ADD	set	4040
   278  0000                     _SSP1CON2	set	4037
   279  0000                     _SSP1CON1	set	4038
   280  0000                     _SSP1STAT	set	4039
   281  0000                     _PIR1bits	set	3998
   282  0000                     _SSP1CON1bits	set	4038
   283  0000                     _OSCTUNE	set	3995
   284  0000                     _OSCCON2	set	4050
   285  0000                     _OSCCON	set	4051
   286  0000                     _RCREG1	set	4014
   287  0000                     _RCSTA1bits	set	4011
   288  0000                     _TXREG1	set	4013
   289  0000                     _TXSTA1bits	set	4012
   290  0000                     _SPBRGH1	set	4016
   291  0000                     _SPBRG1	set	4015
   292  0000                     _TXSTA1	set	4012
   293  0000                     _RCSTA1	set	4011
   294  0000                     _BAUDCON1	set	4024
   295  0000                     _PIE1bits	set	3997
   296                           
   297                           	psect	smallconst
   298  000600                     __psmallconst:
   299                           	opt stack 0
   300  000600  00                 	db	0
   301  000601                     STR_2:
   302  000601  0A                 	db	10
   303  000602  00                 	db	0
   304  000603                     STR_1:
   305  000603  0D                 	db	13
   306  000604  00                 	db	0
   307                           
   308                           ; #config settings
   309  000605  00                 	db	0	; dummy byte at the end
   310  0000                     
   311                           	psect	cinit
   312  000D7C                     __pcinit:
   313                           	opt stack 0
   314  000D7C                     start_initialization:
   315                           	opt stack 0
   316  000D7C                     __initialization:
   317                           	opt stack 0
   318                           
   319                           ; Initialize objects allocated to BANK0 (86 bytes)
   320                           ; load TBLPTR registers with __pidataBANK0
   321  000D7C  0E66               	movlw	low __pidataBANK0
   322  000D7E  6EF6               	movwf	tblptrl,c
   323  000D80  0E0B               	movlw	high __pidataBANK0
   324  000D82  6EF7               	movwf	tblptrh,c
   325  000D84  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   326  000D86  6EF8               	movwf	tblptru,c
   327  000D88  EE00  F060         	lfsr	0,__pdataBANK0
   328  000D8C  EE10 F056          	lfsr	1,86
   329  000D90                     copy_data0:
   330  000D90  0009               	tblrd		*+
   331  000D92  CFF5 FFEE          	movff	tablat,postinc0
   332  000D96  50E5               	movf	postdec1,w,c
   333  000D98  50E1               	movf	fsr1l,w,c
   334  000D9A  E1FA               	bnz	copy_data0
   335                           
   336                           ; Clear objects allocated to BANK0 (37 bytes)
   337  000D9C  EE00  F0B6         	lfsr	0,__pbssBANK0
   338  000DA0  0E25               	movlw	37
   339  000DA2                     clear_0:
   340  000DA2  6AEE               	clrf	postinc0,c
   341  000DA4  06E8               	decf	wreg,f,c
   342  000DA6  E1FD               	bnz	clear_0
   343                           
   344                           ; Clear objects allocated to COMRAM (37 bytes)
   345  000DA8  EE00  F001         	lfsr	0,__pbssCOMRAM
   346  000DAC  0E25               	movlw	37
   347  000DAE                     clear_1:
   348  000DAE  6AEE               	clrf	postinc0,c
   349  000DB0  06E8               	decf	wreg,f,c
   350  000DB2  E1FD               	bnz	clear_1
   351  000DB4                     end_of_initialization:
   352                           	opt stack 0
   353  000DB4                     __end_of__initialization:
   354                           	opt stack 0
   355  000DB4  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   356  000DB6  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   357  000DB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   358  000DBA  6EF8               	movwf	tblptru,c
   359  000DBC  0100               	movlb	0
   360  000DBE  EF03  F003         	goto	_main	;jump to C main() function
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           postdec1	equ	0xFE5
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	bssCOMRAM
   371  000001                     __pbssCOMRAM:
   372                           	opt stack 0
   373  000001                     _eusart1RxBuffer:
   374                           	opt stack 0
   375  000001                     	ds	8
   376  000009                     _eusart1TxBuffer:
   377                           	opt stack 0
   378  000009                     	ds	8
   379  000011                     _i2c1_driver_i2cISR:
   380                           	opt stack 0
   381  000011                     	ds	2
   382  000013                     _i2c1_driver_busCollisionISR:
   383                           	opt stack 0
   384  000013                     	ds	2
   385  000015                     read_xyzvalues@status:
   386                           	opt stack 0
   387  000015                     	ds	1
   388  000016                     read_register@status:
   389                           	opt stack 0
   390  000016                     	ds	1
   391  000017                     write_register@status:
   392                           	opt stack 0
   393  000017                     	ds	1
   394  000018                     _eusart1RxCount:
   395                           	opt stack 0
   396  000018                     	ds	1
   397  000019                     _eusart1RxTail:
   398                           	opt stack 0
   399  000019                     	ds	1
   400  00001A                     _eusart1RxHead:
   401                           	opt stack 0
   402  00001A                     	ds	1
   403  00001B                     _eusart1TxTail:
   404                           	opt stack 0
   405  00001B                     	ds	1
   406  00001C                     _eusart1TxHead:
   407                           	opt stack 0
   408  00001C                     	ds	1
   409  00001D                     read_xyzvalues@readbuffer:
   410                           	opt stack 0
   411  00001D                     	ds	6
   412  000023                     write_register@buffer:
   413                           	opt stack 0
   414  000023                     	ds	2
   415  000025                     read_register@receivebuffer:
   416                           	opt stack 0
   417  000025                     	ds	1
   418                           tblptru	equ	0xFF8
   419                           tblptrh	equ	0xFF7
   420                           tblptrl	equ	0xFF6
   421                           tablat	equ	0xFF5
   422                           postinc0	equ	0xFEE
   423                           wreg	equ	0xFE8
   424                           postdec1	equ	0xFE5
   425                           fsr1l	equ	0xFE1
   426                           
   427                           	psect	bssBANK0
   428  0000B6                     __pbssBANK0:
   429                           	opt stack 0
   430  0000B6                     _i2c_status:
   431                           	opt stack 0
   432  0000B6                     	ds	37
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           postdec1	equ	0xFE5
   440                           fsr1l	equ	0xFE1
   441                           
   442                           	psect	dataBANK0
   443  000060                     __pdataBANK0:
   444                           	opt stack 0
   445  000060                     printString@F7170:
   446                           	opt stack 0
   447  000060                     	ds	50
   448  000092                     _fsmStateTable:
   449                           	opt stack 0
   450  000092                     	ds	36
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	cstackBANK0
   461  0000DB                     __pcstackBANK0:
   462                           	opt stack 0
   463  0000DB                     read_xyzvalues@sensorData:
   464                           	opt stack 0
   465                           
   466                           ; 6 bytes @ 0x0
   467  0000DB                     	ds	6
   468  0000E1                     ??_main:
   469                           
   470                           ; 1 bytes @ 0x6
   471  0000E1                     	ds	2
   472  0000E3                     main@data:
   473                           	opt stack 0
   474                           
   475                           ; 6 bytes @ 0x8
   476  0000E3                     	ds	6
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           postdec1	equ	0xFE5
   484                           fsr1l	equ	0xFE1
   485                           
   486                           	psect	cstackCOMRAM
   487  000026                     __pcstackCOMRAM:
   488                           	opt stack 0
   489  000026                     ??i2_i2c1_driver_isNACK:
   490  000026                     i2i2c1_driver_TXData@d:
   491                           	opt stack 0
   492  000026                     i2_do_I2C_TX$315:
   493                           	opt stack 0
   494  000026                     i2returnReset@p:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x0
   498  000026                     	ds	2
   499  000028                     ??_INTERRUPT_InterruptManager:
   500  000028                     
   501                           ; 1 bytes @ 0x2
   502  000028                     	ds	18
   503  00003A                     ??_mssp1_IRQisEnabled:
   504  00003A                     ??_i2c1_driver_isNACK:
   505  00003A                     i2c_close@ret:
   506                           	opt stack 0
   507  00003A                     EUSART1_Write@txData:
   508                           	opt stack 0
   509  00003A                     i2c1_driver_TXData@d:
   510                           	opt stack 0
   511  00003A                     i2c_setBuffer@buffer:
   512                           	opt stack 0
   513  00003A                     returnReset@p:
   514                           	opt stack 0
   515  00003A                     EUSART1_SetTxInterruptHandler@handler:
   516                           	opt stack 0
   517  00003A                     EUSART1_SetRxInterruptHandler@handler:
   518                           	opt stack 0
   519  00003A                     mssp1_waitForEvent@timeout:
   520                           	opt stack 0
   521  00003A                     i2c1_driver_setBusCollisionISR@f:
   522                           	opt stack 0
   523  00003A                     i2c1_driver_setI2cISR@f:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x14
   527  00003A                     	ds	1
   528  00003B                     putch@txData:
   529                           	opt stack 0
   530  00003B                     _do_I2C_TX$315:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x15
   534  00003B                     	ds	1
   535  00003C                     ?_printf:
   536                           	opt stack 0
   537  00003C                     i2c_open@ret:
   538                           	opt stack 0
   539  00003C                     i2c_setBuffer@bufferSize:
   540                           	opt stack 0
   541  00003C                     printf@f:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x16
   545  00003C                     	ds	1
   546  00003D                     i2c_open@address:
   547                           	opt stack 0
   548  00003D                     i2c_masterOperation@operation:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x17
   552  00003D                     	ds	1
   553  00003E                     i2c_masterOperation@ret:
   554                           	opt stack 0
   555  00003E                     printf@ap:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x18
   559  00003E                     	ds	1
   560  00003F                     i2c_masterAccelRead@reg:
   561                           	opt stack 0
   562  00003F                     write_register@data:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x19
   566  00003F                     	ds	1
   567  000040                     ?_read_xyzvalues:
   568                           	opt stack 0
   569  000040                     write_register@reg:
   570                           	opt stack 0
   571  000040                     read_register@reg:
   572                           	opt stack 0
   573  000040                     printf@c:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x1A
   577  000040                     	ds	1
   578  000041                     ??_ACCELEROMETER_Initialize:
   579                           
   580                           ; 1 bytes @ 0x1B
   581  000041                     	ds	5
   582  000046                     tblptru	equ	0xFF8
   583                           tblptrh	equ	0xFF7
   584                           tblptrl	equ	0xFF6
   585                           tablat	equ	0xFF5
   586                           postinc0	equ	0xFEE
   587                           wreg	equ	0xFE8
   588                           postdec1	equ	0xFE5
   589                           fsr1l	equ	0xFE1
   590                           
   591                           ; 1 bytes @ 0x20
   592 ;;
   593 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   594 ;;
   595 ;; *************** function _main *****************
   596 ;; Defined at:
   597 ;;		line 70 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  data            6    8[BANK0 ] struct .
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   611 ;;      Params:         0       0       0       0       0       0       0
   612 ;;      Locals:         0       6       0       0       0       0       0
   613 ;;      Temps:          0       2       0       0       0       0       0
   614 ;;      Totals:         0       8       0       0       0       0       0
   615 ;;Total ram usage:        8 bytes
   616 ;; Hardware stack levels required when called:   14
   617 ;; This function calls:
   618 ;;		_ACCELEROMETER_Initialize
   619 ;;		_EUSART1_Write
   620 ;;		_SYSTEM_Initialize
   621 ;;		_printf
   622 ;;		_read_xyzvalues
   623 ;; This function is called by:
   624 ;;		Startup code after reset
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text0
   629  000606                     __ptext0:
   630                           	opt stack 0
   631  000606                     _main:
   632                           	opt stack 17
   633                           
   634                           ;main.c: 71: accelerometer_data_t data;
   635                           ;main.c: 74: SYSTEM_Initialize();
   636                           
   637                           ;incstack = 0
   638  000606  EC05  F008         	call	_SYSTEM_Initialize	;wreg free
   639                           
   640                           ;main.c: 77: (INTCONbits.GIE = 1);
   641  00060A  8EF2               	bsf	intcon,7,c	;volatile
   642                           
   643                           ;main.c: 80: (INTCONbits.PEIE = 1);
   644  00060C  8CF2               	bsf	intcon,6,c	;volatile
   645                           
   646                           ;main.c: 82: ACCELEROMETER_Initialize();
   647  00060E  EC22  F005         	call	_ACCELEROMETER_Initialize	;wreg free
   648  000612                     
   649                           ;main.c: 88: data = read_xyzvalues();
   650  000612  EC1A  F004         	call	_read_xyzvalues	;wreg free
   651  000616  EE20  F0E3         	lfsr	2,main@data
   652  00061A  0E05               	movlw	5
   653  00061C                     u1691:
   654  00061C  CFEB FFDB          	movff	plusw0,plusw2
   655  000620  06E8               	decf	wreg,f,c
   656  000622  E2FC               	bc	u1691
   657                           
   658                           ;main.c: 89: _delay((unsigned long)((100)*(16000000/4000.0)));
   659  000624  0E03               	movlw	3
   660  000626  0100               	movlb	0	; () banked
   661  000628  6FE2               	movwf	(??_main+1)& (0+255),b
   662  00062A  0E08               	movlw	8
   663  00062C  6FE1               	movwf	??_main& (0+255),b
   664  00062E  0E77               	movlw	119
   665  000630                     u1707:
   666  000630  2EE8               	decfsz	wreg,f,c
   667  000632  D7FE               	bra	u1707
   668  000634  2FE1               	decfsz	??_main& (0+255),f,b
   669  000636  D7FC               	bra	u1707
   670  000638  2FE2               	decfsz	(??_main+1)& (0+255),f,b
   671  00063A  D7FA               	bra	u1707
   672                           
   673                           ;main.c: 92: EUSART1_Write(data.x & 0xff);
   674  00063C  0100               	movlb	0	; () banked
   675  00063E  51E3               	movf	main@data& (0+255),w,b
   676  000640  ECE1  F006         	call	_EUSART1_Write
   677                           
   678                           ;main.c: 93: _delay((unsigned long)((5)*(16000000/4000.0)));
   679  000644  0E1A               	movlw	26
   680  000646  0100               	movlb	0	; () banked
   681  000648  6FE1               	movwf	??_main& (0+255),b
   682  00064A  0EF8               	movlw	248
   683  00064C                     u1717:
   684  00064C  2EE8               	decfsz	wreg,f,c
   685  00064E  D7FE               	bra	u1717
   686  000650  2FE1               	decfsz	??_main& (0+255),f,b
   687  000652  D7FC               	bra	u1717
   688  000654  F000               	nop	
   689                           
   690                           ;main.c: 94: EUSART1_Write((data.x>>8) & 0xff);
   691  000656  0100               	movlb	0	; () banked
   692  000658  51E4               	movf	(main@data+1)& (0+255),w,b
   693  00065A  ECE1  F006         	call	_EUSART1_Write
   694                           
   695                           ;main.c: 95: _delay((unsigned long)((5)*(16000000/4000.0)));
   696  00065E  0E1A               	movlw	26
   697  000660  0100               	movlb	0	; () banked
   698  000662  6FE1               	movwf	??_main& (0+255),b
   699  000664  0EF8               	movlw	248
   700  000666                     u1727:
   701  000666  2EE8               	decfsz	wreg,f,c
   702  000668  D7FE               	bra	u1727
   703  00066A  2FE1               	decfsz	??_main& (0+255),f,b
   704  00066C  D7FC               	bra	u1727
   705  00066E  F000               	nop	
   706                           
   707                           ;main.c: 96: EUSART1_Write(data.y & 0xff);
   708  000670  0100               	movlb	0	; () banked
   709  000672  51E5               	movf	(main@data+2)& (0+255),w,b
   710  000674  ECE1  F006         	call	_EUSART1_Write
   711                           
   712                           ;main.c: 97: _delay((unsigned long)((5)*(16000000/4000.0)));
   713  000678  0E1A               	movlw	26
   714  00067A  0100               	movlb	0	; () banked
   715  00067C  6FE1               	movwf	??_main& (0+255),b
   716  00067E  0EF8               	movlw	248
   717  000680                     u1737:
   718  000680  2EE8               	decfsz	wreg,f,c
   719  000682  D7FE               	bra	u1737
   720  000684  2FE1               	decfsz	??_main& (0+255),f,b
   721  000686  D7FC               	bra	u1737
   722  000688  F000               	nop	
   723                           
   724                           ;main.c: 98: EUSART1_Write((data.y>>8) & 0xff);
   725  00068A  0100               	movlb	0	; () banked
   726  00068C  51E6               	movf	(main@data+3)& (0+255),w,b
   727  00068E  ECE1  F006         	call	_EUSART1_Write
   728                           
   729                           ;main.c: 99: _delay((unsigned long)((5)*(16000000/4000.0)));
   730  000692  0E1A               	movlw	26
   731  000694  0100               	movlb	0	; () banked
   732  000696  6FE1               	movwf	??_main& (0+255),b
   733  000698  0EF8               	movlw	248
   734  00069A                     u1747:
   735  00069A  2EE8               	decfsz	wreg,f,c
   736  00069C  D7FE               	bra	u1747
   737  00069E  2FE1               	decfsz	??_main& (0+255),f,b
   738  0006A0  D7FC               	bra	u1747
   739  0006A2  F000               	nop	
   740                           
   741                           ;main.c: 100: EUSART1_Write(data.z & 0xff);
   742  0006A4  0100               	movlb	0	; () banked
   743  0006A6  51E7               	movf	(main@data+4)& (0+255),w,b
   744  0006A8  ECE1  F006         	call	_EUSART1_Write
   745                           
   746                           ;main.c: 101: _delay((unsigned long)((5)*(16000000/4000.0)));
   747  0006AC  0E1A               	movlw	26
   748  0006AE  0100               	movlb	0	; () banked
   749  0006B0  6FE1               	movwf	??_main& (0+255),b
   750  0006B2  0EF8               	movlw	248
   751  0006B4                     u1757:
   752  0006B4  2EE8               	decfsz	wreg,f,c
   753  0006B6  D7FE               	bra	u1757
   754  0006B8  2FE1               	decfsz	??_main& (0+255),f,b
   755  0006BA  D7FC               	bra	u1757
   756  0006BC  F000               	nop	
   757                           
   758                           ;main.c: 102: EUSART1_Write((data.z>>8) & 0xff);
   759  0006BE  0100               	movlb	0	; () banked
   760  0006C0  51E8               	movf	(main@data+5)& (0+255),w,b
   761  0006C2  ECE1  F006         	call	_EUSART1_Write
   762                           
   763                           ;main.c: 103: _delay((unsigned long)((5)*(16000000/4000.0)));
   764  0006C6  0E1A               	movlw	26
   765  0006C8  0100               	movlb	0	; () banked
   766  0006CA  6FE1               	movwf	??_main& (0+255),b
   767  0006CC  0EF8               	movlw	248
   768  0006CE                     u1767:
   769  0006CE  2EE8               	decfsz	wreg,f,c
   770  0006D0  D7FE               	bra	u1767
   771  0006D2  2FE1               	decfsz	??_main& (0+255),f,b
   772  0006D4  D7FC               	bra	u1767
   773  0006D6  F000               	nop	
   774                           
   775                           ;main.c: 104: printf("\r");
   776  0006D8  0E03               	movlw	low STR_1
   777  0006DA  6E3C               	movwf	printf@f,c
   778  0006DC  0E06               	movlw	high STR_1
   779  0006DE  6E3D               	movwf	printf@f+1,c
   780  0006E0  EC5B  F007         	call	_printf	;wreg free
   781                           
   782                           ;main.c: 105: _delay((unsigned long)((5)*(16000000/4000.0)));
   783  0006E4  0E1A               	movlw	26
   784  0006E6  0100               	movlb	0	; () banked
   785  0006E8  6FE1               	movwf	??_main& (0+255),b
   786  0006EA  0EF8               	movlw	248
   787  0006EC                     u1777:
   788  0006EC  2EE8               	decfsz	wreg,f,c
   789  0006EE  D7FE               	bra	u1777
   790  0006F0  2FE1               	decfsz	??_main& (0+255),f,b
   791  0006F2  D7FC               	bra	u1777
   792  0006F4  F000               	nop	
   793                           
   794                           ;main.c: 106: printf("\n");
   795  0006F6  0E01               	movlw	low STR_2
   796  0006F8  6E3C               	movwf	printf@f,c
   797  0006FA  0E06               	movlw	high STR_2
   798  0006FC  6E3D               	movwf	printf@f+1,c
   799  0006FE  EC5B  F007         	call	_printf	;wreg free
   800  000702  D787               	goto	l613
   801  000704                     __end_of_main:
   802                           	opt stack 0
   803                           tblptru	equ	0xFF8
   804                           tblptrh	equ	0xFF7
   805                           tblptrl	equ	0xFF6
   806                           tablat	equ	0xFF5
   807                           intcon	equ	0xFF2
   808                           postinc0	equ	0xFEE
   809                           plusw0	equ	0xFEB
   810                           wreg	equ	0xFE8
   811                           postdec1	equ	0xFE5
   812                           fsr1l	equ	0xFE1
   813                           plusw2	equ	0xFDB
   814                           
   815 ;; *************** function _read_xyzvalues *****************
   816 ;; Defined at:
   817 ;;		line 67 in file "accelerometer.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  sensorData      6    0[BANK0 ] struct .
   822 ;; Return value:  Size  Location     Type
   823 ;;                  6   26[COMRAM] struct .
   824 ;; Registers used:
   825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   831 ;;      Params:         6       0       0       0       0       0       0
   832 ;;      Locals:         0       6       0       0       0       0       0
   833 ;;      Temps:          0       0       0       0       0       0       0
   834 ;;      Totals:         6       6       0       0       0       0       0
   835 ;;Total ram usage:       12 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:   12
   838 ;; This function calls:
   839 ;;		_i2c_close
   840 ;;		_i2c_masterAccelRead
   841 ;;		_i2c_open
   842 ;;		_i2c_setBuffer
   843 ;; This function is called by:
   844 ;;		_main
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           	psect	text1
   849  000834                     __ptext1:
   850                           	opt stack 0
   851  000834                     _read_xyzvalues:
   852                           	opt stack 18
   853                           
   854                           ;accelerometer.c: 68: static i2c_error_t status;
   855                           ;accelerometer.c: 69: static volatile uint8_t readbuffer[6];
   856                           ;accelerometer.c: 70: accelerometer_data_t sensorData;
   857                           ;accelerometer.c: 73: i2c_open(0x1D);
   858                           
   859                           ;incstack = 0
   860  000834  0E1D               	movlw	29
   861  000836  EC82  F003         	call	_i2c_open
   862                           
   863                           ;accelerometer.c: 74: i2c_setBuffer(readbuffer, 6);
   864  00083A  0E1D               	movlw	low read_xyzvalues@readbuffer
   865  00083C  6E3A               	movwf	i2c_setBuffer@buffer,c
   866  00083E  0E00               	movlw	high read_xyzvalues@readbuffer
   867  000840  6E3B               	movwf	i2c_setBuffer@buffer+1,c
   868  000842  0E00               	movlw	0
   869  000844  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
   870  000846  0E06               	movlw	6
   871  000848  6E3C               	movwf	i2c_setBuffer@bufferSize,c
   872  00084A  EC94  F007         	call	_i2c_setBuffer	;wreg free
   873                           
   874                           ;accelerometer.c: 77: status = i2c_masterAccelRead(0x01);
   875  00084E  0E01               	movlw	1
   876  000850  EC58  F008         	call	_i2c_masterAccelRead
   877  000854  6E15               	movwf	read_xyzvalues@status,c
   878                           
   879                           ;accelerometer.c: 80: status = i2c_close();
   880  000856  EC85  F007         	call	_i2c_close	;wreg free
   881  00085A  6E15               	movwf	read_xyzvalues@status,c
   882                           
   883                           ;accelerometer.c: 82: sensorData.x = readbuffer[0];
   884  00085C  C01D  F0DB         	movff	read_xyzvalues@readbuffer,read_xyzvalues@sensorData	;volatile
   885  000860  0100               	movlb	0	; () banked
   886  000862  6BDC               	clrf	(read_xyzvalues@sensorData+1)& (0+255),b
   887                           
   888                           ; BSR set to: 0
   889                           ;accelerometer.c: 83: sensorData.x <<= 8;
   890  000864  51DB               	movf	read_xyzvalues@sensorData& (0+255),w,b
   891  000866  6FDC               	movwf	(read_xyzvalues@sensorData+1)& (0+255),b
   892  000868  6BDB               	clrf	read_xyzvalues@sensorData& (0+255),b
   893                           
   894                           ; BSR set to: 0
   895                           ;accelerometer.c: 84: sensorData.x |= readbuffer[1];
   896  00086A  501E               	movf	read_xyzvalues@readbuffer+1,w,c	;volatile
   897  00086C  13DB               	iorwf	read_xyzvalues@sensorData& (0+255),f,b
   898                           
   899                           ; BSR set to: 0
   900                           ;accelerometer.c: 85: sensorData.x >>= 2;
   901  00086E  35DC               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   902  000870  33DC               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   903  000872  33DB               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   904  000874  35DC               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   905  000876  33DC               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   906  000878  33DB               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   907                           
   908                           ; BSR set to: 0
   909                           ;accelerometer.c: 87: sensorData.y = readbuffer[2];
   910  00087A  C01F  F0DD         	movff	read_xyzvalues@readbuffer+2,read_xyzvalues@sensorData+2	;volatile
   911  00087E  6BDE               	clrf	(read_xyzvalues@sensorData+3)& (0+255),b
   912                           
   913                           ; BSR set to: 0
   914                           ;accelerometer.c: 88: sensorData.y <<= 8;
   915  000880  51DD               	movf	(read_xyzvalues@sensorData+2)& (0+255),w,b
   916  000882  6FDE               	movwf	(read_xyzvalues@sensorData+3)& (0+255),b
   917  000884  6BDD               	clrf	(read_xyzvalues@sensorData+2)& (0+255),b
   918                           
   919                           ; BSR set to: 0
   920                           ;accelerometer.c: 89: sensorData.y |= readbuffer[3];
   921  000886  5020               	movf	read_xyzvalues@readbuffer+3,w,c	;volatile
   922  000888  13DD               	iorwf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   923                           
   924                           ; BSR set to: 0
   925                           ;accelerometer.c: 90: sensorData.y >>= 2;
   926  00088A  35DE               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   927  00088C  33DE               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   928  00088E  33DD               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   929  000890  35DE               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   930  000892  33DE               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   931  000894  33DD               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   932                           
   933                           ; BSR set to: 0
   934                           ;accelerometer.c: 92: sensorData.z = readbuffer[4];
   935  000896  C021  F0DF         	movff	read_xyzvalues@readbuffer+4,read_xyzvalues@sensorData+4	;volatile
   936  00089A  6BE0               	clrf	(read_xyzvalues@sensorData+5)& (0+255),b
   937                           
   938                           ; BSR set to: 0
   939                           ;accelerometer.c: 93: sensorData.z <<= 8;
   940  00089C  51DF               	movf	(read_xyzvalues@sensorData+4)& (0+255),w,b
   941  00089E  6FE0               	movwf	(read_xyzvalues@sensorData+5)& (0+255),b
   942  0008A0  6BDF               	clrf	(read_xyzvalues@sensorData+4)& (0+255),b
   943                           
   944                           ; BSR set to: 0
   945                           ;accelerometer.c: 94: sensorData.z |= readbuffer[5];
   946  0008A2  5022               	movf	read_xyzvalues@readbuffer+5,w,c	;volatile
   947  0008A4  13DF               	iorwf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   948                           
   949                           ; BSR set to: 0
   950                           ;accelerometer.c: 95: sensorData.z >>= 2;
   951  0008A6  35E0               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   952  0008A8  33E0               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   953  0008AA  33DF               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   954  0008AC  35E0               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   955  0008AE  33E0               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   956  0008B0  33DF               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   957                           
   958                           ; BSR set to: 0
   959                           ;accelerometer.c: 97: return sensorData;
   960  0008B2  EE20  F0DB         	lfsr	2,read_xyzvalues@sensorData
   961  0008B6  EE00  F040         	lfsr	0,?_read_xyzvalues
   962  0008BA  0E05               	movlw	5
   963  0008BC                     u1471:
   964  0008BC  CFDB FFEB          	movff	plusw2,plusw0
   965  0008C0  06E8               	decf	wreg,f,c
   966  0008C2  E2FC               	bc	u1471
   967  0008C4  0012               	return	
   968  0008C6                     __end_of_read_xyzvalues:
   969                           	opt stack 0
   970                           tblptru	equ	0xFF8
   971                           tblptrh	equ	0xFF7
   972                           tblptrl	equ	0xFF6
   973                           tablat	equ	0xFF5
   974                           intcon	equ	0xFF2
   975                           postinc0	equ	0xFEE
   976                           plusw0	equ	0xFEB
   977                           wreg	equ	0xFE8
   978                           postdec1	equ	0xFE5
   979                           fsr1l	equ	0xFE1
   980                           plusw2	equ	0xFDB
   981                           
   982 ;; *************** function _printf *****************
   983 ;; Defined at:
   984 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;  f               2   22[COMRAM] PTR const unsigned char 
   987 ;;		 -> STR_2(2), STR_1(2), 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  tmpval          4    0        struct .
   990 ;;  cp              3    0        PTR const unsigned char 
   991 ;;  ap              2   24[COMRAM] PTR void [1]
   992 ;;		 -> ?_printf(2), 
   993 ;;  len             2    0        unsigned int 
   994 ;;  val             2    0        unsigned int 
   995 ;;  c               1   26[COMRAM] char 
   996 ;;  flag            1    0        unsigned char 
   997 ;;  prec            1    0        char 
   998 ;; Return value:  Size  Location     Type
   999 ;;                  2   22[COMRAM] int 
  1000 ;; Registers used:
  1001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1007 ;;      Params:         2       0       0       0       0       0       0
  1008 ;;      Locals:         3       0       0       0       0       0       0
  1009 ;;      Temps:          0       0       0       0       0       0       0
  1010 ;;      Totals:         5       0       0       0       0       0       0
  1011 ;;Total ram usage:        5 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    7
  1014 ;; This function calls:
  1015 ;;		_putch
  1016 ;; This function is called by:
  1017 ;;		_main
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text2
  1022  000EB6                     __ptext2:
  1023                           	opt stack 0
  1024  000EB6                     _printf:
  1025                           	opt stack 23
  1026                           
  1027                           ;doprnt.c: 466: va_list ap;
  1028                           ;doprnt.c: 499: signed char c;
  1029                           ;doprnt.c: 506: signed char prec;
  1030                           ;doprnt.c: 508: unsigned char flag;
  1031                           ;doprnt.c: 523: union {
  1032                           ;doprnt.c: 524: unsigned long vd;
  1033                           ;doprnt.c: 525: double integ;
  1034                           ;doprnt.c: 526: } tmpval;
  1035                           ;doprnt.c: 528: unsigned int val;
  1036                           ;doprnt.c: 529: unsigned len;
  1037                           ;doprnt.c: 530: const char * cp;
  1038                           ;doprnt.c: 533: *ap = __va_start();
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;incstack = 0
  1042  000EB6  0E3E               	movlw	low (?_printf+2)
  1043  000EB8  6E3E               	movwf	printf@ap,c
  1044  000EBA  0E00               	movlw	high (?_printf+2)
  1045  000EBC  6E3F               	movwf	printf@ap+1,c
  1046                           
  1047                           ;doprnt.c: 536: while(c = *f++) {
  1048  000EBE  D003               	goto	l666
  1049  000EC0                     
  1050                           ;doprnt.c: 540: {
  1051                           ;doprnt.c: 541: (putch(c) );
  1052  000EC0  5040               	movf	printf@c,w,c
  1053  000EC2  ECA3  F008         	call	_putch
  1054  000EC6                     l666:
  1055  000EC6  C03C  FFF6         	movff	printf@f,tblptrl
  1056  000ECA  C03D  FFF7         	movff	printf@f+1,tblptrh
  1057  000ECE  4A3C               	infsnz	printf@f,f,c
  1058  000ED0  2A3D               	incf	printf@f+1,f,c
  1059  000ED2                     	if	0	;tblptru may be non-zero
  1060  000ED2                     	endif
  1061  000ED2                     	if	0	;tblptru may be non-zero
  1062  000ED2                     	endif
  1063  000ED2  0008               	tblrd		*
  1064  000ED4  CFF5 F040          	movff	tablat,printf@c
  1065  000ED8  5040               	movf	printf@c,w,c
  1066  000EDA  B4D8               	btfsc	status,2,c
  1067  000EDC  0012               	return	
  1068  000EDE  D7F0               	goto	l667
  1069  000EE0                     __end_of_printf:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           intcon	equ	0xFF2
  1076                           postinc0	equ	0xFEE
  1077                           plusw0	equ	0xFEB
  1078                           wreg	equ	0xFE8
  1079                           postdec1	equ	0xFE5
  1080                           fsr1l	equ	0xFE1
  1081                           plusw2	equ	0xFDB
  1082                           status	equ	0xFD8
  1083                           
  1084 ;; *************** function _putch *****************
  1085 ;; Defined at:
  1086 ;;		line 178 in file "mcc_generated_files/eusart1.c"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;  txData          1    wreg     unsigned char 
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;  txData          1   21[COMRAM] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  1    wreg      void 
  1093 ;; Registers used:
  1094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1100 ;;      Params:         0       0       0       0       0       0       0
  1101 ;;      Locals:         1       0       0       0       0       0       0
  1102 ;;      Temps:          0       0       0       0       0       0       0
  1103 ;;      Totals:         1       0       0       0       0       0       0
  1104 ;;Total ram usage:        1 bytes
  1105 ;; Hardware stack levels used:    1
  1106 ;; Hardware stack levels required when called:    6
  1107 ;; This function calls:
  1108 ;;		_EUSART1_Write
  1109 ;; This function is called by:
  1110 ;;		_printf
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text3
  1115  001146                     __ptext3:
  1116                           	opt stack 0
  1117  001146                     _putch:
  1118                           	opt stack 23
  1119                           
  1120                           ;incstack = 0
  1121                           ;putch@txData stored from wreg
  1122  001146  6E3B               	movwf	putch@txData,c
  1123                           
  1124                           ;eusart1.c: 180: EUSART1_Write(txData);
  1125  001148  503B               	movf	putch@txData,w,c
  1126  00114A  ECE1  F006         	call	_EUSART1_Write
  1127  00114E  0012               	return		;funcret
  1128  001150                     __end_of_putch:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           intcon	equ	0xFF2
  1135                           postinc0	equ	0xFEE
  1136                           plusw0	equ	0xFEB
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           plusw2	equ	0xFDB
  1141                           status	equ	0xFD8
  1142                           
  1143 ;; *************** function _EUSART1_Write *****************
  1144 ;; Defined at:
  1145 ;;		line 150 in file "mcc_generated_files/eusart1.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  txData          1    wreg     unsigned char 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  txData          1   20[COMRAM] unsigned char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1159 ;;      Params:         0       0       0       0       0       0       0
  1160 ;;      Locals:         1       0       0       0       0       0       0
  1161 ;;      Temps:          0       0       0       0       0       0       0
  1162 ;;      Totals:         1       0       0       0       0       0       0
  1163 ;;Total ram usage:        1 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:    5
  1166 ;; This function calls:
  1167 ;;		Nothing
  1168 ;; This function is called by:
  1169 ;;		_putch
  1170 ;;		_main
  1171 ;;		_Send_UART
  1172 ;;		_printString
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text4
  1177  000DC2                     __ptext4:
  1178                           	opt stack 0
  1179  000DC2                     _EUSART1_Write:
  1180                           	opt stack 23
  1181                           
  1182                           ;incstack = 0
  1183                           ;EUSART1_Write@txData stored from wreg
  1184  000DC2  6E3A               	movwf	EUSART1_Write@txData,c
  1185  000DC4                     
  1186                           ;eusart1.c: 153: {
  1187                           
  1188                           ;eusart1.c: 152: while(0 == eusart1TxBufferRemaining)
  1189  000DC4  504A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  1190  000DC6  B4D8               	btfsc	status,2,c
  1191  000DC8  D7FD               	goto	l3549
  1192                           
  1193                           ;eusart1.c: 154: }
  1194                           ;eusart1.c: 156: if(0 == PIE1bits.TX1IE)
  1195  000DCA  B89D               	btfsc	3997,4,c	;volatile
  1196  000DCC  D003               	goto	l309
  1197                           
  1198                           ;eusart1.c: 157: {
  1199                           ;eusart1.c: 158: TXREG1 = txData;
  1200  000DCE  C03A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1201                           
  1202                           ;eusart1.c: 159: }
  1203  000DD2  D012               	goto	l310
  1204  000DD4                     l309:
  1205                           
  1206                           ;eusart1.c: 160: else
  1207                           ;eusart1.c: 161: {
  1208                           ;eusart1.c: 162: PIE1bits.TX1IE = 0;
  1209  000DD4  989D               	bcf	3997,4,c	;volatile
  1210                           
  1211                           ;eusart1.c: 163: eusart1TxBuffer[eusart1TxHead++] = txData;
  1212  000DD6  501C               	movf	_eusart1TxHead,w,c	;volatile
  1213  000DD8  0D01               	mullw	1
  1214  000DDA  0E09               	movlw	low _eusart1TxBuffer
  1215  000DDC  24F3               	addwf	prodl,w,c
  1216  000DDE  6ED9               	movwf	fsr2l,c
  1217  000DE0  0E00               	movlw	high _eusart1TxBuffer
  1218  000DE2  20F4               	addwfc	prodh,w,c
  1219  000DE4  6EDA               	movwf	fsr2h,c
  1220  000DE6  C03A  FFDF         	movff	EUSART1_Write@txData,indf2
  1221  000DEA  2A1C               	incf	_eusart1TxHead,f,c	;volatile
  1222                           
  1223                           ;eusart1.c: 164: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  1224  000DEC  0E07               	movlw	7
  1225  000DEE  641C               	cpfsgt	_eusart1TxHead,c	;volatile
  1226  000DF0  D002               	goto	l311
  1227                           
  1228                           ;eusart1.c: 165: {
  1229                           ;eusart1.c: 166: eusart1TxHead = 0;
  1230  000DF2  0E00               	movlw	0
  1231  000DF4  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1232  000DF6                     l311:
  1233                           
  1234                           ;eusart1.c: 167: }
  1235                           ;eusart1.c: 168: eusart1TxBufferRemaining--;
  1236  000DF6  064A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1237  000DF8                     l310:
  1238                           
  1239                           ;eusart1.c: 169: }
  1240                           ;eusart1.c: 170: PIE1bits.TX1IE = 1;
  1241  000DF8  889D               	bsf	3997,4,c	;volatile
  1242  000DFA  0012               	return		;funcret
  1243  000DFC                     __end_of_EUSART1_Write:
  1244                           	opt stack 0
  1245                           tblptru	equ	0xFF8
  1246                           tblptrh	equ	0xFF7
  1247                           tblptrl	equ	0xFF6
  1248                           tablat	equ	0xFF5
  1249                           prodh	equ	0xFF4
  1250                           prodl	equ	0xFF3
  1251                           intcon	equ	0xFF2
  1252                           postinc0	equ	0xFEE
  1253                           plusw0	equ	0xFEB
  1254                           wreg	equ	0xFE8
  1255                           postdec1	equ	0xFE5
  1256                           fsr1l	equ	0xFE1
  1257                           indf2	equ	0xFDF
  1258                           plusw2	equ	0xFDB
  1259                           fsr2h	equ	0xFDA
  1260                           fsr2l	equ	0xFD9
  1261                           status	equ	0xFD8
  1262                           
  1263 ;; *************** function _SYSTEM_Initialize *****************
  1264 ;; Defined at:
  1265 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;		None
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;		None
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		wreg, status,2, status,0, cstack
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1279 ;;      Params:         0       0       0       0       0       0       0
  1280 ;;      Locals:         0       0       0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0       0       0
  1282 ;;      Totals:         0       0       0       0       0       0       0
  1283 ;;Total ram usage:        0 bytes
  1284 ;; Hardware stack levels used:    1
  1285 ;; Hardware stack levels required when called:    7
  1286 ;; This function calls:
  1287 ;;		_EUSART1_Initialize
  1288 ;;		_INTERRUPT_Initialize
  1289 ;;		_OSCILLATOR_Initialize
  1290 ;;		_PIN_MANAGER_Initialize
  1291 ;; This function is called by:
  1292 ;;		_main
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text5
  1297  00100A                     __ptext5:
  1298                           	opt stack 0
  1299  00100A                     _SYSTEM_Initialize:
  1300                           	opt stack 23
  1301                           
  1302                           ;mcc.c: 114: INTERRUPT_Initialize();
  1303                           
  1304                           ;incstack = 0
  1305  00100A  ECFD  F008         	call	_INTERRUPT_Initialize	;wreg free
  1306                           
  1307                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1308  00100E  EC70  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  1309                           
  1310                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1311  001012  EC51  F008         	call	_OSCILLATOR_Initialize	;wreg free
  1312                           
  1313                           ;mcc.c: 117: EUSART1_Initialize();
  1314  001016  EC2C  F006         	call	_EUSART1_Initialize	;wreg free
  1315  00101A  0012               	return		;funcret
  1316  00101C                     __end_of_SYSTEM_Initialize:
  1317                           	opt stack 0
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           prodh	equ	0xFF4
  1323                           prodl	equ	0xFF3
  1324                           intcon	equ	0xFF2
  1325                           postinc0	equ	0xFEE
  1326                           plusw0	equ	0xFEB
  1327                           wreg	equ	0xFE8
  1328                           postdec1	equ	0xFE5
  1329                           fsr1l	equ	0xFE1
  1330                           indf2	equ	0xFDF
  1331                           plusw2	equ	0xFDB
  1332                           fsr2h	equ	0xFDA
  1333                           fsr2l	equ	0xFD9
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _PIN_MANAGER_Initialize *****************
  1337 ;; Defined at:
  1338 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;		None
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1352 ;;      Params:         0       0       0       0       0       0       0
  1353 ;;      Locals:         0       0       0       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0       0       0
  1355 ;;      Totals:         0       0       0       0       0       0       0
  1356 ;;Total ram usage:        0 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    5
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_SYSTEM_Initialize
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text6
  1367  000EE0                     __ptext6:
  1368                           	opt stack 0
  1369  000EE0                     _PIN_MANAGER_Initialize:
  1370                           	opt stack 24
  1371                           
  1372                           ;pin_manager.c: 57: LATA = 0x00;
  1373                           
  1374                           ;incstack = 0
  1375  000EE0  0E00               	movlw	0
  1376  000EE2  6E89               	movwf	3977,c	;volatile
  1377                           
  1378                           ;pin_manager.c: 58: LATB = 0x00;
  1379  000EE4  0E00               	movlw	0
  1380  000EE6  6E8A               	movwf	3978,c	;volatile
  1381                           
  1382                           ;pin_manager.c: 59: LATC = 0x00;
  1383  000EE8  0E00               	movlw	0
  1384  000EEA  6E8B               	movwf	3979,c	;volatile
  1385                           
  1386                           ;pin_manager.c: 64: TRISA = 0xFF;
  1387  000EEC  6892               	setf	3986,c	;volatile
  1388                           
  1389                           ;pin_manager.c: 65: TRISB = 0xFF;
  1390  000EEE  6893               	setf	3987,c	;volatile
  1391                           
  1392                           ;pin_manager.c: 66: TRISC = 0xBF;
  1393  000EF0  0EBF               	movlw	191
  1394  000EF2  6E94               	movwf	3988,c	;volatile
  1395                           
  1396                           ;pin_manager.c: 71: ANSELC = 0x24;
  1397  000EF4  0E24               	movlw	36
  1398  000EF6  010F               	movlb	15	; () banked
  1399  000EF8  6F3A               	movwf	58,b	;volatile
  1400                           
  1401                           ;pin_manager.c: 72: ANSELB = 0x3F;
  1402  000EFA  0E3F               	movlw	63
  1403  000EFC  6F39               	movwf	57,b	;volatile
  1404                           
  1405                           ;pin_manager.c: 73: ANSELA = 0x2F;
  1406  000EFE  0E2F               	movlw	47
  1407  000F00  6F38               	movwf	56,b	;volatile
  1408                           
  1409                           ;pin_manager.c: 78: WPUB = 0x00;
  1410  000F02  0E00               	movlw	0
  1411  000F04  6E61               	movwf	3937,c	;volatile
  1412                           
  1413                           ; BSR set to: 15
  1414                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  1415  000F06  8EF1               	bsf	intcon2,7,c	;volatile
  1416                           
  1417                           ; BSR set to: 15
  1418  000F08  0012               	return		;funcret
  1419  000F0A                     __end_of_PIN_MANAGER_Initialize:
  1420                           	opt stack 0
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           prodh	equ	0xFF4
  1426                           prodl	equ	0xFF3
  1427                           intcon	equ	0xFF2
  1428                           intcon2	equ	0xFF1
  1429                           postinc0	equ	0xFEE
  1430                           plusw0	equ	0xFEB
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1l	equ	0xFE1
  1434                           indf2	equ	0xFDF
  1435                           plusw2	equ	0xFDB
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _OSCILLATOR_Initialize *****************
  1441 ;; Defined at:
  1442 ;;		line 120 in file "mcc_generated_files/mcc.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         0       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         0       0       0       0       0       0       0
  1460 ;;Total ram usage:        0 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    5
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_SYSTEM_Initialize
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text7
  1471  0010A2                     __ptext7:
  1472                           	opt stack 0
  1473  0010A2                     _OSCILLATOR_Initialize:
  1474                           	opt stack 24
  1475                           
  1476                           ;mcc.c: 123: OSCCON = 0x72;
  1477                           
  1478                           ; BSR set to: 15
  1479                           ;incstack = 0
  1480  0010A2  0E72               	movlw	114
  1481  0010A4  6ED3               	movwf	4051,c	;volatile
  1482                           
  1483                           ;mcc.c: 125: OSCCON2 = 0x04;
  1484  0010A6  0E04               	movlw	4
  1485  0010A8  6ED2               	movwf	4050,c	;volatile
  1486                           
  1487                           ;mcc.c: 127: OSCTUNE = 0x40;
  1488  0010AA  0E40               	movlw	64
  1489  0010AC  6E9B               	movwf	3995,c	;volatile
  1490  0010AE  0012               	return		;funcret
  1491  0010B0                     __end_of_OSCILLATOR_Initialize:
  1492                           	opt stack 0
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           prodh	equ	0xFF4
  1498                           prodl	equ	0xFF3
  1499                           intcon	equ	0xFF2
  1500                           intcon2	equ	0xFF1
  1501                           postinc0	equ	0xFEE
  1502                           plusw0	equ	0xFEB
  1503                           wreg	equ	0xFE8
  1504                           postdec1	equ	0xFE5
  1505                           fsr1l	equ	0xFE1
  1506                           indf2	equ	0xFDF
  1507                           plusw2	equ	0xFDB
  1508                           fsr2h	equ	0xFDA
  1509                           fsr2l	equ	0xFD9
  1510                           status	equ	0xFD8
  1511                           
  1512 ;; *************** function _INTERRUPT_Initialize *****************
  1513 ;; Defined at:
  1514 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		None
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1528 ;;      Params:         0       0       0       0       0       0       0
  1529 ;;      Locals:         0       0       0       0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0       0       0
  1531 ;;      Totals:         0       0       0       0       0       0       0
  1532 ;;Total ram usage:        0 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    5
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_SYSTEM_Initialize
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text8
  1543  0011FA                     __ptext8:
  1544                           	opt stack 0
  1545  0011FA                     _INTERRUPT_Initialize:
  1546                           	opt stack 24
  1547                           
  1548                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  1549                           
  1550                           ;incstack = 0
  1551  0011FA  9ED0               	bcf	4048,7,c	;volatile
  1552  0011FC  0012               	return		;funcret
  1553  0011FE                     __end_of_INTERRUPT_Initialize:
  1554                           	opt stack 0
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           prodh	equ	0xFF4
  1560                           prodl	equ	0xFF3
  1561                           intcon	equ	0xFF2
  1562                           intcon2	equ	0xFF1
  1563                           postinc0	equ	0xFEE
  1564                           plusw0	equ	0xFEB
  1565                           wreg	equ	0xFE8
  1566                           postdec1	equ	0xFE5
  1567                           fsr1l	equ	0xFE1
  1568                           indf2	equ	0xFDF
  1569                           plusw2	equ	0xFDB
  1570                           fsr2h	equ	0xFDA
  1571                           fsr2l	equ	0xFD9
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _EUSART1_Initialize *****************
  1575 ;; Defined at:
  1576 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1590 ;;      Params:         0       0       0       0       0       0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0
  1593 ;;      Totals:         0       0       0       0       0       0       0
  1594 ;;Total ram usage:        0 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    6
  1597 ;; This function calls:
  1598 ;;		_EUSART1_SetRxInterruptHandler
  1599 ;;		_EUSART1_SetTxInterruptHandler
  1600 ;; This function is called by:
  1601 ;;		_SYSTEM_Initialize
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           	psect	text9
  1606  000C58                     __ptext9:
  1607                           	opt stack 0
  1608  000C58                     _EUSART1_Initialize:
  1609                           	opt stack 23
  1610                           
  1611                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  1612                           
  1613                           ;incstack = 0
  1614  000C58  9A9D               	bcf	3997,5,c	;volatile
  1615                           
  1616                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  1617  000C5A  989D               	bcf	3997,4,c	;volatile
  1618                           
  1619                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  1620  000C5C  0E5C               	movlw	low _EUSART1_Transmit_ISR
  1621  000C5E  6E3A               	movwf	EUSART1_SetTxInterruptHandler@handler,c
  1622  000C60  0E0E               	movlw	high _EUSART1_Transmit_ISR
  1623  000C62  6E3B               	movwf	EUSART1_SetTxInterruptHandler@handler+1,c
  1624  000C64  ECA8  F008         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  1625                           
  1626                           ;eusart1.c: 82: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  1627  000C68  0E8A               	movlw	low _EUSART1_Receive_ISR
  1628  000C6A  6E3A               	movwf	EUSART1_SetRxInterruptHandler@handler,c
  1629  000C6C  0E0E               	movlw	high _EUSART1_Receive_ISR
  1630  000C6E  6E3B               	movwf	EUSART1_SetRxInterruptHandler@handler+1,c
  1631  000C70  ECAD  F008         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  1632                           
  1633                           ;eusart1.c: 87: BAUDCON1 = 0x08;
  1634  000C74  0E08               	movlw	8
  1635  000C76  6EB8               	movwf	4024,c	;volatile
  1636                           
  1637                           ;eusart1.c: 90: RCSTA1 = 0x90;
  1638  000C78  0E90               	movlw	144
  1639  000C7A  6EAB               	movwf	4011,c	;volatile
  1640                           
  1641                           ;eusart1.c: 93: TXSTA1 = 0x24;
  1642  000C7C  0E24               	movlw	36
  1643  000C7E  6EAC               	movwf	4012,c	;volatile
  1644                           
  1645                           ;eusart1.c: 96: SPBRG1 = 0x22;
  1646  000C80  0E22               	movlw	34
  1647  000C82  6EAF               	movwf	4015,c	;volatile
  1648                           
  1649                           ;eusart1.c: 99: SPBRGH1 = 0x00;
  1650  000C84  0E00               	movlw	0
  1651  000C86  6EB0               	movwf	4016,c	;volatile
  1652                           
  1653                           ;eusart1.c: 103: eusart1TxHead = 0;
  1654  000C88  0E00               	movlw	0
  1655  000C8A  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1656                           
  1657                           ;eusart1.c: 104: eusart1TxTail = 0;
  1658  000C8C  0E00               	movlw	0
  1659  000C8E  6E1B               	movwf	_eusart1TxTail,c	;volatile
  1660                           
  1661                           ;eusart1.c: 105: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1662  000C90  0E08               	movlw	8
  1663  000C92  6E4A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1664                           
  1665                           ;eusart1.c: 107: eusart1RxHead = 0;
  1666  000C94  0E00               	movlw	0
  1667  000C96  6E1A               	movwf	_eusart1RxHead,c	;volatile
  1668                           
  1669                           ;eusart1.c: 108: eusart1RxTail = 0;
  1670  000C98  0E00               	movlw	0
  1671  000C9A  6E19               	movwf	_eusart1RxTail,c	;volatile
  1672                           
  1673                           ;eusart1.c: 109: eusart1RxCount = 0;
  1674  000C9C  0E00               	movlw	0
  1675  000C9E  6E18               	movwf	_eusart1RxCount,c	;volatile
  1676                           
  1677                           ;eusart1.c: 112: PIE1bits.RC1IE = 1;
  1678  000CA0  8A9D               	bsf	3997,5,c	;volatile
  1679  000CA2  0012               	return		;funcret
  1680  000CA4                     __end_of_EUSART1_Initialize:
  1681                           	opt stack 0
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           prodh	equ	0xFF4
  1687                           prodl	equ	0xFF3
  1688                           intcon	equ	0xFF2
  1689                           intcon2	equ	0xFF1
  1690                           postinc0	equ	0xFEE
  1691                           plusw0	equ	0xFEB
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1l	equ	0xFE1
  1695                           indf2	equ	0xFDF
  1696                           plusw2	equ	0xFDB
  1697                           fsr2h	equ	0xFDA
  1698                           fsr2l	equ	0xFD9
  1699                           status	equ	0xFD8
  1700                           
  1701 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  1702 ;; Defined at:
  1703 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1706 ;;		 -> EUSART1_Transmit_ISR(1), 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1718 ;;      Params:         2       0       0       0       0       0       0
  1719 ;;      Locals:         0       0       0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0
  1721 ;;      Totals:         2       0       0       0       0       0       0
  1722 ;;Total ram usage:        2 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    5
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_EUSART1_Initialize
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text10
  1733  001150                     __ptext10:
  1734                           	opt stack 0
  1735  001150                     _EUSART1_SetTxInterruptHandler:
  1736                           	opt stack 23
  1737                           
  1738                           ;eusart1.c: 223: EUSART1_TxDefaultInterruptHandler = handler;
  1739                           
  1740                           ;incstack = 0
  1741  001150  C03A  F048         	movff	EUSART1_SetTxInterruptHandler@handler,_EUSART1_TxDefaultInterruptHandler
  1742  001154  C03B  F049         	movff	EUSART1_SetTxInterruptHandler@handler+1,_EUSART1_TxDefaultInterruptHandler+1
  1743  001158  0012               	return		;funcret
  1744  00115A                     __end_of_EUSART1_SetTxInterruptHandler:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           prodh	equ	0xFF4
  1751                           prodl	equ	0xFF3
  1752                           intcon	equ	0xFF2
  1753                           intcon2	equ	0xFF1
  1754                           postinc0	equ	0xFEE
  1755                           plusw0	equ	0xFEB
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1l	equ	0xFE1
  1759                           indf2	equ	0xFDF
  1760                           plusw2	equ	0xFDB
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  1766 ;; Defined at:
  1767 ;;		line 226 in file "mcc_generated_files/eusart1.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1770 ;;		 -> EUSART1_Receive_ISR(1), 
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;		None
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  1    wreg      void 
  1775 ;; Registers used:
  1776 ;;		wreg, status,2, status,0
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1782 ;;      Params:         2       0       0       0       0       0       0
  1783 ;;      Locals:         0       0       0       0       0       0       0
  1784 ;;      Temps:          0       0       0       0       0       0       0
  1785 ;;      Totals:         2       0       0       0       0       0       0
  1786 ;;Total ram usage:        2 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    5
  1789 ;; This function calls:
  1790 ;;		Nothing
  1791 ;; This function is called by:
  1792 ;;		_EUSART1_Initialize
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text11
  1797  00115A                     __ptext11:
  1798                           	opt stack 0
  1799  00115A                     _EUSART1_SetRxInterruptHandler:
  1800                           	opt stack 23
  1801                           
  1802                           ;eusart1.c: 227: EUSART1_RxDefaultInterruptHandler = handler;
  1803                           
  1804                           ;incstack = 0
  1805  00115A  C03A  F046         	movff	EUSART1_SetRxInterruptHandler@handler,_EUSART1_RxDefaultInterruptHandler
  1806  00115E  C03B  F047         	movff	EUSART1_SetRxInterruptHandler@handler+1,_EUSART1_RxDefaultInterruptHandler+1
  1807  001162  0012               	return		;funcret
  1808  001164                     __end_of_EUSART1_SetRxInterruptHandler:
  1809                           	opt stack 0
  1810                           tblptru	equ	0xFF8
  1811                           tblptrh	equ	0xFF7
  1812                           tblptrl	equ	0xFF6
  1813                           tablat	equ	0xFF5
  1814                           prodh	equ	0xFF4
  1815                           prodl	equ	0xFF3
  1816                           intcon	equ	0xFF2
  1817                           intcon2	equ	0xFF1
  1818                           postinc0	equ	0xFEE
  1819                           plusw0	equ	0xFEB
  1820                           wreg	equ	0xFE8
  1821                           postdec1	equ	0xFE5
  1822                           fsr1l	equ	0xFE1
  1823                           indf2	equ	0xFDF
  1824                           plusw2	equ	0xFDB
  1825                           fsr2h	equ	0xFDA
  1826                           fsr2l	equ	0xFD9
  1827                           status	equ	0xFD8
  1828                           
  1829 ;; *************** function _ACCELEROMETER_Initialize *****************
  1830 ;; Defined at:
  1831 ;;		line 4 in file "accelerometer.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      void 
  1838 ;; Registers used:
  1839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1845 ;;      Params:         0       0       0       0       0       0       0
  1846 ;;      Locals:         0       0       0       0       0       0       0
  1847 ;;      Temps:          2       0       0       0       0       0       0
  1848 ;;      Totals:         2       0       0       0       0       0       0
  1849 ;;Total ram usage:        2 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:   13
  1852 ;; This function calls:
  1853 ;;		_read_register
  1854 ;;		_write_register
  1855 ;; This function is called by:
  1856 ;;		_main
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           	psect	text12
  1861  000A44                     __ptext12:
  1862                           	opt stack 0
  1863  000A44                     _ACCELEROMETER_Initialize:
  1864                           	opt stack 17
  1865                           
  1866                           ;accelerometer.c: 6: write_register(0x2B, 0x40);
  1867                           
  1868                           ;incstack = 0
  1869  000A44  0E40               	movlw	64
  1870  000A46  6E3F               	movwf	write_register@data,c
  1871  000A48  0E2B               	movlw	43
  1872  000A4A  ECFE  F006         	call	_write_register
  1873                           
  1874                           ;accelerometer.c: 8: _delay((unsigned long)((100)*(16000000/4000.0)));
  1875  000A4E  0E03               	movlw	3
  1876  000A50  6E42               	movwf	(??_ACCELEROMETER_Initialize+1)& (0+255),c
  1877  000A52  0E08               	movlw	8
  1878  000A54  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1879  000A56  0E77               	movlw	119
  1880  000A58                     u1787:
  1881  000A58  2EE8               	decfsz	wreg,f,c
  1882  000A5A  D7FE               	bra	u1787
  1883  000A5C  2E41               	decfsz	??_ACCELEROMETER_Initialize& (0+255),f,c
  1884  000A5E  D7FC               	bra	u1787
  1885  000A60  2E42               	decfsz	(??_ACCELEROMETER_Initialize+1)& (0+255),f,c
  1886  000A62  D7FA               	bra	u1787
  1887  000A64  F000               	nop	
  1888  000A66  0E2B               	movlw	43
  1889  000A68  EC17  F007         	call	_read_register
  1890  000A6C  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1891  000A6E  BC41               	btfsc	??_ACCELEROMETER_Initialize,6,c
  1892  000A70  D7FA               	goto	l636
  1893                           
  1894                           ;accelerometer.c: 14: write_register(0x0E, MMA8451_RANGE_4_G);
  1895  000A72  0E01               	movlw	1
  1896  000A74  6E3F               	movwf	write_register@data,c
  1897  000A76  0E0E               	movlw	14
  1898  000A78  ECFE  F006         	call	_write_register
  1899                           
  1900                           ;accelerometer.c: 16: write_register(0x2B, 0x02);
  1901  000A7C  0E02               	movlw	2
  1902  000A7E  6E3F               	movwf	write_register@data,c
  1903  000A80  0E2B               	movlw	43
  1904  000A82  ECFE  F006         	call	_write_register
  1905                           
  1906                           ;accelerometer.c: 18: write_register(0x2D, 0x01);
  1907  000A86  0E01               	movlw	1
  1908  000A88  6E3F               	movwf	write_register@data,c
  1909  000A8A  0E2D               	movlw	45
  1910  000A8C  ECFE  F006         	call	_write_register
  1911                           
  1912                           ;accelerometer.c: 19: write_register(0x2E, 0x01);
  1913  000A90  0E01               	movlw	1
  1914  000A92  6E3F               	movwf	write_register@data,c
  1915  000A94  0E2E               	movlw	46
  1916  000A96  ECFE  F006         	call	_write_register
  1917                           
  1918                           ;accelerometer.c: 22: write_register(0x11, 0x40);
  1919  000A9A  0E40               	movlw	64
  1920  000A9C  6E3F               	movwf	write_register@data,c
  1921  000A9E  0E11               	movlw	17
  1922  000AA0  ECFE  F006         	call	_write_register
  1923                           
  1924                           ;accelerometer.c: 25: write_register(0x2A, 0x01 | 0x04);
  1925  000AA4  0E05               	movlw	5
  1926  000AA6  6E3F               	movwf	write_register@data,c
  1927  000AA8  0E2A               	movlw	42
  1928  000AAA  ECFE  F006         	call	_write_register
  1929  000AAE  0012               	return		;funcret
  1930  000AB0                     __end_of_ACCELEROMETER_Initialize:
  1931                           	opt stack 0
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           prodh	equ	0xFF4
  1937                           prodl	equ	0xFF3
  1938                           intcon	equ	0xFF2
  1939                           intcon2	equ	0xFF1
  1940                           postinc0	equ	0xFEE
  1941                           plusw0	equ	0xFEB
  1942                           wreg	equ	0xFE8
  1943                           postdec1	equ	0xFE5
  1944                           fsr1l	equ	0xFE1
  1945                           indf2	equ	0xFDF
  1946                           plusw2	equ	0xFDB
  1947                           fsr2h	equ	0xFDA
  1948                           fsr2l	equ	0xFD9
  1949                           status	equ	0xFD8
  1950                           
  1951 ;; *************** function _write_register *****************
  1952 ;; Defined at:
  1953 ;;		line 29 in file "accelerometer.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  reg             1    wreg     unsigned char 
  1956 ;;  data            1   25[COMRAM] unsigned char 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  reg             1   26[COMRAM] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1968 ;;      Params:         1       0       0       0       0       0       0
  1969 ;;      Locals:         1       0       0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0       0       0
  1971 ;;      Totals:         2       0       0       0       0       0       0
  1972 ;;Total ram usage:        2 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:   12
  1975 ;; This function calls:
  1976 ;;		_i2c_close
  1977 ;;		_i2c_masterWrite
  1978 ;;		_i2c_open
  1979 ;;		_i2c_setBuffer
  1980 ;; This function is called by:
  1981 ;;		_ACCELEROMETER_Initialize
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text13
  1986  000DFC                     __ptext13:
  1987                           	opt stack 0
  1988  000DFC                     _write_register:
  1989                           	opt stack 17
  1990                           
  1991                           ;incstack = 0
  1992                           ;write_register@reg stored from wreg
  1993  000DFC  6E40               	movwf	write_register@reg,c
  1994                           
  1995                           ;accelerometer.c: 30: static i2c_error_t status;
  1996                           ;accelerometer.c: 31: static uint8_t buffer[2];
  1997                           ;accelerometer.c: 34: buffer[0] = reg;
  1998  000DFE  C040  F023         	movff	write_register@reg,write_register@buffer
  1999                           
  2000                           ;accelerometer.c: 35: buffer[1] = data;
  2001  000E02  C03F  F024         	movff	write_register@data,write_register@buffer+1
  2002                           
  2003                           ;accelerometer.c: 36: i2c_open(0x1D);
  2004  000E06  0E1D               	movlw	29
  2005  000E08  EC82  F003         	call	_i2c_open
  2006                           
  2007                           ;accelerometer.c: 37: i2c_setBuffer(buffer, 2);
  2008  000E0C  0E23               	movlw	low write_register@buffer
  2009  000E0E  6E3A               	movwf	i2c_setBuffer@buffer,c
  2010  000E10  0E00               	movlw	high write_register@buffer
  2011  000E12  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2012  000E14  0E00               	movlw	0
  2013  000E16  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2014  000E18  0E02               	movlw	2
  2015  000E1A  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2016  000E1C  EC94  F007         	call	_i2c_setBuffer	;wreg free
  2017                           
  2018                           ;accelerometer.c: 40: status = i2c_masterWrite();
  2019  000E20  ECC6  F008         	call	_i2c_masterWrite	;wreg free
  2020  000E24  6E17               	movwf	write_register@status,c
  2021                           
  2022                           ;accelerometer.c: 41: status = i2c_close();
  2023  000E26  EC85  F007         	call	_i2c_close	;wreg free
  2024  000E2A  6E17               	movwf	write_register@status,c
  2025  000E2C  0012               	return		;funcret
  2026  000E2E                     __end_of_write_register:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           prodh	equ	0xFF4
  2033                           prodl	equ	0xFF3
  2034                           intcon	equ	0xFF2
  2035                           intcon2	equ	0xFF1
  2036                           postinc0	equ	0xFEE
  2037                           plusw0	equ	0xFEB
  2038                           wreg	equ	0xFE8
  2039                           postdec1	equ	0xFE5
  2040                           fsr1l	equ	0xFE1
  2041                           indf2	equ	0xFDF
  2042                           plusw2	equ	0xFDB
  2043                           fsr2h	equ	0xFDA
  2044                           fsr2l	equ	0xFD9
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function _i2c_masterWrite *****************
  2048 ;; Defined at:
  2049 ;;		line 264 in file "mcc_generated_files/drivers/i2c_master.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;		None
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;		None
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      enum E6837
  2056 ;; Registers used:
  2057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2063 ;;      Params:         0       0       0       0       0       0       0
  2064 ;;      Locals:         0       0       0       0       0       0       0
  2065 ;;      Temps:          0       0       0       0       0       0       0
  2066 ;;      Totals:         0       0       0       0       0       0       0
  2067 ;;Total ram usage:        0 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:   11
  2070 ;; This function calls:
  2071 ;;		_i2c_masterOperation
  2072 ;; This function is called by:
  2073 ;;		_write_register
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text14
  2078  00118C                     __ptext14:
  2079                           	opt stack 0
  2080  00118C                     _i2c_masterWrite:
  2081                           	opt stack 17
  2082                           
  2083                           ;i2c_master.c: 266: return i2c_masterOperation(OPERATIONWRITE);
  2084                           
  2085                           ;incstack = 0
  2086  00118C  0E02               	movlw	2
  2087  00118E  EC52  F006         	call	_i2c_masterOperation
  2088  001192  0012               	return	
  2089  001194                     __end_of_i2c_masterWrite:
  2090                           	opt stack 0
  2091                           tblptru	equ	0xFF8
  2092                           tblptrh	equ	0xFF7
  2093                           tblptrl	equ	0xFF6
  2094                           tablat	equ	0xFF5
  2095                           prodh	equ	0xFF4
  2096                           prodl	equ	0xFF3
  2097                           intcon	equ	0xFF2
  2098                           intcon2	equ	0xFF1
  2099                           postinc0	equ	0xFEE
  2100                           plusw0	equ	0xFEB
  2101                           wreg	equ	0xFE8
  2102                           postdec1	equ	0xFE5
  2103                           fsr1l	equ	0xFE1
  2104                           indf2	equ	0xFDF
  2105                           plusw2	equ	0xFDB
  2106                           fsr2h	equ	0xFDA
  2107                           fsr2l	equ	0xFD9
  2108                           status	equ	0xFD8
  2109                           
  2110 ;; *************** function _read_register *****************
  2111 ;; Defined at:
  2112 ;;		line 46 in file "accelerometer.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  reg             1    wreg     unsigned char 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  reg             1   26[COMRAM] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      unsigned char 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2126 ;;      Params:         0       0       0       0       0       0       0
  2127 ;;      Locals:         1       0       0       0       0       0       0
  2128 ;;      Temps:          0       0       0       0       0       0       0
  2129 ;;      Totals:         1       0       0       0       0       0       0
  2130 ;;Total ram usage:        1 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:   12
  2133 ;; This function calls:
  2134 ;;		_i2c_close
  2135 ;;		_i2c_masterAccelRead
  2136 ;;		_i2c_open
  2137 ;;		_i2c_setBuffer
  2138 ;; This function is called by:
  2139 ;;		_ACCELEROMETER_Initialize
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text15
  2144  000E2E                     __ptext15:
  2145                           	opt stack 0
  2146  000E2E                     _read_register:
  2147                           	opt stack 17
  2148                           
  2149                           ;incstack = 0
  2150                           ;read_register@reg stored from wreg
  2151  000E2E  6E40               	movwf	read_register@reg,c
  2152                           
  2153                           ;accelerometer.c: 47: static i2c_error_t status;
  2154                           ;accelerometer.c: 48: static volatile uint8_t receivebuffer[1];
  2155                           ;accelerometer.c: 51: i2c_open(0x1D);
  2156  000E30  0E1D               	movlw	29
  2157  000E32  EC82  F003         	call	_i2c_open
  2158                           
  2159                           ;accelerometer.c: 55: i2c_setBuffer(receivebuffer, 1);
  2160  000E36  0E25               	movlw	low read_register@receivebuffer
  2161  000E38  6E3A               	movwf	i2c_setBuffer@buffer,c
  2162  000E3A  0E00               	movlw	high read_register@receivebuffer
  2163  000E3C  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2164  000E3E  0E00               	movlw	0
  2165  000E40  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2166  000E42  0E01               	movlw	1
  2167  000E44  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2168  000E46  EC94  F007         	call	_i2c_setBuffer	;wreg free
  2169                           
  2170                           ;accelerometer.c: 58: status = i2c_masterAccelRead(reg);
  2171  000E4A  5040               	movf	read_register@reg,w,c
  2172  000E4C  EC58  F008         	call	_i2c_masterAccelRead
  2173  000E50  6E16               	movwf	read_register@status,c
  2174                           
  2175                           ;accelerometer.c: 61: status = i2c_close();
  2176  000E52  EC85  F007         	call	_i2c_close	;wreg free
  2177  000E56  6E16               	movwf	read_register@status,c
  2178                           
  2179                           ;accelerometer.c: 63: return receivebuffer[0];
  2180  000E58  5025               	movf	read_register@receivebuffer,w,c	;volatile
  2181  000E5A  0012               	return	
  2182  000E5C                     __end_of_read_register:
  2183                           	opt stack 0
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           intcon	equ	0xFF2
  2191                           intcon2	equ	0xFF1
  2192                           postinc0	equ	0xFEE
  2193                           plusw0	equ	0xFEB
  2194                           wreg	equ	0xFE8
  2195                           postdec1	equ	0xFE5
  2196                           fsr1l	equ	0xFE1
  2197                           indf2	equ	0xFDF
  2198                           plusw2	equ	0xFDB
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203 ;; *************** function _i2c_setBuffer *****************
  2204 ;; Defined at:
  2205 ;;		line 192 in file "mcc_generated_files/drivers/i2c_master.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  buffer          2   20[COMRAM] PTR void 
  2208 ;;		 -> read_xyzvalues@readbuffer(6), read_register@receivebuffer(1), write_register@buffer(2), 
  2209 ;;  bufferSize      2   22[COMRAM] unsigned int 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;		None
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  1    wreg      void 
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2221 ;;      Params:         4       0       0       0       0       0       0
  2222 ;;      Locals:         0       0       0       0       0       0       0
  2223 ;;      Temps:          0       0       0       0       0       0       0
  2224 ;;      Totals:         4       0       0       0       0       0       0
  2225 ;;Total ram usage:        4 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    5
  2228 ;; This function calls:
  2229 ;;		Nothing
  2230 ;; This function is called by:
  2231 ;;		_write_register
  2232 ;;		_read_register
  2233 ;;		_read_xyzvalues
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text16
  2238  000F28                     __ptext16:
  2239                           	opt stack 0
  2240  000F28                     _i2c_setBuffer:
  2241                           	opt stack 24
  2242                           
  2243                           ;i2c_master.c: 194: if(i2c_status.bufferFree)
  2244                           
  2245                           ;incstack = 0
  2246  000F28  0100               	movlb	0	; () banked
  2247  000F2A  A5B6               	btfss	_i2c_status& (0+255),2,b
  2248  000F2C  0012               	return	
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;i2c_master.c: 195: {
  2252                           ;i2c_master.c: 196: i2c_status.data_ptr = buffer;
  2253  000F2E  C03A  F0B8         	movff	i2c_setBuffer@buffer,_i2c_status+2
  2254  000F32  C03B  F0B9         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;i2c_master.c: 197: i2c_status.data_length = bufferSize;
  2258  000F36  C03C  F0BA         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  2259  000F3A  C03D  F0BB         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;i2c_master.c: 198: i2c_status.bufferFree = 0;
  2263  000F3E  95B6               	bcf	_i2c_status& (0+255),2,b
  2264  000F40  0012               	return	
  2265  000F42                     __end_of_i2c_setBuffer:
  2266                           	opt stack 0
  2267                           tblptru	equ	0xFF8
  2268                           tblptrh	equ	0xFF7
  2269                           tblptrl	equ	0xFF6
  2270                           tablat	equ	0xFF5
  2271                           prodh	equ	0xFF4
  2272                           prodl	equ	0xFF3
  2273                           intcon	equ	0xFF2
  2274                           intcon2	equ	0xFF1
  2275                           postinc0	equ	0xFEE
  2276                           plusw0	equ	0xFEB
  2277                           wreg	equ	0xFE8
  2278                           postdec1	equ	0xFE5
  2279                           fsr1l	equ	0xFE1
  2280                           indf2	equ	0xFDF
  2281                           plusw2	equ	0xFDB
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _i2c_open *****************
  2287 ;; Defined at:
  2288 ;;		line 124 in file "mcc_generated_files/drivers/i2c_master.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  address         1    wreg     unsigned char 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  address         1   23[COMRAM] unsigned char 
  2293 ;;  ret             1   22[COMRAM] enum E6837
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  1    wreg      enum E6837
  2296 ;; Registers used:
  2297 ;;		wreg, status,2, status,0, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2303 ;;      Params:         0       0       0       0       0       0       0
  2304 ;;      Locals:         2       0       0       0       0       0       0
  2305 ;;      Temps:          0       0       0       0       0       0       0
  2306 ;;      Totals:         2       0       0       0       0       0       0
  2307 ;;Total ram usage:        2 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    6
  2310 ;; This function calls:
  2311 ;;		_i2c1_driver_open
  2312 ;;		_i2c1_driver_setBusCollisionISR
  2313 ;;		_i2c1_driver_setI2cISR
  2314 ;;		_mssp1_clearIRQ
  2315 ;; This function is called by:
  2316 ;;		_write_register
  2317 ;;		_read_register
  2318 ;;		_read_xyzvalues
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text17
  2323  000704                     __ptext17:
  2324                           	opt stack 0
  2325  000704                     _i2c_open:
  2326                           	opt stack 23
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;incstack = 0
  2330                           ;i2c_open@address stored from wreg
  2331  000704  6E3D               	movwf	i2c_open@address,c
  2332                           
  2333                           ;i2c_master.c: 126: i2c_error_t ret = I2C_BUSY;
  2334  000706  0E01               	movlw	1
  2335  000708  6E3C               	movwf	i2c_open@ret,c
  2336                           
  2337                           ;i2c_master.c: 128: if(!i2c_status.inUse)
  2338  00070A  0100               	movlb	0	; () banked
  2339  00070C  B3B6               	btfsc	_i2c_status& (0+255),1,b
  2340  00070E  0012               	return	
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;i2c_master.c: 129: {
  2344                           ;i2c_master.c: 130: i2c_status.address = address;
  2345  000710  C03D  F0B7         	movff	i2c_open@address,_i2c_status+1
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;i2c_master.c: 131: i2c_status.busy = 0;
  2349  000714  91B6               	bcf	_i2c_status& (0+255),0,b
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;i2c_master.c: 132: i2c_status.inUse = 1;
  2353  000716  83B6               	bsf	_i2c_status& (0+255),1,b
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;i2c_master.c: 133: i2c_status.addressNACKCheck = 0;
  2357  000718  97B6               	bcf	_i2c_status& (0+255),3,b
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;i2c_master.c: 134: i2c_status.state = I2C_RESET;
  2361  00071A  0E0E               	movlw	14
  2362  00071C  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;i2c_master.c: 135: i2c_status.time_out_value = 500;
  2366  00071E  0E01               	movlw	1
  2367  000720  6FBF               	movwf	(_i2c_status+9)& (0+255),b
  2368  000722  0EF4               	movlw	244
  2369  000724  6FBE               	movwf	(_i2c_status+8)& (0+255),b
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;i2c_master.c: 136: i2c_status.bufferFree = 1;
  2373  000726  85B6               	bsf	_i2c_status& (0+255),2,b
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  2377  000728  0E82               	movlw	low _returnStop
  2378  00072A  6FC2               	movwf	(_i2c_status+12)& (0+255),b
  2379  00072C  0E11               	movlw	high _returnStop
  2380  00072E  6FC3               	movwf	(_i2c_status+13)& (0+255),b
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  2384  000730  0E00               	movlw	0
  2385  000732  6FCE               	movwf	(_i2c_status+24)& (0+255),b
  2386  000734  0E00               	movlw	0
  2387  000736  6FCF               	movwf	(_i2c_status+25)& (0+255),b
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;i2c_master.c: 141: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  2391  000738  0E82               	movlw	low _returnStop
  2392  00073A  6FC4               	movwf	(_i2c_status+14)& (0+255),b
  2393  00073C  0E11               	movlw	high _returnStop
  2394  00073E  6FC5               	movwf	(_i2c_status+15)& (0+255),b
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;i2c_master.c: 142: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  2398  000740  0E00               	movlw	0
  2399  000742  6FD0               	movwf	(_i2c_status+26)& (0+255),b
  2400  000744  0E00               	movlw	0
  2401  000746  6FD1               	movwf	(_i2c_status+27)& (0+255),b
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;i2c_master.c: 143: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  2405  000748  0E82               	movlw	low _returnStop
  2406  00074A  6FC6               	movwf	(_i2c_status+16)& (0+255),b
  2407  00074C  0E11               	movlw	high _returnStop
  2408  00074E  6FC7               	movwf	(_i2c_status+17)& (0+255),b
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;i2c_master.c: 144: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  2412  000750  0E00               	movlw	0
  2413  000752  6FD2               	movwf	(_i2c_status+28)& (0+255),b
  2414  000754  0E00               	movlw	0
  2415  000756  6FD3               	movwf	(_i2c_status+29)& (0+255),b
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;i2c_master.c: 145: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  2419  000758  0E82               	movlw	low _returnStop
  2420  00075A  6FC8               	movwf	(_i2c_status+18)& (0+255),b
  2421  00075C  0E11               	movlw	high _returnStop
  2422  00075E  6FC9               	movwf	(_i2c_status+19)& (0+255),b
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;i2c_master.c: 146: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  2426  000760  0E00               	movlw	0
  2427  000762  6FD4               	movwf	(_i2c_status+30)& (0+255),b
  2428  000764  0E00               	movlw	0
  2429  000766  6FD5               	movwf	(_i2c_status+31)& (0+255),b
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;i2c_master.c: 147: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  2433  000768  0E78               	movlw	low _returnReset
  2434  00076A  6FCA               	movwf	(_i2c_status+20)& (0+255),b
  2435  00076C  0E11               	movlw	high _returnReset
  2436  00076E  6FCB               	movwf	(_i2c_status+21)& (0+255),b
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;i2c_master.c: 148: i2c_status.callbackPayload[i2c_timeOut] = (0);
  2440  000770  0E00               	movlw	0
  2441  000772  6FD6               	movwf	(_i2c_status+32)& (0+255),b
  2442  000774  0E00               	movlw	0
  2443  000776  6FD7               	movwf	(_i2c_status+33)& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;i2c_master.c: 150: i2c1_driver_open();
  2447  000778  ECAE  F007         	call	_i2c1_driver_open	;wreg free
  2448                           
  2449                           ;i2c_master.c: 151: mssp1_clearIRQ();
  2450  00077C  EC0D  F009         	call	_mssp1_clearIRQ	;wreg free
  2451                           
  2452                           ;i2c_master.c: 153: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  2453  000780  0EF4               	movlw	low _i2c_busCollisionISR
  2454  000782  6E3A               	movwf	i2c1_driver_setBusCollisionISR@f,c
  2455  000784  0E11               	movlw	high _i2c_busCollisionISR
  2456  000786  6E3B               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  2457  000788  ECB7  F008         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  2458                           
  2459                           ;i2c_master.c: 154: i2c1_driver_setI2cISR(i2c_ISR);
  2460  00078C  0EBC               	movlw	low _i2c_ISR
  2461  00078E  6E3A               	movwf	i2c1_driver_setI2cISR@f,c
  2462  000790  0E0B               	movlw	high _i2c_ISR
  2463  000792  6E3B               	movwf	i2c1_driver_setI2cISR@f+1,c
  2464  000794  ECB2  F008         	call	_i2c1_driver_setI2cISR	;wreg free
  2465                           
  2466                           ;i2c_master.c: 159: ret = I2C_NOERR;
  2467  000798  0E00               	movlw	0
  2468  00079A  6E3C               	movwf	i2c_open@ret,c
  2469  00079C  0012               	return	
  2470  00079E                     __end_of_i2c_open:
  2471                           	opt stack 0
  2472                           tblptru	equ	0xFF8
  2473                           tblptrh	equ	0xFF7
  2474                           tblptrl	equ	0xFF6
  2475                           tablat	equ	0xFF5
  2476                           prodh	equ	0xFF4
  2477                           prodl	equ	0xFF3
  2478                           intcon	equ	0xFF2
  2479                           intcon2	equ	0xFF1
  2480                           postinc0	equ	0xFEE
  2481                           plusw0	equ	0xFEB
  2482                           wreg	equ	0xFE8
  2483                           postdec1	equ	0xFE5
  2484                           fsr1l	equ	0xFE1
  2485                           indf2	equ	0xFDF
  2486                           plusw2	equ	0xFDB
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _i2c1_driver_setI2cISR *****************
  2492 ;; Defined at:
  2493 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  f               2   20[COMRAM] PTR FTN()void 
  2496 ;;		 -> i2c_ISR(1), 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg, status,2, status,0
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2508 ;;      Params:         2       0       0       0       0       0       0
  2509 ;;      Locals:         0       0       0       0       0       0       0
  2510 ;;      Temps:          0       0       0       0       0       0       0
  2511 ;;      Totals:         2       0       0       0       0       0       0
  2512 ;;Total ram usage:        2 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    5
  2515 ;; This function calls:
  2516 ;;		Nothing
  2517 ;; This function is called by:
  2518 ;;		_i2c_open
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text18
  2523  001164                     __ptext18:
  2524                           	opt stack 0
  2525  001164                     _i2c1_driver_setI2cISR:
  2526                           	opt stack 23
  2527                           
  2528                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  2529                           
  2530                           ;incstack = 0
  2531  001164  C03A  F011         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  2532  001168  C03B  F012         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  2533  00116C  0012               	return		;funcret
  2534  00116E                     __end_of_i2c1_driver_setI2cISR:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           tblptrh	equ	0xFF7
  2538                           tblptrl	equ	0xFF6
  2539                           tablat	equ	0xFF5
  2540                           prodh	equ	0xFF4
  2541                           prodl	equ	0xFF3
  2542                           intcon	equ	0xFF2
  2543                           intcon2	equ	0xFF1
  2544                           postinc0	equ	0xFEE
  2545                           plusw0	equ	0xFEB
  2546                           wreg	equ	0xFE8
  2547                           postdec1	equ	0xFE5
  2548                           fsr1l	equ	0xFE1
  2549                           indf2	equ	0xFDF
  2550                           plusw2	equ	0xFDB
  2551                           fsr2h	equ	0xFDA
  2552                           fsr2l	equ	0xFD9
  2553                           status	equ	0xFD8
  2554                           
  2555 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  2556 ;; Defined at:
  2557 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  f               2   20[COMRAM] PTR FTN()void 
  2560 ;;		 -> i2c_busCollisionISR(1), 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2, status,0
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2572 ;;      Params:         2       0       0       0       0       0       0
  2573 ;;      Locals:         0       0       0       0       0       0       0
  2574 ;;      Temps:          0       0       0       0       0       0       0
  2575 ;;      Totals:         2       0       0       0       0       0       0
  2576 ;;Total ram usage:        2 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    5
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_i2c_open
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text19
  2587  00116E                     __ptext19:
  2588                           	opt stack 0
  2589  00116E                     _i2c1_driver_setBusCollisionISR:
  2590                           	opt stack 23
  2591                           
  2592                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  2593                           
  2594                           ;incstack = 0
  2595  00116E  C03A  F013         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  2596  001172  C03B  F014         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  2597  001176  0012               	return		;funcret
  2598  001178                     __end_of_i2c1_driver_setBusCollisionISR:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           intcon2	equ	0xFF1
  2608                           postinc0	equ	0xFEE
  2609                           plusw0	equ	0xFEB
  2610                           wreg	equ	0xFE8
  2611                           postdec1	equ	0xFE5
  2612                           fsr1l	equ	0xFE1
  2613                           indf2	equ	0xFDF
  2614                           plusw2	equ	0xFDB
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _i2c1_driver_open *****************
  2620 ;; Defined at:
  2621 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;		None               void
  2628 ;; Registers used:
  2629 ;;		wreg, status,2
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2635 ;;      Params:         0       0       0       0       0       0       0
  2636 ;;      Locals:         0       0       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0
  2638 ;;      Totals:         0       0       0       0       0       0       0
  2639 ;;Total ram usage:        0 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    5
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		_i2c_open
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text20
  2650  000F5C                     __ptext20:
  2651                           	opt stack 0
  2652  000F5C                     _i2c1_driver_open:
  2653                           	opt stack 23
  2654                           
  2655                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  2656                           
  2657                           ;incstack = 0
  2658  000F5C  BAC6               	btfsc	4038,5,c	;volatile
  2659  000F5E  0012               	return	
  2660                           
  2661                           ;i2c1_driver.c: 86: {
  2662                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  2663  000F60  0E00               	movlw	0
  2664  000F62  6EC7               	movwf	4039,c	;volatile
  2665                           
  2666                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  2667  000F64  0E28               	movlw	40
  2668  000F66  6EC6               	movwf	4038,c	;volatile
  2669                           
  2670                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  2671  000F68  0E00               	movlw	0
  2672  000F6A  6EC5               	movwf	4037,c	;volatile
  2673                           
  2674                           ;i2c1_driver.c: 90: SSP1ADD = 0x27;
  2675  000F6C  0E27               	movlw	39
  2676  000F6E  6EC8               	movwf	4040,c	;volatile
  2677                           
  2678                           ;i2c1_driver.c: 93: else
  2679                           ;i2c1_driver.c: 94: return 0;
  2680                           ;	Return value of _i2c1_driver_open is never used
  2681                           
  2682                           ;i2c1_driver.c: 92: }
  2683                           
  2684                           ;i2c1_driver.c: 91: return 1;
  2685                           ;	Return value of _i2c1_driver_open is never used
  2686  000F70  0012               	return	
  2687  000F72                     __end_of_i2c1_driver_open:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           intcon	equ	0xFF2
  2696                           intcon2	equ	0xFF1
  2697                           postinc0	equ	0xFEE
  2698                           plusw0	equ	0xFEB
  2699                           wreg	equ	0xFE8
  2700                           postdec1	equ	0xFE5
  2701                           fsr1l	equ	0xFE1
  2702                           indf2	equ	0xFDF
  2703                           plusw2	equ	0xFDB
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _i2c_masterAccelRead *****************
  2709 ;; Defined at:
  2710 ;;		line 249 in file "mcc_generated_files/drivers/i2c_master.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  reg             1    wreg     unsigned char 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  reg             1   25[COMRAM] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      enum E6837
  2717 ;; Registers used:
  2718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2724 ;;      Params:         0       0       0       0       0       0       0
  2725 ;;      Locals:         1       0       0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0
  2727 ;;      Totals:         1       0       0       0       0       0       0
  2728 ;;Total ram usage:        1 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:   11
  2731 ;; This function calls:
  2732 ;;		_i2c_masterOperation
  2733 ;; This function is called by:
  2734 ;;		_read_register
  2735 ;;		_read_xyzvalues
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text21
  2740  0010B0                     __ptext21:
  2741                           	opt stack 0
  2742  0010B0                     _i2c_masterAccelRead:
  2743                           	opt stack 18
  2744                           
  2745                           ;incstack = 0
  2746                           ;i2c_masterAccelRead@reg stored from wreg
  2747  0010B0  6E3F               	movwf	i2c_masterAccelRead@reg,c
  2748                           
  2749                           ;i2c_master.c: 252: i2c_status.register_address = reg;
  2750  0010B2  C03F  F0DA         	movff	i2c_masterAccelRead@reg,_i2c_status+36
  2751                           
  2752                           ;i2c_master.c: 254: return i2c_masterOperation(OPERATIONACCELREAD);
  2753  0010B6  0E01               	movlw	1
  2754  0010B8  EC52  F006         	call	_i2c_masterOperation
  2755  0010BC  0012               	return	
  2756  0010BE                     __end_of_i2c_masterAccelRead:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           prodh	equ	0xFF4
  2763                           prodl	equ	0xFF3
  2764                           intcon	equ	0xFF2
  2765                           intcon2	equ	0xFF1
  2766                           postinc0	equ	0xFEE
  2767                           plusw0	equ	0xFEB
  2768                           wreg	equ	0xFE8
  2769                           postdec1	equ	0xFE5
  2770                           fsr1l	equ	0xFE1
  2771                           indf2	equ	0xFDF
  2772                           plusw2	equ	0xFDB
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _i2c_masterOperation *****************
  2778 ;; Defined at:
  2779 ;;		line 210 in file "mcc_generated_files/drivers/i2c_master.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  operation       1    wreg     enum E6863
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  operation       1   23[COMRAM] enum E6863
  2784 ;;  ret             1   24[COMRAM] enum E6837
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      enum E6837
  2787 ;; Registers used:
  2788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2794 ;;      Params:         0       0       0       0       0       0       0
  2795 ;;      Locals:         2       0       0       0       0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0
  2797 ;;      Totals:         2       0       0       0       0       0       0
  2798 ;;Total ram usage:        2 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:   10
  2801 ;; This function calls:
  2802 ;;		_i2c1_driver_start
  2803 ;;		_i2c_poller
  2804 ;;		_mssp1_IRQisEnabled
  2805 ;; This function is called by:
  2806 ;;		_i2c_masterAccelRead
  2807 ;;		_i2c_masterWrite
  2808 ;;		_i2c_masterRead
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text22
  2813  000CA4                     __ptext22:
  2814                           	opt stack 0
  2815  000CA4                     _i2c_masterOperation:
  2816                           	opt stack 18
  2817                           
  2818                           ;incstack = 0
  2819                           ;i2c_masterOperation@operation stored from wreg
  2820  000CA4  6E3D               	movwf	i2c_masterOperation@operation,c
  2821                           
  2822                           ;i2c_master.c: 212: i2c_error_t ret = I2C_BUSY;
  2823  000CA6  0E01               	movlw	1
  2824  000CA8  6E3E               	movwf	i2c_masterOperation@ret,c
  2825                           
  2826                           ;i2c_master.c: 213: if(!i2c_status.busy)
  2827  000CAA  0100               	movlb	0	; () banked
  2828  000CAC  B1B6               	btfsc	_i2c_status& (0+255),0,b
  2829  000CAE  D01C               	goto	l100
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;i2c_master.c: 214: {
  2833                           ;i2c_master.c: 215: i2c_status.busy = 1;
  2834  000CB0  81B6               	bsf	_i2c_status& (0+255),0,b
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;i2c_master.c: 216: ret = I2C_NOERR;
  2838  000CB2  0E00               	movlw	0
  2839  000CB4  6E3E               	movwf	i2c_masterOperation@ret,c
  2840                           
  2841                           ;i2c_master.c: 218: switch(operation) {
  2842  000CB6  D007               	goto	l95
  2843  000CB8                     
  2844                           ; BSR set to: 0
  2845                           ;i2c_master.c: 220: i2c_status.state = I2C_SEND_ADR_READ;
  2846                           
  2847                           ; BSR set to: 0
  2848  000CB8  0E01               	movlw	1
  2849  000CBA  D003               	goto	L2
  2850  000CBC                     
  2851                           ; BSR set to: 0
  2852                           ;i2c_master.c: 224: i2c_status.state = I2C_SEND_INITIAL_READ;
  2853                           
  2854                           ; BSR set to: 0
  2855  000CBC  0E10               	movlw	16
  2856  000CBE  D001               	goto	L2
  2857  000CC0                     
  2858                           ; BSR set to: 0
  2859                           ;i2c_master.c: 228: i2c_status.state = I2C_SEND_ADR_WRITE;
  2860                           
  2861                           ; BSR set to: 0
  2862  000CC0  0E02               	movlw	2
  2863  000CC2                     L2:
  2864  000CC2  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;i2c_master.c: 230: }
  2868                           
  2869                           ;i2c_master.c: 229: break;
  2870  000CC4  D00A               	goto	l97
  2871  000CC6                     l95:
  2872                           
  2873                           ; BSR set to: 0
  2874                           
  2875                           ; BSR set to: 0
  2876  000CC6  503D               	movf	i2c_masterOperation@operation,w,c
  2877                           
  2878                           ; Switch size 1, requested type "space"
  2879                           ; Number of cases is 3, Range of values is 0 to 2
  2880                           ; switch strategies available:
  2881                           ; Name         Instructions Cycles
  2882                           ; simple_byte           10     6 (average)
  2883                           ;	Chosen strategy is simple_byte
  2884  000CC8  0A00               	xorlw	0	; case 0
  2885  000CCA  B4D8               	btfsc	status,2,c
  2886  000CCC  D7F5               	goto	l96
  2887  000CCE  0A01               	xorlw	1	; case 1
  2888  000CD0  B4D8               	btfsc	status,2,c
  2889  000CD2  D7F4               	goto	l98
  2890  000CD4  0A03               	xorlw	3	; case 2
  2891  000CD6  B4D8               	btfsc	status,2,c
  2892  000CD8  D7F3               	goto	l99
  2893  000CDA                     l97:
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;i2c_master.c: 241: i2c1_driver_start();
  2897                           
  2898                           ; BSR set to: 0
  2899  000CDA  EC09  F009         	call	_i2c1_driver_start	;wreg free
  2900                           
  2901                           ;i2c_master.c: 243: if(! mssp1_IRQisEnabled())
  2902  000CDE  EC29  F008         	call	_mssp1_IRQisEnabled	;wreg free
  2903  000CE2  A0D8               	btfss	status,0,c
  2904                           
  2905                           ;i2c_master.c: 244: i2c_poller();
  2906  000CE4  ECA1  F007         	call	_i2c_poller	;wreg free
  2907  000CE8                     l100:
  2908                           
  2909                           ;i2c_master.c: 245: }
  2910                           ;i2c_master.c: 246: return ret;
  2911  000CE8  503E               	movf	i2c_masterOperation@ret,w,c
  2912  000CEA  0012               	return	
  2913  000CEC                     __end_of_i2c_masterOperation:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           intcon	equ	0xFF2
  2922                           intcon2	equ	0xFF1
  2923                           postinc0	equ	0xFEE
  2924                           plusw0	equ	0xFEB
  2925                           wreg	equ	0xFE8
  2926                           postdec1	equ	0xFE5
  2927                           fsr1l	equ	0xFE1
  2928                           indf2	equ	0xFDF
  2929                           plusw2	equ	0xFDB
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _mssp1_IRQisEnabled *****************
  2935 ;; Defined at:
  2936 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;		None               void
  2943 ;; Registers used:
  2944 ;;		wreg, status,0
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2950 ;;      Params:         0       0       0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0       0       0
  2952 ;;      Temps:          1       0       0       0       0       0       0
  2953 ;;      Totals:         1       0       0       0       0       0       0
  2954 ;;Total ram usage:        1 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    5
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_i2c_masterOperation
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text23
  2965  001052                     __ptext23:
  2966                           	opt stack 0
  2967  001052                     _mssp1_IRQisEnabled:
  2968                           	opt stack 22
  2969                           
  2970                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
  2971                           
  2972                           ;incstack = 0
  2973  001052  A69D               	btfss	3997,3,c	;volatile
  2974  001054  D003               	goto	u1280
  2975  001056  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2976  001058  2A3A               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  2977  00105A  D001               	goto	u1288
  2978  00105C                     u1280:
  2979  00105C  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2980  00105E                     u1288:
  2981  00105E  303A               	rrcf	??_mssp1_IRQisEnabled,w,c
  2982  001060  0012               	return	
  2983  001062                     __end_of_mssp1_IRQisEnabled:
  2984                           	opt stack 0
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           prodh	equ	0xFF4
  2990                           prodl	equ	0xFF3
  2991                           intcon	equ	0xFF2
  2992                           intcon2	equ	0xFF1
  2993                           postinc0	equ	0xFEE
  2994                           plusw0	equ	0xFEB
  2995                           wreg	equ	0xFE8
  2996                           postdec1	equ	0xFE5
  2997                           fsr1l	equ	0xFE1
  2998                           indf2	equ	0xFDF
  2999                           plusw2	equ	0xFDB
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _i2c_poller *****************
  3005 ;; Defined at:
  3006 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3020 ;;      Params:         0       0       0       0       0       0       0
  3021 ;;      Locals:         0       0       0       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0
  3023 ;;      Totals:         0       0       0       0       0       0       0
  3024 ;;Total ram usage:        0 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    9
  3027 ;; This function calls:
  3028 ;;		_i2c_ISR
  3029 ;;		_mssp1_waitForEvent
  3030 ;; This function is called by:
  3031 ;;		_i2c_masterOperation
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text24
  3036  000F42                     __ptext24:
  3037                           	opt stack 0
  3038  000F42                     _i2c_poller:
  3039                           	opt stack 18
  3040                           
  3041                           ;i2c_master.c: 274: while(i2c_status.busy)
  3042                           
  3043                           ;incstack = 0
  3044  000F42  D008               	goto	l113
  3045  000F44                     
  3046                           ;i2c_master.c: 275: {
  3047                           ;i2c_master.c: 276: mssp1_waitForEvent((0));
  3048  000F44  0E00               	movlw	0
  3049  000F46  6E3A               	movwf	mssp1_waitForEvent@timeout,c
  3050  000F48  0E00               	movlw	0
  3051  000F4A  6E3B               	movwf	mssp1_waitForEvent@timeout+1,c
  3052  000F4C  EC0E  F008         	call	_mssp1_waitForEvent	;wreg free
  3053                           
  3054                           ;i2c_master.c: 277: i2c_ISR();
  3055  000F50  ECDE  F005         	call	_i2c_ISR	;wreg free
  3056  000F54                     l113:
  3057  000F54  0100               	movlb	0	; () banked
  3058  000F56  A1B6               	btfss	_i2c_status& (0+255),0,b
  3059  000F58  0012               	return	
  3060  000F5A  D7F4               	goto	l114
  3061  000F5C                     __end_of_i2c_poller:
  3062                           	opt stack 0
  3063                           tblptru	equ	0xFF8
  3064                           tblptrh	equ	0xFF7
  3065                           tblptrl	equ	0xFF6
  3066                           tablat	equ	0xFF5
  3067                           prodh	equ	0xFF4
  3068                           prodl	equ	0xFF3
  3069                           intcon	equ	0xFF2
  3070                           intcon2	equ	0xFF1
  3071                           postinc0	equ	0xFEE
  3072                           plusw0	equ	0xFEB
  3073                           wreg	equ	0xFE8
  3074                           postdec1	equ	0xFE5
  3075                           fsr1l	equ	0xFE1
  3076                           indf2	equ	0xFDF
  3077                           plusw2	equ	0xFDB
  3078                           fsr2h	equ	0xFDA
  3079                           fsr2l	equ	0xFD9
  3080                           status	equ	0xFD8
  3081                           
  3082 ;; *************** function _mssp1_waitForEvent *****************
  3083 ;; Defined at:
  3084 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  timeout         2   20[COMRAM] PTR unsigned int 
  3087 ;;		 -> NULL(0), 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3099 ;;      Params:         2       0       0       0       0       0       0
  3100 ;;      Locals:         0       0       0       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0       0       0
  3102 ;;      Totals:         2       0       0       0       0       0       0
  3103 ;;Total ram usage:        2 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    5
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		_i2c_poller
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text25
  3114  00101C                     __ptext25:
  3115                           	opt stack 0
  3116  00101C                     _mssp1_waitForEvent:
  3117                           	opt stack 21
  3118                           
  3119                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;incstack = 0
  3123  00101C  B69E               	btfsc	3998,3,c	;volatile
  3124  00101E  0012               	return	
  3125  001020                     u1230:
  3126                           
  3127                           ;i2c1_driver.c: 76: {
  3128                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
  3129                           
  3130                           ;i2c1_driver.c: 74: {
  3131                           ;i2c1_driver.c: 75: while(1)
  3132  001020  B69E               	btfsc	3998,3,c	;volatile
  3133  001022  0012               	return	
  3134                           
  3135                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3136  001024  0E85               	movlw	133
  3137  001026                     u1797:
  3138  001026  2EE8               	decfsz	wreg,f,c
  3139  001028  D7FE               	bra	u1797
  3140  00102A  F000               	nop	
  3141  00102C  D7F9               	goto	u1230
  3142  00102E                     __end_of_mssp1_waitForEvent:
  3143                           	opt stack 0
  3144                           tblptru	equ	0xFF8
  3145                           tblptrh	equ	0xFF7
  3146                           tblptrl	equ	0xFF6
  3147                           tablat	equ	0xFF5
  3148                           prodh	equ	0xFF4
  3149                           prodl	equ	0xFF3
  3150                           intcon	equ	0xFF2
  3151                           intcon2	equ	0xFF1
  3152                           postinc0	equ	0xFEE
  3153                           plusw0	equ	0xFEB
  3154                           wreg	equ	0xFE8
  3155                           postdec1	equ	0xFE5
  3156                           fsr1l	equ	0xFE1
  3157                           indf2	equ	0xFDF
  3158                           plusw2	equ	0xFDB
  3159                           fsr2h	equ	0xFDA
  3160                           fsr2l	equ	0xFD9
  3161                           status	equ	0xFD8
  3162                           
  3163 ;; *************** function _i2c_ISR *****************
  3164 ;; Defined at:
  3165 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;		None
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;		None
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      void 
  3172 ;; Registers used:
  3173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3179 ;;      Params:         0       0       0       0       0       0       0
  3180 ;;      Locals:         0       0       0       0       0       0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0
  3182 ;;      Totals:         0       0       0       0       0       0       0
  3183 ;;Total ram usage:        0 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    8
  3186 ;; This function calls:
  3187 ;;		_do_I2C_DO_ACK
  3188 ;;		_do_I2C_DO_ADDRESS_NACK
  3189 ;;		_do_I2C_DO_NACK_RESTART
  3190 ;;		_do_I2C_DO_NACK_STOP
  3191 ;;		_do_I2C_IDLE
  3192 ;;		_do_I2C_RCEN
  3193 ;;		_do_I2C_RESET
  3194 ;;		_do_I2C_RX
  3195 ;;		_do_I2C_SEND_ADR_READ
  3196 ;;		_do_I2C_SEND_ADR_WRITE
  3197 ;;		_do_I2C_SEND_INITIAL_READ
  3198 ;;		_do_I2C_SEND_RESTART
  3199 ;;		_do_I2C_SEND_RESTART_READ
  3200 ;;		_do_I2C_SEND_RESTART_WRITE
  3201 ;;		_do_I2C_SEND_STOP
  3202 ;;		_do_I2C_TX
  3203 ;;		_do_I2C_TX_EMPTY
  3204 ;;		_do_I2C_TX_REGISTER
  3205 ;;		_i2c1_driver_isNACK
  3206 ;;		_mssp1_clearIRQ
  3207 ;; This function is called by:
  3208 ;;		_i2c_open
  3209 ;;		_i2c_poller
  3210 ;;		_INTERRUPT_InterruptManager
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text26
  3215  000BBC                     __ptext26:
  3216                           	opt stack 0
  3217  000BBC                     _i2c_ISR:
  3218                           	opt stack 0
  3219                           
  3220                           ;Skip over the trampoline to the duplicate function for level 2
  3221  000BBC  B24B               	btfsc	btemp,1,c
  3222  000BBE  EF76  F006         	goto	i2_i2c_ISR
  3223  000BC2                     _i2c_ISR$intlevel0:
  3224                           	opt stack 18
  3225                           
  3226                           ;i2c_master.c: 486: mssp1_clearIRQ();
  3227                           
  3228                           ;incstack = 0
  3229  000BC2  EC0D  F009         	call	_mssp1_clearIRQ	;wreg free
  3230                           
  3231                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  3232  000BC6  0100               	movlb	0	; () banked
  3233  000BC8  A7B6               	btfss	_i2c_status& (0+255),3,b
  3234  000BCA  D007               	goto	l209
  3235                           
  3236                           ; BSR set to: 0
  3237  000BCC  ECE5  F007         	call	_i2c1_driver_isNACK	;wreg free
  3238  000BD0  A0D8               	btfss	status,0,c
  3239  000BD2  D003               	goto	l209
  3240                           
  3241                           ;i2c_master.c: 493: {
  3242                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  3243  000BD4  0E0F               	movlw	15
  3244  000BD6  0100               	movlb	0	; () banked
  3245  000BD8  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  3246  000BDA                     l209:
  3247                           
  3248                           ;i2c_master.c: 495: }
  3249                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  3250                           
  3251                           ; BSR set to: 0
  3252  000BDA  0100               	movlb	0	; () banked
  3253  000BDC  51C0               	movf	(_i2c_status+10)& (0+255),w,b
  3254  000BDE  0D02               	mullw	2
  3255  000BE0  0E92               	movlw	low _fsmStateTable
  3256  000BE2  24F3               	addwf	prodl,w,c
  3257  000BE4  6ED9               	movwf	fsr2l,c
  3258  000BE6  0E00               	movlw	high _fsmStateTable
  3259  000BE8  20F4               	addwfc	prodh,w,c
  3260  000BEA  6EDA               	movwf	fsr2h,c
  3261  000BEC  D801               	call	u1278
  3262  000BEE  D00A               	goto	u1279
  3263  000BF0                     u1278:
  3264  000BF0  0005               	push	
  3265  000BF2  6EFA               	movwf	pclath,c
  3266  000BF4  50DE               	movf	postinc2,w,c
  3267  000BF6  6EFD               	movwf	tosl,c
  3268  000BF8  50DE               	movf	postinc2,w,c
  3269  000BFA  6EFE               	movwf	tosh,c
  3270  000BFC  50F8               	movf	tblptru,w,c
  3271  000BFE  6EFF               	movwf	tosu,c
  3272  000C00  50FA               	movf	pclath,w,c
  3273  000C02  0012               	return		;indir
  3274  000C04                     u1279:
  3275  000C04  0100               	movlb	0	; () banked
  3276  000C06  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  3277                           
  3278                           ; BSR set to: 0
  3279  000C08  0012               	return		;funcret
  3280  000C0A                     __end_of_i2c_ISR:
  3281                           	opt stack 0
  3282                           tosu	equ	0xFFF
  3283                           tosh	equ	0xFFE
  3284                           tosl	equ	0xFFD
  3285                           pclath	equ	0xFFA
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           prodh	equ	0xFF4
  3291                           prodl	equ	0xFF3
  3292                           intcon	equ	0xFF2
  3293                           intcon2	equ	0xFF1
  3294                           postinc0	equ	0xFEE
  3295                           plusw0	equ	0xFEB
  3296                           wreg	equ	0xFE8
  3297                           postdec1	equ	0xFE5
  3298                           fsr1l	equ	0xFE1
  3299                           indf2	equ	0xFDF
  3300                           postinc2	equ	0xFDE
  3301                           plusw2	equ	0xFDB
  3302                           fsr2h	equ	0xFDA
  3303                           fsr2l	equ	0xFD9
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function _do_I2C_TX_EMPTY *****************
  3307 ;; Defined at:
  3308 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;		None
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;		None
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      enum E7019
  3315 ;; Registers used:
  3316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3322 ;;      Params:         0       0       0       0       0       0       0
  3323 ;;      Locals:         0       0       0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0
  3325 ;;      Totals:         0       0       0       0       0       0       0
  3326 ;;Total ram usage:        0 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    7
  3329 ;; This function calls:
  3330 ;;		_do_I2C_SEND_RESTART
  3331 ;;		_do_I2C_SEND_STOP
  3332 ;;		_mssp1_setIRQ
  3333 ;;		_returnReset
  3334 ;;		_returnStop
  3335 ;; This function is called by:
  3336 ;;		_i2c_ISR
  3337 ;;		i2_i2c_ISR
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text27
  3342  000AB0                     __ptext27:
  3343                           	opt stack 0
  3344  000AB0                     _do_I2C_TX_EMPTY:
  3345                           	opt stack 0
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;Skip over the trampoline to the duplicate function for level 2
  3349  000AB0  B24B               	btfsc	btemp,1,c
  3350  000AB2  EF87  F005         	goto	i2_do_I2C_TX_EMPTY
  3351  000AB6                     _do_I2C_TX_EMPTY$intlevel0:
  3352                           	opt stack 18
  3353                           
  3354                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  3355                           
  3356                           ;incstack = 0
  3357  000AB6  0100               	movlb	0	; () banked
  3358  000AB8  85B6               	bsf	_i2c_status& (0+255),2,b
  3359                           
  3360                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3361  000ABA  D00A               	goto	l197
  3362  000ABC                     
  3363                           ;i2c_master.c: 448: case i2c_restart_write:
  3364                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  3365                           
  3366                           ; BSR set to: 0
  3367                           
  3368                           ; BSR set to: 0
  3369  000ABC  EC7B  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3370  000AC0  0012               	return	
  3371  000AC2                     
  3372                           ;i2c_master.c: 451: mssp1_setIRQ();
  3373  000AC2  ECFF  F008         	call	_mssp1_setIRQ	;wreg free
  3374                           
  3375                           ;i2c_master.c: 452: return I2C_TX;
  3376  000AC6  0E03               	movlw	3
  3377  000AC8  0012               	return	
  3378  000ACA                     
  3379                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  3380                           
  3381                           ;i2c_master.c: 454: case i2c_stop:
  3382  000ACA  EC74  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3383                           
  3384                           ;i2c_master.c: 456: }
  3385  000ACE  0012               	return	
  3386  000AD0                     l197:
  3387  000AD0  C0CE  F03A         	movff	_i2c_status+24,returnReset@p
  3388  000AD4  C0CF  F03B         	movff	_i2c_status+25,returnReset@p+1
  3389  000AD8  EE20  F0C2         	lfsr	2,_i2c_status+12
  3390  000ADC  D801               	call	u1228
  3391  000ADE  D00A               	goto	u1229
  3392  000AE0                     u1228:
  3393  000AE0  0005               	push	
  3394  000AE2  6EFA               	movwf	pclath,c
  3395  000AE4  50DE               	movf	postinc2,w,c
  3396  000AE6  6EFD               	movwf	tosl,c
  3397  000AE8  50DE               	movf	postinc2,w,c
  3398  000AEA  6EFE               	movwf	tosh,c
  3399  000AEC  50F8               	movf	tblptru,w,c
  3400  000AEE  6EFF               	movwf	tosu,c
  3401  000AF0  50FA               	movf	pclath,w,c
  3402  000AF2  0012               	return		;indir
  3403  000AF4                     u1229:
  3404                           
  3405                           ; Switch size 1, requested type "space"
  3406                           ; Number of cases is 4, Range of values is 1 to 4
  3407                           ; switch strategies available:
  3408                           ; Name         Instructions Cycles
  3409                           ; simple_byte           13     7 (average)
  3410                           ;	Chosen strategy is simple_byte
  3411  000AF4  0A01               	xorlw	1	; case 1
  3412  000AF6  B4D8               	btfsc	status,2,c
  3413  000AF8  D7E8               	goto	l202
  3414  000AFA  0A03               	xorlw	3	; case 2
  3415  000AFC  B4D8               	btfsc	status,2,c
  3416  000AFE  D7DE               	goto	l198
  3417  000B00  0A01               	xorlw	1	; case 3
  3418  000B02  B4D8               	btfsc	status,2,c
  3419  000B04  D7DB               	goto	l198
  3420  000B06  0A07               	xorlw	7	; case 4
  3421  000B08  B4D8               	btfsc	status,2,c
  3422  000B0A  D7DB               	goto	l201
  3423  000B0C  D7DE               	goto	l202
  3424  000B0E                     __end_of_do_I2C_TX_EMPTY:
  3425                           	opt stack 0
  3426                           tosu	equ	0xFFF
  3427                           tosh	equ	0xFFE
  3428                           tosl	equ	0xFFD
  3429                           pclath	equ	0xFFA
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           prodh	equ	0xFF4
  3435                           prodl	equ	0xFF3
  3436                           intcon	equ	0xFF2
  3437                           intcon2	equ	0xFF1
  3438                           postinc0	equ	0xFEE
  3439                           plusw0	equ	0xFEB
  3440                           wreg	equ	0xFE8
  3441                           postdec1	equ	0xFE5
  3442                           fsr1l	equ	0xFE1
  3443                           indf2	equ	0xFDF
  3444                           postinc2	equ	0xFDE
  3445                           plusw2	equ	0xFDB
  3446                           fsr2h	equ	0xFDA
  3447                           fsr2l	equ	0xFD9
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function _do_I2C_RX *****************
  3451 ;; Defined at:
  3452 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      enum E7019
  3459 ;; Registers used:
  3460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3466 ;;      Params:         0       0       0       0       0       0       0
  3467 ;;      Locals:         0       0       0       0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0       0       0
  3469 ;;      Totals:         0       0       0       0       0       0       0
  3470 ;;Total ram usage:        0 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    7
  3473 ;; This function calls:
  3474 ;;		_do_I2C_DO_NACK_RESTART
  3475 ;;		_do_I2C_DO_NACK_STOP
  3476 ;;		_i2c1_driver_getRXData
  3477 ;;		_i2c1_driver_sendACK
  3478 ;;		_returnReset
  3479 ;;		_returnStop
  3480 ;; This function is called by:
  3481 ;;		_i2c_ISR
  3482 ;;		i2_i2c_ISR
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text28
  3487  000956                     __ptext28:
  3488                           	opt stack 0
  3489  000956                     _do_I2C_RX:
  3490                           	opt stack 0
  3491                           
  3492                           ;Skip over the trampoline to the duplicate function for level 2
  3493  000956  B24B               	btfsc	btemp,1,c
  3494  000958  EFE8  F004         	goto	i2_do_I2C_RX
  3495  00095C                     _do_I2C_RX$intlevel0:
  3496                           	opt stack 18
  3497                           
  3498                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  3499                           
  3500                           ;incstack = 0
  3501  00095C  EC01  F009         	call	_i2c1_driver_getRXData	;wreg free
  3502  000960  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  3503  000964  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  3504  000968  6EDF               	movwf	indf2,c
  3505  00096A  0100               	movlb	0	; () banked
  3506  00096C  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  3507  00096E  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  3511  000970  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  3512  000972  A0D8               	btfss	status,0,c
  3513  000974  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  3514  000976  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  3515  000978  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  3516  00097A  B4D8               	btfsc	status,2,c
  3517  00097C  D004               	goto	l185
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;i2c_master.c: 421: {
  3521                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  3522  00097E  ECF1  F008         	call	_i2c1_driver_sendACK	;wreg free
  3523                           
  3524                           ;i2c_master.c: 423: return I2C_RCEN;
  3525  000982  0E05               	movlw	5
  3526                           
  3527                           ;i2c_master.c: 424: }
  3528  000984  0012               	return	
  3529  000986                     l185:
  3530                           
  3531                           ; BSR set to: 0
  3532                           ;i2c_master.c: 425: else
  3533                           ;i2c_master.c: 426: {
  3534                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  3535  000986  85B6               	bsf	_i2c_status& (0+255),2,b
  3536                           
  3537                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3538  000988  D006               	goto	l188
  3539  00098A                     
  3540                           ;i2c_master.c: 431: case i2c_restart_read:
  3541                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  3542                           
  3543                           ; BSR set to: 0
  3544                           
  3545                           ; BSR set to: 0
  3546  00098A  EC5F  F008         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  3547  00098E  0012               	return	
  3548  000990                     
  3549                           ;i2c_master.c: 435: case i2c_stop:
  3550                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  3551                           
  3552                           ;i2c_master.c: 434: case i2c_continue:
  3553  000990  EC66  F008         	call	_do_I2C_DO_NACK_STOP	;wreg free
  3554                           
  3555                           ;i2c_master.c: 437: }
  3556  000994  0012               	return	
  3557  000996                     l188:
  3558  000996  C0CE  F03A         	movff	_i2c_status+24,returnReset@p
  3559  00099A  C0CF  F03B         	movff	_i2c_status+25,returnReset@p+1
  3560  00099E  EE20  F0C2         	lfsr	2,_i2c_status+12
  3561  0009A2  D801               	call	u1218
  3562  0009A4  D00A               	goto	u1219
  3563  0009A6                     u1218:
  3564  0009A6  0005               	push	
  3565  0009A8  6EFA               	movwf	pclath,c
  3566  0009AA  50DE               	movf	postinc2,w,c
  3567  0009AC  6EFD               	movwf	tosl,c
  3568  0009AE  50DE               	movf	postinc2,w,c
  3569  0009B0  6EFE               	movwf	tosh,c
  3570  0009B2  50F8               	movf	tblptru,w,c
  3571  0009B4  6EFF               	movwf	tosu,c
  3572  0009B6  50FA               	movf	pclath,w,c
  3573  0009B8  0012               	return		;indir
  3574  0009BA                     u1219:
  3575                           
  3576                           ; Switch size 1, requested type "space"
  3577                           ; Number of cases is 4, Range of values is 1 to 4
  3578                           ; switch strategies available:
  3579                           ; Name         Instructions Cycles
  3580                           ; simple_byte           13     7 (average)
  3581                           ;	Chosen strategy is simple_byte
  3582  0009BA  0A01               	xorlw	1	; case 1
  3583  0009BC  B4D8               	btfsc	status,2,c
  3584  0009BE  D7E8               	goto	l191
  3585  0009C0  0A03               	xorlw	3	; case 2
  3586  0009C2  B4D8               	btfsc	status,2,c
  3587  0009C4  D7E2               	goto	l189
  3588  0009C6  0A01               	xorlw	1	; case 3
  3589  0009C8  B4D8               	btfsc	status,2,c
  3590  0009CA  D7DF               	goto	l189
  3591  0009CC  0A07               	xorlw	7	; case 4
  3592  0009CE  D7E0               	goto	l191
  3593  0009D0                     __end_of_do_I2C_RX:
  3594                           	opt stack 0
  3595                           tosu	equ	0xFFF
  3596                           tosh	equ	0xFFE
  3597                           tosl	equ	0xFFD
  3598                           pclath	equ	0xFFA
  3599                           tblptru	equ	0xFF8
  3600                           tblptrh	equ	0xFF7
  3601                           tblptrl	equ	0xFF6
  3602                           tablat	equ	0xFF5
  3603                           prodh	equ	0xFF4
  3604                           prodl	equ	0xFF3
  3605                           intcon	equ	0xFF2
  3606                           intcon2	equ	0xFF1
  3607                           postinc0	equ	0xFEE
  3608                           plusw0	equ	0xFEB
  3609                           wreg	equ	0xFE8
  3610                           postdec1	equ	0xFE5
  3611                           fsr1l	equ	0xFE1
  3612                           indf2	equ	0xFDF
  3613                           postinc2	equ	0xFDE
  3614                           plusw2	equ	0xFDB
  3615                           fsr2h	equ	0xFDA
  3616                           fsr2l	equ	0xFD9
  3617                           status	equ	0xFD8
  3618                           
  3619 ;; *************** function _do_I2C_TX *****************
  3620 ;; Defined at:
  3621 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;		None
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;		None
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      enum E7019
  3628 ;; Registers used:
  3629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3635 ;;      Params:         0       0       0       0       0       0       0
  3636 ;;      Locals:         2       0       0       0       0       0       0
  3637 ;;      Temps:          0       0       0       0       0       0       0
  3638 ;;      Totals:         2       0       0       0       0       0       0
  3639 ;;Total ram usage:        2 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    7
  3642 ;; This function calls:
  3643 ;;		_do_I2C_SEND_RESTART_READ
  3644 ;;		_do_I2C_SEND_RESTART_WRITE
  3645 ;;		_do_I2C_SEND_STOP
  3646 ;;		_i2c1_driver_TXData
  3647 ;;		_i2c1_driver_isNACK
  3648 ;;		_returnReset
  3649 ;;		_returnStop
  3650 ;; This function is called by:
  3651 ;;		_i2c_ISR
  3652 ;;		i2_i2c_ISR
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text29
  3657  00079E                     __ptext29:
  3658                           	opt stack 0
  3659  00079E                     _do_I2C_TX:
  3660                           	opt stack 0
  3661                           
  3662                           ;Skip over the trampoline to the duplicate function for level 2
  3663  00079E  B24B               	btfsc	btemp,1,c
  3664  0007A0  EF63  F004         	goto	i2_do_I2C_TX
  3665  0007A4                     _do_I2C_TX$intlevel0:
  3666                           	opt stack 18
  3667                           
  3668                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  3669                           
  3670                           ;incstack = 0
  3671  0007A4  ECE5  F007         	call	_i2c1_driver_isNACK	;wreg free
  3672  0007A8  B0D8               	btfsc	status,0,c
  3673  0007AA  D00A               	goto	l170
  3674  0007AC  D026               	goto	l169
  3675  0007AE                     
  3676                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  3677  0007AE  EC89  F008         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  3678  0007B2  0012               	return	
  3679  0007B4                     
  3680                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  3681  0007B4  EC82  F008         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  3682  0007B8  0012               	return	
  3683  0007BA                     
  3684                           ;i2c_master.c: 405: case i2c_stop:
  3685                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  3686                           
  3687                           ;i2c_master.c: 404: case i2c_continue:
  3688  0007BA  EC74  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3689                           
  3690                           ;i2c_master.c: 407: }
  3691  0007BE  0012               	return	
  3692  0007C0                     l170:
  3693  0007C0  C0D4  F03A         	movff	_i2c_status+30,returnReset@p
  3694  0007C4  C0D5  F03B         	movff	_i2c_status+31,returnReset@p+1
  3695  0007C8  EE20  F0C8         	lfsr	2,_i2c_status+18
  3696  0007CC  D801               	call	u1188
  3697  0007CE  D00A               	goto	u1189
  3698  0007D0                     u1188:
  3699  0007D0  0005               	push	
  3700  0007D2  6EFA               	movwf	pclath,c
  3701  0007D4  50DE               	movf	postinc2,w,c
  3702  0007D6  6EFD               	movwf	tosl,c
  3703  0007D8  50DE               	movf	postinc2,w,c
  3704  0007DA  6EFE               	movwf	tosh,c
  3705  0007DC  50F8               	movf	tblptru,w,c
  3706  0007DE  6EFF               	movwf	tosu,c
  3707  0007E0  50FA               	movf	pclath,w,c
  3708  0007E2  0012               	return		;indir
  3709  0007E4                     u1189:
  3710                           
  3711                           ; Switch size 1, requested type "space"
  3712                           ; Number of cases is 4, Range of values is 1 to 4
  3713                           ; switch strategies available:
  3714                           ; Name         Instructions Cycles
  3715                           ; simple_byte           13     7 (average)
  3716                           ;	Chosen strategy is simple_byte
  3717  0007E4  0A01               	xorlw	1	; case 1
  3718  0007E6  B4D8               	btfsc	status,2,c
  3719  0007E8  D7E8               	goto	l174
  3720  0007EA  0A03               	xorlw	3	; case 2
  3721  0007EC  B4D8               	btfsc	status,2,c
  3722  0007EE  D7DF               	goto	l171
  3723  0007F0  0A01               	xorlw	1	; case 3
  3724  0007F2  B4D8               	btfsc	status,2,c
  3725  0007F4  D7DF               	goto	l173
  3726  0007F6  0A07               	xorlw	7	; case 4
  3727  0007F8  D7E0               	goto	l174
  3728  0007FA                     l169:
  3729                           
  3730                           ;i2c_master.c: 409: else
  3731                           ;i2c_master.c: 410: {
  3732                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  3733  0007FA  0100               	movlb	0	; () banked
  3734  0007FC  97B6               	bcf	_i2c_status& (0+255),3,b
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  3738  0007FE  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  3739  000802  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  3740  000806  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  3741  000808  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  3742  00080A  50DF               	movf	indf2,w,c
  3743  00080C  ECCA  F008         	call	_i2c1_driver_TXData
  3744                           
  3745                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  3746  000810  0100               	movlb	0	; () banked
  3747  000812  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  3748  000814  A0D8               	btfss	status,0,c
  3749  000816  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  3750  000818  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  3751  00081A  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  3752  00081C  A4D8               	btfss	status,2,c
  3753  00081E  D004               	goto	l180
  3754                           
  3755                           ; BSR set to: 0
  3756  000820  0E00               	movlw	0
  3757  000822  6E3C               	movwf	_do_I2C_TX$315+1,c
  3758  000824  0E06               	movlw	6
  3759  000826  D003               	goto	L3
  3760  000828                     l180:
  3761                           
  3762                           ; BSR set to: 0
  3763                           
  3764                           ; BSR set to: 0
  3765  000828  0E00               	movlw	0
  3766  00082A  6E3C               	movwf	_do_I2C_TX$315+1,c
  3767  00082C  0E03               	movlw	3
  3768  00082E                     L3:
  3769  00082E  6E3B               	movwf	_do_I2C_TX$315,c
  3770                           
  3771                           ; BSR set to: 0
  3772  000830  503B               	movf	_do_I2C_TX$315,w,c
  3773                           
  3774                           ; BSR set to: 0
  3775  000832  0012               	return	
  3776  000834                     __end_of_do_I2C_TX:
  3777                           	opt stack 0
  3778                           tosu	equ	0xFFF
  3779                           tosh	equ	0xFFE
  3780                           tosl	equ	0xFFD
  3781                           pclath	equ	0xFFA
  3782                           tblptru	equ	0xFF8
  3783                           tblptrh	equ	0xFF7
  3784                           tblptrl	equ	0xFF6
  3785                           tablat	equ	0xFF5
  3786                           prodh	equ	0xFF4
  3787                           prodl	equ	0xFF3
  3788                           intcon	equ	0xFF2
  3789                           intcon2	equ	0xFF1
  3790                           postinc0	equ	0xFEE
  3791                           plusw0	equ	0xFEB
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           plusw2	equ	0xFDB
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  3803 ;; Defined at:
  3804 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;		None
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  1    wreg      enum E7019
  3811 ;; Registers used:
  3812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3818 ;;      Params:         0       0       0       0       0       0       0
  3819 ;;      Locals:         0       0       0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0
  3821 ;;      Totals:         0       0       0       0       0       0       0
  3822 ;;Total ram usage:        0 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    7
  3825 ;; This function calls:
  3826 ;;		_do_I2C_SEND_RESTART
  3827 ;;		_do_I2C_SEND_STOP
  3828 ;;		_returnReset
  3829 ;;		_returnStop
  3830 ;; This function is called by:
  3831 ;;		_i2c_ISR
  3832 ;;		i2_i2c_ISR
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text30
  3837  000C0A                     __ptext30:
  3838                           	opt stack 0
  3839  000C0A                     _do_I2C_DO_ADDRESS_NACK:
  3840                           	opt stack 0
  3841                           
  3842                           ;Skip over the trampoline to the duplicate function for level 2
  3843  000C0A  B24B               	btfsc	btemp,1,c
  3844  000C0C  EF9A  F006         	goto	i2_do_I2C_DO_ADDRESS_NACK
  3845  000C10                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  3846                           	opt stack 18
  3847                           
  3848                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  3849                           
  3850                           ;incstack = 0
  3851  000C10  0100               	movlb	0	; () banked
  3852  000C12  97B6               	bcf	_i2c_status& (0+255),3,b
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  3856  000C14  0E02               	movlw	2
  3857  000C16  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  3858                           
  3859                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  3860  000C18  D006               	goto	l161
  3861  000C1A                     
  3862                           ;i2c_master.c: 386: case i2c_restart_write:
  3863                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  3864                           
  3865                           ; BSR set to: 0
  3866                           
  3867                           ; BSR set to: 0
  3868  000C1A  EC7B  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3869  000C1E  0012               	return	
  3870  000C20                     
  3871                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  3872  000C20  EC74  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3873                           
  3874                           ;i2c_master.c: 390: }
  3875  000C24  0012               	return	
  3876  000C26                     l161:
  3877  000C26  C0D2  F03A         	movff	_i2c_status+28,returnReset@p
  3878  000C2A  C0D3  F03B         	movff	_i2c_status+29,returnReset@p+1
  3879  000C2E  EE20  F0C6         	lfsr	2,_i2c_status+16
  3880  000C32  D801               	call	u1168
  3881  000C34  D00A               	goto	u1169
  3882  000C36                     u1168:
  3883  000C36  0005               	push	
  3884  000C38  6EFA               	movwf	pclath,c
  3885  000C3A  50DE               	movf	postinc2,w,c
  3886  000C3C  6EFD               	movwf	tosl,c
  3887  000C3E  50DE               	movf	postinc2,w,c
  3888  000C40  6EFE               	movwf	tosh,c
  3889  000C42  50F8               	movf	tblptru,w,c
  3890  000C44  6EFF               	movwf	tosu,c
  3891  000C46  50FA               	movf	pclath,w,c
  3892  000C48  0012               	return		;indir
  3893  000C4A                     u1169:
  3894                           
  3895                           ; Switch size 1, requested type "space"
  3896                           ; Number of cases is 2, Range of values is 2 to 3
  3897                           ; switch strategies available:
  3898                           ; Name         Instructions Cycles
  3899                           ; simple_byte            7     4 (average)
  3900                           ;	Chosen strategy is simple_byte
  3901  000C4A  0A02               	xorlw	2	; case 2
  3902  000C4C  B4D8               	btfsc	status,2,c
  3903  000C4E  D7E5               	goto	l162
  3904  000C50  0A01               	xorlw	1	; case 3
  3905  000C52  B4D8               	btfsc	status,2,c
  3906  000C54  D7E2               	goto	l162
  3907  000C56  D7E4               	goto	l165
  3908  000C58                     __end_of_do_I2C_DO_ADDRESS_NACK:
  3909                           	opt stack 0
  3910                           tosu	equ	0xFFF
  3911                           tosh	equ	0xFFE
  3912                           tosl	equ	0xFFD
  3913                           pclath	equ	0xFFA
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           intcon	equ	0xFF2
  3921                           intcon2	equ	0xFF1
  3922                           postinc0	equ	0xFEE
  3923                           plusw0	equ	0xFEB
  3924                           wreg	equ	0xFE8
  3925                           postdec1	equ	0xFE5
  3926                           fsr1l	equ	0xFE1
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           plusw2	equ	0xFDB
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  3935 ;; Defined at:
  3936 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      enum E7019
  3943 ;; Registers used:
  3944 ;;		wreg, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3950 ;;      Params:         0       0       0       0       0       0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0
  3952 ;;      Temps:          0       0       0       0       0       0       0
  3953 ;;      Totals:         0       0       0       0       0       0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    6
  3957 ;; This function calls:
  3958 ;;		_i2c1_driver_sendNACK
  3959 ;; This function is called by:
  3960 ;;		_do_I2C_RX
  3961 ;;		_i2c_ISR
  3962 ;;		i2_i2c_ISR
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text31
  3967  0010BE                     __ptext31:
  3968                           	opt stack 0
  3969  0010BE                     _do_I2C_DO_NACK_RESTART:
  3970                           	opt stack 0
  3971                           
  3972                           ;Skip over the trampoline to the duplicate function for level 2
  3973  0010BE  B24B               	btfsc	btemp,1,c
  3974  0010C0  EFCE  F008         	goto	i2_do_I2C_DO_NACK_RESTART
  3975  0010C4                     _do_I2C_DO_NACK_RESTART$intlevel0:
  3976                           	opt stack 18
  3977                           
  3978                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  3979                           
  3980                           ;incstack = 0
  3981  0010C4  ECEE  F008         	call	_i2c1_driver_sendNACK	;wreg free
  3982                           
  3983                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  3984  0010C8  0E09               	movlw	9
  3985  0010CA  0012               	return	
  3986  0010CC                     __end_of_do_I2C_DO_NACK_RESTART:
  3987                           	opt stack 0
  3988                           tosu	equ	0xFFF
  3989                           tosh	equ	0xFFE
  3990                           tosl	equ	0xFFD
  3991                           pclath	equ	0xFFA
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           prodh	equ	0xFF4
  3997                           prodl	equ	0xFF3
  3998                           intcon	equ	0xFF2
  3999                           intcon2	equ	0xFF1
  4000                           postinc0	equ	0xFEE
  4001                           plusw0	equ	0xFEB
  4002                           wreg	equ	0xFE8
  4003                           postdec1	equ	0xFE5
  4004                           fsr1l	equ	0xFE1
  4005                           indf2	equ	0xFDF
  4006                           postinc2	equ	0xFDE
  4007                           plusw2	equ	0xFDB
  4008                           fsr2h	equ	0xFDA
  4009                           fsr2l	equ	0xFD9
  4010                           status	equ	0xFD8
  4011                           
  4012 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  4013 ;; Defined at:
  4014 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;		None
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  1    wreg      enum E7019
  4021 ;; Registers used:
  4022 ;;		wreg, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4028 ;;      Params:         0       0       0       0       0       0       0
  4029 ;;      Locals:         0       0       0       0       0       0       0
  4030 ;;      Temps:          0       0       0       0       0       0       0
  4031 ;;      Totals:         0       0       0       0       0       0       0
  4032 ;;Total ram usage:        0 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    6
  4035 ;; This function calls:
  4036 ;;		_i2c1_driver_sendNACK
  4037 ;; This function is called by:
  4038 ;;		_do_I2C_RX
  4039 ;;		_i2c_ISR
  4040 ;;		i2_i2c_ISR
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text32
  4045  0010CC                     __ptext32:
  4046                           	opt stack 0
  4047  0010CC                     _do_I2C_DO_NACK_STOP:
  4048                           	opt stack 0
  4049                           
  4050                           ;Skip over the trampoline to the duplicate function for level 2
  4051  0010CC  B24B               	btfsc	btemp,1,c
  4052  0010CE  EFD2  F008         	goto	i2_do_I2C_DO_NACK_STOP
  4053  0010D2                     _do_I2C_DO_NACK_STOP$intlevel0:
  4054                           	opt stack 18
  4055                           
  4056                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  4057                           
  4058                           ;incstack = 0
  4059  0010D2  ECEE  F008         	call	_i2c1_driver_sendNACK	;wreg free
  4060                           
  4061                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  4062  0010D6  0E0A               	movlw	10
  4063  0010D8  0012               	return	
  4064  0010DA                     __end_of_do_I2C_DO_NACK_STOP:
  4065                           	opt stack 0
  4066                           tosu	equ	0xFFF
  4067                           tosh	equ	0xFFE
  4068                           tosl	equ	0xFFD
  4069                           pclath	equ	0xFFA
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           intcon2	equ	0xFF1
  4078                           postinc0	equ	0xFEE
  4079                           plusw0	equ	0xFEB
  4080                           wreg	equ	0xFE8
  4081                           postdec1	equ	0xFE5
  4082                           fsr1l	equ	0xFE1
  4083                           indf2	equ	0xFDF
  4084                           postinc2	equ	0xFDE
  4085                           plusw2	equ	0xFDB
  4086                           fsr2h	equ	0xFDA
  4087                           fsr2l	equ	0xFD9
  4088                           status	equ	0xFD8
  4089                           
  4090 ;; *************** function _do_I2C_DO_ACK *****************
  4091 ;; Defined at:
  4092 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      enum E7019
  4099 ;; Registers used:
  4100 ;;		wreg, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4106 ;;      Params:         0       0       0       0       0       0       0
  4107 ;;      Locals:         0       0       0       0       0       0       0
  4108 ;;      Temps:          0       0       0       0       0       0       0
  4109 ;;      Totals:         0       0       0       0       0       0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    6
  4113 ;; This function calls:
  4114 ;;		_i2c1_driver_sendACK
  4115 ;; This function is called by:
  4116 ;;		_i2c_ISR
  4117 ;;		i2_i2c_ISR
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text33
  4122  0010DA                     __ptext33:
  4123                           	opt stack 0
  4124  0010DA                     _do_I2C_DO_ACK:
  4125                           	opt stack 0
  4126                           
  4127                           ;Skip over the trampoline to the duplicate function for level 2
  4128  0010DA  B24B               	btfsc	btemp,1,c
  4129  0010DC  EFD6  F008         	goto	i2_do_I2C_DO_ACK
  4130  0010E0                     _do_I2C_DO_ACK$intlevel0:
  4131                           	opt stack 19
  4132                           
  4133                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  4134                           
  4135                           ;incstack = 0
  4136  0010E0  ECF1  F008         	call	_i2c1_driver_sendACK	;wreg free
  4137                           
  4138                           ;i2c_master.c: 362: return I2C_RCEN;
  4139  0010E4  0E05               	movlw	5
  4140  0010E6  0012               	return	
  4141  0010E8                     __end_of_do_I2C_DO_ACK:
  4142                           	opt stack 0
  4143                           tosu	equ	0xFFF
  4144                           tosh	equ	0xFFE
  4145                           tosl	equ	0xFFD
  4146                           pclath	equ	0xFFA
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           intcon	equ	0xFF2
  4154                           intcon2	equ	0xFF1
  4155                           postinc0	equ	0xFEE
  4156                           plusw0	equ	0xFEB
  4157                           wreg	equ	0xFE8
  4158                           postdec1	equ	0xFE5
  4159                           fsr1l	equ	0xFE1
  4160                           indf2	equ	0xFDF
  4161                           postinc2	equ	0xFDE
  4162                           plusw2	equ	0xFDB
  4163                           fsr2h	equ	0xFDA
  4164                           fsr2l	equ	0xFD9
  4165                           status	equ	0xFD8
  4166                           
  4167 ;; *************** function _do_I2C_RCEN *****************
  4168 ;; Defined at:
  4169 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;		None
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;		None
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  1    wreg      enum E7019
  4176 ;; Registers used:
  4177 ;;		wreg, cstack
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4183 ;;      Params:         0       0       0       0       0       0       0
  4184 ;;      Locals:         0       0       0       0       0       0       0
  4185 ;;      Temps:          0       0       0       0       0       0       0
  4186 ;;      Totals:         0       0       0       0       0       0       0
  4187 ;;Total ram usage:        0 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:    6
  4190 ;; This function calls:
  4191 ;;		_i2c1_driver_startRX
  4192 ;; This function is called by:
  4193 ;;		_i2c_ISR
  4194 ;;		i2_i2c_ISR
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text34
  4199  00102E                     __ptext34:
  4200                           	opt stack 0
  4201  00102E                     _do_I2C_RCEN:
  4202                           	opt stack 0
  4203                           
  4204                           ;Skip over the trampoline to the duplicate function for level 2
  4205  00102E  B24B               	btfsc	btemp,1,c
  4206  001030  EF97  F008         	goto	i2_do_I2C_RCEN
  4207  001034                     _do_I2C_RCEN$intlevel0:
  4208                           	opt stack 19
  4209                           
  4210                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  4211                           
  4212                           ;incstack = 0
  4213  001034  0100               	movlb	0	; () banked
  4214  001036  97B6               	bcf	_i2c_status& (0+255),3,b
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;i2c_master.c: 355: i2c1_driver_startRX();
  4218  001038  EC03  F009         	call	_i2c1_driver_startRX	;wreg free
  4219                           
  4220                           ;i2c_master.c: 356: return I2C_RX;
  4221  00103C  0E04               	movlw	4
  4222  00103E  0012               	return	
  4223  001040                     __end_of_do_I2C_RCEN:
  4224                           	opt stack 0
  4225                           tosu	equ	0xFFF
  4226                           tosh	equ	0xFFE
  4227                           tosl	equ	0xFFD
  4228                           pclath	equ	0xFFA
  4229                           tblptru	equ	0xFF8
  4230                           tblptrh	equ	0xFF7
  4231                           tblptrl	equ	0xFF6
  4232                           tablat	equ	0xFF5
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           intcon	equ	0xFF2
  4236                           intcon2	equ	0xFF1
  4237                           postinc0	equ	0xFEE
  4238                           plusw0	equ	0xFEB
  4239                           wreg	equ	0xFE8
  4240                           postdec1	equ	0xFE5
  4241                           fsr1l	equ	0xFE1
  4242                           indf2	equ	0xFDF
  4243                           postinc2	equ	0xFDE
  4244                           plusw2	equ	0xFDB
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           status	equ	0xFD8
  4248                           
  4249 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  4250 ;; Defined at:
  4251 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;		None
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;		None
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      enum E7019
  4258 ;; Registers used:
  4259 ;;		wreg, status,2, status,0, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 0/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4265 ;;      Params:         0       0       0       0       0       0       0
  4266 ;;      Locals:         0       0       0       0       0       0       0
  4267 ;;      Temps:          0       0       0       0       0       0       0
  4268 ;;      Totals:         0       0       0       0       0       0       0
  4269 ;;Total ram usage:        0 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    6
  4272 ;; This function calls:
  4273 ;;		_i2c1_driver_TXData
  4274 ;; This function is called by:
  4275 ;;		_i2c_ISR
  4276 ;;		i2_i2c_ISR
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           	psect	text35
  4281  000F72                     __ptext35:
  4282                           	opt stack 0
  4283  000F72                     _do_I2C_SEND_ADR_WRITE:
  4284                           	opt stack 0
  4285                           
  4286                           ;Skip over the trampoline to the duplicate function for level 2
  4287  000F72  B24B               	btfsc	btemp,1,c
  4288  000F74  EF31  F008         	goto	i2_do_I2C_SEND_ADR_WRITE
  4289  000F78                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  4290                           	opt stack 19
  4291                           
  4292                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  4293                           
  4294                           ;incstack = 0
  4295  000F78  0100               	movlb	0	; () banked
  4296  000F7A  87B6               	bsf	_i2c_status& (0+255),3,b
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  4300  000F7C  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  4301  000F7E  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  4302  000F80  ECCA  F008         	call	_i2c1_driver_TXData
  4303                           
  4304                           ;i2c_master.c: 349: return I2C_TX;
  4305  000F84  0E03               	movlw	3
  4306  000F86  0012               	return	
  4307  000F88                     __end_of_do_I2C_SEND_ADR_WRITE:
  4308                           	opt stack 0
  4309                           tosu	equ	0xFFF
  4310                           tosh	equ	0xFFE
  4311                           tosl	equ	0xFFD
  4312                           pclath	equ	0xFFA
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           intcon2	equ	0xFF1
  4321                           postinc0	equ	0xFEE
  4322                           plusw0	equ	0xFEB
  4323                           wreg	equ	0xFE8
  4324                           postdec1	equ	0xFE5
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           plusw2	equ	0xFDB
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _do_I2C_SEND_INITIAL_READ *****************
  4334 ;; Defined at:
  4335 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      enum E7019
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4349 ;;      Params:         0       0       0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0
  4352 ;;      Totals:         0       0       0       0       0       0       0
  4353 ;;Total ram usage:        0 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    6
  4356 ;; This function calls:
  4357 ;;		_i2c1_driver_TXData
  4358 ;; This function is called by:
  4359 ;;		_i2c_ISR
  4360 ;;		i2_i2c_ISR
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text36
  4365  000F88                     __ptext36:
  4366                           	opt stack 0
  4367  000F88                     _do_I2C_SEND_INITIAL_READ:
  4368                           	opt stack 0
  4369                           
  4370                           ;Skip over the trampoline to the duplicate function for level 2
  4371  000F88  B24B               	btfsc	btemp,1,c
  4372  000F8A  EF39  F008         	goto	i2_do_I2C_SEND_INITIAL_READ
  4373  000F8E                     _do_I2C_SEND_INITIAL_READ$intlevel0:
  4374                           	opt stack 19
  4375                           
  4376                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  4377                           
  4378                           ;incstack = 0
  4379  000F8E  0100               	movlb	0	; () banked
  4380  000F90  87B6               	bsf	_i2c_status& (0+255),3,b
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  4384  000F92  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  4385  000F94  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  4386  000F96  ECCA  F008         	call	_i2c1_driver_TXData
  4387                           
  4388                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  4389  000F9A  0E11               	movlw	17
  4390  000F9C  0012               	return	
  4391  000F9E                     __end_of_do_I2C_SEND_INITIAL_READ:
  4392                           	opt stack 0
  4393                           tosu	equ	0xFFF
  4394                           tosh	equ	0xFFE
  4395                           tosl	equ	0xFFD
  4396                           pclath	equ	0xFFA
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           intcon	equ	0xFF2
  4404                           intcon2	equ	0xFF1
  4405                           postinc0	equ	0xFEE
  4406                           plusw0	equ	0xFEB
  4407                           wreg	equ	0xFE8
  4408                           postdec1	equ	0xFE5
  4409                           fsr1l	equ	0xFE1
  4410                           indf2	equ	0xFDF
  4411                           postinc2	equ	0xFDE
  4412                           plusw2	equ	0xFDB
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  4418 ;; Defined at:
  4419 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      enum E7019
  4426 ;; Registers used:
  4427 ;;		wreg, status,0, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4433 ;;      Params:         0       0       0       0       0       0       0
  4434 ;;      Locals:         0       0       0       0       0       0       0
  4435 ;;      Temps:          0       0       0       0       0       0       0
  4436 ;;      Totals:         0       0       0       0       0       0       0
  4437 ;;Total ram usage:        0 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    6
  4440 ;; This function calls:
  4441 ;;		_i2c1_driver_TXData
  4442 ;; This function is called by:
  4443 ;;		_i2c_ISR
  4444 ;;		i2_i2c_ISR
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           	psect	text37
  4449  000F9E                     __ptext37:
  4450                           	opt stack 0
  4451  000F9E                     _do_I2C_SEND_ADR_READ:
  4452                           	opt stack 0
  4453                           
  4454                           ;Skip over the trampoline to the duplicate function for level 2
  4455  000F9E  B24B               	btfsc	btemp,1,c
  4456  000FA0  EF41  F008         	goto	i2_do_I2C_SEND_ADR_READ
  4457  000FA4                     _do_I2C_SEND_ADR_READ$intlevel0:
  4458                           	opt stack 19
  4459                           
  4460                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  4461                           
  4462                           ;incstack = 0
  4463  000FA4  0100               	movlb	0	; () banked
  4464  000FA6  87B6               	bsf	_i2c_status& (0+255),3,b
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  4468  000FA8  80D8               	bsf	status,0,c
  4469  000FAA  35B7               	rlcf	(_i2c_status+1)& (0+255),w,b
  4470  000FAC  ECCA  F008         	call	_i2c1_driver_TXData
  4471                           
  4472                           ;i2c_master.c: 325: return I2C_RCEN;
  4473  000FB0  0E05               	movlw	5
  4474  000FB2  0012               	return	
  4475  000FB4                     __end_of_do_I2C_SEND_ADR_READ:
  4476                           	opt stack 0
  4477                           tosu	equ	0xFFF
  4478                           tosh	equ	0xFFE
  4479                           tosl	equ	0xFFD
  4480                           pclath	equ	0xFFA
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           intcon2	equ	0xFF1
  4489                           postinc0	equ	0xFEE
  4490                           plusw0	equ	0xFEB
  4491                           wreg	equ	0xFE8
  4492                           postdec1	equ	0xFE5
  4493                           fsr1l	equ	0xFE1
  4494                           indf2	equ	0xFDF
  4495                           postinc2	equ	0xFDE
  4496                           plusw2	equ	0xFDB
  4497                           fsr2h	equ	0xFDA
  4498                           fsr2l	equ	0xFD9
  4499                           status	equ	0xFD8
  4500                           
  4501 ;; *************** function _do_I2C_SEND_STOP *****************
  4502 ;; Defined at:
  4503 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;		None
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      enum E7019
  4510 ;; Registers used:
  4511 ;;		wreg, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4517 ;;      Params:         0       0       0       0       0       0       0
  4518 ;;      Locals:         0       0       0       0       0       0       0
  4519 ;;      Temps:          0       0       0       0       0       0       0
  4520 ;;      Totals:         0       0       0       0       0       0       0
  4521 ;;Total ram usage:        0 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    6
  4524 ;; This function calls:
  4525 ;;		_i2c1_driver_stop
  4526 ;; This function is called by:
  4527 ;;		_do_I2C_DO_ADDRESS_NACK
  4528 ;;		_do_I2C_TX
  4529 ;;		_do_I2C_TX_EMPTY
  4530 ;;		_i2c_ISR
  4531 ;;		i2_i2c_ISR
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text38
  4536  0010E8                     __ptext38:
  4537                           	opt stack 0
  4538  0010E8                     _do_I2C_SEND_STOP:
  4539                           	opt stack 0
  4540                           
  4541                           ;Skip over the trampoline to the duplicate function for level 2
  4542  0010E8  B24B               	btfsc	btemp,1,c
  4543  0010EA  EFDA  F008         	goto	i2_do_I2C_SEND_STOP
  4544  0010EE                     _do_I2C_SEND_STOP$intlevel0:
  4545                           	opt stack 18
  4546                           
  4547                           ;i2c_master.c: 316: i2c1_driver_stop();
  4548                           
  4549                           ;incstack = 0
  4550  0010EE  EC05  F009         	call	_i2c1_driver_stop	;wreg free
  4551                           
  4552                           ;i2c_master.c: 317: return I2C_IDLE;
  4553  0010F2  0E00               	movlw	0
  4554  0010F4  0012               	return	
  4555  0010F6                     __end_of_do_I2C_SEND_STOP:
  4556                           	opt stack 0
  4557                           tosu	equ	0xFFF
  4558                           tosh	equ	0xFFE
  4559                           tosl	equ	0xFFD
  4560                           pclath	equ	0xFFA
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           prodh	equ	0xFF4
  4566                           prodl	equ	0xFF3
  4567                           intcon	equ	0xFF2
  4568                           intcon2	equ	0xFF1
  4569                           postinc0	equ	0xFEE
  4570                           plusw0	equ	0xFEB
  4571                           wreg	equ	0xFE8
  4572                           postdec1	equ	0xFE5
  4573                           fsr1l	equ	0xFE1
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           plusw2	equ	0xFDB
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _do_I2C_SEND_RESTART *****************
  4582 ;; Defined at:
  4583 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;		None
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;		None
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      enum E7019
  4590 ;; Registers used:
  4591 ;;		wreg, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4597 ;;      Params:         0       0       0       0       0       0       0
  4598 ;;      Locals:         0       0       0       0       0       0       0
  4599 ;;      Temps:          0       0       0       0       0       0       0
  4600 ;;      Totals:         0       0       0       0       0       0       0
  4601 ;;Total ram usage:        0 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    6
  4604 ;; This function calls:
  4605 ;;		_i2c1_driver_restart
  4606 ;; This function is called by:
  4607 ;;		_do_I2C_DO_ADDRESS_NACK
  4608 ;;		_do_I2C_TX_EMPTY
  4609 ;;		_i2c_ISR
  4610 ;;		i2_i2c_ISR
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text39
  4615  0010F6                     __ptext39:
  4616                           	opt stack 0
  4617  0010F6                     _do_I2C_SEND_RESTART:
  4618                           	opt stack 0
  4619                           
  4620                           ;Skip over the trampoline to the duplicate function for level 2
  4621  0010F6  B24B               	btfsc	btemp,1,c
  4622  0010F8  EFDE  F008         	goto	i2_do_I2C_SEND_RESTART
  4623  0010FC                     _do_I2C_SEND_RESTART$intlevel0:
  4624                           	opt stack 18
  4625                           
  4626                           ;i2c_master.c: 310: i2c1_driver_restart();
  4627                           
  4628                           ;incstack = 0
  4629  0010FC  EC07  F009         	call	_i2c1_driver_restart	;wreg free
  4630                           
  4631                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  4632  001100  0E01               	movlw	1
  4633  001102  0012               	return	
  4634  001104                     __end_of_do_I2C_SEND_RESTART:
  4635                           	opt stack 0
  4636                           tosu	equ	0xFFF
  4637                           tosh	equ	0xFFE
  4638                           tosl	equ	0xFFD
  4639                           pclath	equ	0xFFA
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           intcon	equ	0xFF2
  4647                           intcon2	equ	0xFF1
  4648                           postinc0	equ	0xFEE
  4649                           plusw0	equ	0xFEB
  4650                           wreg	equ	0xFE8
  4651                           postdec1	equ	0xFE5
  4652                           fsr1l	equ	0xFE1
  4653                           indf2	equ	0xFDF
  4654                           postinc2	equ	0xFDE
  4655                           plusw2	equ	0xFDB
  4656                           fsr2h	equ	0xFDA
  4657                           fsr2l	equ	0xFD9
  4658                           status	equ	0xFD8
  4659                           
  4660 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  4661 ;; Defined at:
  4662 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;		None
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      enum E7019
  4669 ;; Registers used:
  4670 ;;		wreg, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4676 ;;      Params:         0       0       0       0       0       0       0
  4677 ;;      Locals:         0       0       0       0       0       0       0
  4678 ;;      Temps:          0       0       0       0       0       0       0
  4679 ;;      Totals:         0       0       0       0       0       0       0
  4680 ;;Total ram usage:        0 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    6
  4683 ;; This function calls:
  4684 ;;		_i2c1_driver_restart
  4685 ;; This function is called by:
  4686 ;;		_do_I2C_TX
  4687 ;;		_i2c_ISR
  4688 ;;		i2_i2c_ISR
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           	psect	text40
  4693  001104                     __ptext40:
  4694                           	opt stack 0
  4695  001104                     _do_I2C_SEND_RESTART_WRITE:
  4696                           	opt stack 0
  4697                           
  4698                           ;Skip over the trampoline to the duplicate function for level 2
  4699  001104  B24B               	btfsc	btemp,1,c
  4700  001106  EFE2  F008         	goto	i2_do_I2C_SEND_RESTART_WRITE
  4701  00110A                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  4702                           	opt stack 18
  4703                           
  4704                           ;i2c_master.c: 304: i2c1_driver_restart();
  4705                           
  4706                           ;incstack = 0
  4707  00110A  EC07  F009         	call	_i2c1_driver_restart	;wreg free
  4708                           
  4709                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  4710  00110E  0E02               	movlw	2
  4711  001110  0012               	return	
  4712  001112                     __end_of_do_I2C_SEND_RESTART_WRITE:
  4713                           	opt stack 0
  4714                           tosu	equ	0xFFF
  4715                           tosh	equ	0xFFE
  4716                           tosl	equ	0xFFD
  4717                           pclath	equ	0xFFA
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           intcon2	equ	0xFF1
  4726                           postinc0	equ	0xFEE
  4727                           plusw0	equ	0xFEB
  4728                           wreg	equ	0xFE8
  4729                           postdec1	equ	0xFE5
  4730                           fsr1l	equ	0xFE1
  4731                           indf2	equ	0xFDF
  4732                           postinc2	equ	0xFDE
  4733                           plusw2	equ	0xFDB
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  4739 ;; Defined at:
  4740 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;		None
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      enum E7019
  4747 ;; Registers used:
  4748 ;;		wreg, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4754 ;;      Params:         0       0       0       0       0       0       0
  4755 ;;      Locals:         0       0       0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0
  4757 ;;      Totals:         0       0       0       0       0       0       0
  4758 ;;Total ram usage:        0 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    6
  4761 ;; This function calls:
  4762 ;;		_i2c1_driver_restart
  4763 ;; This function is called by:
  4764 ;;		_do_I2C_TX
  4765 ;;		_i2c_ISR
  4766 ;;		i2_i2c_ISR
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text41
  4771  001112                     __ptext41:
  4772                           	opt stack 0
  4773  001112                     _do_I2C_SEND_RESTART_READ:
  4774                           	opt stack 0
  4775                           
  4776                           ;Skip over the trampoline to the duplicate function for level 2
  4777  001112  B24B               	btfsc	btemp,1,c
  4778  001114  EFE6  F008         	goto	i2_do_I2C_SEND_RESTART_READ
  4779  001118                     _do_I2C_SEND_RESTART_READ$intlevel0:
  4780                           	opt stack 18
  4781                           
  4782                           ;i2c_master.c: 298: i2c1_driver_restart();
  4783                           
  4784                           ;incstack = 0
  4785  001118  EC07  F009         	call	_i2c1_driver_restart	;wreg free
  4786                           
  4787                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  4788  00111C  0E01               	movlw	1
  4789  00111E  0012               	return	
  4790  001120                     __end_of_do_I2C_SEND_RESTART_READ:
  4791                           	opt stack 0
  4792                           tosu	equ	0xFFF
  4793                           tosh	equ	0xFFE
  4794                           tosl	equ	0xFFD
  4795                           pclath	equ	0xFFA
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           intcon	equ	0xFF2
  4803                           intcon2	equ	0xFF1
  4804                           postinc0	equ	0xFEE
  4805                           plusw0	equ	0xFEB
  4806                           wreg	equ	0xFE8
  4807                           postdec1	equ	0xFE5
  4808                           fsr1l	equ	0xFE1
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           plusw2	equ	0xFDB
  4812                           fsr2h	equ	0xFDA
  4813                           fsr2l	equ	0xFD9
  4814                           status	equ	0xFD8
  4815                           
  4816 ;; *************** function _do_I2C_IDLE *****************
  4817 ;; Defined at:
  4818 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;		None
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      enum E7019
  4825 ;; Registers used:
  4826 ;;		wreg, status,2
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4832 ;;      Params:         0       0       0       0       0       0       0
  4833 ;;      Locals:         0       0       0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0
  4835 ;;      Totals:         0       0       0       0       0       0       0
  4836 ;;Total ram usage:        0 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    5
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_i2c_ISR
  4843 ;;		i2_i2c_ISR
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text42
  4848  001040                     __ptext42:
  4849                           	opt stack 0
  4850  001040                     _do_I2C_IDLE:
  4851                           	opt stack 0
  4852                           
  4853                           ;Skip over the trampoline to the duplicate function for level 2
  4854  001040  B24B               	btfsc	btemp,1,c
  4855  001042  EF9D  F008         	goto	i2_do_I2C_IDLE
  4856  001046                     _do_I2C_IDLE$intlevel0:
  4857                           	opt stack 20
  4858                           
  4859                           ;i2c_master.c: 291: i2c_status.busy = 0;
  4860                           
  4861                           ;incstack = 0
  4862  001046  0100               	movlb	0	; () banked
  4863  001048  91B6               	bcf	_i2c_status& (0+255),0,b
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  4867  00104A  0E00               	movlw	0
  4868  00104C  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;i2c_master.c: 293: return I2C_RESET;
  4872  00104E  0E0E               	movlw	14
  4873  001050  0012               	return	
  4874  001052                     __end_of_do_I2C_IDLE:
  4875                           	opt stack 0
  4876                           tosu	equ	0xFFF
  4877                           tosh	equ	0xFFE
  4878                           tosl	equ	0xFFD
  4879                           pclath	equ	0xFFA
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           intcon	equ	0xFF2
  4887                           intcon2	equ	0xFF1
  4888                           postinc0	equ	0xFEE
  4889                           plusw0	equ	0xFEB
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           plusw2	equ	0xFDB
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function _do_I2C_RESET *****************
  4901 ;; Defined at:
  4902 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;		None
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      enum E7019
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4916 ;;      Params:         0       0       0       0       0       0       0
  4917 ;;      Locals:         0       0       0       0       0       0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0
  4919 ;;      Totals:         0       0       0       0       0       0       0
  4920 ;;Total ram usage:        0 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    6
  4923 ;; This function calls:
  4924 ;;		_i2c1_driver_resetBus
  4925 ;; This function is called by:
  4926 ;;		_i2c_ISR
  4927 ;;		i2_i2c_ISR
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text43
  4932  000FB4                     __ptext43:
  4933                           	opt stack 0
  4934  000FB4                     _do_I2C_RESET:
  4935                           	opt stack 0
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;Skip over the trampoline to the duplicate function for level 2
  4939  000FB4  B24B               	btfsc	btemp,1,c
  4940  000FB6  EF49  F008         	goto	i2_do_I2C_RESET
  4941  000FBA                     _do_I2C_RESET$intlevel0:
  4942                           	opt stack 19
  4943                           
  4944                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  4945                           
  4946                           ;incstack = 0
  4947  000FBA  EC21  F009         	call	_i2c1_driver_resetBus	;wreg free
  4948                           
  4949                           ;i2c_master.c: 284: i2c_status.busy = 0;
  4950  000FBE  0100               	movlb	0	; () banked
  4951  000FC0  91B6               	bcf	_i2c_status& (0+255),0,b
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  4955  000FC2  0E00               	movlw	0
  4956  000FC4  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;i2c_master.c: 286: return I2C_RESET;
  4960  000FC6  0E0E               	movlw	14
  4961  000FC8  0012               	return	
  4962  000FCA                     __end_of_do_I2C_RESET:
  4963                           	opt stack 0
  4964                           tosu	equ	0xFFF
  4965                           tosh	equ	0xFFE
  4966                           tosl	equ	0xFFD
  4967                           pclath	equ	0xFFA
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           intcon	equ	0xFF2
  4975                           intcon2	equ	0xFF1
  4976                           postinc0	equ	0xFEE
  4977                           plusw0	equ	0xFEB
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           plusw2	equ	0xFDB
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function _do_I2C_TX_REGISTER *****************
  4989 ;; Defined at:
  4990 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;		None
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;		None
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  1    wreg      enum E7019
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5004 ;;      Params:         0       0       0       0       0       0       0
  5005 ;;      Locals:         0       0       0       0       0       0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0
  5007 ;;      Totals:         0       0       0       0       0       0       0
  5008 ;;Total ram usage:        0 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    6
  5011 ;; This function calls:
  5012 ;;		_i2c1_driver_TXData
  5013 ;; This function is called by:
  5014 ;;		_i2c_ISR
  5015 ;;		i2_i2c_ISR
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text44
  5020  000FF6                     __ptext44:
  5021                           	opt stack 0
  5022  000FF6                     _do_I2C_TX_REGISTER:
  5023                           	opt stack 0
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;Skip over the trampoline to the duplicate function for level 2
  5027  000FF6  B24B               	btfsc	btemp,1,c
  5028  000FF8  EF90  F008         	goto	i2_do_I2C_TX_REGISTER
  5029  000FFC                     _do_I2C_TX_REGISTER$intlevel0:
  5030                           	opt stack 19
  5031                           
  5032                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  5033                           
  5034                           ;incstack = 0
  5035  000FFC  0100               	movlb	0	; () banked
  5036  000FFE  87B6               	bsf	_i2c_status& (0+255),3,b
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  5040  001000  51DA               	movf	(_i2c_status+36)& (0+255),w,b
  5041  001002  ECCA  F008         	call	_i2c1_driver_TXData
  5042                           
  5043                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  5044  001006  0E07               	movlw	7
  5045  001008  0012               	return	
  5046  00100A                     __end_of_do_I2C_TX_REGISTER:
  5047                           	opt stack 0
  5048                           tosu	equ	0xFFF
  5049                           tosh	equ	0xFFE
  5050                           tosl	equ	0xFFD
  5051                           pclath	equ	0xFFA
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           intcon	equ	0xFF2
  5059                           intcon2	equ	0xFF1
  5060                           postinc0	equ	0xFEE
  5061                           plusw0	equ	0xFEB
  5062                           wreg	equ	0xFE8
  5063                           postdec1	equ	0xFE5
  5064                           fsr1l	equ	0xFE1
  5065                           indf2	equ	0xFDF
  5066                           postinc2	equ	0xFDE
  5067                           plusw2	equ	0xFDB
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _mssp1_setIRQ *****************
  5073 ;; Defined at:
  5074 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;		None
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;		None
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      void 
  5081 ;; Registers used:
  5082 ;;		None
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5088 ;;      Params:         0       0       0       0       0       0       0
  5089 ;;      Locals:         0       0       0       0       0       0       0
  5090 ;;      Temps:          0       0       0       0       0       0       0
  5091 ;;      Totals:         0       0       0       0       0       0       0
  5092 ;;Total ram usage:        0 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    5
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		_do_I2C_TX_EMPTY
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text45
  5103  0011FE                     __ptext45:
  5104                           	opt stack 0
  5105  0011FE                     _mssp1_setIRQ:
  5106                           	opt stack 19
  5107                           
  5108                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  5109                           
  5110                           ;incstack = 0
  5111  0011FE  869E               	bsf	3998,3,c	;volatile
  5112  001200  0012               	return		;funcret
  5113  001202                     __end_of_mssp1_setIRQ:
  5114                           	opt stack 0
  5115                           tosu	equ	0xFFF
  5116                           tosh	equ	0xFFE
  5117                           tosl	equ	0xFFD
  5118                           pclath	equ	0xFFA
  5119                           tblptru	equ	0xFF8
  5120                           tblptrh	equ	0xFF7
  5121                           tblptrl	equ	0xFF6
  5122                           tablat	equ	0xFF5
  5123                           prodh	equ	0xFF4
  5124                           prodl	equ	0xFF3
  5125                           intcon	equ	0xFF2
  5126                           intcon2	equ	0xFF1
  5127                           postinc0	equ	0xFEE
  5128                           plusw0	equ	0xFEB
  5129                           wreg	equ	0xFE8
  5130                           postdec1	equ	0xFE5
  5131                           fsr1l	equ	0xFE1
  5132                           indf2	equ	0xFDF
  5133                           postinc2	equ	0xFDE
  5134                           plusw2	equ	0xFDB
  5135                           fsr2h	equ	0xFDA
  5136                           fsr2l	equ	0xFD9
  5137                           status	equ	0xFD8
  5138                           
  5139 ;; *************** function _i2c1_driver_isNACK *****************
  5140 ;; Defined at:
  5141 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;		None
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;		None
  5146 ;; Return value:  Size  Location     Type
  5147 ;;		None               void
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5155 ;;      Params:         0       0       0       0       0       0       0
  5156 ;;      Locals:         0       0       0       0       0       0       0
  5157 ;;      Temps:          1       0       0       0       0       0       0
  5158 ;;      Totals:         1       0       0       0       0       0       0
  5159 ;;Total ram usage:        1 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    5
  5162 ;; This function calls:
  5163 ;;		Nothing
  5164 ;; This function is called by:
  5165 ;;		_do_I2C_TX
  5166 ;;		_i2c_ISR
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text46
  5171  000FCA                     __ptext46:
  5172                           	opt stack 0
  5173  000FCA                     _i2c1_driver_isNACK:
  5174                           	opt stack 20
  5175                           
  5176                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  5177                           
  5178                           ;incstack = 0
  5179  000FCA  50C5               	movf	4037,w,c	;volatile
  5180  000FCC  0BBF               	andlw	-65
  5181  000FCE  0940               	iorlw	64
  5182  000FD0  6EC5               	movwf	4037,c	;volatile
  5183  000FD2  38C5               	swapf	4037,w,c	;volatile
  5184  000FD4  32E8               	rrcf	wreg,f,c
  5185  000FD6  32E8               	rrcf	wreg,f,c
  5186  000FD8  0B01               	andlw	1
  5187  000FDA  6E3A               	movwf	??_i2c1_driver_isNACK& (0+255),c
  5188  000FDC  303A               	rrcf	??_i2c1_driver_isNACK,w,c
  5189  000FDE  0012               	return	
  5190  000FE0                     __end_of_i2c1_driver_isNACK:
  5191                           	opt stack 0
  5192                           tosu	equ	0xFFF
  5193                           tosh	equ	0xFFE
  5194                           tosl	equ	0xFFD
  5195                           pclath	equ	0xFFA
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           intcon2	equ	0xFF1
  5204                           postinc0	equ	0xFEE
  5205                           plusw0	equ	0xFEB
  5206                           wreg	equ	0xFE8
  5207                           postdec1	equ	0xFE5
  5208                           fsr1l	equ	0xFE1
  5209                           indf2	equ	0xFDF
  5210                           postinc2	equ	0xFDE
  5211                           plusw2	equ	0xFDB
  5212                           fsr2h	equ	0xFDA
  5213                           fsr2l	equ	0xFD9
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _i2c1_driver_TXData *****************
  5217 ;; Defined at:
  5218 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  d               1    wreg     unsigned char 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  d               1   20[COMRAM] unsigned char 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		wreg
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5232 ;;      Params:         0       0       0       0       0       0       0
  5233 ;;      Locals:         1       0       0       0       0       0       0
  5234 ;;      Temps:          0       0       0       0       0       0       0
  5235 ;;      Totals:         1       0       0       0       0       0       0
  5236 ;;Total ram usage:        1 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    5
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_do_I2C_SEND_ADR_READ
  5243 ;;		_do_I2C_SEND_INITIAL_READ
  5244 ;;		_do_I2C_TX_REGISTER
  5245 ;;		_do_I2C_SEND_ADR_WRITE
  5246 ;;		_do_I2C_TX
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text47
  5251  001194                     __ptext47:
  5252                           	opt stack 0
  5253  001194                     _i2c1_driver_TXData:
  5254                           	opt stack 19
  5255                           
  5256                           ;incstack = 0
  5257                           ;i2c1_driver_TXData@d stored from wreg
  5258  001194  6E3A               	movwf	i2c1_driver_TXData@d,c
  5259                           
  5260                           ;i2c1_driver.c: 188: SSP1BUF = d;
  5261  001196  C03A  FFC9         	movff	i2c1_driver_TXData@d,4041	;volatile
  5262  00119A  0012               	return		;funcret
  5263  00119C                     __end_of_i2c1_driver_TXData:
  5264                           	opt stack 0
  5265                           tosu	equ	0xFFF
  5266                           tosh	equ	0xFFE
  5267                           tosl	equ	0xFFD
  5268                           pclath	equ	0xFFA
  5269                           tblptru	equ	0xFF8
  5270                           tblptrh	equ	0xFF7
  5271                           tblptrl	equ	0xFF6
  5272                           tablat	equ	0xFF5
  5273                           prodh	equ	0xFF4
  5274                           prodl	equ	0xFF3
  5275                           intcon	equ	0xFF2
  5276                           intcon2	equ	0xFF1
  5277                           postinc0	equ	0xFEE
  5278                           plusw0	equ	0xFEB
  5279                           wreg	equ	0xFE8
  5280                           postdec1	equ	0xFE5
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           plusw2	equ	0xFDB
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _i2c1_driver_getRXData *****************
  5290 ;; Defined at:
  5291 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      unsigned char 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5305 ;;      Params:         0       0       0       0       0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0
  5308 ;;      Totals:         0       0       0       0       0       0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    5
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_do_I2C_RX
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text48
  5320  001202                     __ptext48:
  5321                           	opt stack 0
  5322  001202                     _i2c1_driver_getRXData:
  5323                           	opt stack 19
  5324                           
  5325                           ;i2c1_driver.c: 173: return SSP1BUF;
  5326                           
  5327                           ;incstack = 0
  5328  001202  50C9               	movf	4041,w,c	;volatile
  5329  001204  0012               	return	
  5330  001206                     __end_of_i2c1_driver_getRXData:
  5331                           	opt stack 0
  5332                           tosu	equ	0xFFF
  5333                           tosh	equ	0xFFE
  5334                           tosl	equ	0xFFD
  5335                           pclath	equ	0xFFA
  5336                           tblptru	equ	0xFF8
  5337                           tblptrh	equ	0xFF7
  5338                           tblptrl	equ	0xFF6
  5339                           tablat	equ	0xFF5
  5340                           prodh	equ	0xFF4
  5341                           prodl	equ	0xFF3
  5342                           intcon	equ	0xFF2
  5343                           intcon2	equ	0xFF1
  5344                           postinc0	equ	0xFEE
  5345                           plusw0	equ	0xFEB
  5346                           wreg	equ	0xFE8
  5347                           postdec1	equ	0xFE5
  5348                           fsr1l	equ	0xFE1
  5349                           indf2	equ	0xFDF
  5350                           postinc2	equ	0xFDE
  5351                           plusw2	equ	0xFDB
  5352                           fsr2h	equ	0xFDA
  5353                           fsr2l	equ	0xFD9
  5354                           status	equ	0xFD8
  5355                           
  5356 ;; *************** function _i2c1_driver_sendNACK *****************
  5357 ;; Defined at:
  5358 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		None
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5372 ;;      Params:         0       0       0       0       0       0       0
  5373 ;;      Locals:         0       0       0       0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0
  5375 ;;      Totals:         0       0       0       0       0       0       0
  5376 ;;Total ram usage:        0 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    5
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_do_I2C_DO_NACK_STOP
  5383 ;;		_do_I2C_DO_NACK_RESTART
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text49
  5388  0011DC                     __ptext49:
  5389                           	opt stack 0
  5390  0011DC                     _i2c1_driver_sendNACK:
  5391                           	opt stack 18
  5392                           
  5393                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  5394                           
  5395                           ;incstack = 0
  5396  0011DC  8AC5               	bsf	4037,5,c	;volatile
  5397                           
  5398                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  5399  0011DE  88C5               	bsf	4037,4,c	;volatile
  5400  0011E0  0012               	return		;funcret
  5401  0011E2                     __end_of_i2c1_driver_sendNACK:
  5402                           	opt stack 0
  5403                           tosu	equ	0xFFF
  5404                           tosh	equ	0xFFE
  5405                           tosl	equ	0xFFD
  5406                           pclath	equ	0xFFA
  5407                           tblptru	equ	0xFF8
  5408                           tblptrh	equ	0xFF7
  5409                           tblptrl	equ	0xFF6
  5410                           tablat	equ	0xFF5
  5411                           prodh	equ	0xFF4
  5412                           prodl	equ	0xFF3
  5413                           intcon	equ	0xFF2
  5414                           intcon2	equ	0xFF1
  5415                           postinc0	equ	0xFEE
  5416                           plusw0	equ	0xFEB
  5417                           wreg	equ	0xFE8
  5418                           postdec1	equ	0xFE5
  5419                           fsr1l	equ	0xFE1
  5420                           indf2	equ	0xFDF
  5421                           postinc2	equ	0xFDE
  5422                           plusw2	equ	0xFDB
  5423                           fsr2h	equ	0xFDA
  5424                           fsr2l	equ	0xFD9
  5425                           status	equ	0xFD8
  5426                           
  5427 ;; *************** function _i2c1_driver_resetBus *****************
  5428 ;; Defined at:
  5429 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;		None
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;		None
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  1    wreg      void 
  5436 ;; Registers used:
  5437 ;;		None
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5443 ;;      Params:         0       0       0       0       0       0       0
  5444 ;;      Locals:         0       0       0       0       0       0       0
  5445 ;;      Temps:          0       0       0       0       0       0       0
  5446 ;;      Totals:         0       0       0       0       0       0       0
  5447 ;;Total ram usage:        0 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    5
  5450 ;; This function calls:
  5451 ;;		Nothing
  5452 ;; This function is called by:
  5453 ;;		_do_I2C_RESET
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           	psect	text50
  5458  001242                     __ptext50:
  5459                           	opt stack 0
  5460  001242                     _i2c1_driver_resetBus:
  5461                           	opt stack 19
  5462                           
  5463                           ;incstack = 0
  5464  001242  0012               	return		;funcret
  5465  001244                     __end_of_i2c1_driver_resetBus:
  5466                           	opt stack 0
  5467                           tosu	equ	0xFFF
  5468                           tosh	equ	0xFFE
  5469                           tosl	equ	0xFFD
  5470                           pclath	equ	0xFFA
  5471                           tblptru	equ	0xFF8
  5472                           tblptrh	equ	0xFF7
  5473                           tblptrl	equ	0xFF6
  5474                           tablat	equ	0xFF5
  5475                           prodh	equ	0xFF4
  5476                           prodl	equ	0xFF3
  5477                           intcon	equ	0xFF2
  5478                           intcon2	equ	0xFF1
  5479                           postinc0	equ	0xFEE
  5480                           plusw0	equ	0xFEB
  5481                           wreg	equ	0xFE8
  5482                           postdec1	equ	0xFE5
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           plusw2	equ	0xFDB
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function _i2c1_driver_startRX *****************
  5492 ;; Defined at:
  5493 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;		None
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      void 
  5500 ;; Registers used:
  5501 ;;		None
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5507 ;;      Params:         0       0       0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0
  5510 ;;      Totals:         0       0       0       0       0       0       0
  5511 ;;Total ram usage:        0 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    5
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_do_I2C_RCEN
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text51
  5522  001206                     __ptext51:
  5523                           	opt stack 0
  5524  001206                     _i2c1_driver_startRX:
  5525                           	opt stack 19
  5526                           
  5527                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  5528                           
  5529                           ;incstack = 0
  5530  001206  86C5               	bsf	4037,3,c	;volatile
  5531  001208  0012               	return		;funcret
  5532  00120A                     __end_of_i2c1_driver_startRX:
  5533                           	opt stack 0
  5534                           tosu	equ	0xFFF
  5535                           tosh	equ	0xFFE
  5536                           tosl	equ	0xFFD
  5537                           pclath	equ	0xFFA
  5538                           tblptru	equ	0xFF8
  5539                           tblptrh	equ	0xFF7
  5540                           tblptrl	equ	0xFF6
  5541                           tablat	equ	0xFF5
  5542                           prodh	equ	0xFF4
  5543                           prodl	equ	0xFF3
  5544                           intcon	equ	0xFF2
  5545                           intcon2	equ	0xFF1
  5546                           postinc0	equ	0xFEE
  5547                           plusw0	equ	0xFEB
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           plusw2	equ	0xFDB
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _returnReset *****************
  5559 ;; Defined at:
  5560 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  p               2   20[COMRAM] PTR void 
  5563 ;;		 -> NULL(0), 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;		None
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  1    wreg      enum E6842
  5568 ;; Registers used:
  5569 ;;		wreg
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5575 ;;      Params:         2       0       0       0       0       0       0
  5576 ;;      Locals:         0       0       0       0       0       0       0
  5577 ;;      Temps:          0       0       0       0       0       0       0
  5578 ;;      Totals:         2       0       0       0       0       0       0
  5579 ;;Total ram usage:        2 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    5
  5582 ;; This function calls:
  5583 ;;		Nothing
  5584 ;; This function is called by:
  5585 ;;		_i2c_open
  5586 ;;		_do_I2C_DO_ADDRESS_NACK
  5587 ;;		_do_I2C_TX
  5588 ;;		_do_I2C_RX
  5589 ;;		_do_I2C_TX_EMPTY
  5590 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5591 ;;		i2_do_I2C_TX
  5592 ;;		i2_do_I2C_RX
  5593 ;;		i2_do_I2C_TX_EMPTY
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text52
  5598  001178                     __ptext52:
  5599                           	opt stack 0
  5600  001178                     _returnReset:
  5601                           	opt stack 0
  5602                           
  5603                           ;Skip over the trampoline to the duplicate function for level 2
  5604  001178  B24B               	btfsc	btemp,1,c
  5605  00117A  EF17  F009         	goto	i2_returnReset
  5606  00117E                     _returnReset$intlevel0:
  5607                           	opt stack 19
  5608                           
  5609                           ;i2c_master.c: 515: return i2c_reset_link;
  5610                           
  5611                           ;incstack = 0
  5612  00117E  0E05               	movlw	5
  5613  001180  0012               	return	
  5614  001182                     __end_of_returnReset:
  5615                           	opt stack 0
  5616                           tosu	equ	0xFFF
  5617                           tosh	equ	0xFFE
  5618                           tosl	equ	0xFFD
  5619                           pclath	equ	0xFFA
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           intcon2	equ	0xFF1
  5628                           postinc0	equ	0xFEE
  5629                           plusw0	equ	0xFEB
  5630                           wreg	equ	0xFE8
  5631                           postdec1	equ	0xFE5
  5632                           fsr1l	equ	0xFE1
  5633                           indf2	equ	0xFDF
  5634                           postinc2	equ	0xFDE
  5635                           plusw2	equ	0xFDB
  5636                           fsr2h	equ	0xFDA
  5637                           fsr2l	equ	0xFD9
  5638                           status	equ	0xFD8
  5639                           
  5640 ;; *************** function _returnStop *****************
  5641 ;; Defined at:
  5642 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  p               2   20[COMRAM] PTR void 
  5645 ;;		 -> NULL(0), 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      enum E6842
  5650 ;; Registers used:
  5651 ;;		wreg
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5657 ;;      Params:         2       0       0       0       0       0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0
  5659 ;;      Temps:          0       0       0       0       0       0       0
  5660 ;;      Totals:         2       0       0       0       0       0       0
  5661 ;;Total ram usage:        2 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    5
  5664 ;; This function calls:
  5665 ;;		Nothing
  5666 ;; This function is called by:
  5667 ;;		_i2c_open
  5668 ;;		_setCallBack
  5669 ;;		_do_I2C_DO_ADDRESS_NACK
  5670 ;;		_do_I2C_TX
  5671 ;;		_do_I2C_RX
  5672 ;;		_do_I2C_TX_EMPTY
  5673 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5674 ;;		i2_do_I2C_TX
  5675 ;;		i2_do_I2C_RX
  5676 ;;		i2_do_I2C_TX_EMPTY
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text53
  5681  001182                     __ptext53:
  5682                           	opt stack 0
  5683  001182                     _returnStop:
  5684                           	opt stack 0
  5685                           
  5686                           ;Skip over the trampoline to the duplicate function for level 2
  5687  001182  B24B               	btfsc	btemp,1,c
  5688  001184  EF19  F009         	goto	i2_returnStop
  5689  001188                     _returnStop$intlevel0:
  5690                           	opt stack 19
  5691                           
  5692                           ;i2c_master.c: 510: return i2c_stop;
  5693                           
  5694                           ;incstack = 0
  5695  001188  0E01               	movlw	1
  5696  00118A  0012               	return	
  5697  00118C                     __end_of_returnStop:
  5698                           	opt stack 0
  5699                           tosu	equ	0xFFF
  5700                           tosh	equ	0xFFE
  5701                           tosl	equ	0xFFD
  5702                           pclath	equ	0xFFA
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           intcon	equ	0xFF2
  5710                           intcon2	equ	0xFF1
  5711                           postinc0	equ	0xFEE
  5712                           plusw0	equ	0xFEB
  5713                           wreg	equ	0xFE8
  5714                           postdec1	equ	0xFE5
  5715                           fsr1l	equ	0xFE1
  5716                           indf2	equ	0xFDF
  5717                           postinc2	equ	0xFDE
  5718                           plusw2	equ	0xFDB
  5719                           fsr2h	equ	0xFDA
  5720                           fsr2l	equ	0xFD9
  5721                           status	equ	0xFD8
  5722                           
  5723 ;; *************** function _i2c1_driver_stop *****************
  5724 ;; Defined at:
  5725 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;		None
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		None
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5739 ;;      Params:         0       0       0       0       0       0       0
  5740 ;;      Locals:         0       0       0       0       0       0       0
  5741 ;;      Temps:          0       0       0       0       0       0       0
  5742 ;;      Totals:         0       0       0       0       0       0       0
  5743 ;;Total ram usage:        0 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    5
  5746 ;; This function calls:
  5747 ;;		Nothing
  5748 ;; This function is called by:
  5749 ;;		_do_I2C_SEND_STOP
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text54
  5754  00120A                     __ptext54:
  5755                           	opt stack 0
  5756  00120A                     _i2c1_driver_stop:
  5757                           	opt stack 18
  5758                           
  5759                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  5760                           
  5761                           ;incstack = 0
  5762  00120A  84C5               	bsf	4037,2,c	;volatile
  5763  00120C  0012               	return		;funcret
  5764  00120E                     __end_of_i2c1_driver_stop:
  5765                           	opt stack 0
  5766                           tosu	equ	0xFFF
  5767                           tosh	equ	0xFFE
  5768                           tosl	equ	0xFFD
  5769                           pclath	equ	0xFFA
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           intcon2	equ	0xFF1
  5778                           postinc0	equ	0xFEE
  5779                           plusw0	equ	0xFEB
  5780                           wreg	equ	0xFE8
  5781                           postdec1	equ	0xFE5
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           plusw2	equ	0xFDB
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function _i2c1_driver_restart *****************
  5791 ;; Defined at:
  5792 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;		None
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;		None
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      void 
  5799 ;; Registers used:
  5800 ;;		None
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5806 ;;      Params:         0       0       0       0       0       0       0
  5807 ;;      Locals:         0       0       0       0       0       0       0
  5808 ;;      Temps:          0       0       0       0       0       0       0
  5809 ;;      Totals:         0       0       0       0       0       0       0
  5810 ;;Total ram usage:        0 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    5
  5813 ;; This function calls:
  5814 ;;		Nothing
  5815 ;; This function is called by:
  5816 ;;		_do_I2C_SEND_RESTART_READ
  5817 ;;		_do_I2C_SEND_RESTART_WRITE
  5818 ;;		_do_I2C_SEND_RESTART
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text55
  5823  00120E                     __ptext55:
  5824                           	opt stack 0
  5825  00120E                     _i2c1_driver_restart:
  5826                           	opt stack 18
  5827                           
  5828                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  5829                           
  5830                           ;incstack = 0
  5831  00120E  82C5               	bsf	4037,1,c	;volatile
  5832  001210  0012               	return		;funcret
  5833  001212                     __end_of_i2c1_driver_restart:
  5834                           	opt stack 0
  5835                           tosu	equ	0xFFF
  5836                           tosh	equ	0xFFE
  5837                           tosl	equ	0xFFD
  5838                           pclath	equ	0xFFA
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           intcon	equ	0xFF2
  5846                           intcon2	equ	0xFF1
  5847                           postinc0	equ	0xFEE
  5848                           plusw0	equ	0xFEB
  5849                           wreg	equ	0xFE8
  5850                           postdec1	equ	0xFE5
  5851                           fsr1l	equ	0xFE1
  5852                           indf2	equ	0xFDF
  5853                           postinc2	equ	0xFDE
  5854                           plusw2	equ	0xFDB
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _i2c1_driver_sendACK *****************
  5860 ;; Defined at:
  5861 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;		None
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		None
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5875 ;;      Params:         0       0       0       0       0       0       0
  5876 ;;      Locals:         0       0       0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0       0       0
  5878 ;;      Totals:         0       0       0       0       0       0       0
  5879 ;;Total ram usage:        0 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    5
  5882 ;; This function calls:
  5883 ;;		Nothing
  5884 ;; This function is called by:
  5885 ;;		_do_I2C_DO_ACK
  5886 ;;		_do_I2C_RX
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text56
  5891  0011E2                     __ptext56:
  5892                           	opt stack 0
  5893  0011E2                     _i2c1_driver_sendACK:
  5894                           	opt stack 19
  5895                           
  5896                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  5897                           
  5898                           ;incstack = 0
  5899  0011E2  9AC5               	bcf	4037,5,c	;volatile
  5900                           
  5901                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  5902  0011E4  88C5               	bsf	4037,4,c	;volatile
  5903  0011E6  0012               	return		;funcret
  5904  0011E8                     __end_of_i2c1_driver_sendACK:
  5905                           	opt stack 0
  5906                           tosu	equ	0xFFF
  5907                           tosh	equ	0xFFE
  5908                           tosl	equ	0xFFD
  5909                           pclath	equ	0xFFA
  5910                           tblptru	equ	0xFF8
  5911                           tblptrh	equ	0xFF7
  5912                           tblptrl	equ	0xFF6
  5913                           tablat	equ	0xFF5
  5914                           prodh	equ	0xFF4
  5915                           prodl	equ	0xFF3
  5916                           intcon	equ	0xFF2
  5917                           intcon2	equ	0xFF1
  5918                           postinc0	equ	0xFEE
  5919                           plusw0	equ	0xFEB
  5920                           wreg	equ	0xFE8
  5921                           postdec1	equ	0xFE5
  5922                           fsr1l	equ	0xFE1
  5923                           indf2	equ	0xFDF
  5924                           postinc2	equ	0xFDE
  5925                           plusw2	equ	0xFDB
  5926                           fsr2h	equ	0xFDA
  5927                           fsr2l	equ	0xFD9
  5928                           status	equ	0xFD8
  5929                           
  5930 ;; *************** function _i2c1_driver_start *****************
  5931 ;; Defined at:
  5932 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;		None
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;		None
  5937 ;; Return value:  Size  Location     Type
  5938 ;;                  1    wreg      void 
  5939 ;; Registers used:
  5940 ;;		None
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5946 ;;      Params:         0       0       0       0       0       0       0
  5947 ;;      Locals:         0       0       0       0       0       0       0
  5948 ;;      Temps:          0       0       0       0       0       0       0
  5949 ;;      Totals:         0       0       0       0       0       0       0
  5950 ;;Total ram usage:        0 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    5
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		_i2c_masterOperation
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text57
  5961  001212                     __ptext57:
  5962                           	opt stack 0
  5963  001212                     _i2c1_driver_start:
  5964                           	opt stack 22
  5965                           
  5966                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  5967                           
  5968                           ;incstack = 0
  5969  001212  80C5               	bsf	4037,0,c	;volatile
  5970  001214  0012               	return		;funcret
  5971  001216                     __end_of_i2c1_driver_start:
  5972                           	opt stack 0
  5973                           tosu	equ	0xFFF
  5974                           tosh	equ	0xFFE
  5975                           tosl	equ	0xFFD
  5976                           pclath	equ	0xFFA
  5977                           tblptru	equ	0xFF8
  5978                           tblptrh	equ	0xFF7
  5979                           tblptrl	equ	0xFF6
  5980                           tablat	equ	0xFF5
  5981                           prodh	equ	0xFF4
  5982                           prodl	equ	0xFF3
  5983                           intcon	equ	0xFF2
  5984                           intcon2	equ	0xFF1
  5985                           postinc0	equ	0xFEE
  5986                           plusw0	equ	0xFEB
  5987                           wreg	equ	0xFE8
  5988                           postdec1	equ	0xFE5
  5989                           fsr1l	equ	0xFE1
  5990                           indf2	equ	0xFDF
  5991                           postinc2	equ	0xFDE
  5992                           plusw2	equ	0xFDB
  5993                           fsr2h	equ	0xFDA
  5994                           fsr2l	equ	0xFD9
  5995                           status	equ	0xFD8
  5996                           
  5997 ;; *************** function _i2c_close *****************
  5998 ;; Defined at:
  5999 ;;		line 170 in file "mcc_generated_files/drivers/i2c_master.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;		None
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  ret             1   20[COMRAM] enum E6837
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      enum E6837
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6013 ;;      Params:         0       0       0       0       0       0       0
  6014 ;;      Locals:         1       0       0       0       0       0       0
  6015 ;;      Temps:          0       0       0       0       0       0       0
  6016 ;;      Totals:         1       0       0       0       0       0       0
  6017 ;;Total ram usage:        1 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    6
  6020 ;; This function calls:
  6021 ;;		_mssp1_clearIRQ
  6022 ;;		_mssp1_disableIRQ
  6023 ;; This function is called by:
  6024 ;;		_write_register
  6025 ;;		_read_register
  6026 ;;		_read_xyzvalues
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text58
  6031  000F0A                     __ptext58:
  6032                           	opt stack 0
  6033  000F0A                     _i2c_close:
  6034                           	opt stack 23
  6035                           
  6036                           ;i2c_master.c: 172: i2c_error_t ret = I2C_BUSY;
  6037                           
  6038                           ;incstack = 0
  6039  000F0A  0E01               	movlw	1
  6040  000F0C  6E3A               	movwf	i2c_close@ret,c
  6041                           
  6042                           ;i2c_master.c: 173: if(!i2c_status.busy)
  6043  000F0E  0100               	movlb	0	; () banked
  6044  000F10  B1B6               	btfsc	_i2c_status& (0+255),0,b
  6045  000F12  D008               	goto	l83
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;i2c_master.c: 174: {
  6049                           ;i2c_master.c: 175: i2c_status.inUse = 0;
  6050  000F14  93B6               	bcf	_i2c_status& (0+255),1,b
  6051                           
  6052                           ;i2c_master.c: 177: i2c_status.address = 0xff;
  6053  000F16  69B7               	setf	(_i2c_status+1)& (0+255),b
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;i2c_master.c: 178: mssp1_clearIRQ();
  6057  000F18  EC0D  F009         	call	_mssp1_clearIRQ	;wreg free
  6058                           
  6059                           ;i2c_master.c: 179: mssp1_disableIRQ();
  6060  000F1C  EC0B  F009         	call	_mssp1_disableIRQ	;wreg free
  6061                           
  6062                           ;i2c_master.c: 180: ret = i2c_status.error;
  6063  000F20  C0C1  F03A         	movff	_i2c_status+11,i2c_close@ret
  6064  000F24                     l83:
  6065                           
  6066                           ;i2c_master.c: 181: }
  6067                           ;i2c_master.c: 182: return ret;
  6068  000F24  503A               	movf	i2c_close@ret,w,c
  6069  000F26  0012               	return	
  6070  000F28                     __end_of_i2c_close:
  6071                           	opt stack 0
  6072                           tosu	equ	0xFFF
  6073                           tosh	equ	0xFFE
  6074                           tosl	equ	0xFFD
  6075                           pclath	equ	0xFFA
  6076                           tblptru	equ	0xFF8
  6077                           tblptrh	equ	0xFF7
  6078                           tblptrl	equ	0xFF6
  6079                           tablat	equ	0xFF5
  6080                           prodh	equ	0xFF4
  6081                           prodl	equ	0xFF3
  6082                           intcon	equ	0xFF2
  6083                           intcon2	equ	0xFF1
  6084                           postinc0	equ	0xFEE
  6085                           plusw0	equ	0xFEB
  6086                           wreg	equ	0xFE8
  6087                           postdec1	equ	0xFE5
  6088                           fsr1l	equ	0xFE1
  6089                           indf2	equ	0xFDF
  6090                           postinc2	equ	0xFDE
  6091                           plusw2	equ	0xFDB
  6092                           fsr2h	equ	0xFDA
  6093                           fsr2l	equ	0xFD9
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function _mssp1_disableIRQ *****************
  6097 ;; Defined at:
  6098 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;		None
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;		None
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  1    wreg      void 
  6105 ;; Registers used:
  6106 ;;		None
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6112 ;;      Params:         0       0       0       0       0       0       0
  6113 ;;      Locals:         0       0       0       0       0       0       0
  6114 ;;      Temps:          0       0       0       0       0       0       0
  6115 ;;      Totals:         0       0       0       0       0       0       0
  6116 ;;Total ram usage:        0 bytes
  6117 ;; Hardware stack levels used:    1
  6118 ;; Hardware stack levels required when called:    5
  6119 ;; This function calls:
  6120 ;;		Nothing
  6121 ;; This function is called by:
  6122 ;;		_i2c_close
  6123 ;;		_i2c_setTimeOut
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text59
  6128  001216                     __ptext59:
  6129                           	opt stack 0
  6130  001216                     _mssp1_disableIRQ:
  6131                           	opt stack 23
  6132                           
  6133                           ;i2c1_driver.c: 50: PIE1bits.SSP1IE = 0;
  6134                           
  6135                           ;incstack = 0
  6136  001216  969D               	bcf	3997,3,c	;volatile
  6137  001218  0012               	return		;funcret
  6138  00121A                     __end_of_mssp1_disableIRQ:
  6139                           	opt stack 0
  6140                           tosu	equ	0xFFF
  6141                           tosh	equ	0xFFE
  6142                           tosl	equ	0xFFD
  6143                           pclath	equ	0xFFA
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           prodh	equ	0xFF4
  6149                           prodl	equ	0xFF3
  6150                           intcon	equ	0xFF2
  6151                           intcon2	equ	0xFF1
  6152                           postinc0	equ	0xFEE
  6153                           plusw0	equ	0xFEB
  6154                           wreg	equ	0xFE8
  6155                           postdec1	equ	0xFE5
  6156                           fsr1l	equ	0xFE1
  6157                           indf2	equ	0xFDF
  6158                           postinc2	equ	0xFDE
  6159                           plusw2	equ	0xFDB
  6160                           fsr2h	equ	0xFDA
  6161                           fsr2l	equ	0xFD9
  6162                           status	equ	0xFD8
  6163                           
  6164 ;; *************** function _mssp1_clearIRQ *****************
  6165 ;; Defined at:
  6166 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		None
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6180 ;;      Params:         0       0       0       0       0       0       0
  6181 ;;      Locals:         0       0       0       0       0       0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0
  6183 ;;      Totals:         0       0       0       0       0       0       0
  6184 ;;Total ram usage:        0 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    5
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_i2c_open
  6191 ;;		_i2c_close
  6192 ;;		_i2c_ISR
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           	psect	text60
  6197  00121A                     __ptext60:
  6198                           	opt stack 0
  6199  00121A                     _mssp1_clearIRQ:
  6200                           	opt stack 23
  6201                           
  6202                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6203                           
  6204                           ;incstack = 0
  6205  00121A  969E               	bcf	3998,3,c	;volatile
  6206  00121C  0012               	return		;funcret
  6207  00121E                     __end_of_mssp1_clearIRQ:
  6208                           	opt stack 0
  6209                           tosu	equ	0xFFF
  6210                           tosh	equ	0xFFE
  6211                           tosl	equ	0xFFD
  6212                           pclath	equ	0xFFA
  6213                           tblptru	equ	0xFF8
  6214                           tblptrh	equ	0xFF7
  6215                           tblptrl	equ	0xFF6
  6216                           tablat	equ	0xFF5
  6217                           prodh	equ	0xFF4
  6218                           prodl	equ	0xFF3
  6219                           intcon	equ	0xFF2
  6220                           intcon2	equ	0xFF1
  6221                           postinc0	equ	0xFEE
  6222                           plusw0	equ	0xFEB
  6223                           wreg	equ	0xFE8
  6224                           postdec1	equ	0xFE5
  6225                           fsr1l	equ	0xFE1
  6226                           indf2	equ	0xFDF
  6227                           postinc2	equ	0xFDE
  6228                           plusw2	equ	0xFDB
  6229                           fsr2h	equ	0xFDA
  6230                           fsr2l	equ	0xFD9
  6231                           status	equ	0xFD8
  6232                           
  6233 ;; *************** function _INTERRUPT_InterruptManager *****************
  6234 ;; Defined at:
  6235 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;		None
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;		None
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6249 ;;      Params:         0       0       0       0       0       0       0
  6250 ;;      Locals:         0       0       0       0       0       0       0
  6251 ;;      Temps:         18       0       0       0       0       0       0
  6252 ;;      Totals:        18       0       0       0       0       0       0
  6253 ;;Total ram usage:       18 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; Hardware stack levels required when called:    4
  6256 ;; This function calls:
  6257 ;;		Absolute function
  6258 ;;		_EUSART1_Receive_ISR
  6259 ;;		_EUSART1_Transmit_ISR
  6260 ;;		_i2c_busCollisionISR
  6261 ;;		i2_i2c_ISR
  6262 ;; This function is called by:
  6263 ;;		Interrupt level 2
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	intcode
  6268  000008                     __pintcode:
  6269                           	opt stack 0
  6270  000008                     _INTERRUPT_InterruptManager:
  6271                           	opt stack 17
  6272                           
  6273                           ;incstack = 0
  6274  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6275  00000A  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
  6276  00000E  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6277  000012  CFE9 F02A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6278  000016  CFEA F02B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6279  00001A  CFE1 F02C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6280  00001E  CFE2 F02D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6281  000022  CFD9 F02E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6282  000026  CFDA F02F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6283  00002A  CFF3 F030          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6284  00002E  CFF4 F031          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6285  000032  CFF6 F032          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6286  000036  CFF7 F033          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6287  00003A  CFF8 F034          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6288  00003E  CFF5 F035          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6289  000042  C04B  F036         	movff	btemp,??_INTERRUPT_InterruptManager+14
  6290  000046  C04C  F037         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  6291  00004A  C04D  F038         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  6292  00004E  C04E  F039         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  6293                           
  6294                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  6295  000052  ACF2               	btfss	intcon,6,c	;volatile
  6296  000054  D030               	goto	i2u165_49
  6297                           
  6298                           ;interrupt_manager.c: 61: {
  6299                           ;interrupt_manager.c: 62: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  6300  000056  B6A0               	btfsc	4000,3,c	;volatile
  6301  000058  A6A1               	btfss	4001,3,c	;volatile
  6302  00005A  D008               	goto	i2l567
  6303                           
  6304                           ;interrupt_manager.c: 63: {
  6305                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  6306  00005C  D801               	call	i2u156_48
  6307  00005E  D02B               	goto	i2u165_49
  6308  000060                     i2u156_48:
  6309  000060  0005               	push	
  6310  000062  6EFA               	movwf	pclath,c
  6311  000064  5013               	movf	_i2c1_driver_busCollisionISR,w,c
  6312  000066  6EFD               	movwf	tosl,c
  6313  000068  5014               	movf	_i2c1_driver_busCollisionISR+1,w,c
  6314  00006A  D020               	goto	L6
  6315  00006C                     i2l567:
  6316                           
  6317                           ;interrupt_manager.c: 66: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  6318  00006C  B69D               	btfsc	3997,3,c	;volatile
  6319  00006E  A69E               	btfss	3998,3,c	;volatile
  6320  000070  D008               	goto	i2l569
  6321                           
  6322                           ;interrupt_manager.c: 67: {
  6323                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  6324  000072  D801               	call	i2u159_48
  6325  000074  D020               	goto	i2u165_49
  6326  000076                     i2u159_48:
  6327  000076  0005               	push	
  6328  000078  6EFA               	movwf	pclath,c
  6329  00007A  5011               	movf	_i2c1_driver_i2cISR,w,c
  6330  00007C  6EFD               	movwf	tosl,c
  6331  00007E  5012               	movf	_i2c1_driver_i2cISR+1,w,c
  6332  000080  D015               	goto	L6
  6333  000082                     i2l569:
  6334                           
  6335                           ;interrupt_manager.c: 70: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6336  000082  B89D               	btfsc	3997,4,c	;volatile
  6337  000084  A89E               	btfss	3998,4,c	;volatile
  6338  000086  D008               	goto	i2l571
  6339                           
  6340                           ;interrupt_manager.c: 71: {
  6341                           ;interrupt_manager.c: 72: EUSART1_TxDefaultInterruptHandler();
  6342  000088  D801               	call	i2u162_48
  6343  00008A  D015               	goto	i2u165_49
  6344  00008C                     i2u162_48:
  6345  00008C  0005               	push	
  6346  00008E  6EFA               	movwf	pclath,c
  6347  000090  5048               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  6348  000092  6EFD               	movwf	tosl,c
  6349  000094  5049               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  6350  000096  D00A               	goto	L6
  6351  000098                     i2l571:
  6352                           
  6353                           ;interrupt_manager.c: 74: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6354  000098  BA9D               	btfsc	3997,5,c	;volatile
  6355  00009A  AA9E               	btfss	3998,5,c	;volatile
  6356  00009C  D00C               	goto	i2u165_49
  6357                           
  6358                           ;interrupt_manager.c: 75: {
  6359                           ;interrupt_manager.c: 76: EUSART1_RxDefaultInterruptHandler();
  6360  00009E  D801               	call	i2u165_48
  6361  0000A0  D00A               	goto	i2u165_49
  6362  0000A2                     i2u165_48:
  6363  0000A2  0005               	push	
  6364  0000A4  6EFA               	movwf	pclath,c
  6365  0000A6  5046               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  6366  0000A8  6EFD               	movwf	tosl,c
  6367  0000AA  5047               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  6368  0000AC                     L6:
  6369  0000AC  6EFE               	movwf	tosh,c
  6370  0000AE  50F8               	movf	tblptru,w,c
  6371  0000B0  6EFF               	movwf	tosu,c
  6372  0000B2  50FA               	movf	pclath,w,c
  6373  0000B4  0012               	return		;indir
  6374  0000B6                     i2u165_49:
  6375                           
  6376                           ;interrupt_manager.c: 83: else
  6377                           ;interrupt_manager.c: 84: {
  6378                           
  6379                           ;interrupt_manager.c: 81: }
  6380                           ;interrupt_manager.c: 82: }
  6381                           
  6382                           ;interrupt_manager.c: 78: else
  6383                           ;interrupt_manager.c: 79: {
  6384                           
  6385                           ;interrupt_manager.c: 77: }
  6386  0000B6  C039  F04E         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  6387  0000BA  C038  F04D         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  6388  0000BE  C037  F04C         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  6389  0000C2  C036  F04B         	movff	??_INTERRUPT_InterruptManager+14,btemp
  6390  0000C6  C035  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6391  0000CA  C034  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6392  0000CE  C033  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6393  0000D2  C032  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6394  0000D6  C031  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6395  0000DA  C030  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6396  0000DE  C02F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6397  0000E2  C02E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6398  0000E6  C02D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6399  0000EA  C02C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6400  0000EE  C02B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6401  0000F2  C02A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6402  0000F6  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6403  0000FA  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6404  0000FE  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6405  000100  0011               	retfie		f
  6406  000102                     __end_of_INTERRUPT_InterruptManager:
  6407                           	opt stack 0
  6408                           tosu	equ	0xFFF
  6409                           tosh	equ	0xFFE
  6410                           tosl	equ	0xFFD
  6411                           pclatu	equ	0xFFB
  6412                           pclath	equ	0xFFA
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           intcon2	equ	0xFF1
  6421                           postinc0	equ	0xFEE
  6422                           plusw0	equ	0xFEB
  6423                           fsr0h	equ	0xFEA
  6424                           fsr0l	equ	0xFE9
  6425                           wreg	equ	0xFE8
  6426                           postdec1	equ	0xFE5
  6427                           fsr1h	equ	0xFE2
  6428                           fsr1l	equ	0xFE1
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           plusw2	equ	0xFDB
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function i2_i2c_ISR *****************
  6437 ;; Defined at:
  6438 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6452 ;;      Params:         0       0       0       0       0       0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0
  6455 ;;      Totals:         0       0       0       0       0       0       0
  6456 ;;Total ram usage:        0 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    3
  6459 ;; This function calls:
  6460 ;;		i2_do_I2C_DO_ACK
  6461 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6462 ;;		i2_do_I2C_DO_NACK_RESTART
  6463 ;;		i2_do_I2C_DO_NACK_STOP
  6464 ;;		i2_do_I2C_IDLE
  6465 ;;		i2_do_I2C_RCEN
  6466 ;;		i2_do_I2C_RESET
  6467 ;;		i2_do_I2C_RX
  6468 ;;		i2_do_I2C_SEND_ADR_READ
  6469 ;;		i2_do_I2C_SEND_ADR_WRITE
  6470 ;;		i2_do_I2C_SEND_INITIAL_READ
  6471 ;;		i2_do_I2C_SEND_RESTART
  6472 ;;		i2_do_I2C_SEND_RESTART_READ
  6473 ;;		i2_do_I2C_SEND_RESTART_WRITE
  6474 ;;		i2_do_I2C_SEND_STOP
  6475 ;;		i2_do_I2C_TX
  6476 ;;		i2_do_I2C_TX_EMPTY
  6477 ;;		i2_do_I2C_TX_REGISTER
  6478 ;;		i2_i2c1_driver_isNACK
  6479 ;;		i2_mssp1_clearIRQ
  6480 ;; This function is called by:
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           	psect	text62
  6485  000CEC                     __ptext62:
  6486                           	opt stack 0
  6487  000CEC                     i2_i2c_ISR:
  6488                           	opt stack 17
  6489                           
  6490                           ;i2c_master.c: 486: mssp1_clearIRQ();
  6491                           
  6492                           ;incstack = 0
  6493  000CEC  EC0F  F009         	call	i2_mssp1_clearIRQ	;wreg free
  6494                           
  6495                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  6496  000CF0  0100               	movlb	0	; () banked
  6497  000CF2  A7B6               	btfss	_i2c_status& (0+255),3,b
  6498  000CF4  D007               	goto	i2l209
  6499                           
  6500                           ; BSR set to: 0
  6501  000CF6  ECF0  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  6502  000CFA  A0D8               	btfss	status,0,c
  6503  000CFC  D003               	goto	i2l209
  6504                           
  6505                           ;i2c_master.c: 493: {
  6506                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  6507  000CFE  0E0F               	movlw	15
  6508  000D00  0100               	movlb	0	; () banked
  6509  000D02  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  6510  000D04                     i2l209:
  6511                           
  6512                           ;i2c_master.c: 495: }
  6513                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  6514                           
  6515                           ; BSR set to: 0
  6516  000D04  0100               	movlb	0	; () banked
  6517  000D06  51C0               	movf	(_i2c_status+10)& (0+255),w,b
  6518  000D08  0D02               	mullw	2
  6519  000D0A  0E92               	movlw	low _fsmStateTable
  6520  000D0C  24F3               	addwf	prodl,w,c
  6521  000D0E  6ED9               	movwf	fsr2l,c
  6522  000D10  0E00               	movlw	high _fsmStateTable
  6523  000D12  20F4               	addwfc	prodh,w,c
  6524  000D14  6EDA               	movwf	fsr2h,c
  6525  000D16  D801               	call	i2u151_48
  6526  000D18  D00A               	goto	i2u151_49
  6527  000D1A                     i2u151_48:
  6528  000D1A  0005               	push	
  6529  000D1C  6EFA               	movwf	pclath,c
  6530  000D1E  50DE               	movf	postinc2,w,c
  6531  000D20  6EFD               	movwf	tosl,c
  6532  000D22  50DE               	movf	postinc2,w,c
  6533  000D24  6EFE               	movwf	tosh,c
  6534  000D26  50F8               	movf	tblptru,w,c
  6535  000D28  6EFF               	movwf	tosu,c
  6536  000D2A  50FA               	movf	pclath,w,c
  6537  000D2C  0012               	return		;indir
  6538  000D2E                     i2u151_49:
  6539  000D2E  0100               	movlb	0	; () banked
  6540  000D30  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  6541                           
  6542                           ; BSR set to: 0
  6543  000D32  0012               	return		;funcret
  6544  000D34                     __end_ofi2_i2c_ISR:
  6545                           	opt stack 0
  6546                           tosu	equ	0xFFF
  6547                           tosh	equ	0xFFE
  6548                           tosl	equ	0xFFD
  6549                           pclatu	equ	0xFFB
  6550                           pclath	equ	0xFFA
  6551                           tblptru	equ	0xFF8
  6552                           tblptrh	equ	0xFF7
  6553                           tblptrl	equ	0xFF6
  6554                           tablat	equ	0xFF5
  6555                           prodh	equ	0xFF4
  6556                           prodl	equ	0xFF3
  6557                           intcon	equ	0xFF2
  6558                           intcon2	equ	0xFF1
  6559                           postinc0	equ	0xFEE
  6560                           plusw0	equ	0xFEB
  6561                           fsr0h	equ	0xFEA
  6562                           fsr0l	equ	0xFE9
  6563                           wreg	equ	0xFE8
  6564                           postdec1	equ	0xFE5
  6565                           fsr1h	equ	0xFE2
  6566                           fsr1l	equ	0xFE1
  6567                           indf2	equ	0xFDF
  6568                           postinc2	equ	0xFDE
  6569                           plusw2	equ	0xFDB
  6570                           fsr2h	equ	0xFDA
  6571                           fsr2l	equ	0xFD9
  6572                           status	equ	0xFD8
  6573                           
  6574 ;; *************** function i2_mssp1_clearIRQ *****************
  6575 ;; Defined at:
  6576 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;		None
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;		None
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      void 
  6583 ;; Registers used:
  6584 ;;		None
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6590 ;;      Params:         0       0       0       0       0       0       0
  6591 ;;      Locals:         0       0       0       0       0       0       0
  6592 ;;      Temps:          0       0       0       0       0       0       0
  6593 ;;      Totals:         0       0       0       0       0       0       0
  6594 ;;Total ram usage:        0 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; This function calls:
  6597 ;;		Nothing
  6598 ;; This function is called by:
  6599 ;;		i2_i2c_ISR
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           	psect	text63
  6604  00121E                     __ptext63:
  6605                           	opt stack 0
  6606  00121E                     i2_mssp1_clearIRQ:
  6607                           	opt stack 19
  6608                           
  6609                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;incstack = 0
  6613  00121E  969E               	bcf	3998,3,c	;volatile
  6614  001220  0012               	return		;funcret
  6615  001222                     __end_ofi2_mssp1_clearIRQ:
  6616                           	opt stack 0
  6617                           tosu	equ	0xFFF
  6618                           tosh	equ	0xFFE
  6619                           tosl	equ	0xFFD
  6620                           pclatu	equ	0xFFB
  6621                           pclath	equ	0xFFA
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodh	equ	0xFF4
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           intcon2	equ	0xFF1
  6630                           postinc0	equ	0xFEE
  6631                           plusw0	equ	0xFEB
  6632                           fsr0h	equ	0xFEA
  6633                           fsr0l	equ	0xFE9
  6634                           wreg	equ	0xFE8
  6635                           postdec1	equ	0xFE5
  6636                           fsr1h	equ	0xFE2
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           plusw2	equ	0xFDB
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function i2_do_I2C_TX_EMPTY *****************
  6646 ;; Defined at:
  6647 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      enum E7019
  6654 ;; Registers used:
  6655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6661 ;;      Params:         0       0       0       0       0       0       0
  6662 ;;      Locals:         0       0       0       0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0
  6664 ;;      Totals:         0       0       0       0       0       0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    2
  6668 ;; This function calls:
  6669 ;;		i2_do_I2C_SEND_RESTART
  6670 ;;		i2_do_I2C_SEND_STOP
  6671 ;;		i2_mssp1_setIRQ
  6672 ;;		i2_returnReset
  6673 ;;		i2_returnStop
  6674 ;; This function is called by:
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           	psect	text64
  6679  000B0E                     __ptext64:
  6680                           	opt stack 0
  6681  000B0E                     i2_do_I2C_TX_EMPTY:
  6682                           	opt stack 17
  6683                           
  6684                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  6685                           
  6686                           ;incstack = 0
  6687  000B0E  0100               	movlb	0	; () banked
  6688  000B10  85B6               	bsf	_i2c_status& (0+255),2,b
  6689                           
  6690                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6691  000B12  D00A               	goto	i2l197
  6692  000B14                     
  6693                           ;i2c_master.c: 448: case i2c_restart_write:
  6694                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  6695                           
  6696                           ; BSR set to: 0
  6697                           
  6698                           ; BSR set to: 0
  6699  000B14  ECDE  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  6700  000B18  0012               	return	
  6701  000B1A                     
  6702                           ;i2c_master.c: 451: mssp1_setIRQ();
  6703  000B1A  EC11  F009         	call	i2_mssp1_setIRQ	;wreg free
  6704                           
  6705                           ;i2c_master.c: 452: return I2C_TX;
  6706  000B1E  0E03               	movlw	3
  6707  000B20  0012               	return	
  6708  000B22                     
  6709                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  6710                           
  6711                           ;i2c_master.c: 454: case i2c_stop:
  6712  000B22  ECDA  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  6713                           
  6714                           ;i2c_master.c: 456: }
  6715  000B26  0012               	return	
  6716  000B28                     i2l197:
  6717  000B28  C0CE  F026         	movff	_i2c_status+24,i2returnReset@p
  6718  000B2C  C0CF  F027         	movff	_i2c_status+25,i2returnReset@p+1
  6719  000B30  EE20  F0C2         	lfsr	2,_i2c_status+12
  6720  000B34  D801               	call	i2u145_48
  6721  000B36  D00A               	goto	i2u145_49
  6722  000B38                     i2u145_48:
  6723  000B38  0005               	push	
  6724  000B3A  6EFA               	movwf	pclath,c
  6725  000B3C  50DE               	movf	postinc2,w,c
  6726  000B3E  6EFD               	movwf	tosl,c
  6727  000B40  50DE               	movf	postinc2,w,c
  6728  000B42  6EFE               	movwf	tosh,c
  6729  000B44  50F8               	movf	tblptru,w,c
  6730  000B46  6EFF               	movwf	tosu,c
  6731  000B48  50FA               	movf	pclath,w,c
  6732  000B4A  0012               	return		;indir
  6733  000B4C                     i2u145_49:
  6734                           
  6735                           ; Switch size 1, requested type "space"
  6736                           ; Number of cases is 4, Range of values is 1 to 4
  6737                           ; switch strategies available:
  6738                           ; Name         Instructions Cycles
  6739                           ; simple_byte           13     7 (average)
  6740                           ;	Chosen strategy is simple_byte
  6741  000B4C  0A01               	xorlw	1	; case 1
  6742  000B4E  B4D8               	btfsc	status,2,c
  6743  000B50  D7E8               	goto	i2l202
  6744  000B52  0A03               	xorlw	3	; case 2
  6745  000B54  B4D8               	btfsc	status,2,c
  6746  000B56  D7DE               	goto	i2l198
  6747  000B58  0A01               	xorlw	1	; case 3
  6748  000B5A  B4D8               	btfsc	status,2,c
  6749  000B5C  D7DB               	goto	i2l198
  6750  000B5E  0A07               	xorlw	7	; case 4
  6751  000B60  B4D8               	btfsc	status,2,c
  6752  000B62  D7DB               	goto	i2l201
  6753  000B64  D7DE               	goto	i2l202
  6754  000B66                     __end_ofi2_do_I2C_TX_EMPTY:
  6755                           	opt stack 0
  6756                           tosu	equ	0xFFF
  6757                           tosh	equ	0xFFE
  6758                           tosl	equ	0xFFD
  6759                           pclatu	equ	0xFFB
  6760                           pclath	equ	0xFFA
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           intcon2	equ	0xFF1
  6769                           postinc0	equ	0xFEE
  6770                           plusw0	equ	0xFEB
  6771                           fsr0h	equ	0xFEA
  6772                           fsr0l	equ	0xFE9
  6773                           wreg	equ	0xFE8
  6774                           postdec1	equ	0xFE5
  6775                           fsr1h	equ	0xFE2
  6776                           fsr1l	equ	0xFE1
  6777                           indf2	equ	0xFDF
  6778                           postinc2	equ	0xFDE
  6779                           plusw2	equ	0xFDB
  6780                           fsr2h	equ	0xFDA
  6781                           fsr2l	equ	0xFD9
  6782                           status	equ	0xFD8
  6783                           
  6784 ;; *************** function i2_do_I2C_RX *****************
  6785 ;; Defined at:
  6786 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;		None
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;		None
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  1    wreg      enum E7019
  6793 ;; Registers used:
  6794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6800 ;;      Params:         0       0       0       0       0       0       0
  6801 ;;      Locals:         0       0       0       0       0       0       0
  6802 ;;      Temps:          0       0       0       0       0       0       0
  6803 ;;      Totals:         0       0       0       0       0       0       0
  6804 ;;Total ram usage:        0 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; Hardware stack levels required when called:    2
  6807 ;; This function calls:
  6808 ;;		i2_do_I2C_DO_NACK_RESTART
  6809 ;;		i2_do_I2C_DO_NACK_STOP
  6810 ;;		i2_i2c1_driver_getRXData
  6811 ;;		i2_i2c1_driver_sendACK
  6812 ;;		i2_returnReset
  6813 ;;		i2_returnStop
  6814 ;; This function is called by:
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           	psect	text65
  6819  0009D0                     __ptext65:
  6820                           	opt stack 0
  6821  0009D0                     i2_do_I2C_RX:
  6822                           	opt stack 17
  6823                           
  6824                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  6825                           
  6826                           ;incstack = 0
  6827  0009D0  EC13  F009         	call	i2_i2c1_driver_getRXData	;wreg free
  6828  0009D4  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  6829  0009D8  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  6830  0009DC  6EDF               	movwf	indf2,c
  6831  0009DE  0100               	movlb	0	; () banked
  6832  0009E0  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  6833  0009E2  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  6837  0009E4  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  6838  0009E6  A0D8               	btfss	status,0,c
  6839  0009E8  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  6840  0009EA  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  6841  0009EC  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  6842  0009EE  B4D8               	btfsc	status,2,c
  6843  0009F0  D004               	goto	i2l185
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;i2c_master.c: 421: {
  6847                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  6848  0009F2  ECF7  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  6849                           
  6850                           ;i2c_master.c: 423: return I2C_RCEN;
  6851  0009F6  0E05               	movlw	5
  6852                           
  6853                           ;i2c_master.c: 424: }
  6854  0009F8  0012               	return	
  6855  0009FA                     i2l185:
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;i2c_master.c: 425: else
  6859                           ;i2c_master.c: 426: {
  6860                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  6861  0009FA  85B6               	bsf	_i2c_status& (0+255),2,b
  6862                           
  6863                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6864  0009FC  D006               	goto	i2l188
  6865  0009FE                     
  6866                           ;i2c_master.c: 431: case i2c_restart_read:
  6867                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  6868                           
  6869                           ; BSR set to: 0
  6870                           
  6871                           ; BSR set to: 0
  6872  0009FE  ECCE  F008         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  6873  000A02  0012               	return	
  6874  000A04                     
  6875                           ;i2c_master.c: 435: case i2c_stop:
  6876                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  6877                           
  6878                           ;i2c_master.c: 434: case i2c_continue:
  6879  000A04  ECD2  F008         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  6880                           
  6881                           ;i2c_master.c: 437: }
  6882  000A08  0012               	return	
  6883  000A0A                     i2l188:
  6884  000A0A  C0CE  F026         	movff	_i2c_status+24,i2returnReset@p
  6885  000A0E  C0CF  F027         	movff	_i2c_status+25,i2returnReset@p+1
  6886  000A12  EE20  F0C2         	lfsr	2,_i2c_status+12
  6887  000A16  D801               	call	i2u144_48
  6888  000A18  D00A               	goto	i2u144_49
  6889  000A1A                     i2u144_48:
  6890  000A1A  0005               	push	
  6891  000A1C  6EFA               	movwf	pclath,c
  6892  000A1E  50DE               	movf	postinc2,w,c
  6893  000A20  6EFD               	movwf	tosl,c
  6894  000A22  50DE               	movf	postinc2,w,c
  6895  000A24  6EFE               	movwf	tosh,c
  6896  000A26  50F8               	movf	tblptru,w,c
  6897  000A28  6EFF               	movwf	tosu,c
  6898  000A2A  50FA               	movf	pclath,w,c
  6899  000A2C  0012               	return		;indir
  6900  000A2E                     i2u144_49:
  6901                           
  6902                           ; Switch size 1, requested type "space"
  6903                           ; Number of cases is 4, Range of values is 1 to 4
  6904                           ; switch strategies available:
  6905                           ; Name         Instructions Cycles
  6906                           ; simple_byte           13     7 (average)
  6907                           ;	Chosen strategy is simple_byte
  6908  000A2E  0A01               	xorlw	1	; case 1
  6909  000A30  B4D8               	btfsc	status,2,c
  6910  000A32  D7E8               	goto	i2l191
  6911  000A34  0A03               	xorlw	3	; case 2
  6912  000A36  B4D8               	btfsc	status,2,c
  6913  000A38  D7E2               	goto	i2l189
  6914  000A3A  0A01               	xorlw	1	; case 3
  6915  000A3C  B4D8               	btfsc	status,2,c
  6916  000A3E  D7DF               	goto	i2l189
  6917  000A40  0A07               	xorlw	7	; case 4
  6918  000A42  D7E0               	goto	i2l191
  6919  000A44                     __end_ofi2_do_I2C_RX:
  6920                           	opt stack 0
  6921                           tosu	equ	0xFFF
  6922                           tosh	equ	0xFFE
  6923                           tosl	equ	0xFFD
  6924                           pclatu	equ	0xFFB
  6925                           pclath	equ	0xFFA
  6926                           tblptru	equ	0xFF8
  6927                           tblptrh	equ	0xFF7
  6928                           tblptrl	equ	0xFF6
  6929                           tablat	equ	0xFF5
  6930                           prodh	equ	0xFF4
  6931                           prodl	equ	0xFF3
  6932                           intcon	equ	0xFF2
  6933                           intcon2	equ	0xFF1
  6934                           postinc0	equ	0xFEE
  6935                           plusw0	equ	0xFEB
  6936                           fsr0h	equ	0xFEA
  6937                           fsr0l	equ	0xFE9
  6938                           wreg	equ	0xFE8
  6939                           postdec1	equ	0xFE5
  6940                           fsr1h	equ	0xFE2
  6941                           fsr1l	equ	0xFE1
  6942                           indf2	equ	0xFDF
  6943                           postinc2	equ	0xFDE
  6944                           plusw2	equ	0xFDB
  6945                           fsr2h	equ	0xFDA
  6946                           fsr2l	equ	0xFD9
  6947                           status	equ	0xFD8
  6948                           
  6949 ;; *************** function i2_do_I2C_TX *****************
  6950 ;; Defined at:
  6951 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      enum E7019
  6958 ;; Registers used:
  6959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6965 ;;      Params:         0       0       0       0       0       0       0
  6966 ;;      Locals:         2       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0
  6968 ;;      Totals:         2       0       0       0       0       0       0
  6969 ;;Total ram usage:        2 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    2
  6972 ;; This function calls:
  6973 ;;		i2_do_I2C_SEND_RESTART_READ
  6974 ;;		i2_do_I2C_SEND_RESTART_WRITE
  6975 ;;		i2_do_I2C_SEND_STOP
  6976 ;;		i2_i2c1_driver_TXData
  6977 ;;		i2_i2c1_driver_isNACK
  6978 ;;		i2_returnReset
  6979 ;;		i2_returnStop
  6980 ;; This function is called by:
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text66
  6985  0008C6                     __ptext66:
  6986                           	opt stack 0
  6987  0008C6                     i2_do_I2C_TX:
  6988                           	opt stack 17
  6989                           
  6990                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  6991                           
  6992                           ;incstack = 0
  6993  0008C6  ECF0  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  6994  0008CA  B0D8               	btfsc	status,0,c
  6995  0008CC  D00A               	goto	i2l170
  6996  0008CE  D026               	goto	i2l169
  6997  0008D0                     
  6998                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  6999  0008D0  ECE6  F008         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  7000  0008D4  0012               	return	
  7001  0008D6                     
  7002                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  7003  0008D6  ECE2  F008         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  7004  0008DA  0012               	return	
  7005  0008DC                     
  7006                           ;i2c_master.c: 405: case i2c_stop:
  7007                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  7008                           
  7009                           ;i2c_master.c: 404: case i2c_continue:
  7010  0008DC  ECDA  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7011                           
  7012                           ;i2c_master.c: 407: }
  7013  0008E0  0012               	return	
  7014  0008E2                     i2l170:
  7015  0008E2  C0D4  F026         	movff	_i2c_status+30,i2returnReset@p
  7016  0008E6  C0D5  F027         	movff	_i2c_status+31,i2returnReset@p+1
  7017  0008EA  EE20  F0C8         	lfsr	2,_i2c_status+18
  7018  0008EE  D801               	call	i2u141_48
  7019  0008F0  D00A               	goto	i2u141_49
  7020  0008F2                     i2u141_48:
  7021  0008F2  0005               	push	
  7022  0008F4  6EFA               	movwf	pclath,c
  7023  0008F6  50DE               	movf	postinc2,w,c
  7024  0008F8  6EFD               	movwf	tosl,c
  7025  0008FA  50DE               	movf	postinc2,w,c
  7026  0008FC  6EFE               	movwf	tosh,c
  7027  0008FE  50F8               	movf	tblptru,w,c
  7028  000900  6EFF               	movwf	tosu,c
  7029  000902  50FA               	movf	pclath,w,c
  7030  000904  0012               	return		;indir
  7031  000906                     i2u141_49:
  7032                           
  7033                           ; Switch size 1, requested type "space"
  7034                           ; Number of cases is 4, Range of values is 1 to 4
  7035                           ; switch strategies available:
  7036                           ; Name         Instructions Cycles
  7037                           ; simple_byte           13     7 (average)
  7038                           ;	Chosen strategy is simple_byte
  7039  000906  0A01               	xorlw	1	; case 1
  7040  000908  B4D8               	btfsc	status,2,c
  7041  00090A  D7E8               	goto	i2l174
  7042  00090C  0A03               	xorlw	3	; case 2
  7043  00090E  B4D8               	btfsc	status,2,c
  7044  000910  D7DF               	goto	i2l171
  7045  000912  0A01               	xorlw	1	; case 3
  7046  000914  B4D8               	btfsc	status,2,c
  7047  000916  D7DF               	goto	i2l173
  7048  000918  0A07               	xorlw	7	; case 4
  7049  00091A  D7E0               	goto	i2l174
  7050  00091C                     i2l169:
  7051                           
  7052                           ;i2c_master.c: 409: else
  7053                           ;i2c_master.c: 410: {
  7054                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  7055  00091C  0100               	movlb	0	; () banked
  7056  00091E  97B6               	bcf	_i2c_status& (0+255),3,b
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  7060  000920  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  7061  000924  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  7062  000928  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  7063  00092A  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  7064  00092C  50DF               	movf	indf2,w,c
  7065  00092E  ECEA  F008         	call	i2_i2c1_driver_TXData
  7066                           
  7067                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7068  000932  0100               	movlb	0	; () banked
  7069  000934  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  7070  000936  A0D8               	btfss	status,0,c
  7071  000938  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  7072  00093A  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  7073  00093C  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  7074  00093E  A4D8               	btfss	status,2,c
  7075  000940  D004               	goto	i2l180
  7076                           
  7077                           ; BSR set to: 0
  7078  000942  0E00               	movlw	0
  7079  000944  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7080  000946  0E06               	movlw	6
  7081  000948  D003               	goto	L7
  7082  00094A                     i2l180:
  7083                           
  7084                           ; BSR set to: 0
  7085                           
  7086                           ; BSR set to: 0
  7087  00094A  0E00               	movlw	0
  7088  00094C  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7089  00094E  0E03               	movlw	3
  7090  000950                     L7:
  7091  000950  6E26               	movwf	i2_do_I2C_TX$315,c
  7092                           
  7093                           ; BSR set to: 0
  7094  000952  5026               	movf	i2_do_I2C_TX$315,w,c
  7095                           
  7096                           ; BSR set to: 0
  7097  000954  0012               	return	
  7098  000956                     __end_ofi2_do_I2C_TX:
  7099                           	opt stack 0
  7100                           tosu	equ	0xFFF
  7101                           tosh	equ	0xFFE
  7102                           tosl	equ	0xFFD
  7103                           pclatu	equ	0xFFB
  7104                           pclath	equ	0xFFA
  7105                           tblptru	equ	0xFF8
  7106                           tblptrh	equ	0xFF7
  7107                           tblptrl	equ	0xFF6
  7108                           tablat	equ	0xFF5
  7109                           prodh	equ	0xFF4
  7110                           prodl	equ	0xFF3
  7111                           intcon	equ	0xFF2
  7112                           intcon2	equ	0xFF1
  7113                           postinc0	equ	0xFEE
  7114                           plusw0	equ	0xFEB
  7115                           fsr0h	equ	0xFEA
  7116                           fsr0l	equ	0xFE9
  7117                           wreg	equ	0xFE8
  7118                           postdec1	equ	0xFE5
  7119                           fsr1h	equ	0xFE2
  7120                           fsr1l	equ	0xFE1
  7121                           indf2	equ	0xFDF
  7122                           postinc2	equ	0xFDE
  7123                           plusw2	equ	0xFDB
  7124                           fsr2h	equ	0xFDA
  7125                           fsr2l	equ	0xFD9
  7126                           status	equ	0xFD8
  7127                           
  7128 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  7129 ;; Defined at:
  7130 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;		None
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;		None
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  1    wreg      enum E7019
  7137 ;; Registers used:
  7138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7144 ;;      Params:         0       0       0       0       0       0       0
  7145 ;;      Locals:         0       0       0       0       0       0       0
  7146 ;;      Temps:          0       0       0       0       0       0       0
  7147 ;;      Totals:         0       0       0       0       0       0       0
  7148 ;;Total ram usage:        0 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; Hardware stack levels required when called:    2
  7151 ;; This function calls:
  7152 ;;		i2_do_I2C_SEND_RESTART
  7153 ;;		i2_do_I2C_SEND_STOP
  7154 ;;		i2_returnReset
  7155 ;;		i2_returnStop
  7156 ;; This function is called by:
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           	psect	text67
  7161  000D34                     __ptext67:
  7162                           	opt stack 0
  7163  000D34                     i2_do_I2C_DO_ADDRESS_NACK:
  7164                           	opt stack 17
  7165                           
  7166                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  7167                           
  7168                           ;incstack = 0
  7169  000D34  0100               	movlb	0	; () banked
  7170  000D36  97B6               	bcf	_i2c_status& (0+255),3,b
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  7174  000D38  0E02               	movlw	2
  7175  000D3A  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  7176                           
  7177                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7178  000D3C  D006               	goto	i2l161
  7179  000D3E                     
  7180                           ;i2c_master.c: 386: case i2c_restart_write:
  7181                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  7182                           
  7183                           ; BSR set to: 0
  7184                           
  7185                           ; BSR set to: 0
  7186  000D3E  ECDE  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7187  000D42  0012               	return	
  7188  000D44                     
  7189                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  7190  000D44  ECDA  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7191                           
  7192                           ;i2c_master.c: 390: }
  7193  000D48  0012               	return	
  7194  000D4A                     i2l161:
  7195  000D4A  C0D2  F026         	movff	_i2c_status+28,i2returnReset@p
  7196  000D4E  C0D3  F027         	movff	_i2c_status+29,i2returnReset@p+1
  7197  000D52  EE20  F0C6         	lfsr	2,_i2c_status+16
  7198  000D56  D801               	call	i2u139_48
  7199  000D58  D00A               	goto	i2u139_49
  7200  000D5A                     i2u139_48:
  7201  000D5A  0005               	push	
  7202  000D5C  6EFA               	movwf	pclath,c
  7203  000D5E  50DE               	movf	postinc2,w,c
  7204  000D60  6EFD               	movwf	tosl,c
  7205  000D62  50DE               	movf	postinc2,w,c
  7206  000D64  6EFE               	movwf	tosh,c
  7207  000D66  50F8               	movf	tblptru,w,c
  7208  000D68  6EFF               	movwf	tosu,c
  7209  000D6A  50FA               	movf	pclath,w,c
  7210  000D6C  0012               	return		;indir
  7211  000D6E                     i2u139_49:
  7212                           
  7213                           ; Switch size 1, requested type "space"
  7214                           ; Number of cases is 2, Range of values is 2 to 3
  7215                           ; switch strategies available:
  7216                           ; Name         Instructions Cycles
  7217                           ; simple_byte            7     4 (average)
  7218                           ;	Chosen strategy is simple_byte
  7219  000D6E  0A02               	xorlw	2	; case 2
  7220  000D70  B4D8               	btfsc	status,2,c
  7221  000D72  D7E5               	goto	i2l162
  7222  000D74  0A01               	xorlw	1	; case 3
  7223  000D76  B4D8               	btfsc	status,2,c
  7224  000D78  D7E2               	goto	i2l162
  7225  000D7A  D7E4               	goto	i2l165
  7226  000D7C                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  7227                           	opt stack 0
  7228                           tosu	equ	0xFFF
  7229                           tosh	equ	0xFFE
  7230                           tosl	equ	0xFFD
  7231                           pclatu	equ	0xFFB
  7232                           pclath	equ	0xFFA
  7233                           tblptru	equ	0xFF8
  7234                           tblptrh	equ	0xFF7
  7235                           tblptrl	equ	0xFF6
  7236                           tablat	equ	0xFF5
  7237                           prodh	equ	0xFF4
  7238                           prodl	equ	0xFF3
  7239                           intcon	equ	0xFF2
  7240                           intcon2	equ	0xFF1
  7241                           postinc0	equ	0xFEE
  7242                           plusw0	equ	0xFEB
  7243                           fsr0h	equ	0xFEA
  7244                           fsr0l	equ	0xFE9
  7245                           wreg	equ	0xFE8
  7246                           postdec1	equ	0xFE5
  7247                           fsr1h	equ	0xFE2
  7248                           fsr1l	equ	0xFE1
  7249                           indf2	equ	0xFDF
  7250                           postinc2	equ	0xFDE
  7251                           plusw2	equ	0xFDB
  7252                           fsr2h	equ	0xFDA
  7253                           fsr2l	equ	0xFD9
  7254                           status	equ	0xFD8
  7255                           
  7256 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  7257 ;; Defined at:
  7258 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;		None
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;		None
  7263 ;; Return value:  Size  Location     Type
  7264 ;;                  1    wreg      enum E7019
  7265 ;; Registers used:
  7266 ;;		wreg, cstack
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7272 ;;      Params:         0       0       0       0       0       0       0
  7273 ;;      Locals:         0       0       0       0       0       0       0
  7274 ;;      Temps:          0       0       0       0       0       0       0
  7275 ;;      Totals:         0       0       0       0       0       0       0
  7276 ;;Total ram usage:        0 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    1
  7279 ;; This function calls:
  7280 ;;		i2_i2c1_driver_sendNACK
  7281 ;; This function is called by:
  7282 ;;		i2_do_I2C_RX
  7283 ;; This function uses a non-reentrant model
  7284 ;;
  7285                           
  7286                           	psect	text68
  7287  00119C                     __ptext68:
  7288                           	opt stack 0
  7289  00119C                     i2_do_I2C_DO_NACK_RESTART:
  7290                           	opt stack 17
  7291                           
  7292                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  7293                           
  7294                           ;incstack = 0
  7295  00119C  ECF4  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7296                           
  7297                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  7298  0011A0  0E09               	movlw	9
  7299  0011A2  0012               	return	
  7300  0011A4                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  7301                           	opt stack 0
  7302                           tosu	equ	0xFFF
  7303                           tosh	equ	0xFFE
  7304                           tosl	equ	0xFFD
  7305                           pclatu	equ	0xFFB
  7306                           pclath	equ	0xFFA
  7307                           tblptru	equ	0xFF8
  7308                           tblptrh	equ	0xFF7
  7309                           tblptrl	equ	0xFF6
  7310                           tablat	equ	0xFF5
  7311                           prodh	equ	0xFF4
  7312                           prodl	equ	0xFF3
  7313                           intcon	equ	0xFF2
  7314                           intcon2	equ	0xFF1
  7315                           postinc0	equ	0xFEE
  7316                           plusw0	equ	0xFEB
  7317                           fsr0h	equ	0xFEA
  7318                           fsr0l	equ	0xFE9
  7319                           wreg	equ	0xFE8
  7320                           postdec1	equ	0xFE5
  7321                           fsr1h	equ	0xFE2
  7322                           fsr1l	equ	0xFE1
  7323                           indf2	equ	0xFDF
  7324                           postinc2	equ	0xFDE
  7325                           plusw2	equ	0xFDB
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  7331 ;; Defined at:
  7332 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      enum E7019
  7339 ;; Registers used:
  7340 ;;		wreg, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7346 ;;      Params:         0       0       0       0       0       0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    1
  7353 ;; This function calls:
  7354 ;;		i2_i2c1_driver_sendNACK
  7355 ;; This function is called by:
  7356 ;;		i2_do_I2C_RX
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           	psect	text69
  7361  0011A4                     __ptext69:
  7362                           	opt stack 0
  7363  0011A4                     i2_do_I2C_DO_NACK_STOP:
  7364                           	opt stack 17
  7365                           
  7366                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  7367                           
  7368                           ;incstack = 0
  7369  0011A4  ECF4  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7370                           
  7371                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  7372  0011A8  0E0A               	movlw	10
  7373  0011AA  0012               	return	
  7374  0011AC                     __end_ofi2_do_I2C_DO_NACK_STOP:
  7375                           	opt stack 0
  7376                           tosu	equ	0xFFF
  7377                           tosh	equ	0xFFE
  7378                           tosl	equ	0xFFD
  7379                           pclatu	equ	0xFFB
  7380                           pclath	equ	0xFFA
  7381                           tblptru	equ	0xFF8
  7382                           tblptrh	equ	0xFF7
  7383                           tblptrl	equ	0xFF6
  7384                           tablat	equ	0xFF5
  7385                           prodh	equ	0xFF4
  7386                           prodl	equ	0xFF3
  7387                           intcon	equ	0xFF2
  7388                           intcon2	equ	0xFF1
  7389                           postinc0	equ	0xFEE
  7390                           plusw0	equ	0xFEB
  7391                           fsr0h	equ	0xFEA
  7392                           fsr0l	equ	0xFE9
  7393                           wreg	equ	0xFE8
  7394                           postdec1	equ	0xFE5
  7395                           fsr1h	equ	0xFE2
  7396                           fsr1l	equ	0xFE1
  7397                           indf2	equ	0xFDF
  7398                           postinc2	equ	0xFDE
  7399                           plusw2	equ	0xFDB
  7400                           fsr2h	equ	0xFDA
  7401                           fsr2l	equ	0xFD9
  7402                           status	equ	0xFD8
  7403                           
  7404 ;; *************** function i2_do_I2C_DO_ACK *****************
  7405 ;; Defined at:
  7406 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      enum E7019
  7413 ;; Registers used:
  7414 ;;		wreg, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7420 ;;      Params:         0       0       0       0       0       0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0
  7422 ;;      Temps:          0       0       0       0       0       0       0
  7423 ;;      Totals:         0       0       0       0       0       0       0
  7424 ;;Total ram usage:        0 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    1
  7427 ;; This function calls:
  7428 ;;		i2_i2c1_driver_sendACK
  7429 ;; This function is called by:
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           	psect	text70
  7434  0011AC                     __ptext70:
  7435                           	opt stack 0
  7436  0011AC                     i2_do_I2C_DO_ACK:
  7437                           	opt stack 18
  7438                           
  7439                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  7440                           
  7441                           ;incstack = 0
  7442  0011AC  ECF7  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  7443                           
  7444                           ;i2c_master.c: 362: return I2C_RCEN;
  7445  0011B0  0E05               	movlw	5
  7446  0011B2  0012               	return	
  7447  0011B4                     __end_ofi2_do_I2C_DO_ACK:
  7448                           	opt stack 0
  7449                           tosu	equ	0xFFF
  7450                           tosh	equ	0xFFE
  7451                           tosl	equ	0xFFD
  7452                           pclatu	equ	0xFFB
  7453                           pclath	equ	0xFFA
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           intcon	equ	0xFF2
  7461                           intcon2	equ	0xFF1
  7462                           postinc0	equ	0xFEE
  7463                           plusw0	equ	0xFEB
  7464                           fsr0h	equ	0xFEA
  7465                           fsr0l	equ	0xFE9
  7466                           wreg	equ	0xFE8
  7467                           postdec1	equ	0xFE5
  7468                           fsr1h	equ	0xFE2
  7469                           fsr1l	equ	0xFE1
  7470                           indf2	equ	0xFDF
  7471                           postinc2	equ	0xFDE
  7472                           plusw2	equ	0xFDB
  7473                           fsr2h	equ	0xFDA
  7474                           fsr2l	equ	0xFD9
  7475                           status	equ	0xFD8
  7476                           
  7477 ;; *************** function i2_do_I2C_RCEN *****************
  7478 ;; Defined at:
  7479 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;		None
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      enum E7019
  7486 ;; Registers used:
  7487 ;;		wreg, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7493 ;;      Params:         0       0       0       0       0       0       0
  7494 ;;      Locals:         0       0       0       0       0       0       0
  7495 ;;      Temps:          0       0       0       0       0       0       0
  7496 ;;      Totals:         0       0       0       0       0       0       0
  7497 ;;Total ram usage:        0 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    1
  7500 ;; This function calls:
  7501 ;;		i2_i2c1_driver_startRX
  7502 ;; This function is called by:
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text71
  7507  00112E                     __ptext71:
  7508                           	opt stack 0
  7509  00112E                     i2_do_I2C_RCEN:
  7510                           	opt stack 18
  7511                           
  7512                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  7513                           
  7514                           ;incstack = 0
  7515  00112E  0100               	movlb	0	; () banked
  7516  001130  97B6               	bcf	_i2c_status& (0+255),3,b
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;i2c_master.c: 355: i2c1_driver_startRX();
  7520  001132  EC15  F009         	call	i2_i2c1_driver_startRX	;wreg free
  7521                           
  7522                           ;i2c_master.c: 356: return I2C_RX;
  7523  001136  0E04               	movlw	4
  7524  001138  0012               	return	
  7525  00113A                     __end_ofi2_do_I2C_RCEN:
  7526                           	opt stack 0
  7527                           tosu	equ	0xFFF
  7528                           tosh	equ	0xFFE
  7529                           tosl	equ	0xFFD
  7530                           pclatu	equ	0xFFB
  7531                           pclath	equ	0xFFA
  7532                           tblptru	equ	0xFF8
  7533                           tblptrh	equ	0xFF7
  7534                           tblptrl	equ	0xFF6
  7535                           tablat	equ	0xFF5
  7536                           prodh	equ	0xFF4
  7537                           prodl	equ	0xFF3
  7538                           intcon	equ	0xFF2
  7539                           intcon2	equ	0xFF1
  7540                           postinc0	equ	0xFEE
  7541                           plusw0	equ	0xFEB
  7542                           fsr0h	equ	0xFEA
  7543                           fsr0l	equ	0xFE9
  7544                           wreg	equ	0xFE8
  7545                           postdec1	equ	0xFE5
  7546                           fsr1h	equ	0xFE2
  7547                           fsr1l	equ	0xFE1
  7548                           indf2	equ	0xFDF
  7549                           postinc2	equ	0xFDE
  7550                           plusw2	equ	0xFDB
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  7556 ;; Defined at:
  7557 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;		None
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;		None
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      enum E7019
  7564 ;; Registers used:
  7565 ;;		wreg, status,2, status,0, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7571 ;;      Params:         0       0       0       0       0       0       0
  7572 ;;      Locals:         0       0       0       0       0       0       0
  7573 ;;      Temps:          0       0       0       0       0       0       0
  7574 ;;      Totals:         0       0       0       0       0       0       0
  7575 ;;Total ram usage:        0 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    1
  7578 ;; This function calls:
  7579 ;;		i2_i2c1_driver_TXData
  7580 ;; This function is called by:
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text72
  7585  001062                     __ptext72:
  7586                           	opt stack 0
  7587  001062                     i2_do_I2C_SEND_ADR_WRITE:
  7588                           	opt stack 18
  7589                           
  7590                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  7591                           
  7592                           ;incstack = 0
  7593  001062  0100               	movlb	0	; () banked
  7594  001064  87B6               	bsf	_i2c_status& (0+255),3,b
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  7598  001066  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  7599  001068  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  7600  00106A  ECEA  F008         	call	i2_i2c1_driver_TXData
  7601                           
  7602                           ;i2c_master.c: 349: return I2C_TX;
  7603  00106E  0E03               	movlw	3
  7604  001070  0012               	return	
  7605  001072                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  7606                           	opt stack 0
  7607                           tosu	equ	0xFFF
  7608                           tosh	equ	0xFFE
  7609                           tosl	equ	0xFFD
  7610                           pclatu	equ	0xFFB
  7611                           pclath	equ	0xFFA
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon	equ	0xFF2
  7619                           intcon2	equ	0xFF1
  7620                           postinc0	equ	0xFEE
  7621                           plusw0	equ	0xFEB
  7622                           fsr0h	equ	0xFEA
  7623                           fsr0l	equ	0xFE9
  7624                           wreg	equ	0xFE8
  7625                           postdec1	equ	0xFE5
  7626                           fsr1h	equ	0xFE2
  7627                           fsr1l	equ	0xFE1
  7628                           indf2	equ	0xFDF
  7629                           postinc2	equ	0xFDE
  7630                           plusw2	equ	0xFDB
  7631                           fsr2h	equ	0xFDA
  7632                           fsr2l	equ	0xFD9
  7633                           status	equ	0xFD8
  7634                           
  7635 ;; *************** function i2_do_I2C_SEND_INITIAL_READ *****************
  7636 ;; Defined at:
  7637 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      enum E7019
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, status,0, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7651 ;;      Params:         0       0       0       0       0       0       0
  7652 ;;      Locals:         0       0       0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0
  7654 ;;      Totals:         0       0       0       0       0       0       0
  7655 ;;Total ram usage:        0 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    1
  7658 ;; This function calls:
  7659 ;;		i2_i2c1_driver_TXData
  7660 ;; This function is called by:
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text73
  7665  001072                     __ptext73:
  7666                           	opt stack 0
  7667  001072                     i2_do_I2C_SEND_INITIAL_READ:
  7668                           	opt stack 18
  7669                           
  7670                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  7671                           
  7672                           ;incstack = 0
  7673  001072  0100               	movlb	0	; () banked
  7674  001074  87B6               	bsf	_i2c_status& (0+255),3,b
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  7678  001076  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  7679  001078  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  7680  00107A  ECEA  F008         	call	i2_i2c1_driver_TXData
  7681                           
  7682                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  7683  00107E  0E11               	movlw	17
  7684  001080  0012               	return	
  7685  001082                     __end_ofi2_do_I2C_SEND_INITIAL_READ:
  7686                           	opt stack 0
  7687                           tosu	equ	0xFFF
  7688                           tosh	equ	0xFFE
  7689                           tosl	equ	0xFFD
  7690                           pclatu	equ	0xFFB
  7691                           pclath	equ	0xFFA
  7692                           tblptru	equ	0xFF8
  7693                           tblptrh	equ	0xFF7
  7694                           tblptrl	equ	0xFF6
  7695                           tablat	equ	0xFF5
  7696                           prodh	equ	0xFF4
  7697                           prodl	equ	0xFF3
  7698                           intcon	equ	0xFF2
  7699                           intcon2	equ	0xFF1
  7700                           postinc0	equ	0xFEE
  7701                           plusw0	equ	0xFEB
  7702                           fsr0h	equ	0xFEA
  7703                           fsr0l	equ	0xFE9
  7704                           wreg	equ	0xFE8
  7705                           postdec1	equ	0xFE5
  7706                           fsr1h	equ	0xFE2
  7707                           fsr1l	equ	0xFE1
  7708                           indf2	equ	0xFDF
  7709                           postinc2	equ	0xFDE
  7710                           plusw2	equ	0xFDB
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  7716 ;; Defined at:
  7717 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;		None
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;		None
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  1    wreg      enum E7019
  7724 ;; Registers used:
  7725 ;;		wreg, status,0, cstack
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7731 ;;      Params:         0       0       0       0       0       0       0
  7732 ;;      Locals:         0       0       0       0       0       0       0
  7733 ;;      Temps:          0       0       0       0       0       0       0
  7734 ;;      Totals:         0       0       0       0       0       0       0
  7735 ;;Total ram usage:        0 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    1
  7738 ;; This function calls:
  7739 ;;		i2_i2c1_driver_TXData
  7740 ;; This function is called by:
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           	psect	text74
  7745  001082                     __ptext74:
  7746                           	opt stack 0
  7747  001082                     i2_do_I2C_SEND_ADR_READ:
  7748                           	opt stack 18
  7749                           
  7750                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  7751                           
  7752                           ;incstack = 0
  7753  001082  0100               	movlb	0	; () banked
  7754  001084  87B6               	bsf	_i2c_status& (0+255),3,b
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  7758  001086  80D8               	bsf	status,0,c
  7759  001088  35B7               	rlcf	(_i2c_status+1)& (0+255),w,b
  7760  00108A  ECEA  F008         	call	i2_i2c1_driver_TXData
  7761                           
  7762                           ;i2c_master.c: 325: return I2C_RCEN;
  7763  00108E  0E05               	movlw	5
  7764  001090  0012               	return	
  7765  001092                     __end_ofi2_do_I2C_SEND_ADR_READ:
  7766                           	opt stack 0
  7767                           tosu	equ	0xFFF
  7768                           tosh	equ	0xFFE
  7769                           tosl	equ	0xFFD
  7770                           pclatu	equ	0xFFB
  7771                           pclath	equ	0xFFA
  7772                           tblptru	equ	0xFF8
  7773                           tblptrh	equ	0xFF7
  7774                           tblptrl	equ	0xFF6
  7775                           tablat	equ	0xFF5
  7776                           prodh	equ	0xFF4
  7777                           prodl	equ	0xFF3
  7778                           intcon	equ	0xFF2
  7779                           intcon2	equ	0xFF1
  7780                           postinc0	equ	0xFEE
  7781                           plusw0	equ	0xFEB
  7782                           fsr0h	equ	0xFEA
  7783                           fsr0l	equ	0xFE9
  7784                           wreg	equ	0xFE8
  7785                           postdec1	equ	0xFE5
  7786                           fsr1h	equ	0xFE2
  7787                           fsr1l	equ	0xFE1
  7788                           indf2	equ	0xFDF
  7789                           postinc2	equ	0xFDE
  7790                           plusw2	equ	0xFDB
  7791                           fsr2h	equ	0xFDA
  7792                           fsr2l	equ	0xFD9
  7793                           status	equ	0xFD8
  7794                           
  7795 ;; *************** function i2_do_I2C_SEND_STOP *****************
  7796 ;; Defined at:
  7797 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;		None
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;		None
  7802 ;; Return value:  Size  Location     Type
  7803 ;;                  1    wreg      enum E7019
  7804 ;; Registers used:
  7805 ;;		wreg, cstack
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7811 ;;      Params:         0       0       0       0       0       0       0
  7812 ;;      Locals:         0       0       0       0       0       0       0
  7813 ;;      Temps:          0       0       0       0       0       0       0
  7814 ;;      Totals:         0       0       0       0       0       0       0
  7815 ;;Total ram usage:        0 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:    1
  7818 ;; This function calls:
  7819 ;;		i2_i2c1_driver_stop
  7820 ;; This function is called by:
  7821 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7822 ;;		i2_do_I2C_TX
  7823 ;;		i2_do_I2C_TX_EMPTY
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           	psect	text75
  7828  0011B4                     __ptext75:
  7829                           	opt stack 0
  7830  0011B4                     i2_do_I2C_SEND_STOP:
  7831                           	opt stack 17
  7832                           
  7833                           ;i2c_master.c: 316: i2c1_driver_stop();
  7834                           
  7835                           ;incstack = 0
  7836  0011B4  EC1B  F009         	call	i2_i2c1_driver_stop	;wreg free
  7837                           
  7838                           ;i2c_master.c: 317: return I2C_IDLE;
  7839  0011B8  0E00               	movlw	0
  7840  0011BA  0012               	return	
  7841  0011BC                     __end_ofi2_do_I2C_SEND_STOP:
  7842                           	opt stack 0
  7843                           tosu	equ	0xFFF
  7844                           tosh	equ	0xFFE
  7845                           tosl	equ	0xFFD
  7846                           pclatu	equ	0xFFB
  7847                           pclath	equ	0xFFA
  7848                           tblptru	equ	0xFF8
  7849                           tblptrh	equ	0xFF7
  7850                           tblptrl	equ	0xFF6
  7851                           tablat	equ	0xFF5
  7852                           prodh	equ	0xFF4
  7853                           prodl	equ	0xFF3
  7854                           intcon	equ	0xFF2
  7855                           intcon2	equ	0xFF1
  7856                           postinc0	equ	0xFEE
  7857                           plusw0	equ	0xFEB
  7858                           fsr0h	equ	0xFEA
  7859                           fsr0l	equ	0xFE9
  7860                           wreg	equ	0xFE8
  7861                           postdec1	equ	0xFE5
  7862                           fsr1h	equ	0xFE2
  7863                           fsr1l	equ	0xFE1
  7864                           indf2	equ	0xFDF
  7865                           postinc2	equ	0xFDE
  7866                           plusw2	equ	0xFDB
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  7872 ;; Defined at:
  7873 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;		None
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;		None
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      enum E7019
  7880 ;; Registers used:
  7881 ;;		wreg, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7887 ;;      Params:         0       0       0       0       0       0       0
  7888 ;;      Locals:         0       0       0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0
  7890 ;;      Totals:         0       0       0       0       0       0       0
  7891 ;;Total ram usage:        0 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    1
  7894 ;; This function calls:
  7895 ;;		i2_i2c1_driver_restart
  7896 ;; This function is called by:
  7897 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7898 ;;		i2_do_I2C_TX_EMPTY
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text76
  7903  0011BC                     __ptext76:
  7904                           	opt stack 0
  7905  0011BC                     i2_do_I2C_SEND_RESTART:
  7906                           	opt stack 17
  7907                           
  7908                           ;i2c_master.c: 310: i2c1_driver_restart();
  7909                           
  7910                           ;incstack = 0
  7911  0011BC  EC1D  F009         	call	i2_i2c1_driver_restart	;wreg free
  7912                           
  7913                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  7914  0011C0  0E01               	movlw	1
  7915  0011C2  0012               	return	
  7916  0011C4                     __end_ofi2_do_I2C_SEND_RESTART:
  7917                           	opt stack 0
  7918                           tosu	equ	0xFFF
  7919                           tosh	equ	0xFFE
  7920                           tosl	equ	0xFFD
  7921                           pclatu	equ	0xFFB
  7922                           pclath	equ	0xFFA
  7923                           tblptru	equ	0xFF8
  7924                           tblptrh	equ	0xFF7
  7925                           tblptrl	equ	0xFF6
  7926                           tablat	equ	0xFF5
  7927                           prodh	equ	0xFF4
  7928                           prodl	equ	0xFF3
  7929                           intcon	equ	0xFF2
  7930                           intcon2	equ	0xFF1
  7931                           postinc0	equ	0xFEE
  7932                           plusw0	equ	0xFEB
  7933                           fsr0h	equ	0xFEA
  7934                           fsr0l	equ	0xFE9
  7935                           wreg	equ	0xFE8
  7936                           postdec1	equ	0xFE5
  7937                           fsr1h	equ	0xFE2
  7938                           fsr1l	equ	0xFE1
  7939                           indf2	equ	0xFDF
  7940                           postinc2	equ	0xFDE
  7941                           plusw2	equ	0xFDB
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  7947 ;; Defined at:
  7948 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;		None
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;		None
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  1    wreg      enum E7019
  7955 ;; Registers used:
  7956 ;;		wreg, cstack
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7962 ;;      Params:         0       0       0       0       0       0       0
  7963 ;;      Locals:         0       0       0       0       0       0       0
  7964 ;;      Temps:          0       0       0       0       0       0       0
  7965 ;;      Totals:         0       0       0       0       0       0       0
  7966 ;;Total ram usage:        0 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; Hardware stack levels required when called:    1
  7969 ;; This function calls:
  7970 ;;		i2_i2c1_driver_restart
  7971 ;; This function is called by:
  7972 ;;		i2_do_I2C_TX
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           	psect	text77
  7977  0011C4                     __ptext77:
  7978                           	opt stack 0
  7979  0011C4                     i2_do_I2C_SEND_RESTART_WRITE:
  7980                           	opt stack 17
  7981                           
  7982                           ;i2c_master.c: 304: i2c1_driver_restart();
  7983                           
  7984                           ;incstack = 0
  7985  0011C4  EC1D  F009         	call	i2_i2c1_driver_restart	;wreg free
  7986                           
  7987                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  7988  0011C8  0E02               	movlw	2
  7989  0011CA  0012               	return	
  7990  0011CC                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  7991                           	opt stack 0
  7992                           tosu	equ	0xFFF
  7993                           tosh	equ	0xFFE
  7994                           tosl	equ	0xFFD
  7995                           pclatu	equ	0xFFB
  7996                           pclath	equ	0xFFA
  7997                           tblptru	equ	0xFF8
  7998                           tblptrh	equ	0xFF7
  7999                           tblptrl	equ	0xFF6
  8000                           tablat	equ	0xFF5
  8001                           prodh	equ	0xFF4
  8002                           prodl	equ	0xFF3
  8003                           intcon	equ	0xFF2
  8004                           intcon2	equ	0xFF1
  8005                           postinc0	equ	0xFEE
  8006                           plusw0	equ	0xFEB
  8007                           fsr0h	equ	0xFEA
  8008                           fsr0l	equ	0xFE9
  8009                           wreg	equ	0xFE8
  8010                           postdec1	equ	0xFE5
  8011                           fsr1h	equ	0xFE2
  8012                           fsr1l	equ	0xFE1
  8013                           indf2	equ	0xFDF
  8014                           postinc2	equ	0xFDE
  8015                           plusw2	equ	0xFDB
  8016                           fsr2h	equ	0xFDA
  8017                           fsr2l	equ	0xFD9
  8018                           status	equ	0xFD8
  8019                           
  8020 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  8021 ;; Defined at:
  8022 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;		None
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;		None
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      enum E7019
  8029 ;; Registers used:
  8030 ;;		wreg, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8036 ;;      Params:         0       0       0       0       0       0       0
  8037 ;;      Locals:         0       0       0       0       0       0       0
  8038 ;;      Temps:          0       0       0       0       0       0       0
  8039 ;;      Totals:         0       0       0       0       0       0       0
  8040 ;;Total ram usage:        0 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    1
  8043 ;; This function calls:
  8044 ;;		i2_i2c1_driver_restart
  8045 ;; This function is called by:
  8046 ;;		i2_do_I2C_TX
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           	psect	text78
  8051  0011CC                     __ptext78:
  8052                           	opt stack 0
  8053  0011CC                     i2_do_I2C_SEND_RESTART_READ:
  8054                           	opt stack 17
  8055                           
  8056                           ;i2c_master.c: 298: i2c1_driver_restart();
  8057                           
  8058                           ;incstack = 0
  8059  0011CC  EC1D  F009         	call	i2_i2c1_driver_restart	;wreg free
  8060                           
  8061                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  8062  0011D0  0E01               	movlw	1
  8063  0011D2  0012               	return	
  8064  0011D4                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  8065                           	opt stack 0
  8066                           tosu	equ	0xFFF
  8067                           tosh	equ	0xFFE
  8068                           tosl	equ	0xFFD
  8069                           pclatu	equ	0xFFB
  8070                           pclath	equ	0xFFA
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           intcon	equ	0xFF2
  8078                           intcon2	equ	0xFF1
  8079                           postinc0	equ	0xFEE
  8080                           plusw0	equ	0xFEB
  8081                           fsr0h	equ	0xFEA
  8082                           fsr0l	equ	0xFE9
  8083                           wreg	equ	0xFE8
  8084                           postdec1	equ	0xFE5
  8085                           fsr1h	equ	0xFE2
  8086                           fsr1l	equ	0xFE1
  8087                           indf2	equ	0xFDF
  8088                           postinc2	equ	0xFDE
  8089                           plusw2	equ	0xFDB
  8090                           fsr2h	equ	0xFDA
  8091                           fsr2l	equ	0xFD9
  8092                           status	equ	0xFD8
  8093                           
  8094 ;; *************** function i2_do_I2C_IDLE *****************
  8095 ;; Defined at:
  8096 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;		None
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;		None
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  1    wreg      enum E7019
  8103 ;; Registers used:
  8104 ;;		wreg, status,2
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8110 ;;      Params:         0       0       0       0       0       0       0
  8111 ;;      Locals:         0       0       0       0       0       0       0
  8112 ;;      Temps:          0       0       0       0       0       0       0
  8113 ;;      Totals:         0       0       0       0       0       0       0
  8114 ;;Total ram usage:        0 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text79
  8123  00113A                     __ptext79:
  8124                           	opt stack 0
  8125  00113A                     i2_do_I2C_IDLE:
  8126                           	opt stack 19
  8127                           
  8128                           ;i2c_master.c: 291: i2c_status.busy = 0;
  8129                           
  8130                           ;incstack = 0
  8131  00113A  0100               	movlb	0	; () banked
  8132  00113C  91B6               	bcf	_i2c_status& (0+255),0,b
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  8136  00113E  0E00               	movlw	0
  8137  001140  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;i2c_master.c: 293: return I2C_RESET;
  8141  001142  0E0E               	movlw	14
  8142  001144  0012               	return	
  8143  001146                     __end_ofi2_do_I2C_IDLE:
  8144                           	opt stack 0
  8145                           tosu	equ	0xFFF
  8146                           tosh	equ	0xFFE
  8147                           tosl	equ	0xFFD
  8148                           pclatu	equ	0xFFB
  8149                           pclath	equ	0xFFA
  8150                           tblptru	equ	0xFF8
  8151                           tblptrh	equ	0xFF7
  8152                           tblptrl	equ	0xFF6
  8153                           tablat	equ	0xFF5
  8154                           prodh	equ	0xFF4
  8155                           prodl	equ	0xFF3
  8156                           intcon	equ	0xFF2
  8157                           intcon2	equ	0xFF1
  8158                           postinc0	equ	0xFEE
  8159                           plusw0	equ	0xFEB
  8160                           fsr0h	equ	0xFEA
  8161                           fsr0l	equ	0xFE9
  8162                           wreg	equ	0xFE8
  8163                           postdec1	equ	0xFE5
  8164                           fsr1h	equ	0xFE2
  8165                           fsr1l	equ	0xFE1
  8166                           indf2	equ	0xFDF
  8167                           postinc2	equ	0xFDE
  8168                           plusw2	equ	0xFDB
  8169                           fsr2h	equ	0xFDA
  8170                           fsr2l	equ	0xFD9
  8171                           status	equ	0xFD8
  8172                           
  8173 ;; *************** function i2_do_I2C_RESET *****************
  8174 ;; Defined at:
  8175 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  8176 ;; Parameters:    Size  Location     Type
  8177 ;;		None
  8178 ;; Auto vars:     Size  Location     Type
  8179 ;;		None
  8180 ;; Return value:  Size  Location     Type
  8181 ;;                  1    wreg      enum E7019
  8182 ;; Registers used:
  8183 ;;		wreg, status,2, cstack
  8184 ;; Tracked objects:
  8185 ;;		On entry : 0/0
  8186 ;;		On exit  : 0/0
  8187 ;;		Unchanged: 0/0
  8188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8189 ;;      Params:         0       0       0       0       0       0       0
  8190 ;;      Locals:         0       0       0       0       0       0       0
  8191 ;;      Temps:          0       0       0       0       0       0       0
  8192 ;;      Totals:         0       0       0       0       0       0       0
  8193 ;;Total ram usage:        0 bytes
  8194 ;; Hardware stack levels used:    1
  8195 ;; Hardware stack levels required when called:    1
  8196 ;; This function calls:
  8197 ;;		i2_i2c1_driver_resetBus
  8198 ;; This function is called by:
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           	psect	text80
  8203  001092                     __ptext80:
  8204                           	opt stack 0
  8205  001092                     i2_do_I2C_RESET:
  8206                           	opt stack 18
  8207                           
  8208                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  8209                           
  8210                           ; BSR set to: 0
  8211                           ;incstack = 0
  8212  001092  EC22  F009         	call	i2_i2c1_driver_resetBus	;wreg free
  8213                           
  8214                           ;i2c_master.c: 284: i2c_status.busy = 0;
  8215  001096  0100               	movlb	0	; () banked
  8216  001098  91B6               	bcf	_i2c_status& (0+255),0,b
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  8220  00109A  0E00               	movlw	0
  8221  00109C  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;i2c_master.c: 286: return I2C_RESET;
  8225  00109E  0E0E               	movlw	14
  8226  0010A0  0012               	return	
  8227  0010A2                     __end_ofi2_do_I2C_RESET:
  8228                           	opt stack 0
  8229                           tosu	equ	0xFFF
  8230                           tosh	equ	0xFFE
  8231                           tosl	equ	0xFFD
  8232                           pclatu	equ	0xFFB
  8233                           pclath	equ	0xFFA
  8234                           tblptru	equ	0xFF8
  8235                           tblptrh	equ	0xFF7
  8236                           tblptrl	equ	0xFF6
  8237                           tablat	equ	0xFF5
  8238                           prodh	equ	0xFF4
  8239                           prodl	equ	0xFF3
  8240                           intcon	equ	0xFF2
  8241                           intcon2	equ	0xFF1
  8242                           postinc0	equ	0xFEE
  8243                           plusw0	equ	0xFEB
  8244                           fsr0h	equ	0xFEA
  8245                           fsr0l	equ	0xFE9
  8246                           wreg	equ	0xFE8
  8247                           postdec1	equ	0xFE5
  8248                           fsr1h	equ	0xFE2
  8249                           fsr1l	equ	0xFE1
  8250                           indf2	equ	0xFDF
  8251                           postinc2	equ	0xFDE
  8252                           plusw2	equ	0xFDB
  8253                           fsr2h	equ	0xFDA
  8254                           fsr2l	equ	0xFD9
  8255                           status	equ	0xFD8
  8256                           
  8257 ;; *************** function i2_do_I2C_TX_REGISTER *****************
  8258 ;; Defined at:
  8259 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;		None
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      enum E7019
  8266 ;; Registers used:
  8267 ;;		wreg, status,2, cstack
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8273 ;;      Params:         0       0       0       0       0       0       0
  8274 ;;      Locals:         0       0       0       0       0       0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0
  8276 ;;      Totals:         0       0       0       0       0       0       0
  8277 ;;Total ram usage:        0 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    1
  8280 ;; This function calls:
  8281 ;;		i2_i2c1_driver_TXData
  8282 ;; This function is called by:
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           	psect	text81
  8287  001120                     __ptext81:
  8288                           	opt stack 0
  8289  001120                     i2_do_I2C_TX_REGISTER:
  8290                           	opt stack 18
  8291                           
  8292                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;incstack = 0
  8296  001120  0100               	movlb	0	; () banked
  8297  001122  87B6               	bsf	_i2c_status& (0+255),3,b
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  8301  001124  51DA               	movf	(_i2c_status+36)& (0+255),w,b
  8302  001126  ECEA  F008         	call	i2_i2c1_driver_TXData
  8303                           
  8304                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  8305  00112A  0E07               	movlw	7
  8306  00112C  0012               	return	
  8307  00112E                     __end_ofi2_do_I2C_TX_REGISTER:
  8308                           	opt stack 0
  8309                           tosu	equ	0xFFF
  8310                           tosh	equ	0xFFE
  8311                           tosl	equ	0xFFD
  8312                           pclatu	equ	0xFFB
  8313                           pclath	equ	0xFFA
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon2	equ	0xFF1
  8322                           postinc0	equ	0xFEE
  8323                           plusw0	equ	0xFEB
  8324                           fsr0h	equ	0xFEA
  8325                           fsr0l	equ	0xFE9
  8326                           wreg	equ	0xFE8
  8327                           postdec1	equ	0xFE5
  8328                           fsr1h	equ	0xFE2
  8329                           fsr1l	equ	0xFE1
  8330                           indf2	equ	0xFDF
  8331                           postinc2	equ	0xFDE
  8332                           plusw2	equ	0xFDB
  8333                           fsr2h	equ	0xFDA
  8334                           fsr2l	equ	0xFD9
  8335                           status	equ	0xFD8
  8336                           
  8337 ;; *************** function i2_mssp1_setIRQ *****************
  8338 ;; Defined at:
  8339 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;		None
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;		None
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      void 
  8346 ;; Registers used:
  8347 ;;		None
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8353 ;;      Params:         0       0       0       0       0       0       0
  8354 ;;      Locals:         0       0       0       0       0       0       0
  8355 ;;      Temps:          0       0       0       0       0       0       0
  8356 ;;      Totals:         0       0       0       0       0       0       0
  8357 ;;Total ram usage:        0 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; This function calls:
  8360 ;;		Nothing
  8361 ;; This function is called by:
  8362 ;;		i2_do_I2C_TX_EMPTY
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text82
  8367  001222                     __ptext82:
  8368                           	opt stack 0
  8369  001222                     i2_mssp1_setIRQ:
  8370                           	opt stack 18
  8371                           
  8372                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  8373                           
  8374                           ;incstack = 0
  8375  001222  869E               	bsf	3998,3,c	;volatile
  8376  001224  0012               	return		;funcret
  8377  001226                     __end_ofi2_mssp1_setIRQ:
  8378                           	opt stack 0
  8379                           tosu	equ	0xFFF
  8380                           tosh	equ	0xFFE
  8381                           tosl	equ	0xFFD
  8382                           pclatu	equ	0xFFB
  8383                           pclath	equ	0xFFA
  8384                           tblptru	equ	0xFF8
  8385                           tblptrh	equ	0xFF7
  8386                           tblptrl	equ	0xFF6
  8387                           tablat	equ	0xFF5
  8388                           prodh	equ	0xFF4
  8389                           prodl	equ	0xFF3
  8390                           intcon	equ	0xFF2
  8391                           intcon2	equ	0xFF1
  8392                           postinc0	equ	0xFEE
  8393                           plusw0	equ	0xFEB
  8394                           fsr0h	equ	0xFEA
  8395                           fsr0l	equ	0xFE9
  8396                           wreg	equ	0xFE8
  8397                           postdec1	equ	0xFE5
  8398                           fsr1h	equ	0xFE2
  8399                           fsr1l	equ	0xFE1
  8400                           indf2	equ	0xFDF
  8401                           postinc2	equ	0xFDE
  8402                           plusw2	equ	0xFDB
  8403                           fsr2h	equ	0xFDA
  8404                           fsr2l	equ	0xFD9
  8405                           status	equ	0xFD8
  8406                           
  8407 ;; *************** function i2_i2c1_driver_isNACK *****************
  8408 ;; Defined at:
  8409 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  8410 ;; Parameters:    Size  Location     Type
  8411 ;;		None
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;		None
  8414 ;; Return value:  Size  Location     Type
  8415 ;;		None               void
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8423 ;;      Params:         0       0       0       0       0       0       0
  8424 ;;      Locals:         0       0       0       0       0       0       0
  8425 ;;      Temps:          1       0       0       0       0       0       0
  8426 ;;      Totals:         1       0       0       0       0       0       0
  8427 ;;Total ram usage:        1 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; This function calls:
  8430 ;;		Nothing
  8431 ;; This function is called by:
  8432 ;;		i2_do_I2C_TX
  8433 ;;		i2_i2c_ISR
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text83
  8438  000FE0                     __ptext83:
  8439                           	opt stack 0
  8440  000FE0                     i2_i2c1_driver_isNACK:
  8441                           	opt stack 19
  8442                           
  8443                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  8444                           
  8445                           ;incstack = 0
  8446  000FE0  50C5               	movf	4037,w,c	;volatile
  8447  000FE2  0BBF               	andlw	-65
  8448  000FE4  0940               	iorlw	64
  8449  000FE6  6EC5               	movwf	4037,c	;volatile
  8450  000FE8  38C5               	swapf	4037,w,c	;volatile
  8451  000FEA  32E8               	rrcf	wreg,f,c
  8452  000FEC  32E8               	rrcf	wreg,f,c
  8453  000FEE  0B01               	andlw	1
  8454  000FF0  6E26               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
  8455  000FF2  3026               	rrcf	??i2_i2c1_driver_isNACK,w,c
  8456  000FF4  0012               	return	
  8457  000FF6                     __end_ofi2_i2c1_driver_isNACK:
  8458                           	opt stack 0
  8459                           tosu	equ	0xFFF
  8460                           tosh	equ	0xFFE
  8461                           tosl	equ	0xFFD
  8462                           pclatu	equ	0xFFB
  8463                           pclath	equ	0xFFA
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodh	equ	0xFF4
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           intcon2	equ	0xFF1
  8472                           postinc0	equ	0xFEE
  8473                           plusw0	equ	0xFEB
  8474                           fsr0h	equ	0xFEA
  8475                           fsr0l	equ	0xFE9
  8476                           wreg	equ	0xFE8
  8477                           postdec1	equ	0xFE5
  8478                           fsr1h	equ	0xFE2
  8479                           fsr1l	equ	0xFE1
  8480                           indf2	equ	0xFDF
  8481                           postinc2	equ	0xFDE
  8482                           plusw2	equ	0xFDB
  8483                           fsr2h	equ	0xFDA
  8484                           fsr2l	equ	0xFD9
  8485                           status	equ	0xFD8
  8486                           
  8487 ;; *************** function i2_i2c1_driver_TXData *****************
  8488 ;; Defined at:
  8489 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  d               1    wreg     unsigned char 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  d               1    0[COMRAM] unsigned char 
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      void 
  8496 ;; Registers used:
  8497 ;;		wreg
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8503 ;;      Params:         0       0       0       0       0       0       0
  8504 ;;      Locals:         1       0       0       0       0       0       0
  8505 ;;      Temps:          0       0       0       0       0       0       0
  8506 ;;      Totals:         1       0       0       0       0       0       0
  8507 ;;Total ram usage:        1 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; This function calls:
  8510 ;;		Nothing
  8511 ;; This function is called by:
  8512 ;;		i2_do_I2C_SEND_ADR_READ
  8513 ;;		i2_do_I2C_SEND_INITIAL_READ
  8514 ;;		i2_do_I2C_TX_REGISTER
  8515 ;;		i2_do_I2C_SEND_ADR_WRITE
  8516 ;;		i2_do_I2C_TX
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	text84
  8521  0011D4                     __ptext84:
  8522                           	opt stack 0
  8523  0011D4                     i2_i2c1_driver_TXData:
  8524                           	opt stack 18
  8525                           
  8526                           ;incstack = 0
  8527                           ;i2i2c1_driver_TXData@d stored from wreg
  8528  0011D4  6E26               	movwf	i2i2c1_driver_TXData@d,c
  8529                           
  8530                           ;i2c1_driver.c: 188: SSP1BUF = d;
  8531  0011D6  C026  FFC9         	movff	i2i2c1_driver_TXData@d,4041	;volatile
  8532  0011DA  0012               	return		;funcret
  8533  0011DC                     __end_ofi2_i2c1_driver_TXData:
  8534                           	opt stack 0
  8535                           tosu	equ	0xFFF
  8536                           tosh	equ	0xFFE
  8537                           tosl	equ	0xFFD
  8538                           pclatu	equ	0xFFB
  8539                           pclath	equ	0xFFA
  8540                           tblptru	equ	0xFF8
  8541                           tblptrh	equ	0xFF7
  8542                           tblptrl	equ	0xFF6
  8543                           tablat	equ	0xFF5
  8544                           prodh	equ	0xFF4
  8545                           prodl	equ	0xFF3
  8546                           intcon	equ	0xFF2
  8547                           intcon2	equ	0xFF1
  8548                           postinc0	equ	0xFEE
  8549                           plusw0	equ	0xFEB
  8550                           fsr0h	equ	0xFEA
  8551                           fsr0l	equ	0xFE9
  8552                           wreg	equ	0xFE8
  8553                           postdec1	equ	0xFE5
  8554                           fsr1h	equ	0xFE2
  8555                           fsr1l	equ	0xFE1
  8556                           indf2	equ	0xFDF
  8557                           postinc2	equ	0xFDE
  8558                           plusw2	equ	0xFDB
  8559                           fsr2h	equ	0xFDA
  8560                           fsr2l	equ	0xFD9
  8561                           status	equ	0xFD8
  8562                           
  8563 ;; *************** function i2_i2c1_driver_getRXData *****************
  8564 ;; Defined at:
  8565 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;		None
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;		None
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      unsigned char 
  8572 ;; Registers used:
  8573 ;;		wreg, status,2
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8579 ;;      Params:         0       0       0       0       0       0       0
  8580 ;;      Locals:         0       0       0       0       0       0       0
  8581 ;;      Temps:          0       0       0       0       0       0       0
  8582 ;;      Totals:         0       0       0       0       0       0       0
  8583 ;;Total ram usage:        0 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		i2_do_I2C_RX
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text85
  8593  001226                     __ptext85:
  8594                           	opt stack 0
  8595  001226                     i2_i2c1_driver_getRXData:
  8596                           	opt stack 18
  8597                           
  8598                           ;i2c1_driver.c: 173: return SSP1BUF;
  8599                           
  8600                           ;incstack = 0
  8601  001226  50C9               	movf	4041,w,c	;volatile
  8602  001228  0012               	return	
  8603  00122A                     __end_ofi2_i2c1_driver_getRXData:
  8604                           	opt stack 0
  8605                           tosu	equ	0xFFF
  8606                           tosh	equ	0xFFE
  8607                           tosl	equ	0xFFD
  8608                           pclatu	equ	0xFFB
  8609                           pclath	equ	0xFFA
  8610                           tblptru	equ	0xFF8
  8611                           tblptrh	equ	0xFF7
  8612                           tblptrl	equ	0xFF6
  8613                           tablat	equ	0xFF5
  8614                           prodh	equ	0xFF4
  8615                           prodl	equ	0xFF3
  8616                           intcon	equ	0xFF2
  8617                           intcon2	equ	0xFF1
  8618                           postinc0	equ	0xFEE
  8619                           plusw0	equ	0xFEB
  8620                           fsr0h	equ	0xFEA
  8621                           fsr0l	equ	0xFE9
  8622                           wreg	equ	0xFE8
  8623                           postdec1	equ	0xFE5
  8624                           fsr1h	equ	0xFE2
  8625                           fsr1l	equ	0xFE1
  8626                           indf2	equ	0xFDF
  8627                           postinc2	equ	0xFDE
  8628                           plusw2	equ	0xFDB
  8629                           fsr2h	equ	0xFDA
  8630                           fsr2l	equ	0xFD9
  8631                           status	equ	0xFD8
  8632                           
  8633 ;; *************** function i2_i2c1_driver_sendNACK *****************
  8634 ;; Defined at:
  8635 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      void 
  8642 ;; Registers used:
  8643 ;;		None
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8649 ;;      Params:         0       0       0       0       0       0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0
  8652 ;;      Totals:         0       0       0       0       0       0       0
  8653 ;;Total ram usage:        0 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; This function calls:
  8656 ;;		Nothing
  8657 ;; This function is called by:
  8658 ;;		i2_do_I2C_DO_NACK_STOP
  8659 ;;		i2_do_I2C_DO_NACK_RESTART
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           	psect	text86
  8664  0011E8                     __ptext86:
  8665                           	opt stack 0
  8666  0011E8                     i2_i2c1_driver_sendNACK:
  8667                           	opt stack 17
  8668                           
  8669                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  8670                           
  8671                           ;incstack = 0
  8672  0011E8  8AC5               	bsf	4037,5,c	;volatile
  8673                           
  8674                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  8675  0011EA  88C5               	bsf	4037,4,c	;volatile
  8676  0011EC  0012               	return		;funcret
  8677  0011EE                     __end_ofi2_i2c1_driver_sendNACK:
  8678                           	opt stack 0
  8679                           tosu	equ	0xFFF
  8680                           tosh	equ	0xFFE
  8681                           tosl	equ	0xFFD
  8682                           pclatu	equ	0xFFB
  8683                           pclath	equ	0xFFA
  8684                           tblptru	equ	0xFF8
  8685                           tblptrh	equ	0xFF7
  8686                           tblptrl	equ	0xFF6
  8687                           tablat	equ	0xFF5
  8688                           prodh	equ	0xFF4
  8689                           prodl	equ	0xFF3
  8690                           intcon	equ	0xFF2
  8691                           intcon2	equ	0xFF1
  8692                           postinc0	equ	0xFEE
  8693                           plusw0	equ	0xFEB
  8694                           fsr0h	equ	0xFEA
  8695                           fsr0l	equ	0xFE9
  8696                           wreg	equ	0xFE8
  8697                           postdec1	equ	0xFE5
  8698                           fsr1h	equ	0xFE2
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           plusw2	equ	0xFDB
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function i2_i2c1_driver_resetBus *****************
  8708 ;; Defined at:
  8709 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		None
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8723 ;;      Params:         0       0       0       0       0       0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0
  8726 ;;      Totals:         0       0       0       0       0       0       0
  8727 ;;Total ram usage:        0 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; This function calls:
  8730 ;;		Nothing
  8731 ;; This function is called by:
  8732 ;;		i2_do_I2C_RESET
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           	psect	text87
  8737  001244                     __ptext87:
  8738                           	opt stack 0
  8739  001244                     i2_i2c1_driver_resetBus:
  8740                           	opt stack 18
  8741                           
  8742                           ;incstack = 0
  8743  001244  0012               	return		;funcret
  8744  001246                     __end_ofi2_i2c1_driver_resetBus:
  8745                           	opt stack 0
  8746                           tosu	equ	0xFFF
  8747                           tosh	equ	0xFFE
  8748                           tosl	equ	0xFFD
  8749                           pclatu	equ	0xFFB
  8750                           pclath	equ	0xFFA
  8751                           tblptru	equ	0xFF8
  8752                           tblptrh	equ	0xFF7
  8753                           tblptrl	equ	0xFF6
  8754                           tablat	equ	0xFF5
  8755                           prodh	equ	0xFF4
  8756                           prodl	equ	0xFF3
  8757                           intcon	equ	0xFF2
  8758                           intcon2	equ	0xFF1
  8759                           postinc0	equ	0xFEE
  8760                           plusw0	equ	0xFEB
  8761                           fsr0h	equ	0xFEA
  8762                           fsr0l	equ	0xFE9
  8763                           wreg	equ	0xFE8
  8764                           postdec1	equ	0xFE5
  8765                           fsr1h	equ	0xFE2
  8766                           fsr1l	equ	0xFE1
  8767                           indf2	equ	0xFDF
  8768                           postinc2	equ	0xFDE
  8769                           plusw2	equ	0xFDB
  8770                           fsr2h	equ	0xFDA
  8771                           fsr2l	equ	0xFD9
  8772                           status	equ	0xFD8
  8773                           
  8774 ;; *************** function i2_i2c1_driver_startRX *****************
  8775 ;; Defined at:
  8776 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      void 
  8783 ;; Registers used:
  8784 ;;		None
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8790 ;;      Params:         0       0       0       0       0       0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; This function calls:
  8797 ;;		Nothing
  8798 ;; This function is called by:
  8799 ;;		i2_do_I2C_RCEN
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text88
  8804  00122A                     __ptext88:
  8805                           	opt stack 0
  8806  00122A                     i2_i2c1_driver_startRX:
  8807                           	opt stack 18
  8808                           
  8809                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  8810                           
  8811                           ;incstack = 0
  8812  00122A  86C5               	bsf	4037,3,c	;volatile
  8813  00122C  0012               	return		;funcret
  8814  00122E                     __end_ofi2_i2c1_driver_startRX:
  8815                           	opt stack 0
  8816                           tosu	equ	0xFFF
  8817                           tosh	equ	0xFFE
  8818                           tosl	equ	0xFFD
  8819                           pclatu	equ	0xFFB
  8820                           pclath	equ	0xFFA
  8821                           tblptru	equ	0xFF8
  8822                           tblptrh	equ	0xFF7
  8823                           tblptrl	equ	0xFF6
  8824                           tablat	equ	0xFF5
  8825                           prodh	equ	0xFF4
  8826                           prodl	equ	0xFF3
  8827                           intcon	equ	0xFF2
  8828                           intcon2	equ	0xFF1
  8829                           postinc0	equ	0xFEE
  8830                           plusw0	equ	0xFEB
  8831                           fsr0h	equ	0xFEA
  8832                           fsr0l	equ	0xFE9
  8833                           wreg	equ	0xFE8
  8834                           postdec1	equ	0xFE5
  8835                           fsr1h	equ	0xFE2
  8836                           fsr1l	equ	0xFE1
  8837                           indf2	equ	0xFDF
  8838                           postinc2	equ	0xFDE
  8839                           plusw2	equ	0xFDB
  8840                           fsr2h	equ	0xFDA
  8841                           fsr2l	equ	0xFD9
  8842                           status	equ	0xFD8
  8843                           
  8844 ;; *************** function i2_returnReset *****************
  8845 ;; Defined at:
  8846 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  p               2    0[COMRAM] PTR void 
  8849 ;;		 -> NULL(0), 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;		None
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      enum E6842
  8854 ;; Registers used:
  8855 ;;		wreg
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8861 ;;      Params:         2       0       0       0       0       0       0
  8862 ;;      Locals:         0       0       0       0       0       0       0
  8863 ;;      Temps:          0       0       0       0       0       0       0
  8864 ;;      Totals:         2       0       0       0       0       0       0
  8865 ;;Total ram usage:        2 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; This function calls:
  8868 ;;		Nothing
  8869 ;; This function is called by:
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           	psect	text89
  8874  00122E                     __ptext89:
  8875                           	opt stack 0
  8876  00122E                     i2_returnReset:
  8877                           	opt stack 18
  8878                           
  8879                           ;i2c_master.c: 515: return i2c_reset_link;
  8880                           
  8881                           ;incstack = 0
  8882  00122E  0E05               	movlw	5
  8883  001230  0012               	return	
  8884  001232                     __end_ofi2_returnReset:
  8885                           	opt stack 0
  8886                           tosu	equ	0xFFF
  8887                           tosh	equ	0xFFE
  8888                           tosl	equ	0xFFD
  8889                           pclatu	equ	0xFFB
  8890                           pclath	equ	0xFFA
  8891                           tblptru	equ	0xFF8
  8892                           tblptrh	equ	0xFF7
  8893                           tblptrl	equ	0xFF6
  8894                           tablat	equ	0xFF5
  8895                           prodh	equ	0xFF4
  8896                           prodl	equ	0xFF3
  8897                           intcon	equ	0xFF2
  8898                           intcon2	equ	0xFF1
  8899                           postinc0	equ	0xFEE
  8900                           plusw0	equ	0xFEB
  8901                           fsr0h	equ	0xFEA
  8902                           fsr0l	equ	0xFE9
  8903                           wreg	equ	0xFE8
  8904                           postdec1	equ	0xFE5
  8905                           fsr1h	equ	0xFE2
  8906                           fsr1l	equ	0xFE1
  8907                           indf2	equ	0xFDF
  8908                           postinc2	equ	0xFDE
  8909                           plusw2	equ	0xFDB
  8910                           fsr2h	equ	0xFDA
  8911                           fsr2l	equ	0xFD9
  8912                           status	equ	0xFD8
  8913                           
  8914 ;; *************** function i2_returnStop *****************
  8915 ;; Defined at:
  8916 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  p               2    0[COMRAM] PTR void 
  8919 ;;		 -> NULL(0), 
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;		None
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  1    wreg      enum E6842
  8924 ;; Registers used:
  8925 ;;		wreg
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8931 ;;      Params:         2       0       0       0       0       0       0
  8932 ;;      Locals:         0       0       0       0       0       0       0
  8933 ;;      Temps:          0       0       0       0       0       0       0
  8934 ;;      Totals:         2       0       0       0       0       0       0
  8935 ;;Total ram usage:        2 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; This function calls:
  8938 ;;		Nothing
  8939 ;; This function is called by:
  8940 ;; This function uses a non-reentrant model
  8941 ;;
  8942                           
  8943                           	psect	text90
  8944  001232                     __ptext90:
  8945                           	opt stack 0
  8946  001232                     i2_returnStop:
  8947                           	opt stack 18
  8948                           
  8949                           ;i2c_master.c: 510: return i2c_stop;
  8950                           
  8951                           ;incstack = 0
  8952  001232  0E01               	movlw	1
  8953  001234  0012               	return	
  8954  001236                     __end_ofi2_returnStop:
  8955                           	opt stack 0
  8956                           tosu	equ	0xFFF
  8957                           tosh	equ	0xFFE
  8958                           tosl	equ	0xFFD
  8959                           pclatu	equ	0xFFB
  8960                           pclath	equ	0xFFA
  8961                           tblptru	equ	0xFF8
  8962                           tblptrh	equ	0xFF7
  8963                           tblptrl	equ	0xFF6
  8964                           tablat	equ	0xFF5
  8965                           prodh	equ	0xFF4
  8966                           prodl	equ	0xFF3
  8967                           intcon	equ	0xFF2
  8968                           intcon2	equ	0xFF1
  8969                           postinc0	equ	0xFEE
  8970                           plusw0	equ	0xFEB
  8971                           fsr0h	equ	0xFEA
  8972                           fsr0l	equ	0xFE9
  8973                           wreg	equ	0xFE8
  8974                           postdec1	equ	0xFE5
  8975                           fsr1h	equ	0xFE2
  8976                           fsr1l	equ	0xFE1
  8977                           indf2	equ	0xFDF
  8978                           postinc2	equ	0xFDE
  8979                           plusw2	equ	0xFDB
  8980                           fsr2h	equ	0xFDA
  8981                           fsr2l	equ	0xFD9
  8982                           status	equ	0xFD8
  8983                           
  8984 ;; *************** function i2_i2c1_driver_stop *****************
  8985 ;; Defined at:
  8986 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		None
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9000 ;;      Params:         0       0       0       0       0       0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0
  9002 ;;      Temps:          0       0       0       0       0       0       0
  9003 ;;      Totals:         0       0       0       0       0       0       0
  9004 ;;Total ram usage:        0 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; This function calls:
  9007 ;;		Nothing
  9008 ;; This function is called by:
  9009 ;;		i2_do_I2C_SEND_STOP
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           	psect	text91
  9014  001236                     __ptext91:
  9015                           	opt stack 0
  9016  001236                     i2_i2c1_driver_stop:
  9017                           	opt stack 17
  9018                           
  9019                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  9020                           
  9021                           ;incstack = 0
  9022  001236  84C5               	bsf	4037,2,c	;volatile
  9023  001238  0012               	return		;funcret
  9024  00123A                     __end_ofi2_i2c1_driver_stop:
  9025                           	opt stack 0
  9026                           tosu	equ	0xFFF
  9027                           tosh	equ	0xFFE
  9028                           tosl	equ	0xFFD
  9029                           pclatu	equ	0xFFB
  9030                           pclath	equ	0xFFA
  9031                           tblptru	equ	0xFF8
  9032                           tblptrh	equ	0xFF7
  9033                           tblptrl	equ	0xFF6
  9034                           tablat	equ	0xFF5
  9035                           prodh	equ	0xFF4
  9036                           prodl	equ	0xFF3
  9037                           intcon	equ	0xFF2
  9038                           intcon2	equ	0xFF1
  9039                           postinc0	equ	0xFEE
  9040                           plusw0	equ	0xFEB
  9041                           fsr0h	equ	0xFEA
  9042                           fsr0l	equ	0xFE9
  9043                           wreg	equ	0xFE8
  9044                           postdec1	equ	0xFE5
  9045                           fsr1h	equ	0xFE2
  9046                           fsr1l	equ	0xFE1
  9047                           indf2	equ	0xFDF
  9048                           postinc2	equ	0xFDE
  9049                           plusw2	equ	0xFDB
  9050                           fsr2h	equ	0xFDA
  9051                           fsr2l	equ	0xFD9
  9052                           status	equ	0xFD8
  9053                           
  9054 ;; *************** function i2_i2c1_driver_restart *****************
  9055 ;; Defined at:
  9056 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  9057 ;; Parameters:    Size  Location     Type
  9058 ;;		None
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;		None
  9061 ;; Return value:  Size  Location     Type
  9062 ;;                  1    wreg      void 
  9063 ;; Registers used:
  9064 ;;		None
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9070 ;;      Params:         0       0       0       0       0       0       0
  9071 ;;      Locals:         0       0       0       0       0       0       0
  9072 ;;      Temps:          0       0       0       0       0       0       0
  9073 ;;      Totals:         0       0       0       0       0       0       0
  9074 ;;Total ram usage:        0 bytes
  9075 ;; Hardware stack levels used:    1
  9076 ;; This function calls:
  9077 ;;		Nothing
  9078 ;; This function is called by:
  9079 ;;		i2_do_I2C_SEND_RESTART_READ
  9080 ;;		i2_do_I2C_SEND_RESTART_WRITE
  9081 ;;		i2_do_I2C_SEND_RESTART
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           	psect	text92
  9086  00123A                     __ptext92:
  9087                           	opt stack 0
  9088  00123A                     i2_i2c1_driver_restart:
  9089                           	opt stack 17
  9090                           
  9091                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  9092                           
  9093                           ;incstack = 0
  9094  00123A  82C5               	bsf	4037,1,c	;volatile
  9095  00123C  0012               	return		;funcret
  9096  00123E                     __end_ofi2_i2c1_driver_restart:
  9097                           	opt stack 0
  9098                           tosu	equ	0xFFF
  9099                           tosh	equ	0xFFE
  9100                           tosl	equ	0xFFD
  9101                           pclatu	equ	0xFFB
  9102                           pclath	equ	0xFFA
  9103                           tblptru	equ	0xFF8
  9104                           tblptrh	equ	0xFF7
  9105                           tblptrl	equ	0xFF6
  9106                           tablat	equ	0xFF5
  9107                           prodh	equ	0xFF4
  9108                           prodl	equ	0xFF3
  9109                           intcon	equ	0xFF2
  9110                           intcon2	equ	0xFF1
  9111                           postinc0	equ	0xFEE
  9112                           plusw0	equ	0xFEB
  9113                           fsr0h	equ	0xFEA
  9114                           fsr0l	equ	0xFE9
  9115                           wreg	equ	0xFE8
  9116                           postdec1	equ	0xFE5
  9117                           fsr1h	equ	0xFE2
  9118                           fsr1l	equ	0xFE1
  9119                           indf2	equ	0xFDF
  9120                           postinc2	equ	0xFDE
  9121                           plusw2	equ	0xFDB
  9122                           fsr2h	equ	0xFDA
  9123                           fsr2l	equ	0xFD9
  9124                           status	equ	0xFD8
  9125                           
  9126 ;; *************** function i2_i2c1_driver_sendACK *****************
  9127 ;; Defined at:
  9128 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;		None
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;		None
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  1    wreg      void 
  9135 ;; Registers used:
  9136 ;;		None
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9142 ;;      Params:         0       0       0       0       0       0       0
  9143 ;;      Locals:         0       0       0       0       0       0       0
  9144 ;;      Temps:          0       0       0       0       0       0       0
  9145 ;;      Totals:         0       0       0       0       0       0       0
  9146 ;;Total ram usage:        0 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; This function calls:
  9149 ;;		Nothing
  9150 ;; This function is called by:
  9151 ;;		i2_do_I2C_DO_ACK
  9152 ;;		i2_do_I2C_RX
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text93
  9157  0011EE                     __ptext93:
  9158                           	opt stack 0
  9159  0011EE                     i2_i2c1_driver_sendACK:
  9160                           	opt stack 18
  9161                           
  9162                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  9163                           
  9164                           ;incstack = 0
  9165  0011EE  9AC5               	bcf	4037,5,c	;volatile
  9166                           
  9167                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  9168  0011F0  88C5               	bsf	4037,4,c	;volatile
  9169  0011F2  0012               	return		;funcret
  9170  0011F4                     __end_ofi2_i2c1_driver_sendACK:
  9171                           	opt stack 0
  9172                           tosu	equ	0xFFF
  9173                           tosh	equ	0xFFE
  9174                           tosl	equ	0xFFD
  9175                           pclatu	equ	0xFFB
  9176                           pclath	equ	0xFFA
  9177                           tblptru	equ	0xFF8
  9178                           tblptrh	equ	0xFF7
  9179                           tblptrl	equ	0xFF6
  9180                           tablat	equ	0xFF5
  9181                           prodh	equ	0xFF4
  9182                           prodl	equ	0xFF3
  9183                           intcon	equ	0xFF2
  9184                           intcon2	equ	0xFF1
  9185                           postinc0	equ	0xFEE
  9186                           plusw0	equ	0xFEB
  9187                           fsr0h	equ	0xFEA
  9188                           fsr0l	equ	0xFE9
  9189                           wreg	equ	0xFE8
  9190                           postdec1	equ	0xFE5
  9191                           fsr1h	equ	0xFE2
  9192                           fsr1l	equ	0xFE1
  9193                           indf2	equ	0xFDF
  9194                           postinc2	equ	0xFDE
  9195                           plusw2	equ	0xFDB
  9196                           fsr2h	equ	0xFDA
  9197                           fsr2l	equ	0xFD9
  9198                           status	equ	0xFD8
  9199                           
  9200 ;; *************** function _i2c_busCollisionISR *****************
  9201 ;; Defined at:
  9202 ;;		line 500 in file "mcc_generated_files/drivers/i2c_master.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;		None
  9205 ;; Auto vars:     Size  Location     Type
  9206 ;;		None
  9207 ;; Return value:  Size  Location     Type
  9208 ;;                  1    wreg      void 
  9209 ;; Registers used:
  9210 ;;		cstack
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9216 ;;      Params:         0       0       0       0       0       0       0
  9217 ;;      Locals:         0       0       0       0       0       0       0
  9218 ;;      Temps:          0       0       0       0       0       0       0
  9219 ;;      Totals:         0       0       0       0       0       0       0
  9220 ;;Total ram usage:        0 bytes
  9221 ;; Hardware stack levels used:    1
  9222 ;; Hardware stack levels required when called:    1
  9223 ;; This function calls:
  9224 ;;		_i2c1_driver_clearBusCollision
  9225 ;; This function is called by:
  9226 ;;		_i2c_open
  9227 ;;		_INTERRUPT_InterruptManager
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           	psect	text94
  9232  0011F4                     __ptext94:
  9233                           	opt stack 0
  9234  0011F4                     _i2c_busCollisionISR:
  9235                           	opt stack 19
  9236                           
  9237                           ;i2c_master.c: 502: i2c1_driver_clearBusCollision();
  9238                           
  9239                           ;incstack = 0
  9240  0011F4  EC1F  F009         	call	_i2c1_driver_clearBusCollision	;wreg free
  9241  0011F8  0012               	return		;funcret
  9242  0011FA                     __end_of_i2c_busCollisionISR:
  9243                           	opt stack 0
  9244                           tosu	equ	0xFFF
  9245                           tosh	equ	0xFFE
  9246                           tosl	equ	0xFFD
  9247                           pclatu	equ	0xFFB
  9248                           pclath	equ	0xFFA
  9249                           tblptru	equ	0xFF8
  9250                           tblptrh	equ	0xFF7
  9251                           tblptrl	equ	0xFF6
  9252                           tablat	equ	0xFF5
  9253                           prodh	equ	0xFF4
  9254                           prodl	equ	0xFF3
  9255                           intcon	equ	0xFF2
  9256                           intcon2	equ	0xFF1
  9257                           postinc0	equ	0xFEE
  9258                           plusw0	equ	0xFEB
  9259                           fsr0h	equ	0xFEA
  9260                           fsr0l	equ	0xFE9
  9261                           wreg	equ	0xFE8
  9262                           postdec1	equ	0xFE5
  9263                           fsr1h	equ	0xFE2
  9264                           fsr1l	equ	0xFE1
  9265                           indf2	equ	0xFDF
  9266                           postinc2	equ	0xFDE
  9267                           plusw2	equ	0xFDB
  9268                           fsr2h	equ	0xFDA
  9269                           fsr2l	equ	0xFD9
  9270                           status	equ	0xFD8
  9271                           
  9272 ;; *************** function _i2c1_driver_clearBusCollision *****************
  9273 ;; Defined at:
  9274 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;		None
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;		None
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  1    wreg      void 
  9281 ;; Registers used:
  9282 ;;		None
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9288 ;;      Params:         0       0       0       0       0       0       0
  9289 ;;      Locals:         0       0       0       0       0       0       0
  9290 ;;      Temps:          0       0       0       0       0       0       0
  9291 ;;      Totals:         0       0       0       0       0       0       0
  9292 ;;Total ram usage:        0 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; This function calls:
  9295 ;;		Nothing
  9296 ;; This function is called by:
  9297 ;;		_i2c_busCollisionISR
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           	psect	text95
  9302  00123E                     __ptext95:
  9303                           	opt stack 0
  9304  00123E                     _i2c1_driver_clearBusCollision:
  9305                           	opt stack 19
  9306                           
  9307                           ;i2c1_driver.c: 255: PIR2bits.BCL1IF = 0;
  9308                           
  9309                           ;incstack = 0
  9310  00123E  96A1               	bcf	4001,3,c	;volatile
  9311  001240  0012               	return		;funcret
  9312  001242                     __end_of_i2c1_driver_clearBusCollision:
  9313                           	opt stack 0
  9314                           tosu	equ	0xFFF
  9315                           tosh	equ	0xFFE
  9316                           tosl	equ	0xFFD
  9317                           pclatu	equ	0xFFB
  9318                           pclath	equ	0xFFA
  9319                           tblptru	equ	0xFF8
  9320                           tblptrh	equ	0xFF7
  9321                           tblptrl	equ	0xFF6
  9322                           tablat	equ	0xFF5
  9323                           prodh	equ	0xFF4
  9324                           prodl	equ	0xFF3
  9325                           intcon	equ	0xFF2
  9326                           intcon2	equ	0xFF1
  9327                           postinc0	equ	0xFEE
  9328                           plusw0	equ	0xFEB
  9329                           fsr0h	equ	0xFEA
  9330                           fsr0l	equ	0xFE9
  9331                           wreg	equ	0xFE8
  9332                           postdec1	equ	0xFE5
  9333                           fsr1h	equ	0xFE2
  9334                           fsr1l	equ	0xFE1
  9335                           indf2	equ	0xFDF
  9336                           postinc2	equ	0xFDE
  9337                           plusw2	equ	0xFDB
  9338                           fsr2h	equ	0xFDA
  9339                           fsr2l	equ	0xFD9
  9340                           status	equ	0xFD8
  9341                           
  9342 ;; *************** function _EUSART1_Transmit_ISR *****************
  9343 ;; Defined at:
  9344 ;;		line 183 in file "mcc_generated_files/eusart1.c"
  9345 ;; Parameters:    Size  Location     Type
  9346 ;;		None
  9347 ;; Auto vars:     Size  Location     Type
  9348 ;;		None
  9349 ;; Return value:  Size  Location     Type
  9350 ;;                  1    wreg      void 
  9351 ;; Registers used:
  9352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9353 ;; Tracked objects:
  9354 ;;		On entry : 0/0
  9355 ;;		On exit  : 0/0
  9356 ;;		Unchanged: 0/0
  9357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9358 ;;      Params:         0       0       0       0       0       0       0
  9359 ;;      Locals:         0       0       0       0       0       0       0
  9360 ;;      Temps:          0       0       0       0       0       0       0
  9361 ;;      Totals:         0       0       0       0       0       0       0
  9362 ;;Total ram usage:        0 bytes
  9363 ;; Hardware stack levels used:    1
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_EUSART1_Initialize
  9368 ;;		_INTERRUPT_InterruptManager
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           	psect	text96
  9373  000E5C                     __ptext96:
  9374                           	opt stack 0
  9375  000E5C                     _EUSART1_Transmit_ISR:
  9376                           	opt stack 20
  9377                           
  9378                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  9379                           
  9380                           ;incstack = 0
  9381  000E5C  0E08               	movlw	8
  9382  000E5E  604A               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  9383  000E60  D012               	goto	i2l321
  9384                           
  9385                           ;eusart1.c: 188: {
  9386                           ;eusart1.c: 189: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  9387  000E62  501B               	movf	_eusart1TxTail,w,c	;volatile
  9388  000E64  0D01               	mullw	1
  9389  000E66  0E09               	movlw	low _eusart1TxBuffer
  9390  000E68  24F3               	addwf	prodl,w,c
  9391  000E6A  6ED9               	movwf	fsr2l,c
  9392  000E6C  0E00               	movlw	high _eusart1TxBuffer
  9393  000E6E  20F4               	addwfc	prodh,w,c
  9394  000E70  6EDA               	movwf	fsr2h,c
  9395  000E72  50DF               	movf	indf2,w,c
  9396  000E74  6EAD               	movwf	4013,c	;volatile
  9397  000E76  2A1B               	incf	_eusart1TxTail,f,c	;volatile
  9398                           
  9399                           ;eusart1.c: 190: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  9400  000E78  0E07               	movlw	7
  9401  000E7A  641B               	cpfsgt	_eusart1TxTail,c	;volatile
  9402  000E7C  D002               	goto	i2l322
  9403                           
  9404                           ;eusart1.c: 191: {
  9405                           ;eusart1.c: 192: eusart1TxTail = 0;
  9406  000E7E  0E00               	movlw	0
  9407  000E80  6E1B               	movwf	_eusart1TxTail,c	;volatile
  9408  000E82                     i2l322:
  9409                           
  9410                           ;eusart1.c: 193: }
  9411                           ;eusart1.c: 194: eusart1TxBufferRemaining++;
  9412  000E82  2A4A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9413                           
  9414                           ;eusart1.c: 195: }
  9415  000E84  0012               	return	
  9416  000E86                     i2l321:
  9417                           
  9418                           ;eusart1.c: 196: else
  9419                           ;eusart1.c: 197: {
  9420                           ;eusart1.c: 198: PIE1bits.TX1IE = 0;
  9421  000E86  989D               	bcf	3997,4,c	;volatile
  9422  000E88  0012               	return	
  9423  000E8A                     __end_of_EUSART1_Transmit_ISR:
  9424                           	opt stack 0
  9425                           tosu	equ	0xFFF
  9426                           tosh	equ	0xFFE
  9427                           tosl	equ	0xFFD
  9428                           pclatu	equ	0xFFB
  9429                           pclath	equ	0xFFA
  9430                           tblptru	equ	0xFF8
  9431                           tblptrh	equ	0xFF7
  9432                           tblptrl	equ	0xFF6
  9433                           tablat	equ	0xFF5
  9434                           prodh	equ	0xFF4
  9435                           prodl	equ	0xFF3
  9436                           intcon	equ	0xFF2
  9437                           intcon2	equ	0xFF1
  9438                           postinc0	equ	0xFEE
  9439                           plusw0	equ	0xFEB
  9440                           fsr0h	equ	0xFEA
  9441                           fsr0l	equ	0xFE9
  9442                           wreg	equ	0xFE8
  9443                           postdec1	equ	0xFE5
  9444                           fsr1h	equ	0xFE2
  9445                           fsr1l	equ	0xFE1
  9446                           indf2	equ	0xFDF
  9447                           postinc2	equ	0xFDE
  9448                           plusw2	equ	0xFDB
  9449                           fsr2h	equ	0xFDA
  9450                           fsr2l	equ	0xFD9
  9451                           status	equ	0xFD8
  9452                           
  9453 ;; *************** function _EUSART1_Receive_ISR *****************
  9454 ;; Defined at:
  9455 ;;		line 202 in file "mcc_generated_files/eusart1.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;		None
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;		None
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  1    wreg      void 
  9462 ;; Registers used:
  9463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9469 ;;      Params:         0       0       0       0       0       0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0
  9472 ;;      Totals:         0       0       0       0       0       0       0
  9473 ;;Total ram usage:        0 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; This function calls:
  9476 ;;		Nothing
  9477 ;; This function is called by:
  9478 ;;		_EUSART1_Initialize
  9479 ;;		_INTERRUPT_InterruptManager
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           	psect	text97
  9484  000E8A                     __ptext97:
  9485                           	opt stack 0
  9486  000E8A                     _EUSART1_Receive_ISR:
  9487                           	opt stack 20
  9488                           
  9489                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
  9490                           
  9491                           ;incstack = 0
  9492  000E8A  A2AB               	btfss	4011,1,c	;volatile
  9493  000E8C  D002               	goto	i2l327
  9494                           
  9495                           ;eusart1.c: 206: {
  9496                           ;eusart1.c: 209: RCSTA1bits.CREN = 0;
  9497  000E8E  98AB               	bcf	4011,4,c	;volatile
  9498                           
  9499                           ;eusart1.c: 210: RCSTA1bits.CREN = 1;
  9500  000E90  88AB               	bsf	4011,4,c	;volatile
  9501  000E92                     i2l327:
  9502                           
  9503                           ;eusart1.c: 211: }
  9504                           ;eusart1.c: 214: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  9505  000E92  501A               	movf	_eusart1RxHead,w,c	;volatile
  9506  000E94  0D01               	mullw	1
  9507  000E96  0E01               	movlw	low _eusart1RxBuffer
  9508  000E98  24F3               	addwf	prodl,w,c
  9509  000E9A  6ED9               	movwf	fsr2l,c
  9510  000E9C  0E00               	movlw	high _eusart1RxBuffer
  9511  000E9E  20F4               	addwfc	prodh,w,c
  9512  000EA0  6EDA               	movwf	fsr2h,c
  9513  000EA2  CFAE FFDF          	movff	4014,indf2	;volatile
  9514  000EA6  2A1A               	incf	_eusart1RxHead,f,c	;volatile
  9515                           
  9516                           ;eusart1.c: 215: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  9517  000EA8  0E07               	movlw	7
  9518  000EAA  641A               	cpfsgt	_eusart1RxHead,c	;volatile
  9519  000EAC  D002               	goto	i2l328
  9520                           
  9521                           ;eusart1.c: 216: {
  9522                           ;eusart1.c: 217: eusart1RxHead = 0;
  9523  000EAE  0E00               	movlw	0
  9524  000EB0  6E1A               	movwf	_eusart1RxHead,c	;volatile
  9525  000EB2                     i2l328:
  9526                           
  9527                           ;eusart1.c: 218: }
  9528                           ;eusart1.c: 219: eusart1RxCount++;
  9529  000EB2  2A18               	incf	_eusart1RxCount,f,c	;volatile
  9530  000EB4  0012               	return		;funcret
  9531  000EB6                     __end_of_EUSART1_Receive_ISR:
  9532                           	opt stack 0
  9533                           tosu	equ	0xFFF
  9534                           tosh	equ	0xFFE
  9535                           tosl	equ	0xFFD
  9536                           pclatu	equ	0xFFB
  9537                           pclath	equ	0xFFA
  9538                           tblptru	equ	0xFF8
  9539                           tblptrh	equ	0xFF7
  9540                           tblptrl	equ	0xFF6
  9541                           tablat	equ	0xFF5
  9542                           prodh	equ	0xFF4
  9543                           prodl	equ	0xFF3
  9544                           intcon	equ	0xFF2
  9545                           intcon2	equ	0xFF1
  9546                           postinc0	equ	0xFEE
  9547                           plusw0	equ	0xFEB
  9548                           fsr0h	equ	0xFEA
  9549                           fsr0l	equ	0xFE9
  9550                           wreg	equ	0xFE8
  9551                           postdec1	equ	0xFE5
  9552                           fsr1h	equ	0xFE2
  9553                           fsr1l	equ	0xFE1
  9554                           indf2	equ	0xFDF
  9555                           postinc2	equ	0xFDE
  9556                           plusw2	equ	0xFDB
  9557                           fsr2h	equ	0xFDA
  9558                           fsr2l	equ	0xFD9
  9559                           status	equ	0xFD8
  9560                           tosu	equ	0xFFF
  9561                           tosh	equ	0xFFE
  9562                           tosl	equ	0xFFD
  9563                           pclatu	equ	0xFFB
  9564                           pclath	equ	0xFFA
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           prodh	equ	0xFF4
  9570                           prodl	equ	0xFF3
  9571                           intcon	equ	0xFF2
  9572                           intcon2	equ	0xFF1
  9573                           postinc0	equ	0xFEE
  9574                           plusw0	equ	0xFEB
  9575                           fsr0h	equ	0xFEA
  9576                           fsr0l	equ	0xFE9
  9577                           wreg	equ	0xFE8
  9578                           postdec1	equ	0xFE5
  9579                           fsr1h	equ	0xFE2
  9580                           fsr1l	equ	0xFE1
  9581                           indf2	equ	0xFDF
  9582                           postinc2	equ	0xFDE
  9583                           plusw2	equ	0xFDB
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588                           	psect	text98
  9589  000000                     __ptext98:
  9590                           	opt stack 0
  9591                           tosu	equ	0xFFF
  9592                           tosh	equ	0xFFE
  9593                           tosl	equ	0xFFD
  9594                           pclatu	equ	0xFFB
  9595                           pclath	equ	0xFFA
  9596                           tblptru	equ	0xFF8
  9597                           tblptrh	equ	0xFF7
  9598                           tblptrl	equ	0xFF6
  9599                           tablat	equ	0xFF5
  9600                           prodh	equ	0xFF4
  9601                           prodl	equ	0xFF3
  9602                           intcon	equ	0xFF2
  9603                           intcon2	equ	0xFF1
  9604                           postinc0	equ	0xFEE
  9605                           plusw0	equ	0xFEB
  9606                           fsr0h	equ	0xFEA
  9607                           fsr0l	equ	0xFE9
  9608                           wreg	equ	0xFE8
  9609                           postdec1	equ	0xFE5
  9610                           fsr1h	equ	0xFE2
  9611                           fsr1l	equ	0xFE1
  9612                           indf2	equ	0xFDF
  9613                           postinc2	equ	0xFDE
  9614                           plusw2	equ	0xFDB
  9615                           fsr2h	equ	0xFDA
  9616                           fsr2l	equ	0xFD9
  9617                           status	equ	0xFD8
  9618                           
  9619                           	psect	rparam
  9620  0000                     tosu	equ	0xFFF
  9621                           tosh	equ	0xFFE
  9622                           tosl	equ	0xFFD
  9623                           pclatu	equ	0xFFB
  9624                           pclath	equ	0xFFA
  9625                           tblptru	equ	0xFF8
  9626                           tblptrh	equ	0xFF7
  9627                           tblptrl	equ	0xFF6
  9628                           tablat	equ	0xFF5
  9629                           prodh	equ	0xFF4
  9630                           prodl	equ	0xFF3
  9631                           intcon	equ	0xFF2
  9632                           intcon2	equ	0xFF1
  9633                           postinc0	equ	0xFEE
  9634                           plusw0	equ	0xFEB
  9635                           fsr0h	equ	0xFEA
  9636                           fsr0l	equ	0xFE9
  9637                           wreg	equ	0xFE8
  9638                           postdec1	equ	0xFE5
  9639                           fsr1h	equ	0xFE2
  9640                           fsr1l	equ	0xFE1
  9641                           indf2	equ	0xFDF
  9642                           postinc2	equ	0xFDE
  9643                           plusw2	equ	0xFDB
  9644                           fsr2h	equ	0xFDA
  9645                           fsr2l	equ	0xFD9
  9646                           status	equ	0xFD8
  9647                           
  9648                           	psect	temp
  9649  00004B                     btemp:
  9650                           	opt stack 0
  9651  00004B                     	ds	1
  9652  0000                     int$flags	set	btemp
  9653  0000                     wtemp6	set	btemp+1
  9654                           tosu	equ	0xFFF
  9655                           tosh	equ	0xFFE
  9656                           tosl	equ	0xFFD
  9657                           pclatu	equ	0xFFB
  9658                           pclath	equ	0xFFA
  9659                           tblptru	equ	0xFF8
  9660                           tblptrh	equ	0xFF7
  9661                           tblptrl	equ	0xFF6
  9662                           tablat	equ	0xFF5
  9663                           prodh	equ	0xFF4
  9664                           prodl	equ	0xFF3
  9665                           intcon	equ	0xFF2
  9666                           intcon2	equ	0xFF1
  9667                           postinc0	equ	0xFEE
  9668                           plusw0	equ	0xFEB
  9669                           fsr0h	equ	0xFEA
  9670                           fsr0l	equ	0xFE9
  9671                           wreg	equ	0xFE8
  9672                           postdec1	equ	0xFE5
  9673                           fsr1h	equ	0xFE2
  9674                           fsr1l	equ	0xFE1
  9675                           indf2	equ	0xFDF
  9676                           postinc2	equ	0xFDE
  9677                           plusw2	equ	0xFDB
  9678                           fsr2h	equ	0xFDA
  9679                           fsr2l	equ	0xFD9
  9680                           status	equ	0xFD8


Data Sizes:
    Strings     4
    Constant    0
    Data        86
    BSS         74
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      74
    BANK0           160     14     137
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_ISR$2284	PTR const FTN()enum E7019 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$11$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    i2c1_driver_setI2cISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART1_SetRxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_SetTxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E7019[18] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    S53$callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S53$data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_read_xyzvalues
    _read_xyzvalues->_i2c_masterAccelRead
    _printf->_putch
    _putch->_EUSART1_Write
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ACCELEROMETER_Initialize->_read_register
    _ACCELEROMETER_Initialize->_write_register
    _i2c_masterWrite->_i2c_masterOperation
    _read_register->_i2c_masterAccelRead
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterAccelRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_REGISTER->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_INITIAL_READ->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX

Critical Paths under _main in BANK0

    _main->_read_xyzvalues

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    8915
                                              6 BANK0      8     8      0
           _ACCELEROMETER_Initialize
                      _EUSART1_Write
                  _SYSTEM_Initialize
                             _printf
                     _read_xyzvalues
 ---------------------------------------------------------------------------------
 (1) _read_xyzvalues                                      12     6      6    2685
                                             26 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     341
                                             22 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ACCELEROMETER_Initialize                             2     2      0    5384
                                             27 COMRAM     2     2      0
                      _read_register
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _write_register                                       2     1      1    3007
                                             25 COMRAM     2     1      1
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0    1390
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (2) _read_register                                        1     1      0    2377
                                             26 COMRAM     1     1      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4     602
                                             20 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     286
                                             22 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterAccelRead                                  1     1      0    1421
                                             25 COMRAM     1     1      0
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0    1390
                                             23 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0    1322
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0    1232
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
           _do_I2C_SEND_INITIAL_READ *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _do_I2C_TX_REGISTER *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_REGISTER                                   0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0     328
                                             21 COMRAM     2     2      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_INITIAL_READ                             0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0     260
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2     260
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            1     1      0      37
                                             20 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     563
                                              2 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (11) i2_i2c_ISR                                           0     0      0     563
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
         i2_do_I2C_SEND_INITIAL_READ *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_do_I2C_TX_REGISTER *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (12) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_REGISTER                                0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_EMPTY                                   0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                     i2_mssp1_setIRQ
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX                                         2     2      0     163
                                              0 COMRAM     2     2      0
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_INITIAL_READ                          0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RX                                         0     0      0     104
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_returnStop                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_returnReset                                       2     0      2     104
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (12) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACCELEROMETER_Initialize
     _read_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterAccelRead
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
     _write_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printf
     _putch
       _EUSART1_Write
   _read_xyzvalues
     _i2c_close
       _mssp1_clearIRQ
       _mssp1_disableIRQ
     _i2c_masterAccelRead
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _returnReset *
               _returnStop *
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               _do_I2C_DO_NACK_RESTART
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData
               _i2c1_driver_sendACK
               _returnReset *
               _returnStop *
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_INITIAL_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               _do_I2C_SEND_RESTART_READ
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _i2c1_driver_TXData
               _i2c1_driver_isNACK
               _returnReset *
               _returnStop *
             _do_I2C_TX_EMPTY *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _mssp1_setIRQ
               _returnReset *
               _returnStop *
             _do_I2C_TX_REGISTER *
               _i2c1_driver_TXData
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       i2_do_I2C_DO_NACK_RESTART
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData
       i2_i2c1_driver_sendACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_INITIAL_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       i2_do_I2C_SEND_RESTART_READ
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData
       i2_i2c1_driver_isNACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_EMPTY *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_mssp1_setIRQ
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_REGISTER *
       i2_i2c1_driver_TXData
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      E      89       4       85.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      4A       1       78.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3       9        0.0%
DATA                 0      0      D3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar  1 14:01:04 2018

                ??i2_i2c1_driver_startRX 0026             _do_I2C_TX_REGISTER$intlevel0 0FFC  
                           returnReset@p 003A                 _eusart1TxBufferRemaining 004A  
          _do_I2C_SEND_RESTART$intlevel0 10FC                                       l83 0F24  
                                     l95 0CC6                                       l96 0CB8  
                                     l97 0CDA                                       l98 0CBC  
                                     l99 0CC0                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 10F6                     __size_of_do_I2C_RCEN 0012  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                            __CFG_LVP$ON 000000                                      l100 0CE8  
                                    l201 0AC2                                      l113 0F54  
                                    l202 0ACA                                      l114 0F44  
                                    l310 0DF8                                      l311 0DF6  
                                    l161 0C26                                      l209 0BDA  
                                    l162 0C1A                                      l170 07C0  
                                    l171 07AE                                      l180 0828  
                                    l165 0C20                                      l173 07B4  
                                    l309 0DD4                                      l174 07BA  
                                    l191 0990                                      l169 07FA  
                                    l185 0986                                      l188 0996  
                                    l189 098A                                      l197 0AD0  
                                    l613 0612                                      l198 0ABC  
                                    l636 0A66                                      l666 0EC6  
                                    l667 0EC0                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000          __end_ofi2_i2c1_driver_getRXData 122A  
           __size_of_i2c_masterOperation 0048                     _returnStop$intlevel0 1188  
                  __size_of_do_I2C_RESET 0016                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                             _TXSTA1bits 000FAC          i2c1_driver_setBusCollisionISR@f 003A  
                            i2_do_I2C_RX 09D0                              i2_do_I2C_TX 08C6  
                                   l3549 0DC4                           i2_mssp1_setIRQ 1222  
                 __size_ofi2_do_I2C_IDLE 000C                                     STR_1 0603  
                                   STR_2 0601                                     u1230 1020  
                 __size_ofi2_do_I2C_RCEN 000C                                     u1218 09A6  
                                   u1219 09BA                                     u1228 0AE0  
                                   u1229 0AF4                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   u1168 0C36                                     u1280 105C  
                                   u1169 0C4A                                     u1188 07D0  
                                   u1189 07E4                                     u1278 0BF0  
                                   u1279 0C04                                     u1471 08BC  
                                   u1288 105E                                     u1707 0630  
                                   u1717 064C                                     u1727 0666  
                                   u1737 0680                                     u1747 069A  
                                   u1691 061C                                     u1757 06B4  
                                   u1767 06CE                                     u1777 06EC  
                                   u1787 0A58                                     u1797 1026  
                   ?_do_I2C_SEND_RESTART 0026                                     _WPUB 000F61  
                          _EUSART1_Write 0DC2        __size_of_do_I2C_SEND_RESTART_READ 000E  
                   __end_ofi2_returnStop 1236                ?_do_I2C_SEND_RESTART_READ 0026  
                                   _main 0606                __size_of_do_I2C_SEND_STOP 000E  
                 __size_of_do_I2C_DO_ACK 000E                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   fsr0l 000FE9                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                                   btemp 004B                            __CFG_BORV$190 000000  
                  ?_do_I2C_SEND_ADR_READ 0026                                     prodh 000FF4  
                                   prodl 000FF3          ??_i2c1_driver_clearBusCollision 0026  
                                   start 0102                            __CFG_IESO$OFF 000000  
                          _i2c_setBuffer 0F28                          __end_of_i2c_ISR 0C0A  
                           ___param_bank 000000                 ??_do_I2C_DO_NACK_RESTART 003A  
              __size_of_mssp1_disableIRQ 0004                             _do_I2C_RESET 0FB4  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 10B0  
               __end_of_i2c1_driver_open 0F72                                    ?_main 0026  
               __end_of_i2c1_driver_stop 120E               __end_of_i2c1_driver_TXData 119C  
                         __CFG_DEBUG$OFF 000000                                    i2l201 0B1A  
                                  i2l202 0B22                  __size_ofi2_do_I2C_RESET 0010  
                                  i2l321 0E86                                    i2l161 0D4A  
                                  i2l209 0D04                                    i2l322 0E82  
                                  i2l162 0D3E                                    i2l170 08E2  
                                  i2l171 08D0                                    i2l180 094A  
                                  i2l165 0D44                                    i2l173 08D6  
                                  i2l174 08DC                                    i2l327 0E92  
                                  i2l191 0A04                                    i2l328 0EB2  
                                  i2l169 091C                                    i2l185 09FA  
                                  i2l188 0A0A                                    i2l189 09FE  
                                  i2l197 0B28                                    i2l198 0B14  
                                  i2l571 0098                                    i2l567 006C  
                                  i2l569 0082                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 0E5C                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                            i2c_open@ret 003C                            __CFG_WRTB$OFF 000000  
                  __end_ofi2_returnReset 1232                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                   __end_ofi2_mssp1_setIRQ 1226  
                         __CFG_EBTRB$OFF 000000               __end_of_i2c1_driver_isNACK 0FE0  
                      write_register@reg 0040                       __size_ofi2_i2c_ISR 0048  
             ?_do_I2C_SEND_RESTART_WRITE 0026                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 1146                    ??_do_I2C_SEND_RESTART 003A  
                          i2returnStop@p 0026   __end_of_i2c1_driver_setBusCollisionISR 1178  
__size_of_i2c1_driver_setBusCollisionISR 000A           _i2c1_driver_setBusCollisionISR 116E  
                         ?_EUSART1_Write 0026                                    pclath 000FFA  
                                  tablat 000FF5                  __size_of_mssp1_clearIRQ 0004  
                                  plusw0 000FEB                                    plusw2 000FDB  
                 ?_do_I2C_SEND_ADR_WRITE 0026                                    status 000FD8  
                                  wtemp6 004C                           __CFG_HFOFST$ON 000000  
        __size_ofi2_i2c1_driver_sendNACK 0006                           ?_i2c_setBuffer 003A  
                         __CFG_PBADEN$ON 000000          __size_ofi2_i2c1_driver_resetBus 0002  
                          _fsmStateTable 0092                          __initialization 0D7C  
                             _i2c_poller 0F42                               _i2c_status 00B6  
             __end_of_EUSART1_Initialize 0CA4                             __end_of_main 0704  
                          i2_do_I2C_IDLE 113A                            i2_do_I2C_RCEN 112E  
                       __end_of_i2c_open 079E              ?_INTERRUPT_InterruptManager 0026  
                       i2_mssp1_clearIRQ 121E         __end_ofi2_do_I2C_DO_ADDRESS_NACK 0D7C  
                          _do_I2C_DO_ACK 10DA                                   ??_main 00E1  
                          _do_I2C_TX$315 003B            __size_of_i2c1_driver_sendNACK 0006  
                          __activetblptr 000002                             i2c_close@ret 003A  
                    _i2c_masterAccelRead 10B0                    ?_EUSART1_Transmit_ISR 0026  
          __size_of_i2c1_driver_resetBus 0002                  ?_do_I2C_DO_ADDRESS_NACK 0026  
                        ?i2_mssp1_setIRQ 0026       __end_ofi2_do_I2C_SEND_RESTART_READ 11D4  
             i2_do_I2C_SEND_RESTART_READ 11CC                         ??_read_xyzvalues 0046  
                                 _ANSELA 000F38                                   ?_putch 0026  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
               __size_ofi2_do_I2C_DO_ACK 0008                         ??_write_register 0040  
                         __CFG_WDTEN$OFF 000000                                   _RCREG1 000FAE  
                                 _RCSTA1 000FAB                       __size_of_i2c_close 001E  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                i2_do_I2C_SEND_ADR_WRITE 1062                   ??_do_I2C_SEND_ADR_READ 003A  
          __size_ofi2_do_I2C_TX_REGISTER 000E                                ??_i2c_ISR 003D  
                                 _TXREG1 000FAD                                   _TXSTA1 000FAC  
                   ?_i2c_masterAccelRead 0026             i2c_masterOperation@operation 003D  
                ??i2_do_I2C_SEND_RESTART 0026              ?i2_do_I2C_SEND_INITIAL_READ 0026  
               _do_I2C_SEND_INITIAL_READ 0F88                           __CFG_XINST$OFF 000000  
       __size_ofi2_i2c1_driver_getRXData 0004                    _i2c1_driver_getRXData 1202  
                     i2_i2c1_driver_stop 1236                      _do_I2C_RX$intlevel0 095C  
      __size_of_ACCELEROMETER_Initialize 006C              __end_of_do_I2C_DO_NACK_STOP 10DA  
              ?_ACCELEROMETER_Initialize 0026                           ?i2_do_I2C_IDLE 0026  
                        _i2c_masterWrite 118C                           ?i2_do_I2C_RCEN 0026  
  __end_of_i2c1_driver_clearBusCollision 1242   __size_of_i2c1_driver_clearBusCollision 0004  
          _i2c1_driver_clearBusCollision 123E                           __CFG_STVREN$ON 000000  
                      __end_ofi2_i2c_ISR 0D34          __size_of_do_I2C_DO_NACK_RESTART 000E  
                     write_register@data 003F                           i2returnReset@p 0026  
                                 clear_0 0DA2                                   clear_1 0DAE  
                         ?_do_I2C_DO_ACK 0026                                   _printf 0EB6  
                    ?i2_i2c1_driver_stop 0026                   i2_i2c1_driver_sendNACK 11E8  
                 i2c1_driver_setI2cISR@f 003A              __end_of_i2c1_driver_sendACK 11E8  
         __end_of_do_I2C_DO_ADDRESS_NACK 0C58                   i2_i2c1_driver_resetBus 1244  
                           __mediumconst 0000     __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008  
            __end_of_i2c1_driver_restart 1212                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                           ?_returnReset 003A            _do_I2C_DO_NACK_STOP$intlevel0 10D2  
                  _i2c1_driver_setI2cISR 1164              __end_of_i2c1_driver_startRX 120A  
                        ??_EUSART1_Write 003A                    __size_ofi2_returnStop 0004  
                        _eusart1RxBuffer 0001     EUSART1_SetTxInterruptHandler@handler 003A  
         __size_ofi2_do_I2C_DO_NACK_STOP 0008            __size_of_INTERRUPT_Initialize 0004  
          __end_ofi2_do_I2C_DO_NACK_STOP 11AC                          _eusart1TxBuffer 0009  
                      _SYSTEM_Initialize 100A                               __accesstop 0060  
                   ??i2_i2c1_driver_stop 0026                  __end_of__initialization 0DB4  
                        ??_i2c_setBuffer 003E           _do_I2C_SEND_ADR_READ$intlevel0 0FA4  
                       _do_I2C_SEND_STOP 10E8                       __size_of_do_I2C_RX 007A  
                     _do_I2C_TX_REGISTER 0FF6                       __size_of_do_I2C_TX 0096  
                 __size_of_read_register 002E                       ?_SYSTEM_Initialize 0026  
                  ??_i2c_masterAccelRead 003F                            ___rparam_used 000001  
             __end_of_mssp1_IRQisEnabled 1062                      _i2c_masterOperation 0CA4  
               __size_of_do_I2C_TX_EMPTY 005E           __size_ofi2_i2c1_driver_sendACK 0006  
             __end_of_mssp1_waitForEvent 102E            __end_ofi2_i2c1_driver_sendACK 11F4  
                            ?_i2c_poller 0026                           __pcstackCOMRAM 0026  
                    ?_do_I2C_TX_REGISTER 0026                      _do_I2C_TX$intlevel0 07A4  
                           __pidataBANK0 0B66                      ??_SYSTEM_Initialize 003C  
         __size_ofi2_i2c1_driver_restart 0004            __end_ofi2_i2c1_driver_restart 123E  
                       _mssp1_disableIRQ 1216           __size_ofi2_i2c1_driver_startRX 0004  
          __end_ofi2_i2c1_driver_startRX 122E                            __end_of_putch 1150  
                      __end_of_i2c_close 0F28                             i2_returnStop 1232  
                         i2_do_I2C_RESET 1092                   ??_EUSART1_Transmit_ISR 0026  
                   ?_i2c_masterOperation 0026                 i2_do_I2C_DO_ADDRESS_NACK 0D34  
            __end_of_EUSART1_Receive_ISR 0EB6                     ??_do_I2C_TX_REGISTER 003B  
                           ?i2_do_I2C_RX 0026                             ?i2_do_I2C_TX 0026  
      __size_ofi2_do_I2C_DO_NACK_RESTART 0008                ?i2_do_I2C_DO_NACK_RESTART 0026  
                 _do_I2C_DO_NACK_RESTART 10BE                __end_of_SYSTEM_Initialize 101C  
              ??i2_do_I2C_SEND_ADR_WRITE 0026                                  ??_putch 003B  
                          _eusart1RxHead 001A               __end_ofi2_do_I2C_SEND_STOP 11BC  
                          _eusart1TxHead 001C                            _eusart1RxTail 0019  
                         _mssp1_clearIRQ 121A                               __pbssBANK0 00B6  
                          _eusart1TxTail 001B        _EUSART1_TxDefaultInterruptHandler 0048  
        ??_EUSART1_SetRxInterruptHandler 003C            __size_ofi2_i2c1_driver_TXData 0008  
                        __CFG_PLLCFG$OFF 000000                                ?_i2c_open 0026  
                             __pnvCOMRAM 0046                  __end_of_i2c_masterWrite 1194  
                 ?_i2c1_driver_getRXData 0026                        ??i2_do_I2C_DO_ACK 0026  
          __size_ofi2_i2c1_driver_isNACK 0016                    _do_I2C_IDLE$intlevel0 1046  
                      i2_do_I2C_TX_EMPTY 0B0E                          ??i2_do_I2C_IDLE 0026  
           __size_of_i2c_busCollisionISR 0006                          ??i2_do_I2C_RCEN 0026  
                     __CFG_CCP2MX$PORTC1 000000                            ??_do_I2C_IDLE 003A  
                          ??_do_I2C_RCEN 003A                       ?i2_do_I2C_TX_EMPTY 0026  
                     __CFG_CCP3MX$PORTB5 000000                          ??_do_I2C_DO_ACK 003A  
                 __end_ofi2_do_I2C_RESET 10A2                      i2c_setBuffer@buffer 003A  
                                ?_printf 003C                            _read_register 0E2E  
         ?_i2c1_driver_clearBusCollision 0026                      ??i2_do_I2C_TX_EMPTY 0026  
                  ??_i2c_masterOperation 003D                        ?_i2c1_driver_open 0026  
                      __end_of_do_I2C_RX 09D0                        __end_of_do_I2C_TX 0834  
               ??i2_do_I2C_SEND_ADR_READ 0026                        ?_i2c1_driver_stop 0026  
                 ?_i2c1_driver_setI2cISR 003A                       ??_i2c1_driver_open 003A  
                     ??_i2c1_driver_stop 003A                                  _OSCCON2 000FD2  
                          ?_mssp1_setIRQ 0026                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9                   __end_of_mssp1_clearIRQ 121E  
                                _SSP1MSK 000FCA      __size_ofi2_do_I2C_SEND_INITIAL_READ 0010  
                    __size_of_i2c_poller 001A                  ??_do_I2C_SEND_ADR_WRITE 003B  
    _do_I2C_SEND_RESTART_WRITE$intlevel0 110A              ??_do_I2C_SEND_RESTART_WRITE 003A  
                     _i2c1_driver_TXData 1194                               ??_i2c_open 003C  
               __end_ofi2_mssp1_clearIRQ 1222                       _i2c1_driver_i2cISR 0011  
                                _i2c_ISR 0BBC                __end_ofi2_do_I2C_TX_EMPTY 0B66  
                i2_i2c1_driver_getRXData 1226                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                    _returnReset$intlevel0 117E  
                  _do_I2C_RCEN$intlevel0 1034                       _i2c1_driver_isNACK 0FCA  
                    ?_i2c1_driver_TXData 0026                                  __Lparam 0000  
       _do_I2C_DO_ADDRESS_NACK$intlevel0 0C10                             __psmallconst 0600  
                      ??_do_I2C_TX_EMPTY 003A                      ?_i2c1_driver_isNACK 0026  
                        ?i2_do_I2C_RESET 0026                                  __pcinit 0D7C  
                                __ramtop 0600                           ?_read_register 0026  
                                __ptext0 0606                                  __ptext1 0834  
                                __ptext2 0EB6                                  __ptext3 1146  
                                __ptext4 0DC2                                  __ptext5 100A  
                                __ptext6 0EE0                                  __ptext7 10A2  
                                __ptext8 11FA                                  __ptext9 0C58  
                    __end_of_do_I2C_IDLE 1052                          __size_of_printf 002A  
                    __end_of_do_I2C_RCEN 1040                         ??i2_mssp1_setIRQ 0026  
                  _OSCILLATOR_Initialize 10A2              __end_of_do_I2C_SEND_RESTART 1104  
                         ??_mssp1_setIRQ 003A                     ??_i2c1_driver_TXData 003A  
                     _EUSART1_Initialize 0C58                 ??_PIN_MANAGER_Initialize 003A  
                 i2c_masterOperation@ret 003E                          ?_mssp1_clearIRQ 0026  
             _do_I2C_SEND_STOP$intlevel0 10EE              ?i2_do_I2C_SEND_RESTART_READ 0026  
               _do_I2C_SEND_RESTART_READ 1112               __size_of_SYSTEM_Initialize 0012  
                   __size_of_returnReset 000A                     end_of_initialization 0DB4  
             ??_do_I2C_SEND_INITIAL_READ 003B         __end_of_ACCELEROMETER_Initialize 0AB0  
                   ??_i2c1_driver_isNACK 003A                      ?_EUSART1_Initialize 0026  
           __end_of_i2c1_driver_sendNACK 11E2                            __Lmediumconst 0000  
                       ?_i2c_masterWrite 0026             __end_of_i2c1_driver_resetBus 1244  
  __end_of_EUSART1_SetRxInterruptHandler 1164   __size_of_EUSART1_SetRxInterruptHandler 000A  
          _EUSART1_SetRxInterruptHandler 115A           __size_ofi2_do_I2C_SEND_RESTART 0008  
                                printf@c 0040                                  printf@f 003C  
          __end_ofi2_do_I2C_SEND_RESTART 11C4                                  postdec1 000FE5  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __size_ofi2_returnReset 0004             ?i2_do_I2C_SEND_RESTART_WRITE 0026  
              _do_I2C_SEND_RESTART_WRITE 1104                  ?i2_i2c1_driver_sendNACK 0026  
                   ??_EUSART1_Initialize 003C             __end_ofi2_do_I2C_TX_REGISTER 112E  
                ?i2_i2c1_driver_resetBus 0026                               _returnStop 1182  
               __end_of_do_I2C_SEND_STOP 10F6                                i2_i2c_ISR 0CEC  
        __size_ofi2_do_I2C_SEND_ADR_READ 0010                 read_xyzvalues@readbuffer 001D  
                            returnStop@p 003A                      EUSART1_Write@txData 003A  
               __end_of_mssp1_disableIRQ 121A                     __size_ofi2_do_I2C_RX 0074  
                   __size_ofi2_do_I2C_TX 0090                ??i2_i2c1_driver_getRXData 0026  
             __size_ofi2_do_I2C_TX_EMPTY 0058            __size_of_do_I2C_SEND_ADR_READ 0016  
                           ??_i2c_poller 003D           __end_ofi2_i2c1_driver_sendNACK 11EE  
                            _do_I2C_IDLE 1040                              _do_I2C_RCEN 102E  
           __end_of_INTERRUPT_Initialize 11FE                          ??_read_register 0040  
         __end_ofi2_i2c1_driver_resetBus 1246                      read_register@status 0016  
             ??i2_do_I2C_DO_ADDRESS_NACK 0026         __end_ofi2_do_I2C_DO_NACK_RESTART 11A4  
          ??i2_do_I2C_SEND_RESTART_WRITE 0026                       _mssp1_IRQisEnabled 1052  
                 ?_OSCILLATOR_Initialize 0026                               ?i2_i2c_ISR 0026  
           __size_of_do_I2C_DO_NACK_STOP 000E                 read_xyzvalues@sensorData 00DB  
                         __end_of_printf 0EE0                       _mssp1_waitForEvent 101C  
                ?_do_I2C_DO_NACK_RESTART 0026                      start_initialization 0D7C  
                              _i2c_close 0F0A                      _i2c_busCollisionISR 11F4  
        __size_of_PIN_MANAGER_Initialize 002A                      ?_mssp1_IRQisEnabled 0026  
                        i2_do_I2C_DO_ACK 11AC                            i2_returnReset 122E  
                        i2_do_I2C_TX$315 0026                      ?_mssp1_waitForEvent 003A  
            __end_of_i2c_masterAccelRead 10BE                              putch@txData 003B  
                     __end_of_i2c_poller 0F5C             __size_of_i2c1_driver_sendACK 0006  
                  __end_of_EUSART1_Write 0DFC                          i2c_open@address 003D  
                i2c_setBuffer@bufferSize 003C                  ??_i2c1_driver_getRXData 003A  
           __size_of_i2c1_driver_restart 0004              __size_ofi2_i2c1_driver_stop 0004  
           __size_of_i2c1_driver_startRX 0004                    i2_do_I2C_DO_NACK_STOP 11A4  
                 i2_do_I2C_SEND_ADR_READ 1082                    __end_of_i2c_setBuffer 0F42  
               _ACCELEROMETER_Initialize 0A44                        __size_of_i2c_open 009A  
                   ?_i2c_busCollisionISR 0026                     __end_of_mssp1_setIRQ 1202  
                   ??_mssp1_IRQisEnabled 003A                  __size_of_read_xyzvalues 0092  
                   read_xyzvalues@status 0015                  __size_of_write_register 0032  
                     i2_do_I2C_SEND_STOP 11B4                     ??_mssp1_waitForEvent 003C  
         ?_EUSART1_SetRxInterruptHandler 003A                    i2_i2c1_driver_sendACK 11EE  
                          ?_do_I2C_RESET 0026             __end_ofi2_i2c1_driver_TXData 11DC  
                            __pdataBANK0 0060                    i2i2c1_driver_TXData@d 0026  
              _do_I2C_TX_EMPTY$intlevel0 0AB6      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 123A                              ?_returnStop 003A  
                               ??_printf 003E                      ?i2_do_I2C_SEND_STOP 0026  
                ??_i2c1_driver_setI2cISR 003C                    i2_i2c1_driver_startRX 122A  
         __end_of_do_I2C_DO_NACK_RESTART 10CC                           _eusart1RxCount 0018  
                   _i2c1_driver_sendNACK 11DC             __end_ofi2_i2c1_driver_isNACK 0FF6  
                            __pbssCOMRAM 0001        _EUSART1_RxDefaultInterruptHandler 0046  
                             ?_i2c_close 0026                     _i2c1_driver_resetBus 1242  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 00DB  
                         ?i2_returnReset 0026                                _do_I2C_RX 0956  
                              _do_I2C_TX 079E              __size_of_do_I2C_TX_REGISTER 0014  
       __end_of_do_I2C_SEND_INITIAL_READ 0F9E           __size_of_do_I2C_SEND_ADR_WRITE 0016  
        ??_EUSART1_SetTxInterruptHandler 003C            __end_of_do_I2C_SEND_ADR_WRITE 0F88  
           __size_of_EUSART1_Receive_ISR 002C                     ??i2_do_I2C_SEND_STOP 0026  
              __size_of_i2c1_driver_open 0016                        ?i2_mssp1_clearIRQ 0026  
                   i2_do_I2C_TX_REGISTER 1120                __size_of_i2c1_driver_stop 0004  
                               ?_i2c_ISR 0026          _do_I2C_SEND_ADR_WRITE$intlevel0 0F78  
                        _do_I2C_TX_EMPTY 0AB0                       ??i2_mssp1_clearIRQ 0026  
                  ??_i2c_busCollisionISR 0026                   _PIN_MANAGER_Initialize 0EE0  
                       ??i2_do_I2C_RESET 0026                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 1146                    __end_ofi2_do_I2C_RCEN 113A  
                         ??_do_I2C_RESET 003A              __end_of_i2c_masterOperation 0CEC  
               ??_do_I2C_DO_ADDRESS_NACK 003A              _i2c1_driver_busCollisionISR 0013  
                  __end_of_do_I2C_DO_ACK 10E8             ??_INTERRUPT_InterruptManager 0028  
                       __CFG_PRICLKEN$ON 000000               ??_do_I2C_SEND_RESTART_READ 003A  
                  ?_i2c1_driver_sendNACK 0026                              ??i2_i2c_ISR 0028  
                __end_ofi2_do_I2C_DO_ACK 11B4                         ??_mssp1_clearIRQ 003A  
                            __smallconst 0600                                 _BAUDCON1 000FB8  
               i2_do_I2C_DO_NACK_RESTART 119C                    ?_i2c1_driver_resetBus 0026  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0026  
                             ?_do_I2C_RX 0026                               ?_do_I2C_TX 0026  
                      _i2c1_driver_start 1212               read_register@receivebuffer 0025  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 11FA  
                      _i2c_ISR$intlevel0 0BC2                       ?_i2c1_driver_start 0026  
                 ?i2_do_I2C_DO_NACK_STOP 0026                    ?i2_do_I2C_TX_REGISTER 0026  
                    __size_of_returnStop 000A                                 _PIE1bits 000F9D  
                               _PIE2bits 000FA0       _do_I2C_SEND_INITIAL_READ$intlevel0 0F8E  
                    ??_i2c1_driver_start 003A                                 i2u141_48 08F2  
                               i2u141_49 0906      __size_of_INTERRUPT_InterruptManager 00FA  
                               i2u151_48 0D1A                                 i2u151_49 0D2E  
                               i2u144_48 0A1A                                 i2u144_49 0A2E  
                               i2u145_48 0B38                                 i2u145_49 0B4C  
                               i2u162_48 008C                                 i2u139_48 0D5A  
                               i2u139_49 0D6E                                 i2u156_48 0060  
                               i2u165_48 00A2                                 i2u165_49 00B6  
                               i2u159_48 0076                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1             ??i2_do_I2C_SEND_INITIAL_READ 0026  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                 ?i2_i2c1_driver_sendACK 0026                                 _SSP1CON1 000FC6  
                               _SSP1CON2 000FC5                                 _SSP1STAT 000FC7  
                 ?i2_i2c1_driver_restart 0026                   ?i2_i2c1_driver_startRX 0026  
                      ?_do_I2C_SEND_STOP 0026                          ??i2_returnReset 0028  
                            ??_i2c_close 003A                __end_of_i2c1_driver_start 1216  
                          ??_returnReset 003C                       ??_do_I2C_SEND_STOP 003A  
            __size_of_i2c1_driver_TXData 0008        __end_of_do_I2C_SEND_RESTART_WRITE 1112  
                __end_of_do_I2C_TX_EMPTY 0B0E                              _INTCON2bits 000FF1  
                              copy_data0 0D90                    ?_INTERRUPT_Initialize 0026  
                      ?_mssp1_disableIRQ 0026             __size_of_do_I2C_SEND_RESTART 000E  
            __size_of_i2c1_driver_isNACK 0016                     i2_i2c1_driver_TXData 11D4  
                _do_I2C_DO_ACK$intlevel0 10E0                                 _i2c_open 0704  
                  __size_of_mssp1_setIRQ 0004                       ??_mssp1_disableIRQ 003A  
                    _do_I2C_DO_NACK_STOP 10CC                         __size_of_i2c_ISR 004E  
  __end_of_EUSART1_SetTxInterruptHandler 115A   __size_of_EUSART1_SetTxInterruptHandler 000A  
          _EUSART1_SetTxInterruptHandler 1150                                 __Hrparam 0000  
                   i2_i2c1_driver_isNACK 0FE0                           _read_xyzvalues 0834  
                         _write_register 0DFC                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                             ?_do_I2C_IDLE 0026  
                           ?_do_I2C_RCEN 0026                        __CFG_P2BMX$PORTB5 000000  
      __size_of_do_I2C_SEND_INITIAL_READ 0016                  ??_OSCILLATOR_Initialize 003A  
              ?_do_I2C_SEND_INITIAL_READ 0026                      _i2c1_driver_sendACK 11E2  
               __size_of_i2c_masterWrite 0008                    i2_do_I2C_SEND_RESTART 11BC  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                      i2c1_driver_TXData@d 003A  
            __size_of_EUSART1_Initialize 004C                   ??_i2c1_driver_sendNACK 003A  
        __end_ofi2_do_I2C_SEND_ADR_WRITE 1072         ??_i2c1_driver_setBusCollisionISR 003C  
        ?_i2c1_driver_setBusCollisionISR 003A                         read_register@reg 0040  
     _do_I2C_SEND_RESTART_READ$intlevel0 1118                      _i2c1_driver_restart 120E  
                          ?i2_returnStop 0026                     ?_do_I2C_DO_NACK_STOP 0026  
                    _i2c1_driver_startRX 1206             __end_of_do_I2C_SEND_ADR_READ 0FB4  
                 ??_i2c1_driver_resetBus 003A                         ?i2_do_I2C_DO_ACK 0026  
                          ??i2_do_I2C_RX 0026                            ??i2_do_I2C_TX 0026  
                           _mssp1_setIRQ 11FE                              ??_do_I2C_RX 003A  
                            ??_do_I2C_TX 003B                                 __ptext10 1150  
                               __ptext11 115A                                 __ptext20 0F5C  
                               __ptext12 0A44                                 __ptext21 10B0  
                               __ptext13 0DFC                                 __ptext30 0C0A  
                               __ptext22 0CA4                                 __ptext14 118C  
                               __ptext31 10BE                                 __ptext23 1052  
                               __ptext15 0E2E                                 __ptext40 1104  
                               __ptext32 10CC                                 __ptext24 0F42  
                               __ptext16 0F28                                 __ptext41 1112  
                               __ptext33 10DA                                 __ptext25 101C  
                               __ptext17 0704                                 __ptext50 1242  
                               __ptext42 1040                                 __ptext34 102E  
                               __ptext26 0BBC                                 __ptext18 1164  
                               __ptext51 1206                                 __ptext43 0FB4  
                               __ptext35 0F72                                 __ptext27 0AB0  
                               __ptext19 116E                                 __ptext60 121A  
                               __ptext52 1178                                 __ptext44 0FF6  
                               __ptext36 0F88                                 __ptext28 0956  
                               __ptext53 1182                                 __ptext45 11FE  
                               __ptext37 0F9E                                 __ptext29 079E  
                               __ptext70 11AC                                 __ptext62 0CEC  
                               __ptext54 120A                                 __ptext46 0FCA  
                               __ptext38 10E8                                 __ptext71 112E  
                               __ptext63 121E                                 __ptext55 120E  
                               __ptext47 1194                                 __ptext39 10F6  
                               __ptext80 1092                                 __ptext72 1062  
                               __ptext64 0B0E                                 __ptext56 11E2  
                               __ptext48 1202                                 __ptext81 1120  
                               __ptext73 1072                                 __ptext65 09D0  
                               __ptext57 1212                                 __ptext49 11DC  
                               __ptext90 1232                                 __ptext82 1222  
                               __ptext74 1082                                 __ptext66 08C6  
                               __ptext58 0F0A                                 __ptext91 1236  
                               __ptext83 0FE0                                 __ptext75 11B4  
                               __ptext67 0D34                                 __ptext59 1216  
                               __ptext92 123A                                 __ptext84 11D4  
                               __ptext76 11BC                                 __ptext68 119C  
                               __ptext93 11EE                                 __ptext85 1226  
                               __ptext77 11C4                                 __ptext69 11A4  
                               __ptext94 11F4                                 __ptext86 11E8  
                               __ptext78 11CC                                 __ptext95 123E  
                               __ptext87 1244                                 __ptext79 113A  
                               __ptext96 0E5C                                 __ptext88 122A  
                               __ptext97 0E8A                                 __ptext89 122E  
                               __ptext98 0000                             _SSP1CON1bits 000FC6  
             ??_ACCELEROMETER_Initialize 0041                             _SSP1CON2bits 000FC5  
                   ?_i2c1_driver_sendACK 0026                     __end_of_do_I2C_RESET 0FCA  
                 ??i2_do_I2C_TX_REGISTER 0026                    ?i2_i2c1_driver_TXData 0026  
                ?i2_do_I2C_SEND_ADR_READ 0026                  __size_ofi2_mssp1_setIRQ 0004  
                   write_register@buffer 0023                     ?_i2c1_driver_restart 0026  
                    __end_of_returnReset 1182                         _i2c1_driver_open 0F5C  
                       _i2c1_driver_stop 120A                            __size_of_main 00FE  
                   ?_i2c1_driver_startRX 0026           __size_of_i2c1_driver_getRXData 0004  
                 __end_of_read_xyzvalues 08C6                     write_register@status 0017  
          __end_of_i2c1_driver_getRXData 1206                   __end_of_write_register 0E2E  
                 i2c_masterAccelRead@reg 003F                    ?i2_i2c1_driver_isNACK 0026  
                       printString@F7170 0060                                 int$flags 004B  
   EUSART1_SetRxInterruptHandler@handler 003A       __end_of_INTERRUPT_InterruptManager 0102  
             _INTERRUPT_InterruptManager 0008                                 main@data 00E3  
                           _SSP1STATbits 000FC7                           ??i2_returnStop 0028  
       __end_of_do_I2C_SEND_RESTART_READ 1120                    __end_of_read_register 0E5C  
                           ??_returnStop 003C                      _EUSART1_Receive_ISR 0E8A  
                  ??_do_I2C_DO_NACK_STOP 003A                mssp1_waitForEvent@timeout 003A  
         __size_of_i2c1_driver_setI2cISR 000A            __end_of_i2c1_driver_setI2cISR 116E  
                             _INTCONbits 000FF2               __size_of_i2c1_driver_start 0004  
                 ??_INTERRUPT_Initialize 003A                 ?i2_i2c1_driver_getRXData 0026  
         __end_ofi2_do_I2C_SEND_ADR_READ 1092                    ??_i2c1_driver_sendACK 003A  
                       ?_do_I2C_TX_EMPTY 0026        __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048  
             __end_ofi2_i2c1_driver_stop 123A                ?i2_do_I2C_DO_ADDRESS_NACK 0026  
                 _do_I2C_DO_ADDRESS_NACK 0C0A                                 intlevel2 0000  
                 _do_I2C_RESET$intlevel0 0FBA                    ??_i2c1_driver_restart 003A  
                   ?_EUSART1_Receive_ISR 0026                    ??_i2c1_driver_startRX 003A  
                    __end_ofi2_do_I2C_RX 0A44                      __end_ofi2_do_I2C_TX 0956  
                ?_PIN_MANAGER_Initialize 0026                          ?_read_xyzvalues 0040  
                             _RCSTA1bits 000FAB                          ?_write_register 003F  
                     __end_of_returnStop 118C             __end_of_EUSART1_Transmit_ISR 0E8A  
           __size_of_i2c_masterAccelRead 000E       __end_ofi2_do_I2C_SEND_INITIAL_READ 1082  
             i2_do_I2C_SEND_INITIAL_READ 1072              __size_of_mssp1_IRQisEnabled 0010  
    __end_ofi2_do_I2C_SEND_RESTART_WRITE 11CC              i2_do_I2C_SEND_RESTART_WRITE 11C4  
                               printf@ap 003E                   ?i2_do_I2C_SEND_RESTART 0026  
             ??i2_do_I2C_DO_NACK_RESTART 0026              __size_of_mssp1_waitForEvent 0012  
         ?_EUSART1_SetTxInterruptHandler 003A                __size_ofi2_mssp1_clearIRQ 0004  
                 __size_of_EUSART1_Write 003A               __end_of_do_I2C_TX_REGISTER 100A  
                      ??_i2c_masterWrite 003F                   __size_of_i2c_setBuffer 001A  
                      __CFG_T3CMX$PORTC0 000000                              _returnReset 1178  
       _do_I2C_DO_NACK_RESTART$intlevel0 10C4                  ??i2_do_I2C_DO_NACK_STOP 0026  
                 ??i2_i2c1_driver_TXData 0026             ??i2_do_I2C_SEND_RESTART_READ 0026  
                  ??_EUSART1_Receive_ISR 0026           __end_of_PIN_MANAGER_Initialize 0F0A  
            __end_of_i2c_busCollisionISR 11FA              __size_ofi2_do_I2C_SEND_STOP 0008  
               ??i2_i2c1_driver_sendNACK 0026                        __CFG_FOSC$INTIO67 000000  
                 ??i2_i2c1_driver_isNACK 0026         __size_ofi2_do_I2C_SEND_ADR_WRITE 0010  
                  _do_I2C_SEND_ADR_WRITE 0F72                  ??i2_i2c1_driver_sendACK 0026  
                   _do_I2C_SEND_ADR_READ 0F9E                 ??i2_i2c1_driver_resetBus 0026  
                ??i2_i2c1_driver_restart 0026  
