

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 26 14:27:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,inline
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,inline
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,inline
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,inline
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,inline
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1,inline
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1,inline
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   118                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           ; Version 1.45
   121                           ; Generated 16/11/2017 GMT
   122                           ; 
   123                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution.
   137                           ; 
   138                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   139                           ;        software without specific prior written permission.
   140                           ; 
   141                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   142                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   143                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   144                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   145                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   146                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   147                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   148                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   149                           ; 
   150                           ; 
   151                           ; Code-generator required, PIC18F25K22 Definitions
   152                           ; 
   153                           ; SFR Addresses
   154  0000                     
   155                           	psect	idataBANK0
   156  000EE0                     __pidataBANK0:
   157                           	opt stack 0
   158                           
   159                           ;initializer for _fsmStateTable
   160  000EE0  3A                 	db	low _do_I2C_IDLE
   161  000EE1  10                 	db	high _do_I2C_IDLE
   162  000EE2  98                 	db	low _do_I2C_SEND_ADR_READ
   163  000EE3  0F                 	db	high _do_I2C_SEND_ADR_READ
   164  000EE4  6C                 	db	low _do_I2C_SEND_ADR_WRITE
   165  000EE5  0F                 	db	high _do_I2C_SEND_ADR_WRITE
   166  000EE6  A0                 	db	low _do_I2C_TX
   167  000EE7  06                 	db	high _do_I2C_TX
   168  000EE8  58                 	db	low _do_I2C_RX
   169  000EE9  08                 	db	high _do_I2C_RX
   170  000EEA  28                 	db	low _do_I2C_RCEN
   171  000EEB  10                 	db	high _do_I2C_RCEN
   172  000EEC  F0                 	db	low _do_I2C_TX_EMPTY
   173  000EED  0A                 	db	high _do_I2C_TX_EMPTY
   174  000EEE  0C                 	db	low _do_I2C_SEND_RESTART_READ
   175  000EEF  11                 	db	high _do_I2C_SEND_RESTART_READ
   176  000EF0  FE                 	db	low _do_I2C_SEND_RESTART_WRITE
   177  000EF1  10                 	db	high _do_I2C_SEND_RESTART_WRITE
   178  000EF2  F0                 	db	low _do_I2C_SEND_RESTART
   179  000EF3  10                 	db	high _do_I2C_SEND_RESTART
   180  000EF4  E2                 	db	low _do_I2C_SEND_STOP
   181  000EF5  10                 	db	high _do_I2C_SEND_STOP
   182  000EF6  D4                 	db	low _do_I2C_DO_ACK
   183  000EF7  10                 	db	high _do_I2C_DO_ACK
   184  000EF8  C6                 	db	low _do_I2C_DO_NACK_STOP
   185  000EF9  10                 	db	high _do_I2C_DO_NACK_STOP
   186  000EFA  B8                 	db	low _do_I2C_DO_NACK_RESTART
   187  000EFB  10                 	db	high _do_I2C_DO_NACK_RESTART
   188  000EFC  AE                 	db	low _do_I2C_RESET
   189  000EFD  0F                 	db	high _do_I2C_RESET
   190  000EFE  F4                 	db	low _do_I2C_DO_ADDRESS_NACK
   191  000EFF  0B                 	db	high _do_I2C_DO_ADDRESS_NACK
   192  000F00  82                 	db	low _do_I2C_SEND_INITIAL_READ
   193  000F01  0F                 	db	high _do_I2C_SEND_INITIAL_READ
   194  000F02  F0                 	db	low _do_I2C_TX_REGISTER
   195  000F03  0F                 	db	high _do_I2C_TX_REGISTER
   196                           
   197                           	psect	idataBANK1
   198  000DA0                     __pidataBANK1:
   199                           	opt stack 0
   200                           
   201                           ;initializer for printString@F7170
   202  000DA0  0A                 	db	10
   203  000DA1  0D                 	db	13
   204  000DA2  47                 	db	71
   205  000DA3  4F                 	db	79
   206  000DA4  54                 	db	84
   207  000DA5  20                 	db	32
   208  000DA6  48                 	db	72
   209  000DA7  45                 	db	69
   210  000DA8  52                 	db	82
   211  000DA9  45                 	db	69
   212  000DAA  2E                 	db	46
   213  000DAB  20                 	db	32
   214  000DAC  0A                 	db	10
   215  000DAD  0D                 	db	13
   216  000DAE  00                 	db	0
   217  000DAF  00                 	db	0
   218  000DB0  00                 	db	0
   219  000DB1  00                 	db	0
   220  000DB2  00                 	db	0
   221  000DB3  00                 	db	0
   222  000DB4  00                 	db	0
   223  000DB5  00                 	db	0
   224  000DB6  00                 	db	0
   225  000DB7  00                 	db	0
   226  000DB8  00                 	db	0
   227  000DB9  00                 	db	0
   228  000DBA  00                 	db	0
   229  000DBB  00                 	db	0
   230  000DBC  00                 	db	0
   231  000DBD  00                 	db	0
   232  000DBE  00                 	db	0
   233  000DBF  00                 	db	0
   234  000DC0  00                 	db	0
   235  000DC1  00                 	db	0
   236  000DC2  00                 	db	0
   237  000DC3  00                 	db	0
   238  000DC4  00                 	db	0
   239  000DC5  00                 	db	0
   240  000DC6  00                 	db	0
   241  000DC7  00                 	db	0
   242  000DC8  00                 	db	0
   243  000DC9  00                 	db	0
   244  000DCA  00                 	db	0
   245  000DCB  00                 	db	0
   246  000DCC  00                 	db	0
   247  000DCD  00                 	db	0
   248  000DCE  00                 	db	0
   249  000DCF  00                 	db	0
   250  000DD0  00                 	db	0
   251  000DD1  00                 	db	0
   252                           
   253                           	psect	nvCOMRAM
   254  000046                     __pnvCOMRAM:
   255                           	opt stack 0
   256  000046                     _EUSART1_RxDefaultInterruptHandler:
   257                           	opt stack 0
   258  000046                     	ds	2
   259  000048                     _EUSART1_TxDefaultInterruptHandler:
   260                           	opt stack 0
   261  000048                     	ds	2
   262  00004A                     _eusart1TxBufferRemaining:
   263                           	opt stack 0
   264  00004A                     	ds	1
   265  0000                     _ANSELA	set	3896
   266  0000                     _ANSELB	set	3897
   267  0000                     _ANSELC	set	3898
   268  0000                     _PIE2bits	set	4000
   269  0000                     _INTCONbits	set	4082
   270  0000                     _RCONbits	set	4048
   271  0000                     _INTCON2bits	set	4081
   272  0000                     _WPUB	set	3937
   273  0000                     _TRISC	set	3988
   274  0000                     _TRISB	set	3987
   275  0000                     _TRISA	set	3986
   276  0000                     _LATC	set	3979
   277  0000                     _LATB	set	3978
   278  0000                     _LATA	set	3977
   279  0000                     _PIR2bits	set	4001
   280  0000                     _SSP1STATbits	set	4039
   281  0000                     _SSP1MSK	set	4042
   282  0000                     _SSP1BUF	set	4041
   283  0000                     _SSP1CON2bits	set	4037
   284  0000                     _SSP1ADD	set	4040
   285  0000                     _SSP1CON2	set	4037
   286  0000                     _SSP1CON1	set	4038
   287  0000                     _SSP1STAT	set	4039
   288  0000                     _PIR1bits	set	3998
   289  0000                     _SSP1CON1bits	set	4038
   290  0000                     _OSCTUNE	set	3995
   291  0000                     _OSCCON2	set	4050
   292  0000                     _OSCCON	set	4051
   293  0000                     _RCREG1	set	4014
   294  0000                     _RCSTA1bits	set	4011
   295  0000                     _TXREG1	set	4013
   296  0000                     _TXSTA1bits	set	4012
   297  0000                     _SPBRGH1	set	4016
   298  0000                     _SPBRG1	set	4015
   299  0000                     _TXSTA1	set	4012
   300  0000                     _RCSTA1	set	4011
   301  0000                     _BAUDCON1	set	4024
   302  0000                     _PIE1bits	set	3997
   303                           
   304                           	psect	smallconst
   305  000600                     __psmallconst:
   306                           	opt stack 0
   307  000600  00                 	db	0
   308  000601                     STR_1:
   309  000601  0D                 	db	13
   310  000602  0A                 	db	10
   311  000603  00                 	db	0
   312                           
   313                           ; #config settings
   314  000604  00                 	db	0	; dummy byte at the end
   315  0000                     
   316                           	psect	cinit
   317  000A2A                     __pcinit:
   318                           	opt stack 0
   319  000A2A                     start_initialization:
   320                           	opt stack 0
   321  000A2A                     __initialization:
   322                           	opt stack 0
   323                           
   324                           ; Initialize objects allocated to BANK1 (50 bytes)
   325                           ; load TBLPTR registers with __pidataBANK1
   326  000A2A  0EA0               	movlw	low __pidataBANK1
   327  000A2C  6EF6               	movwf	tblptrl,c
   328  000A2E  0E0D               	movlw	high __pidataBANK1
   329  000A30  6EF7               	movwf	tblptrh,c
   330  000A32  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   331  000A34  6EF8               	movwf	tblptru,c
   332  000A36  EE01  F000         	lfsr	0,__pdataBANK1
   333  000A3A  EE10 F032          	lfsr	1,50
   334  000A3E                     copy_data0:
   335  000A3E  0009               	tblrd		*+
   336  000A40  CFF5 FFEE          	movff	tablat,postinc0
   337  000A44  50E5               	movf	postdec1,w,c
   338  000A46  50E1               	movf	fsr1l,w,c
   339  000A48  E1FA               	bnz	copy_data0
   340                           
   341                           ; Initialize objects allocated to BANK0 (36 bytes)
   342                           ; load TBLPTR registers with __pidataBANK0
   343  000A4A  0EE0               	movlw	low __pidataBANK0
   344  000A4C  6EF6               	movwf	tblptrl,c
   345  000A4E  0E0E               	movlw	high __pidataBANK0
   346  000A50  6EF7               	movwf	tblptrh,c
   347  000A52  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   348  000A54  6EF8               	movwf	tblptru,c
   349  000A56  EE00  F0C1         	lfsr	0,__pdataBANK0
   350  000A5A  EE10 F024          	lfsr	1,36
   351  000A5E                     copy_data1:
   352  000A5E  0009               	tblrd		*+
   353  000A60  CFF5 FFEE          	movff	tablat,postinc0
   354  000A64  50E5               	movf	postdec1,w,c
   355  000A66  50E1               	movf	fsr1l,w,c
   356  000A68  E1FA               	bnz	copy_data1
   357                           
   358                           ; Clear objects allocated to BANK0 (37 bytes)
   359  000A6A  EE00  F09C         	lfsr	0,__pbssBANK0
   360  000A6E  0E25               	movlw	37
   361  000A70                     clear_0:
   362  000A70  6AEE               	clrf	postinc0,c
   363  000A72  06E8               	decf	wreg,f,c
   364  000A74  E1FD               	bnz	clear_0
   365                           
   366                           ; Clear objects allocated to COMRAM (37 bytes)
   367  000A76  EE00  F001         	lfsr	0,__pbssCOMRAM
   368  000A7A  0E25               	movlw	37
   369  000A7C                     clear_1:
   370  000A7C  6AEE               	clrf	postinc0,c
   371  000A7E  06E8               	decf	wreg,f,c
   372  000A80  E1FD               	bnz	clear_1
   373  000A82                     end_of_initialization:
   374                           	opt stack 0
   375  000A82                     __end_of__initialization:
   376                           	opt stack 0
   377  000A82  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   378  000A84  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   379  000A86  0E00               	movlw	low (__Lmediumconst shr (0+16))
   380  000A88  6EF8               	movwf	tblptru,c
   381  000A8A  0100               	movlb	0
   382  000A8C  EF69  F004         	goto	_main	;jump to C main() function
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392                           	psect	bssCOMRAM
   393  000001                     __pbssCOMRAM:
   394                           	opt stack 0
   395  000001                     _eusart1RxBuffer:
   396                           	opt stack 0
   397  000001                     	ds	8
   398  000009                     _eusart1TxBuffer:
   399                           	opt stack 0
   400  000009                     	ds	8
   401  000011                     _i2c1_driver_i2cISR:
   402                           	opt stack 0
   403  000011                     	ds	2
   404  000013                     _i2c1_driver_busCollisionISR:
   405                           	opt stack 0
   406  000013                     	ds	2
   407  000015                     read_xyzvalues@status:
   408                           	opt stack 0
   409  000015                     	ds	1
   410  000016                     read_register@status:
   411                           	opt stack 0
   412  000016                     	ds	1
   413  000017                     write_register@status:
   414                           	opt stack 0
   415  000017                     	ds	1
   416  000018                     _eusart1RxCount:
   417                           	opt stack 0
   418  000018                     	ds	1
   419  000019                     _eusart1RxTail:
   420                           	opt stack 0
   421  000019                     	ds	1
   422  00001A                     _eusart1RxHead:
   423                           	opt stack 0
   424  00001A                     	ds	1
   425  00001B                     _eusart1TxTail:
   426                           	opt stack 0
   427  00001B                     	ds	1
   428  00001C                     _eusart1TxHead:
   429                           	opt stack 0
   430  00001C                     	ds	1
   431  00001D                     read_xyzvalues@readbuffer:
   432                           	opt stack 0
   433  00001D                     	ds	6
   434  000023                     write_register@buffer:
   435                           	opt stack 0
   436  000023                     	ds	2
   437  000025                     read_register@receivebuffer:
   438                           	opt stack 0
   439  000025                     	ds	1
   440                           tblptru	equ	0xFF8
   441                           tblptrh	equ	0xFF7
   442                           tblptrl	equ	0xFF6
   443                           tablat	equ	0xFF5
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           postdec1	equ	0xFE5
   447                           fsr1l	equ	0xFE1
   448                           
   449                           	psect	bssBANK0
   450  00009C                     __pbssBANK0:
   451                           	opt stack 0
   452  00009C                     _i2c_status:
   453                           	opt stack 0
   454  00009C                     	ds	37
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	dataBANK0
   465  0000C1                     __pdataBANK0:
   466                           	opt stack 0
   467  0000C1                     _fsmStateTable:
   468                           	opt stack 0
   469  0000C1                     	ds	36
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1l	equ	0xFE1
   478                           
   479                           	psect	dataBANK1
   480  000100                     __pdataBANK1:
   481                           	opt stack 0
   482  000100                     printString@F7170:
   483                           	opt stack 0
   484  000100                     	ds	50
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           postdec1	equ	0xFE5
   492                           fsr1l	equ	0xFE1
   493                           
   494                           	psect	cstackBANK0
   495  000060                     __pcstackBANK0:
   496                           	opt stack 0
   497  000060                     read_xyzvalues@sensorData:
   498                           	opt stack 0
   499  000060                     printString@welcome:
   500                           	opt stack 0
   501                           
   502                           ; 50 bytes @ 0x0
   503  000060                     	ds	50
   504  000092                     printString@i:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x32
   508  000092                     	ds	2
   509  000094                     ??_main:
   510                           
   511                           ; 1 bytes @ 0x34
   512  000094                     	ds	2
   513  000096                     main@data:
   514                           	opt stack 0
   515                           
   516                           ; 6 bytes @ 0x36
   517  000096                     	ds	6
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           postdec1	equ	0xFE5
   525                           fsr1l	equ	0xFE1
   526                           
   527                           	psect	cstackCOMRAM
   528  000026                     __pcstackCOMRAM:
   529                           	opt stack 0
   530  000026                     ??i2_i2c1_driver_isNACK:
   531  000026                     i2i2c1_driver_TXData@d:
   532                           	opt stack 0
   533  000026                     i2_do_I2C_TX$315:
   534                           	opt stack 0
   535  000026                     i2returnReset@p:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x0
   539  000026                     	ds	2
   540  000028                     ??_INTERRUPT_InterruptManager:
   541  000028                     
   542                           ; 1 bytes @ 0x2
   543  000028                     	ds	18
   544  00003A                     ??_mssp1_IRQisEnabled:
   545  00003A                     ??_i2c1_driver_isNACK:
   546  00003A                     i2c_close@ret:
   547                           	opt stack 0
   548  00003A                     EUSART1_Write@txData:
   549                           	opt stack 0
   550  00003A                     i2c1_driver_TXData@d:
   551                           	opt stack 0
   552  00003A                     i2c_setBuffer@buffer:
   553                           	opt stack 0
   554  00003A                     returnReset@p:
   555                           	opt stack 0
   556  00003A                     EUSART1_SetTxInterruptHandler@handler:
   557                           	opt stack 0
   558  00003A                     EUSART1_SetRxInterruptHandler@handler:
   559                           	opt stack 0
   560  00003A                     mssp1_waitForEvent@timeout:
   561                           	opt stack 0
   562  00003A                     i2c1_driver_setBusCollisionISR@f:
   563                           	opt stack 0
   564  00003A                     i2c1_driver_setI2cISR@f:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x14
   568  00003A                     	ds	1
   569  00003B                     ??_printString:
   570  00003B                     putch@txData:
   571                           	opt stack 0
   572  00003B                     _do_I2C_TX$315:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x15
   576  00003B                     	ds	1
   577  00003C                     ?_printf:
   578                           	opt stack 0
   579  00003C                     i2c_open@ret:
   580                           	opt stack 0
   581  00003C                     i2c_setBuffer@bufferSize:
   582                           	opt stack 0
   583  00003C                     printf@f:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x16
   587  00003C                     	ds	1
   588  00003D                     i2c_open@address:
   589                           	opt stack 0
   590  00003D                     i2c_masterOperation@operation:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x17
   594  00003D                     	ds	1
   595  00003E                     i2c_masterOperation@ret:
   596                           	opt stack 0
   597  00003E                     printf@ap:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x18
   601  00003E                     	ds	1
   602  00003F                     i2c_masterAccelRead@reg:
   603                           	opt stack 0
   604  00003F                     write_register@data:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x19
   608  00003F                     	ds	1
   609  000040                     ?_read_xyzvalues:
   610                           	opt stack 0
   611  000040                     write_register@reg:
   612                           	opt stack 0
   613  000040                     read_register@reg:
   614                           	opt stack 0
   615  000040                     printf@c:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x1A
   619  000040                     	ds	1
   620  000041                     ??_ACCELEROMETER_Initialize:
   621                           
   622                           ; 1 bytes @ 0x1B
   623  000041                     	ds	5
   624  000046                     tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           ; 1 bytes @ 0x20
   634 ;;
   635 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   636 ;;
   637 ;; *************** function _main *****************
   638 ;; Defined at:
   639 ;;		line 70 in file "main.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;		None
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  data            6   54[BANK0 ] struct .
   644 ;; Return value:  Size  Location     Type
   645 ;;                  1    wreg      void 
   646 ;; Registers used:
   647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   653 ;;      Params:         0       0       0       0       0       0       0
   654 ;;      Locals:         0       6       0       0       0       0       0
   655 ;;      Temps:          0       2       0       0       0       0       0
   656 ;;      Totals:         0       8       0       0       0       0       0
   657 ;;Total ram usage:        8 bytes
   658 ;; Hardware stack levels required when called:   14
   659 ;; This function calls:
   660 ;;		_ACCELEROMETER_Initialize
   661 ;;		_EUSART1_Write
   662 ;;		_SYSTEM_Initialize
   663 ;;		_printString
   664 ;;		_printf
   665 ;;		_read_xyzvalues
   666 ;; This function is called by:
   667 ;;		Startup code after reset
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           	psect	text0
   672  0008D2                     __ptext0:
   673                           	opt stack 0
   674  0008D2                     _main:
   675                           	opt stack 17
   676                           
   677                           ;main.c: 71: accelerometer_data_t data;
   678                           ;main.c: 74: SYSTEM_Initialize();
   679                           
   680                           ;incstack = 0
   681  0008D2  EC02  F008         	call	_SYSTEM_Initialize	;wreg free
   682                           
   683                           ;main.c: 77: (INTCONbits.GIE = 1);
   684  0008D6  8EF2               	bsf	intcon,7,c	;volatile
   685                           
   686                           ;main.c: 80: (INTCONbits.PEIE = 1);
   687  0008D8  8CF2               	bsf	intcon,6,c	;volatile
   688                           
   689                           ;main.c: 82: ACCELEROMETER_Initialize();
   690  0008DA  ECDF  F004         	call	_ACCELEROMETER_Initialize	;wreg free
   691                           
   692                           ;main.c: 84: printString();
   693  0008DE  EC48  F005         	call	_printString	;wreg free
   694  0008E2                     
   695                           ;main.c: 87: data = read_xyzvalues();
   696  0008E2  EC9B  F003         	call	_read_xyzvalues	;wreg free
   697  0008E6  EE20  F096         	lfsr	2,main@data
   698  0008EA  0E05               	movlw	5
   699  0008EC                     u1691:
   700  0008EC  CFEB FFDB          	movff	plusw0,plusw2
   701  0008F0  06E8               	decf	wreg,f,c
   702  0008F2  E2FC               	bc	u1691
   703                           
   704                           ;main.c: 88: _delay((unsigned long)((100)*(16000000/4000.0)));
   705  0008F4  0E03               	movlw	3
   706  0008F6  0100               	movlb	0	; () banked
   707  0008F8  6F95               	movwf	(??_main+1)& (0+255),b
   708  0008FA  0E08               	movlw	8
   709  0008FC  6F94               	movwf	??_main& (0+255),b
   710  0008FE  0E77               	movlw	119
   711  000900                     u1707:
   712  000900  2EE8               	decfsz	wreg,f,c
   713  000902  D7FE               	bra	u1707
   714  000904  2F94               	decfsz	??_main& (0+255),f,b
   715  000906  D7FC               	bra	u1707
   716  000908  2F95               	decfsz	(??_main+1)& (0+255),f,b
   717  00090A  D7FA               	bra	u1707
   718                           
   719                           ;main.c: 91: EUSART1_Write((uint8_t) (data.x >> 8) & 0xff);
   720  00090C  0100               	movlb	0	; () banked
   721  00090E  5197               	movf	(main@data+1)& (0+255),w,b
   722  000910  ECB3  F006         	call	_EUSART1_Write
   723                           
   724                           ;main.c: 92: EUSART1_Write((uint8_t) (data.x) & 0xff);
   725  000914  0100               	movlb	0	; () banked
   726  000916  5196               	movf	main@data& (0+255),w,b
   727  000918  ECB3  F006         	call	_EUSART1_Write
   728                           
   729                           ;main.c: 93: EUSART1_Write((uint8_t) (data.y >> 8) & 0xff);
   730  00091C  0100               	movlb	0	; () banked
   731  00091E  5199               	movf	(main@data+3)& (0+255),w,b
   732  000920  ECB3  F006         	call	_EUSART1_Write
   733                           
   734                           ;main.c: 94: EUSART1_Write((uint8_t) (data.y) & 0xff);
   735  000924  0100               	movlb	0	; () banked
   736  000926  5198               	movf	(main@data+2)& (0+255),w,b
   737  000928  ECB3  F006         	call	_EUSART1_Write
   738                           
   739                           ;main.c: 95: EUSART1_Write((uint8_t) (data.y >> 8) & 0xff);
   740  00092C  0100               	movlb	0	; () banked
   741  00092E  5199               	movf	(main@data+3)& (0+255),w,b
   742  000930  ECB3  F006         	call	_EUSART1_Write
   743                           
   744                           ;main.c: 96: EUSART1_Write((uint8_t) (data.y) & 0xff);
   745  000934  0100               	movlb	0	; () banked
   746  000936  5198               	movf	(main@data+2)& (0+255),w,b
   747  000938  ECB3  F006         	call	_EUSART1_Write
   748                           
   749                           ;main.c: 97: printf("\r\n");
   750  00093C  0E01               	movlw	low STR_1
   751  00093E  6E3C               	movwf	printf@f,c
   752  000940  0E06               	movlw	high STR_1
   753  000942  6E3D               	movwf	printf@f+1,c
   754  000944  EC46  F007         	call	_printf	;wreg free
   755  000948  D7CC               	goto	l613
   756  00094A                     __end_of_main:
   757                           	opt stack 0
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           intcon	equ	0xFF2
   763                           postinc0	equ	0xFEE
   764                           plusw0	equ	0xFEB
   765                           wreg	equ	0xFE8
   766                           postdec1	equ	0xFE5
   767                           fsr1l	equ	0xFE1
   768                           plusw2	equ	0xFDB
   769                           
   770 ;; *************** function _read_xyzvalues *****************
   771 ;; Defined at:
   772 ;;		line 67 in file "accelerometer.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  sensorData      6    0[BANK0 ] struct .
   777 ;; Return value:  Size  Location     Type
   778 ;;                  6   26[COMRAM] struct .
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   786 ;;      Params:         6       0       0       0       0       0       0
   787 ;;      Locals:         0       6       0       0       0       0       0
   788 ;;      Temps:          0       0       0       0       0       0       0
   789 ;;      Totals:         6       6       0       0       0       0       0
   790 ;;Total ram usage:       12 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; Hardware stack levels required when called:   12
   793 ;; This function calls:
   794 ;;		_i2c_close
   795 ;;		_i2c_masterAccelRead
   796 ;;		_i2c_open
   797 ;;		_i2c_setBuffer
   798 ;; This function is called by:
   799 ;;		_main
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text1
   804  000736                     __ptext1:
   805                           	opt stack 0
   806  000736                     _read_xyzvalues:
   807                           	opt stack 18
   808                           
   809                           ;accelerometer.c: 68: static i2c_error_t status;
   810                           ;accelerometer.c: 69: static volatile uint8_t readbuffer[6];
   811                           ;accelerometer.c: 70: accelerometer_data_t sensorData;
   812                           ;accelerometer.c: 73: i2c_open(0x1D);
   813                           
   814                           ;incstack = 0
   815  000736  0E1D               	movlw	29
   816  000738  EC03  F003         	call	_i2c_open
   817                           
   818                           ;accelerometer.c: 74: i2c_setBuffer(readbuffer, 6);
   819  00073C  0E1D               	movlw	low read_xyzvalues@readbuffer
   820  00073E  6E3A               	movwf	i2c_setBuffer@buffer,c
   821  000740  0E00               	movlw	high read_xyzvalues@readbuffer
   822  000742  6E3B               	movwf	i2c_setBuffer@buffer+1,c
   823  000744  0E00               	movlw	0
   824  000746  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
   825  000748  0E06               	movlw	6
   826  00074A  6E3C               	movwf	i2c_setBuffer@bufferSize,c
   827  00074C  EC91  F007         	call	_i2c_setBuffer	;wreg free
   828                           
   829                           ;accelerometer.c: 77: status = i2c_masterAccelRead(0x01);
   830  000750  0E01               	movlw	1
   831  000752  EC55  F008         	call	_i2c_masterAccelRead
   832  000756  6E15               	movwf	read_xyzvalues@status,c
   833                           
   834                           ;accelerometer.c: 80: status = i2c_close();
   835  000758  EC82  F007         	call	_i2c_close	;wreg free
   836  00075C  6E15               	movwf	read_xyzvalues@status,c
   837                           
   838                           ;accelerometer.c: 82: sensorData.x = readbuffer[0];
   839  00075E  C01D  F060         	movff	read_xyzvalues@readbuffer,read_xyzvalues@sensorData	;volatile
   840  000762  0100               	movlb	0	; () banked
   841  000764  6B61               	clrf	(read_xyzvalues@sensorData+1)& (0+255),b
   842                           
   843                           ; BSR set to: 0
   844                           ;accelerometer.c: 83: sensorData.x <<= 8;
   845  000766  5160               	movf	read_xyzvalues@sensorData& (0+255),w,b
   846  000768  6F61               	movwf	(read_xyzvalues@sensorData+1)& (0+255),b
   847  00076A  6B60               	clrf	read_xyzvalues@sensorData& (0+255),b
   848                           
   849                           ; BSR set to: 0
   850                           ;accelerometer.c: 84: sensorData.x |= readbuffer[1];
   851  00076C  501E               	movf	read_xyzvalues@readbuffer+1,w,c	;volatile
   852  00076E  1360               	iorwf	read_xyzvalues@sensorData& (0+255),f,b
   853                           
   854                           ; BSR set to: 0
   855                           ;accelerometer.c: 85: sensorData.x >>= 2;
   856  000770  3561               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   857  000772  3361               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   858  000774  3360               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   859  000776  3561               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   860  000778  3361               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   861  00077A  3360               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   862                           
   863                           ; BSR set to: 0
   864                           ;accelerometer.c: 87: sensorData.y = readbuffer[2];
   865  00077C  C01F  F062         	movff	read_xyzvalues@readbuffer+2,read_xyzvalues@sensorData+2	;volatile
   866  000780  6B63               	clrf	(read_xyzvalues@sensorData+3)& (0+255),b
   867                           
   868                           ; BSR set to: 0
   869                           ;accelerometer.c: 88: sensorData.y <<= 8;
   870  000782  5162               	movf	(read_xyzvalues@sensorData+2)& (0+255),w,b
   871  000784  6F63               	movwf	(read_xyzvalues@sensorData+3)& (0+255),b
   872  000786  6B62               	clrf	(read_xyzvalues@sensorData+2)& (0+255),b
   873                           
   874                           ; BSR set to: 0
   875                           ;accelerometer.c: 89: sensorData.y |= readbuffer[3];
   876  000788  5020               	movf	read_xyzvalues@readbuffer+3,w,c	;volatile
   877  00078A  1362               	iorwf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   878                           
   879                           ; BSR set to: 0
   880                           ;accelerometer.c: 90: sensorData.y >>= 2;
   881  00078C  3563               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   882  00078E  3363               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   883  000790  3362               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   884  000792  3563               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   885  000794  3363               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   886  000796  3362               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   887                           
   888                           ; BSR set to: 0
   889                           ;accelerometer.c: 92: sensorData.z = readbuffer[4];
   890  000798  C021  F064         	movff	read_xyzvalues@readbuffer+4,read_xyzvalues@sensorData+4	;volatile
   891  00079C  6B65               	clrf	(read_xyzvalues@sensorData+5)& (0+255),b
   892                           
   893                           ; BSR set to: 0
   894                           ;accelerometer.c: 93: sensorData.z <<= 8;
   895  00079E  5164               	movf	(read_xyzvalues@sensorData+4)& (0+255),w,b
   896  0007A0  6F65               	movwf	(read_xyzvalues@sensorData+5)& (0+255),b
   897  0007A2  6B64               	clrf	(read_xyzvalues@sensorData+4)& (0+255),b
   898                           
   899                           ; BSR set to: 0
   900                           ;accelerometer.c: 94: sensorData.z |= readbuffer[5];
   901  0007A4  5022               	movf	read_xyzvalues@readbuffer+5,w,c	;volatile
   902  0007A6  1364               	iorwf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   903                           
   904                           ; BSR set to: 0
   905                           ;accelerometer.c: 95: sensorData.z >>= 2;
   906  0007A8  3565               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   907  0007AA  3365               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   908  0007AC  3364               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   909  0007AE  3565               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   910  0007B0  3365               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   911  0007B2  3364               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   912                           
   913                           ; BSR set to: 0
   914                           ;accelerometer.c: 97: return sensorData;
   915  0007B4  EE20  F060         	lfsr	2,read_xyzvalues@sensorData
   916  0007B8  EE00  F040         	lfsr	0,?_read_xyzvalues
   917  0007BC  0E05               	movlw	5
   918  0007BE                     u1501:
   919  0007BE  CFDB FFEB          	movff	plusw2,plusw0
   920  0007C2  06E8               	decf	wreg,f,c
   921  0007C4  E2FC               	bc	u1501
   922  0007C6  0012               	return	
   923  0007C8                     __end_of_read_xyzvalues:
   924                           	opt stack 0
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           intcon	equ	0xFF2
   930                           postinc0	equ	0xFEE
   931                           plusw0	equ	0xFEB
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1l	equ	0xFE1
   935                           plusw2	equ	0xFDB
   936                           
   937 ;; *************** function _printf *****************
   938 ;; Defined at:
   939 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  f               2   22[COMRAM] PTR const unsigned char 
   942 ;;		 -> STR_1(3), 
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  tmpval          4    0        struct .
   945 ;;  cp              3    0        PTR const unsigned char 
   946 ;;  ap              2   24[COMRAM] PTR void [1]
   947 ;;		 -> ?_printf(2), 
   948 ;;  len             2    0        unsigned int 
   949 ;;  val             2    0        unsigned int 
   950 ;;  c               1   26[COMRAM] char 
   951 ;;  flag            1    0        unsigned char 
   952 ;;  prec            1    0        char 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  2   22[COMRAM] int 
   955 ;; Registers used:
   956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   962 ;;      Params:         2       0       0       0       0       0       0
   963 ;;      Locals:         3       0       0       0       0       0       0
   964 ;;      Temps:          0       0       0       0       0       0       0
   965 ;;      Totals:         5       0       0       0       0       0       0
   966 ;;Total ram usage:        5 bytes
   967 ;; Hardware stack levels used:    1
   968 ;; Hardware stack levels required when called:    7
   969 ;; This function calls:
   970 ;;		_putch
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text2
   977  000E8C                     __ptext2:
   978                           	opt stack 0
   979  000E8C                     _printf:
   980                           	opt stack 23
   981                           
   982                           ;doprnt.c: 466: va_list ap;
   983                           ;doprnt.c: 499: signed char c;
   984                           ;doprnt.c: 506: signed char prec;
   985                           ;doprnt.c: 508: unsigned char flag;
   986                           ;doprnt.c: 523: union {
   987                           ;doprnt.c: 524: unsigned long vd;
   988                           ;doprnt.c: 525: double integ;
   989                           ;doprnt.c: 526: } tmpval;
   990                           ;doprnt.c: 528: unsigned int val;
   991                           ;doprnt.c: 529: unsigned len;
   992                           ;doprnt.c: 530: const char * cp;
   993                           ;doprnt.c: 533: *ap = __va_start();
   994                           
   995                           ; BSR set to: 0
   996                           ;incstack = 0
   997  000E8C  0E3E               	movlw	low (?_printf+2)
   998  000E8E  6E3E               	movwf	printf@ap,c
   999  000E90  0E00               	movlw	high (?_printf+2)
  1000  000E92  6E3F               	movwf	printf@ap+1,c
  1001                           
  1002                           ;doprnt.c: 536: while(c = *f++) {
  1003  000E94  D003               	goto	l666
  1004  000E96                     
  1005                           ;doprnt.c: 540: {
  1006                           ;doprnt.c: 541: (putch(c) );
  1007  000E96  5040               	movf	printf@c,w,c
  1008  000E98  ECA0  F008         	call	_putch
  1009  000E9C                     l666:
  1010  000E9C  C03C  FFF6         	movff	printf@f,tblptrl
  1011  000EA0  C03D  FFF7         	movff	printf@f+1,tblptrh
  1012  000EA4  4A3C               	infsnz	printf@f,f,c
  1013  000EA6  2A3D               	incf	printf@f+1,f,c
  1014  000EA8                     	if	0	;tblptru may be non-zero
  1015  000EA8                     	endif
  1016  000EA8                     	if	0	;tblptru may be non-zero
  1017  000EA8                     	endif
  1018  000EA8  0008               	tblrd		*
  1019  000EAA  CFF5 F040          	movff	tablat,printf@c
  1020  000EAE  5040               	movf	printf@c,w,c
  1021  000EB0  B4D8               	btfsc	status,2,c
  1022  000EB2  0012               	return	
  1023  000EB4  D7F0               	goto	l667
  1024  000EB6                     __end_of_printf:
  1025                           	opt stack 0
  1026                           tblptru	equ	0xFF8
  1027                           tblptrh	equ	0xFF7
  1028                           tblptrl	equ	0xFF6
  1029                           tablat	equ	0xFF5
  1030                           intcon	equ	0xFF2
  1031                           postinc0	equ	0xFEE
  1032                           plusw0	equ	0xFEB
  1033                           wreg	equ	0xFE8
  1034                           postdec1	equ	0xFE5
  1035                           fsr1l	equ	0xFE1
  1036                           plusw2	equ	0xFDB
  1037                           status	equ	0xFD8
  1038                           
  1039 ;; *************** function _putch *****************
  1040 ;; Defined at:
  1041 ;;		line 178 in file "mcc_generated_files/eusart1.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  txData          1    wreg     unsigned char 
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;  txData          1   21[COMRAM] unsigned char 
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1055 ;;      Params:         0       0       0       0       0       0       0
  1056 ;;      Locals:         1       0       0       0       0       0       0
  1057 ;;      Temps:          0       0       0       0       0       0       0
  1058 ;;      Totals:         1       0       0       0       0       0       0
  1059 ;;Total ram usage:        1 bytes
  1060 ;; Hardware stack levels used:    1
  1061 ;; Hardware stack levels required when called:    6
  1062 ;; This function calls:
  1063 ;;		_EUSART1_Write
  1064 ;; This function is called by:
  1065 ;;		_printf
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           	psect	text3
  1070  001140                     __ptext3:
  1071                           	opt stack 0
  1072  001140                     _putch:
  1073                           	opt stack 23
  1074                           
  1075                           ;incstack = 0
  1076                           ;putch@txData stored from wreg
  1077  001140  6E3B               	movwf	putch@txData,c
  1078                           
  1079                           ;eusart1.c: 180: EUSART1_Write(txData);
  1080  001142  503B               	movf	putch@txData,w,c
  1081  001144  ECB3  F006         	call	_EUSART1_Write
  1082  001148  0012               	return		;funcret
  1083  00114A                     __end_of_putch:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           intcon	equ	0xFF2
  1090                           postinc0	equ	0xFEE
  1091                           plusw0	equ	0xFEB
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           plusw2	equ	0xFDB
  1096                           status	equ	0xFD8
  1097                           
  1098 ;; *************** function _printString *****************
  1099 ;; Defined at:
  1100 ;;		line 59 in file "main.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  i               2   50[BANK0 ] int 
  1105 ;;  welcome        50    0[BANK0 ] unsigned char [50]
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1115 ;;      Params:         0       0       0       0       0       0       0
  1116 ;;      Locals:         0      52       0       0       0       0       0
  1117 ;;      Temps:          2       0       0       0       0       0       0
  1118 ;;      Totals:         2      52       0       0       0       0       0
  1119 ;;Total ram usage:       54 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; Hardware stack levels required when called:    6
  1122 ;; This function calls:
  1123 ;;		_EUSART1_Write
  1124 ;; This function is called by:
  1125 ;;		_main
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text4
  1130  000A90                     __ptext4:
  1131                           	opt stack 0
  1132  000A90                     _printString:
  1133                           	opt stack 24
  1134                           
  1135                           ;main.c: 60: char welcome[50] = "\n\rGOT HERE. \n\r";
  1136                           
  1137                           ;incstack = 0
  1138  000A90  EE21  F000         	lfsr	2,printString@F7170
  1139  000A94  EE10  F060         	lfsr	1,printString@welcome
  1140  000A98  0E31               	movlw	49
  1141  000A9A                     u1461:
  1142  000A9A  CFDB FFE3          	movff	plusw2,plusw1
  1143  000A9E  06E8               	decf	wreg,f,c
  1144  000AA0  E2FC               	bc	u1461
  1145                           
  1146                           ;main.c: 61: for (int i = 0; i < 50; i++ ) {
  1147  000AA2  0E00               	movlw	0
  1148  000AA4  0100               	movlb	0	; () banked
  1149  000AA6  6F93               	movwf	(printString@i+1)& (0+255),b
  1150  000AA8  0E00               	movlw	0
  1151  000AAA  6F92               	movwf	printString@i& (0+255),b
  1152  000AAC                     l3707:
  1153                           
  1154                           ; BSR set to: 0
  1155  000AAC  BF93               	btfsc	(printString@i+1)& (0+255),7,b
  1156  000AAE  D006               	goto	l606
  1157  000AB0  5193               	movf	(printString@i+1)& (0+255),w,b
  1158  000AB2  E11D               	bnz	l608
  1159  000AB4  0E32               	movlw	50
  1160  000AB6  5D92               	subwf	printString@i& (0+255),w,b
  1161  000AB8  B0D8               	btfsc	status,0,c
  1162  000ABA  0012               	return	
  1163  000ABC                     l606:
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;main.c: 62: EUSART1_Write(welcome[i]);
  1167                           
  1168                           ; BSR set to: 0
  1169  000ABC  0E60               	movlw	low printString@welcome
  1170  000ABE  2592               	addwf	printString@i& (0+255),w,b
  1171  000AC0  6ED9               	movwf	fsr2l,c
  1172  000AC2  0E00               	movlw	high printString@welcome
  1173  000AC4  2193               	addwfc	(printString@i+1)& (0+255),w,b
  1174  000AC6  6EDA               	movwf	fsr2h,c
  1175  000AC8  50DF               	movf	indf2,w,c
  1176  000ACA  ECB3  F006         	call	_EUSART1_Write
  1177                           
  1178                           ;main.c: 63: _delay((unsigned long)((100)*(16000000/4000.0)));
  1179  000ACE  0E03               	movlw	3
  1180  000AD0  6E3C               	movwf	(??_printString+1)& (0+255),c
  1181  000AD2  0E08               	movlw	8
  1182  000AD4  6E3B               	movwf	??_printString& (0+255),c
  1183  000AD6  0E77               	movlw	119
  1184  000AD8                     u1717:
  1185  000AD8  2EE8               	decfsz	wreg,f,c
  1186  000ADA  D7FE               	bra	u1717
  1187  000ADC  2E3B               	decfsz	??_printString& (0+255),f,c
  1188  000ADE  D7FC               	bra	u1717
  1189  000AE0  2E3C               	decfsz	(??_printString+1)& (0+255),f,c
  1190  000AE2  D7FA               	bra	u1717
  1191  000AE4  F000               	nop	
  1192  000AE6  0100               	movlb	0	; () banked
  1193  000AE8  4B92               	infsnz	printString@i& (0+255),f,b
  1194  000AEA  2B93               	incf	(printString@i+1)& (0+255),f,b
  1195  000AEC  D7DF               	goto	l3707
  1196  000AEE                     l608:
  1197                           
  1198                           ; BSR set to: 0
  1199  000AEE  0012               	return		;funcret
  1200  000AF0                     __end_of_printString:
  1201                           	opt stack 0
  1202                           tblptru	equ	0xFF8
  1203                           tblptrh	equ	0xFF7
  1204                           tblptrl	equ	0xFF6
  1205                           tablat	equ	0xFF5
  1206                           intcon	equ	0xFF2
  1207                           postinc0	equ	0xFEE
  1208                           plusw0	equ	0xFEB
  1209                           wreg	equ	0xFE8
  1210                           postdec1	equ	0xFE5
  1211                           plusw1	equ	0xFE3
  1212                           fsr1l	equ	0xFE1
  1213                           indf2	equ	0xFDF
  1214                           plusw2	equ	0xFDB
  1215                           fsr2h	equ	0xFDA
  1216                           fsr2l	equ	0xFD9
  1217                           status	equ	0xFD8
  1218                           
  1219 ;; *************** function _EUSART1_Write *****************
  1220 ;; Defined at:
  1221 ;;		line 150 in file "mcc_generated_files/eusart1.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  txData          1    wreg     unsigned char 
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;  txData          1   20[COMRAM] unsigned char 
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  1    wreg      void 
  1228 ;; Registers used:
  1229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1235 ;;      Params:         0       0       0       0       0       0       0
  1236 ;;      Locals:         1       0       0       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0       0       0
  1238 ;;      Totals:         1       0       0       0       0       0       0
  1239 ;;Total ram usage:        1 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; Hardware stack levels required when called:    5
  1242 ;; This function calls:
  1243 ;;		Nothing
  1244 ;; This function is called by:
  1245 ;;		_putch
  1246 ;;		_printString
  1247 ;;		_main
  1248 ;;		_Send_UART
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text5
  1253  000D66                     __ptext5:
  1254                           	opt stack 0
  1255  000D66                     _EUSART1_Write:
  1256                           	opt stack 23
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;incstack = 0
  1260                           ;EUSART1_Write@txData stored from wreg
  1261  000D66  6E3A               	movwf	EUSART1_Write@txData,c
  1262  000D68                     
  1263                           ;eusart1.c: 153: {
  1264                           
  1265                           ;eusart1.c: 152: while(0 == eusart1TxBufferRemaining)
  1266  000D68  504A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  1267  000D6A  B4D8               	btfsc	status,2,c
  1268  000D6C  D7FD               	goto	l3521
  1269                           
  1270                           ;eusart1.c: 154: }
  1271                           ;eusart1.c: 156: if(0 == PIE1bits.TX1IE)
  1272  000D6E  B89D               	btfsc	3997,4,c	;volatile
  1273  000D70  D003               	goto	l309
  1274                           
  1275                           ;eusart1.c: 157: {
  1276                           ;eusart1.c: 158: TXREG1 = txData;
  1277  000D72  C03A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1278                           
  1279                           ;eusart1.c: 159: }
  1280  000D76  D012               	goto	l310
  1281  000D78                     l309:
  1282                           
  1283                           ;eusart1.c: 160: else
  1284                           ;eusart1.c: 161: {
  1285                           ;eusart1.c: 162: PIE1bits.TX1IE = 0;
  1286  000D78  989D               	bcf	3997,4,c	;volatile
  1287                           
  1288                           ;eusart1.c: 163: eusart1TxBuffer[eusart1TxHead++] = txData;
  1289  000D7A  501C               	movf	_eusart1TxHead,w,c	;volatile
  1290  000D7C  0D01               	mullw	1
  1291  000D7E  0E09               	movlw	low _eusart1TxBuffer
  1292  000D80  24F3               	addwf	prodl,w,c
  1293  000D82  6ED9               	movwf	fsr2l,c
  1294  000D84  0E00               	movlw	high _eusart1TxBuffer
  1295  000D86  20F4               	addwfc	prodh,w,c
  1296  000D88  6EDA               	movwf	fsr2h,c
  1297  000D8A  C03A  FFDF         	movff	EUSART1_Write@txData,indf2
  1298  000D8E  2A1C               	incf	_eusart1TxHead,f,c	;volatile
  1299                           
  1300                           ;eusart1.c: 164: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  1301  000D90  0E07               	movlw	7
  1302  000D92  641C               	cpfsgt	_eusart1TxHead,c	;volatile
  1303  000D94  D002               	goto	l311
  1304                           
  1305                           ;eusart1.c: 165: {
  1306                           ;eusart1.c: 166: eusart1TxHead = 0;
  1307  000D96  0E00               	movlw	0
  1308  000D98  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1309  000D9A                     l311:
  1310                           
  1311                           ;eusart1.c: 167: }
  1312                           ;eusart1.c: 168: eusart1TxBufferRemaining--;
  1313  000D9A  064A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1314  000D9C                     l310:
  1315                           
  1316                           ;eusart1.c: 169: }
  1317                           ;eusart1.c: 170: PIE1bits.TX1IE = 1;
  1318  000D9C  889D               	bsf	3997,4,c	;volatile
  1319  000D9E  0012               	return		;funcret
  1320  000DA0                     __end_of_EUSART1_Write:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           intcon	equ	0xFF2
  1329                           postinc0	equ	0xFEE
  1330                           plusw0	equ	0xFEB
  1331                           wreg	equ	0xFE8
  1332                           postdec1	equ	0xFE5
  1333                           plusw1	equ	0xFE3
  1334                           fsr1l	equ	0xFE1
  1335                           indf2	equ	0xFDF
  1336                           plusw2	equ	0xFDB
  1337                           fsr2h	equ	0xFDA
  1338                           fsr2l	equ	0xFD9
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _SYSTEM_Initialize *****************
  1342 ;; Defined at:
  1343 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg, status,2, status,0, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1357 ;;      Params:         0       0       0       0       0       0       0
  1358 ;;      Locals:         0       0       0       0       0       0       0
  1359 ;;      Temps:          0       0       0       0       0       0       0
  1360 ;;      Totals:         0       0       0       0       0       0       0
  1361 ;;Total ram usage:        0 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    7
  1364 ;; This function calls:
  1365 ;;		_EUSART1_Initialize
  1366 ;;		_INTERRUPT_Initialize
  1367 ;;		_OSCILLATOR_Initialize
  1368 ;;		_PIN_MANAGER_Initialize
  1369 ;; This function is called by:
  1370 ;;		_main
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text6
  1375  001004                     __ptext6:
  1376                           	opt stack 0
  1377  001004                     _SYSTEM_Initialize:
  1378                           	opt stack 23
  1379                           
  1380                           ;mcc.c: 114: INTERRUPT_Initialize();
  1381                           
  1382                           ;incstack = 0
  1383  001004  ECFA  F008         	call	_INTERRUPT_Initialize	;wreg free
  1384                           
  1385                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1386  001008  EC5B  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  1387                           
  1388                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1389  00100C  EC4E  F008         	call	_OSCILLATOR_Initialize	;wreg free
  1390                           
  1391                           ;mcc.c: 117: EUSART1_Initialize();
  1392  001010  EC21  F006         	call	_EUSART1_Initialize	;wreg free
  1393  001014  0012               	return		;funcret
  1394  001016                     __end_of_SYSTEM_Initialize:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           prodh	equ	0xFF4
  1401                           prodl	equ	0xFF3
  1402                           intcon	equ	0xFF2
  1403                           postinc0	equ	0xFEE
  1404                           plusw0	equ	0xFEB
  1405                           wreg	equ	0xFE8
  1406                           postdec1	equ	0xFE5
  1407                           plusw1	equ	0xFE3
  1408                           fsr1l	equ	0xFE1
  1409                           indf2	equ	0xFDF
  1410                           plusw2	equ	0xFDB
  1411                           fsr2h	equ	0xFDA
  1412                           fsr2l	equ	0xFD9
  1413                           status	equ	0xFD8
  1414                           
  1415 ;; *************** function _PIN_MANAGER_Initialize *****************
  1416 ;; Defined at:
  1417 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;		None
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;		None
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, status,2
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1431 ;;      Params:         0       0       0       0       0       0       0
  1432 ;;      Locals:         0       0       0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0       0       0
  1434 ;;      Totals:         0       0       0       0       0       0       0
  1435 ;;Total ram usage:        0 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:    5
  1438 ;; This function calls:
  1439 ;;		Nothing
  1440 ;; This function is called by:
  1441 ;;		_SYSTEM_Initialize
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text7
  1446  000EB6                     __ptext7:
  1447                           	opt stack 0
  1448  000EB6                     _PIN_MANAGER_Initialize:
  1449                           	opt stack 24
  1450                           
  1451                           ;pin_manager.c: 57: LATA = 0x00;
  1452                           
  1453                           ;incstack = 0
  1454  000EB6  0E00               	movlw	0
  1455  000EB8  6E89               	movwf	3977,c	;volatile
  1456                           
  1457                           ;pin_manager.c: 58: LATB = 0x00;
  1458  000EBA  0E00               	movlw	0
  1459  000EBC  6E8A               	movwf	3978,c	;volatile
  1460                           
  1461                           ;pin_manager.c: 59: LATC = 0x00;
  1462  000EBE  0E00               	movlw	0
  1463  000EC0  6E8B               	movwf	3979,c	;volatile
  1464                           
  1465                           ;pin_manager.c: 64: TRISA = 0xFF;
  1466  000EC2  6892               	setf	3986,c	;volatile
  1467                           
  1468                           ;pin_manager.c: 65: TRISB = 0xFF;
  1469  000EC4  6893               	setf	3987,c	;volatile
  1470                           
  1471                           ;pin_manager.c: 66: TRISC = 0xBF;
  1472  000EC6  0EBF               	movlw	191
  1473  000EC8  6E94               	movwf	3988,c	;volatile
  1474                           
  1475                           ;pin_manager.c: 71: ANSELC = 0x24;
  1476  000ECA  0E24               	movlw	36
  1477  000ECC  010F               	movlb	15	; () banked
  1478  000ECE  6F3A               	movwf	58,b	;volatile
  1479                           
  1480                           ;pin_manager.c: 72: ANSELB = 0x3F;
  1481  000ED0  0E3F               	movlw	63
  1482  000ED2  6F39               	movwf	57,b	;volatile
  1483                           
  1484                           ;pin_manager.c: 73: ANSELA = 0x2F;
  1485  000ED4  0E2F               	movlw	47
  1486  000ED6  6F38               	movwf	56,b	;volatile
  1487                           
  1488                           ;pin_manager.c: 78: WPUB = 0x00;
  1489  000ED8  0E00               	movlw	0
  1490  000EDA  6E61               	movwf	3937,c	;volatile
  1491                           
  1492                           ; BSR set to: 15
  1493                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  1494  000EDC  8EF1               	bsf	intcon2,7,c	;volatile
  1495                           
  1496                           ; BSR set to: 15
  1497  000EDE  0012               	return		;funcret
  1498  000EE0                     __end_of_PIN_MANAGER_Initialize:
  1499                           	opt stack 0
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           prodh	equ	0xFF4
  1505                           prodl	equ	0xFF3
  1506                           intcon	equ	0xFF2
  1507                           intcon2	equ	0xFF1
  1508                           postinc0	equ	0xFEE
  1509                           plusw0	equ	0xFEB
  1510                           wreg	equ	0xFE8
  1511                           postdec1	equ	0xFE5
  1512                           plusw1	equ	0xFE3
  1513                           fsr1l	equ	0xFE1
  1514                           indf2	equ	0xFDF
  1515                           plusw2	equ	0xFDB
  1516                           fsr2h	equ	0xFDA
  1517                           fsr2l	equ	0xFD9
  1518                           status	equ	0xFD8
  1519                           
  1520 ;; *************** function _OSCILLATOR_Initialize *****************
  1521 ;; Defined at:
  1522 ;;		line 120 in file "mcc_generated_files/mcc.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;		None
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1536 ;;      Params:         0       0       0       0       0       0       0
  1537 ;;      Locals:         0       0       0       0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0       0       0
  1539 ;;      Totals:         0       0       0       0       0       0       0
  1540 ;;Total ram usage:        0 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    5
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_SYSTEM_Initialize
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text8
  1551  00109C                     __ptext8:
  1552                           	opt stack 0
  1553  00109C                     _OSCILLATOR_Initialize:
  1554                           	opt stack 24
  1555                           
  1556                           ;mcc.c: 123: OSCCON = 0x72;
  1557                           
  1558                           ; BSR set to: 15
  1559                           ;incstack = 0
  1560  00109C  0E72               	movlw	114
  1561  00109E  6ED3               	movwf	4051,c	;volatile
  1562                           
  1563                           ;mcc.c: 125: OSCCON2 = 0x04;
  1564  0010A0  0E04               	movlw	4
  1565  0010A2  6ED2               	movwf	4050,c	;volatile
  1566                           
  1567                           ;mcc.c: 127: OSCTUNE = 0x40;
  1568  0010A4  0E40               	movlw	64
  1569  0010A6  6E9B               	movwf	3995,c	;volatile
  1570  0010A8  0012               	return		;funcret
  1571  0010AA                     __end_of_OSCILLATOR_Initialize:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           intcon2	equ	0xFF1
  1581                           postinc0	equ	0xFEE
  1582                           plusw0	equ	0xFEB
  1583                           wreg	equ	0xFE8
  1584                           postdec1	equ	0xFE5
  1585                           plusw1	equ	0xFE3
  1586                           fsr1l	equ	0xFE1
  1587                           indf2	equ	0xFDF
  1588                           plusw2	equ	0xFDB
  1589                           fsr2h	equ	0xFDA
  1590                           fsr2l	equ	0xFD9
  1591                           status	equ	0xFD8
  1592                           
  1593 ;; *************** function _INTERRUPT_Initialize *****************
  1594 ;; Defined at:
  1595 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		None
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1609 ;;      Params:         0       0       0       0       0       0       0
  1610 ;;      Locals:         0       0       0       0       0       0       0
  1611 ;;      Temps:          0       0       0       0       0       0       0
  1612 ;;      Totals:         0       0       0       0       0       0       0
  1613 ;;Total ram usage:        0 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    5
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_SYSTEM_Initialize
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text9
  1624  0011F4                     __ptext9:
  1625                           	opt stack 0
  1626  0011F4                     _INTERRUPT_Initialize:
  1627                           	opt stack 24
  1628                           
  1629                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  1630                           
  1631                           ;incstack = 0
  1632  0011F4  9ED0               	bcf	4048,7,c	;volatile
  1633  0011F6  0012               	return		;funcret
  1634  0011F8                     __end_of_INTERRUPT_Initialize:
  1635                           	opt stack 0
  1636                           tblptru	equ	0xFF8
  1637                           tblptrh	equ	0xFF7
  1638                           tblptrl	equ	0xFF6
  1639                           tablat	equ	0xFF5
  1640                           prodh	equ	0xFF4
  1641                           prodl	equ	0xFF3
  1642                           intcon	equ	0xFF2
  1643                           intcon2	equ	0xFF1
  1644                           postinc0	equ	0xFEE
  1645                           plusw0	equ	0xFEB
  1646                           wreg	equ	0xFE8
  1647                           postdec1	equ	0xFE5
  1648                           plusw1	equ	0xFE3
  1649                           fsr1l	equ	0xFE1
  1650                           indf2	equ	0xFDF
  1651                           plusw2	equ	0xFDB
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           
  1656 ;; *************** function _EUSART1_Initialize *****************
  1657 ;; Defined at:
  1658 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1672 ;;      Params:         0       0       0       0       0       0       0
  1673 ;;      Locals:         0       0       0       0       0       0       0
  1674 ;;      Temps:          0       0       0       0       0       0       0
  1675 ;;      Totals:         0       0       0       0       0       0       0
  1676 ;;Total ram usage:        0 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    6
  1679 ;; This function calls:
  1680 ;;		_EUSART1_SetRxInterruptHandler
  1681 ;;		_EUSART1_SetTxInterruptHandler
  1682 ;; This function is called by:
  1683 ;;		_SYSTEM_Initialize
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text10
  1688  000C42                     __ptext10:
  1689                           	opt stack 0
  1690  000C42                     _EUSART1_Initialize:
  1691                           	opt stack 23
  1692                           
  1693                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  1694                           
  1695                           ;incstack = 0
  1696  000C42  9A9D               	bcf	3997,5,c	;volatile
  1697                           
  1698                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  1699  000C44  989D               	bcf	3997,4,c	;volatile
  1700                           
  1701                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  1702  000C46  0E32               	movlw	low _EUSART1_Transmit_ISR
  1703  000C48  6E3A               	movwf	EUSART1_SetTxInterruptHandler@handler,c
  1704  000C4A  0E0E               	movlw	high _EUSART1_Transmit_ISR
  1705  000C4C  6E3B               	movwf	EUSART1_SetTxInterruptHandler@handler+1,c
  1706  000C4E  ECA5  F008         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  1707                           
  1708                           ;eusart1.c: 82: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  1709  000C52  0E60               	movlw	low _EUSART1_Receive_ISR
  1710  000C54  6E3A               	movwf	EUSART1_SetRxInterruptHandler@handler,c
  1711  000C56  0E0E               	movlw	high _EUSART1_Receive_ISR
  1712  000C58  6E3B               	movwf	EUSART1_SetRxInterruptHandler@handler+1,c
  1713  000C5A  ECAA  F008         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  1714                           
  1715                           ;eusart1.c: 87: BAUDCON1 = 0x08;
  1716  000C5E  0E08               	movlw	8
  1717  000C60  6EB8               	movwf	4024,c	;volatile
  1718                           
  1719                           ;eusart1.c: 90: RCSTA1 = 0x90;
  1720  000C62  0E90               	movlw	144
  1721  000C64  6EAB               	movwf	4011,c	;volatile
  1722                           
  1723                           ;eusart1.c: 93: TXSTA1 = 0x24;
  1724  000C66  0E24               	movlw	36
  1725  000C68  6EAC               	movwf	4012,c	;volatile
  1726                           
  1727                           ;eusart1.c: 96: SPBRG1 = 0x22;
  1728  000C6A  0E22               	movlw	34
  1729  000C6C  6EAF               	movwf	4015,c	;volatile
  1730                           
  1731                           ;eusart1.c: 99: SPBRGH1 = 0x00;
  1732  000C6E  0E00               	movlw	0
  1733  000C70  6EB0               	movwf	4016,c	;volatile
  1734                           
  1735                           ;eusart1.c: 103: eusart1TxHead = 0;
  1736  000C72  0E00               	movlw	0
  1737  000C74  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1738                           
  1739                           ;eusart1.c: 104: eusart1TxTail = 0;
  1740  000C76  0E00               	movlw	0
  1741  000C78  6E1B               	movwf	_eusart1TxTail,c	;volatile
  1742                           
  1743                           ;eusart1.c: 105: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1744  000C7A  0E08               	movlw	8
  1745  000C7C  6E4A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1746                           
  1747                           ;eusart1.c: 107: eusart1RxHead = 0;
  1748  000C7E  0E00               	movlw	0
  1749  000C80  6E1A               	movwf	_eusart1RxHead,c	;volatile
  1750                           
  1751                           ;eusart1.c: 108: eusart1RxTail = 0;
  1752  000C82  0E00               	movlw	0
  1753  000C84  6E19               	movwf	_eusart1RxTail,c	;volatile
  1754                           
  1755                           ;eusart1.c: 109: eusart1RxCount = 0;
  1756  000C86  0E00               	movlw	0
  1757  000C88  6E18               	movwf	_eusart1RxCount,c	;volatile
  1758                           
  1759                           ;eusart1.c: 112: PIE1bits.RC1IE = 1;
  1760  000C8A  8A9D               	bsf	3997,5,c	;volatile
  1761  000C8C  0012               	return		;funcret
  1762  000C8E                     __end_of_EUSART1_Initialize:
  1763                           	opt stack 0
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           prodh	equ	0xFF4
  1769                           prodl	equ	0xFF3
  1770                           intcon	equ	0xFF2
  1771                           intcon2	equ	0xFF1
  1772                           postinc0	equ	0xFEE
  1773                           plusw0	equ	0xFEB
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           plusw1	equ	0xFE3
  1777                           fsr1l	equ	0xFE1
  1778                           indf2	equ	0xFDF
  1779                           plusw2	equ	0xFDB
  1780                           fsr2h	equ	0xFDA
  1781                           fsr2l	equ	0xFD9
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  1785 ;; Defined at:
  1786 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1789 ;;		 -> EUSART1_Transmit_ISR(1), 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1801 ;;      Params:         2       0       0       0       0       0       0
  1802 ;;      Locals:         0       0       0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0
  1804 ;;      Totals:         2       0       0       0       0       0       0
  1805 ;;Total ram usage:        2 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    5
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_EUSART1_Initialize
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text11
  1816  00114A                     __ptext11:
  1817                           	opt stack 0
  1818  00114A                     _EUSART1_SetTxInterruptHandler:
  1819                           	opt stack 23
  1820                           
  1821                           ;eusart1.c: 223: EUSART1_TxDefaultInterruptHandler = handler;
  1822                           
  1823                           ;incstack = 0
  1824  00114A  C03A  F048         	movff	EUSART1_SetTxInterruptHandler@handler,_EUSART1_TxDefaultInterruptHandler
  1825  00114E  C03B  F049         	movff	EUSART1_SetTxInterruptHandler@handler+1,_EUSART1_TxDefaultInterruptHandler+1
  1826  001152  0012               	return		;funcret
  1827  001154                     __end_of_EUSART1_SetTxInterruptHandler:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           intcon2	equ	0xFF1
  1837                           postinc0	equ	0xFEE
  1838                           plusw0	equ	0xFEB
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           plusw1	equ	0xFE3
  1842                           fsr1l	equ	0xFE1
  1843                           indf2	equ	0xFDF
  1844                           plusw2	equ	0xFDB
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  1850 ;; Defined at:
  1851 ;;		line 226 in file "mcc_generated_files/eusart1.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1854 ;;		 -> EUSART1_Receive_ISR(1), 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, status,2, status,0
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1866 ;;      Params:         2       0       0       0       0       0       0
  1867 ;;      Locals:         0       0       0       0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0       0       0
  1869 ;;      Totals:         2       0       0       0       0       0       0
  1870 ;;Total ram usage:        2 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    5
  1873 ;; This function calls:
  1874 ;;		Nothing
  1875 ;; This function is called by:
  1876 ;;		_EUSART1_Initialize
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text12
  1881  001154                     __ptext12:
  1882                           	opt stack 0
  1883  001154                     _EUSART1_SetRxInterruptHandler:
  1884                           	opt stack 23
  1885                           
  1886                           ;eusart1.c: 227: EUSART1_RxDefaultInterruptHandler = handler;
  1887                           
  1888                           ;incstack = 0
  1889  001154  C03A  F046         	movff	EUSART1_SetRxInterruptHandler@handler,_EUSART1_RxDefaultInterruptHandler
  1890  001158  C03B  F047         	movff	EUSART1_SetRxInterruptHandler@handler+1,_EUSART1_RxDefaultInterruptHandler+1
  1891  00115C  0012               	return		;funcret
  1892  00115E                     __end_of_EUSART1_SetRxInterruptHandler:
  1893                           	opt stack 0
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           prodh	equ	0xFF4
  1899                           prodl	equ	0xFF3
  1900                           intcon	equ	0xFF2
  1901                           intcon2	equ	0xFF1
  1902                           postinc0	equ	0xFEE
  1903                           plusw0	equ	0xFEB
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           plusw1	equ	0xFE3
  1907                           fsr1l	equ	0xFE1
  1908                           indf2	equ	0xFDF
  1909                           plusw2	equ	0xFDB
  1910                           fsr2h	equ	0xFDA
  1911                           fsr2l	equ	0xFD9
  1912                           status	equ	0xFD8
  1913                           
  1914 ;; *************** function _ACCELEROMETER_Initialize *****************
  1915 ;; Defined at:
  1916 ;;		line 4 in file "accelerometer.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1930 ;;      Params:         0       0       0       0       0       0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0
  1932 ;;      Temps:          2       0       0       0       0       0       0
  1933 ;;      Totals:         2       0       0       0       0       0       0
  1934 ;;Total ram usage:        2 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:   13
  1937 ;; This function calls:
  1938 ;;		_read_register
  1939 ;;		_write_register
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text13
  1946  0009BE                     __ptext13:
  1947                           	opt stack 0
  1948  0009BE                     _ACCELEROMETER_Initialize:
  1949                           	opt stack 17
  1950                           
  1951                           ;accelerometer.c: 6: write_register(0x2B, 0x40);
  1952                           
  1953                           ;incstack = 0
  1954  0009BE  0E40               	movlw	64
  1955  0009C0  6E3F               	movwf	write_register@data,c
  1956  0009C2  0E2B               	movlw	43
  1957  0009C4  ECE9  F006         	call	_write_register
  1958                           
  1959                           ;accelerometer.c: 8: _delay((unsigned long)((100)*(16000000/4000.0)));
  1960  0009C8  0E03               	movlw	3
  1961  0009CA  6E42               	movwf	(??_ACCELEROMETER_Initialize+1)& (0+255),c
  1962  0009CC  0E08               	movlw	8
  1963  0009CE  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1964  0009D0  0E77               	movlw	119
  1965  0009D2                     u1727:
  1966  0009D2  2EE8               	decfsz	wreg,f,c
  1967  0009D4  D7FE               	bra	u1727
  1968  0009D6  2E41               	decfsz	??_ACCELEROMETER_Initialize& (0+255),f,c
  1969  0009D8  D7FC               	bra	u1727
  1970  0009DA  2E42               	decfsz	(??_ACCELEROMETER_Initialize+1)& (0+255),f,c
  1971  0009DC  D7FA               	bra	u1727
  1972  0009DE  F000               	nop	
  1973  0009E0  0E2B               	movlw	43
  1974  0009E2  EC02  F007         	call	_read_register
  1975  0009E6  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1976  0009E8  BC41               	btfsc	??_ACCELEROMETER_Initialize,6,c
  1977  0009EA  D7FA               	goto	l636
  1978                           
  1979                           ;accelerometer.c: 14: write_register(0x0E, MMA8451_RANGE_4_G);
  1980  0009EC  0E01               	movlw	1
  1981  0009EE  6E3F               	movwf	write_register@data,c
  1982  0009F0  0E0E               	movlw	14
  1983  0009F2  ECE9  F006         	call	_write_register
  1984                           
  1985                           ;accelerometer.c: 16: write_register(0x2B, 0x02);
  1986  0009F6  0E02               	movlw	2
  1987  0009F8  6E3F               	movwf	write_register@data,c
  1988  0009FA  0E2B               	movlw	43
  1989  0009FC  ECE9  F006         	call	_write_register
  1990                           
  1991                           ;accelerometer.c: 18: write_register(0x2D, 0x01);
  1992  000A00  0E01               	movlw	1
  1993  000A02  6E3F               	movwf	write_register@data,c
  1994  000A04  0E2D               	movlw	45
  1995  000A06  ECE9  F006         	call	_write_register
  1996                           
  1997                           ;accelerometer.c: 19: write_register(0x2E, 0x01);
  1998  000A0A  0E01               	movlw	1
  1999  000A0C  6E3F               	movwf	write_register@data,c
  2000  000A0E  0E2E               	movlw	46
  2001  000A10  ECE9  F006         	call	_write_register
  2002                           
  2003                           ;accelerometer.c: 22: write_register(0x11, 0x40);
  2004  000A14  0E40               	movlw	64
  2005  000A16  6E3F               	movwf	write_register@data,c
  2006  000A18  0E11               	movlw	17
  2007  000A1A  ECE9  F006         	call	_write_register
  2008                           
  2009                           ;accelerometer.c: 25: write_register(0x2A, 0x01 | 0x04);
  2010  000A1E  0E05               	movlw	5
  2011  000A20  6E3F               	movwf	write_register@data,c
  2012  000A22  0E2A               	movlw	42
  2013  000A24  ECE9  F006         	call	_write_register
  2014  000A28  0012               	return		;funcret
  2015  000A2A                     __end_of_ACCELEROMETER_Initialize:
  2016                           	opt stack 0
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           prodh	equ	0xFF4
  2022                           prodl	equ	0xFF3
  2023                           intcon	equ	0xFF2
  2024                           intcon2	equ	0xFF1
  2025                           postinc0	equ	0xFEE
  2026                           plusw0	equ	0xFEB
  2027                           wreg	equ	0xFE8
  2028                           postdec1	equ	0xFE5
  2029                           plusw1	equ	0xFE3
  2030                           fsr1l	equ	0xFE1
  2031                           indf2	equ	0xFDF
  2032                           plusw2	equ	0xFDB
  2033                           fsr2h	equ	0xFDA
  2034                           fsr2l	equ	0xFD9
  2035                           status	equ	0xFD8
  2036                           
  2037 ;; *************** function _write_register *****************
  2038 ;; Defined at:
  2039 ;;		line 29 in file "accelerometer.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  reg             1    wreg     unsigned char 
  2042 ;;  data            1   25[COMRAM] unsigned char 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  reg             1   26[COMRAM] unsigned char 
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      void 
  2047 ;; Registers used:
  2048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2054 ;;      Params:         1       0       0       0       0       0       0
  2055 ;;      Locals:         1       0       0       0       0       0       0
  2056 ;;      Temps:          0       0       0       0       0       0       0
  2057 ;;      Totals:         2       0       0       0       0       0       0
  2058 ;;Total ram usage:        2 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:   12
  2061 ;; This function calls:
  2062 ;;		_i2c_close
  2063 ;;		_i2c_masterWrite
  2064 ;;		_i2c_open
  2065 ;;		_i2c_setBuffer
  2066 ;; This function is called by:
  2067 ;;		_ACCELEROMETER_Initialize
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text14
  2072  000DD2                     __ptext14:
  2073                           	opt stack 0
  2074  000DD2                     _write_register:
  2075                           	opt stack 17
  2076                           
  2077                           ;incstack = 0
  2078                           ;write_register@reg stored from wreg
  2079  000DD2  6E40               	movwf	write_register@reg,c
  2080                           
  2081                           ;accelerometer.c: 30: static i2c_error_t status;
  2082                           ;accelerometer.c: 31: static uint8_t buffer[2];
  2083                           ;accelerometer.c: 34: buffer[0] = reg;
  2084  000DD4  C040  F023         	movff	write_register@reg,write_register@buffer
  2085                           
  2086                           ;accelerometer.c: 35: buffer[1] = data;
  2087  000DD8  C03F  F024         	movff	write_register@data,write_register@buffer+1
  2088                           
  2089                           ;accelerometer.c: 36: i2c_open(0x1D);
  2090  000DDC  0E1D               	movlw	29
  2091  000DDE  EC03  F003         	call	_i2c_open
  2092                           
  2093                           ;accelerometer.c: 37: i2c_setBuffer(buffer, 2);
  2094  000DE2  0E23               	movlw	low write_register@buffer
  2095  000DE4  6E3A               	movwf	i2c_setBuffer@buffer,c
  2096  000DE6  0E00               	movlw	high write_register@buffer
  2097  000DE8  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2098  000DEA  0E00               	movlw	0
  2099  000DEC  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2100  000DEE  0E02               	movlw	2
  2101  000DF0  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2102  000DF2  EC91  F007         	call	_i2c_setBuffer	;wreg free
  2103                           
  2104                           ;accelerometer.c: 40: status = i2c_masterWrite();
  2105  000DF6  ECC3  F008         	call	_i2c_masterWrite	;wreg free
  2106  000DFA  6E17               	movwf	write_register@status,c
  2107                           
  2108                           ;accelerometer.c: 41: status = i2c_close();
  2109  000DFC  EC82  F007         	call	_i2c_close	;wreg free
  2110  000E00  6E17               	movwf	write_register@status,c
  2111  000E02  0012               	return		;funcret
  2112  000E04                     __end_of_write_register:
  2113                           	opt stack 0
  2114                           tblptru	equ	0xFF8
  2115                           tblptrh	equ	0xFF7
  2116                           tblptrl	equ	0xFF6
  2117                           tablat	equ	0xFF5
  2118                           prodh	equ	0xFF4
  2119                           prodl	equ	0xFF3
  2120                           intcon	equ	0xFF2
  2121                           intcon2	equ	0xFF1
  2122                           postinc0	equ	0xFEE
  2123                           plusw0	equ	0xFEB
  2124                           wreg	equ	0xFE8
  2125                           postdec1	equ	0xFE5
  2126                           plusw1	equ	0xFE3
  2127                           fsr1l	equ	0xFE1
  2128                           indf2	equ	0xFDF
  2129                           plusw2	equ	0xFDB
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _i2c_masterWrite *****************
  2135 ;; Defined at:
  2136 ;;		line 264 in file "mcc_generated_files/drivers/i2c_master.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      enum E6837
  2143 ;; Registers used:
  2144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2150 ;;      Params:         0       0       0       0       0       0       0
  2151 ;;      Locals:         0       0       0       0       0       0       0
  2152 ;;      Temps:          0       0       0       0       0       0       0
  2153 ;;      Totals:         0       0       0       0       0       0       0
  2154 ;;Total ram usage:        0 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:   11
  2157 ;; This function calls:
  2158 ;;		_i2c_masterOperation
  2159 ;; This function is called by:
  2160 ;;		_write_register
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text15
  2165  001186                     __ptext15:
  2166                           	opt stack 0
  2167  001186                     _i2c_masterWrite:
  2168                           	opt stack 17
  2169                           
  2170                           ;i2c_master.c: 266: return i2c_masterOperation(OPERATIONWRITE);
  2171                           
  2172                           ;incstack = 0
  2173  001186  0E02               	movlw	2
  2174  001188  EC47  F006         	call	_i2c_masterOperation
  2175  00118C  0012               	return	
  2176  00118E                     __end_of_i2c_masterWrite:
  2177                           	opt stack 0
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           prodh	equ	0xFF4
  2183                           prodl	equ	0xFF3
  2184                           intcon	equ	0xFF2
  2185                           intcon2	equ	0xFF1
  2186                           postinc0	equ	0xFEE
  2187                           plusw0	equ	0xFEB
  2188                           wreg	equ	0xFE8
  2189                           postdec1	equ	0xFE5
  2190                           plusw1	equ	0xFE3
  2191                           fsr1l	equ	0xFE1
  2192                           indf2	equ	0xFDF
  2193                           plusw2	equ	0xFDB
  2194                           fsr2h	equ	0xFDA
  2195                           fsr2l	equ	0xFD9
  2196                           status	equ	0xFD8
  2197                           
  2198 ;; *************** function _read_register *****************
  2199 ;; Defined at:
  2200 ;;		line 46 in file "accelerometer.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  reg             1    wreg     unsigned char 
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  reg             1   26[COMRAM] unsigned char 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      unsigned char 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2214 ;;      Params:         0       0       0       0       0       0       0
  2215 ;;      Locals:         1       0       0       0       0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0
  2217 ;;      Totals:         1       0       0       0       0       0       0
  2218 ;;Total ram usage:        1 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:   12
  2221 ;; This function calls:
  2222 ;;		_i2c_close
  2223 ;;		_i2c_masterAccelRead
  2224 ;;		_i2c_open
  2225 ;;		_i2c_setBuffer
  2226 ;; This function is called by:
  2227 ;;		_ACCELEROMETER_Initialize
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text16
  2232  000E04                     __ptext16:
  2233                           	opt stack 0
  2234  000E04                     _read_register:
  2235                           	opt stack 17
  2236                           
  2237                           ;incstack = 0
  2238                           ;read_register@reg stored from wreg
  2239  000E04  6E40               	movwf	read_register@reg,c
  2240                           
  2241                           ;accelerometer.c: 47: static i2c_error_t status;
  2242                           ;accelerometer.c: 48: static volatile uint8_t receivebuffer[1];
  2243                           ;accelerometer.c: 51: i2c_open(0x1D);
  2244  000E06  0E1D               	movlw	29
  2245  000E08  EC03  F003         	call	_i2c_open
  2246                           
  2247                           ;accelerometer.c: 55: i2c_setBuffer(receivebuffer, 1);
  2248  000E0C  0E25               	movlw	low read_register@receivebuffer
  2249  000E0E  6E3A               	movwf	i2c_setBuffer@buffer,c
  2250  000E10  0E00               	movlw	high read_register@receivebuffer
  2251  000E12  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2252  000E14  0E00               	movlw	0
  2253  000E16  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2254  000E18  0E01               	movlw	1
  2255  000E1A  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2256  000E1C  EC91  F007         	call	_i2c_setBuffer	;wreg free
  2257                           
  2258                           ;accelerometer.c: 58: status = i2c_masterAccelRead(reg);
  2259  000E20  5040               	movf	read_register@reg,w,c
  2260  000E22  EC55  F008         	call	_i2c_masterAccelRead
  2261  000E26  6E16               	movwf	read_register@status,c
  2262                           
  2263                           ;accelerometer.c: 61: status = i2c_close();
  2264  000E28  EC82  F007         	call	_i2c_close	;wreg free
  2265  000E2C  6E16               	movwf	read_register@status,c
  2266                           
  2267                           ;accelerometer.c: 63: return receivebuffer[0];
  2268  000E2E  5025               	movf	read_register@receivebuffer,w,c	;volatile
  2269  000E30  0012               	return	
  2270  000E32                     __end_of_read_register:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodh	equ	0xFF4
  2277                           prodl	equ	0xFF3
  2278                           intcon	equ	0xFF2
  2279                           intcon2	equ	0xFF1
  2280                           postinc0	equ	0xFEE
  2281                           plusw0	equ	0xFEB
  2282                           wreg	equ	0xFE8
  2283                           postdec1	equ	0xFE5
  2284                           plusw1	equ	0xFE3
  2285                           fsr1l	equ	0xFE1
  2286                           indf2	equ	0xFDF
  2287                           plusw2	equ	0xFDB
  2288                           fsr2h	equ	0xFDA
  2289                           fsr2l	equ	0xFD9
  2290                           status	equ	0xFD8
  2291                           
  2292 ;; *************** function _i2c_setBuffer *****************
  2293 ;; Defined at:
  2294 ;;		line 192 in file "mcc_generated_files/drivers/i2c_master.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  buffer          2   20[COMRAM] PTR void 
  2297 ;;		 -> read_xyzvalues@readbuffer(6), read_register@receivebuffer(1), write_register@buffer(2), 
  2298 ;;  bufferSize      2   22[COMRAM] unsigned int 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;		None
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, status,2, status,0
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2310 ;;      Params:         4       0       0       0       0       0       0
  2311 ;;      Locals:         0       0       0       0       0       0       0
  2312 ;;      Temps:          0       0       0       0       0       0       0
  2313 ;;      Totals:         4       0       0       0       0       0       0
  2314 ;;Total ram usage:        4 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    5
  2317 ;; This function calls:
  2318 ;;		Nothing
  2319 ;; This function is called by:
  2320 ;;		_write_register
  2321 ;;		_read_register
  2322 ;;		_read_xyzvalues
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text17
  2327  000F22                     __ptext17:
  2328                           	opt stack 0
  2329  000F22                     _i2c_setBuffer:
  2330                           	opt stack 24
  2331                           
  2332                           ;i2c_master.c: 194: if(i2c_status.bufferFree)
  2333                           
  2334                           ;incstack = 0
  2335  000F22  0100               	movlb	0	; () banked
  2336  000F24  A59C               	btfss	_i2c_status& (0+255),2,b
  2337  000F26  0012               	return	
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;i2c_master.c: 195: {
  2341                           ;i2c_master.c: 196: i2c_status.data_ptr = buffer;
  2342  000F28  C03A  F09E         	movff	i2c_setBuffer@buffer,_i2c_status+2
  2343  000F2C  C03B  F09F         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;i2c_master.c: 197: i2c_status.data_length = bufferSize;
  2347  000F30  C03C  F0A0         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  2348  000F34  C03D  F0A1         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;i2c_master.c: 198: i2c_status.bufferFree = 0;
  2352  000F38  959C               	bcf	_i2c_status& (0+255),2,b
  2353  000F3A  0012               	return	
  2354  000F3C                     __end_of_i2c_setBuffer:
  2355                           	opt stack 0
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           intcon2	equ	0xFF1
  2364                           postinc0	equ	0xFEE
  2365                           plusw0	equ	0xFEB
  2366                           wreg	equ	0xFE8
  2367                           postdec1	equ	0xFE5
  2368                           plusw1	equ	0xFE3
  2369                           fsr1l	equ	0xFE1
  2370                           indf2	equ	0xFDF
  2371                           plusw2	equ	0xFDB
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _i2c_open *****************
  2377 ;; Defined at:
  2378 ;;		line 124 in file "mcc_generated_files/drivers/i2c_master.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  address         1    wreg     unsigned char 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  address         1   23[COMRAM] unsigned char 
  2383 ;;  ret             1   22[COMRAM] enum E6837
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      enum E6837
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2393 ;;      Params:         0       0       0       0       0       0       0
  2394 ;;      Locals:         2       0       0       0       0       0       0
  2395 ;;      Temps:          0       0       0       0       0       0       0
  2396 ;;      Totals:         2       0       0       0       0       0       0
  2397 ;;Total ram usage:        2 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    6
  2400 ;; This function calls:
  2401 ;;		_i2c1_driver_open
  2402 ;;		_i2c1_driver_setBusCollisionISR
  2403 ;;		_i2c1_driver_setI2cISR
  2404 ;;		_mssp1_clearIRQ
  2405 ;; This function is called by:
  2406 ;;		_write_register
  2407 ;;		_read_register
  2408 ;;		_read_xyzvalues
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text18
  2413  000606                     __ptext18:
  2414                           	opt stack 0
  2415  000606                     _i2c_open:
  2416                           	opt stack 23
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;incstack = 0
  2420                           ;i2c_open@address stored from wreg
  2421  000606  6E3D               	movwf	i2c_open@address,c
  2422                           
  2423                           ;i2c_master.c: 126: i2c_error_t ret = I2C_BUSY;
  2424  000608  0E01               	movlw	1
  2425  00060A  6E3C               	movwf	i2c_open@ret,c
  2426                           
  2427                           ;i2c_master.c: 128: if(!i2c_status.inUse)
  2428  00060C  0100               	movlb	0	; () banked
  2429  00060E  B39C               	btfsc	_i2c_status& (0+255),1,b
  2430  000610  0012               	return	
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;i2c_master.c: 129: {
  2434                           ;i2c_master.c: 130: i2c_status.address = address;
  2435  000612  C03D  F09D         	movff	i2c_open@address,_i2c_status+1
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;i2c_master.c: 131: i2c_status.busy = 0;
  2439  000616  919C               	bcf	_i2c_status& (0+255),0,b
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;i2c_master.c: 132: i2c_status.inUse = 1;
  2443  000618  839C               	bsf	_i2c_status& (0+255),1,b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;i2c_master.c: 133: i2c_status.addressNACKCheck = 0;
  2447  00061A  979C               	bcf	_i2c_status& (0+255),3,b
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;i2c_master.c: 134: i2c_status.state = I2C_RESET;
  2451  00061C  0E0E               	movlw	14
  2452  00061E  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;i2c_master.c: 135: i2c_status.time_out_value = 500;
  2456  000620  0E01               	movlw	1
  2457  000622  6FA5               	movwf	(_i2c_status+9)& (0+255),b
  2458  000624  0EF4               	movlw	244
  2459  000626  6FA4               	movwf	(_i2c_status+8)& (0+255),b
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;i2c_master.c: 136: i2c_status.bufferFree = 1;
  2463  000628  859C               	bsf	_i2c_status& (0+255),2,b
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  2467  00062A  0E7C               	movlw	low _returnStop
  2468  00062C  6FA8               	movwf	(_i2c_status+12)& (0+255),b
  2469  00062E  0E11               	movlw	high _returnStop
  2470  000630  6FA9               	movwf	(_i2c_status+13)& (0+255),b
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  2474  000632  0E00               	movlw	0
  2475  000634  6FB4               	movwf	(_i2c_status+24)& (0+255),b
  2476  000636  0E00               	movlw	0
  2477  000638  6FB5               	movwf	(_i2c_status+25)& (0+255),b
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;i2c_master.c: 141: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  2481  00063A  0E7C               	movlw	low _returnStop
  2482  00063C  6FAA               	movwf	(_i2c_status+14)& (0+255),b
  2483  00063E  0E11               	movlw	high _returnStop
  2484  000640  6FAB               	movwf	(_i2c_status+15)& (0+255),b
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;i2c_master.c: 142: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  2488  000642  0E00               	movlw	0
  2489  000644  6FB6               	movwf	(_i2c_status+26)& (0+255),b
  2490  000646  0E00               	movlw	0
  2491  000648  6FB7               	movwf	(_i2c_status+27)& (0+255),b
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;i2c_master.c: 143: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  2495  00064A  0E7C               	movlw	low _returnStop
  2496  00064C  6FAC               	movwf	(_i2c_status+16)& (0+255),b
  2497  00064E  0E11               	movlw	high _returnStop
  2498  000650  6FAD               	movwf	(_i2c_status+17)& (0+255),b
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;i2c_master.c: 144: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  2502  000652  0E00               	movlw	0
  2503  000654  6FB8               	movwf	(_i2c_status+28)& (0+255),b
  2504  000656  0E00               	movlw	0
  2505  000658  6FB9               	movwf	(_i2c_status+29)& (0+255),b
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;i2c_master.c: 145: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  2509  00065A  0E7C               	movlw	low _returnStop
  2510  00065C  6FAE               	movwf	(_i2c_status+18)& (0+255),b
  2511  00065E  0E11               	movlw	high _returnStop
  2512  000660  6FAF               	movwf	(_i2c_status+19)& (0+255),b
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;i2c_master.c: 146: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  2516  000662  0E00               	movlw	0
  2517  000664  6FBA               	movwf	(_i2c_status+30)& (0+255),b
  2518  000666  0E00               	movlw	0
  2519  000668  6FBB               	movwf	(_i2c_status+31)& (0+255),b
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;i2c_master.c: 147: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  2523  00066A  0E72               	movlw	low _returnReset
  2524  00066C  6FB0               	movwf	(_i2c_status+20)& (0+255),b
  2525  00066E  0E11               	movlw	high _returnReset
  2526  000670  6FB1               	movwf	(_i2c_status+21)& (0+255),b
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;i2c_master.c: 148: i2c_status.callbackPayload[i2c_timeOut] = (0);
  2530  000672  0E00               	movlw	0
  2531  000674  6FBC               	movwf	(_i2c_status+32)& (0+255),b
  2532  000676  0E00               	movlw	0
  2533  000678  6FBD               	movwf	(_i2c_status+33)& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;i2c_master.c: 150: i2c1_driver_open();
  2537  00067A  ECAB  F007         	call	_i2c1_driver_open	;wreg free
  2538                           
  2539                           ;i2c_master.c: 151: mssp1_clearIRQ();
  2540  00067E  EC0A  F009         	call	_mssp1_clearIRQ	;wreg free
  2541                           
  2542                           ;i2c_master.c: 153: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  2543  000682  0EEE               	movlw	low _i2c_busCollisionISR
  2544  000684  6E3A               	movwf	i2c1_driver_setBusCollisionISR@f,c
  2545  000686  0E11               	movlw	high _i2c_busCollisionISR
  2546  000688  6E3B               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  2547  00068A  ECB4  F008         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  2548                           
  2549                           ;i2c_master.c: 154: i2c1_driver_setI2cISR(i2c_ISR);
  2550  00068E  0EA6               	movlw	low _i2c_ISR
  2551  000690  6E3A               	movwf	i2c1_driver_setI2cISR@f,c
  2552  000692  0E0B               	movlw	high _i2c_ISR
  2553  000694  6E3B               	movwf	i2c1_driver_setI2cISR@f+1,c
  2554  000696  ECAF  F008         	call	_i2c1_driver_setI2cISR	;wreg free
  2555                           
  2556                           ;i2c_master.c: 159: ret = I2C_NOERR;
  2557  00069A  0E00               	movlw	0
  2558  00069C  6E3C               	movwf	i2c_open@ret,c
  2559  00069E  0012               	return	
  2560  0006A0                     __end_of_i2c_open:
  2561                           	opt stack 0
  2562                           tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           prodh	equ	0xFF4
  2567                           prodl	equ	0xFF3
  2568                           intcon	equ	0xFF2
  2569                           intcon2	equ	0xFF1
  2570                           postinc0	equ	0xFEE
  2571                           plusw0	equ	0xFEB
  2572                           wreg	equ	0xFE8
  2573                           postdec1	equ	0xFE5
  2574                           plusw1	equ	0xFE3
  2575                           fsr1l	equ	0xFE1
  2576                           indf2	equ	0xFDF
  2577                           plusw2	equ	0xFDB
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function _i2c1_driver_setI2cISR *****************
  2583 ;; Defined at:
  2584 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  f               2   20[COMRAM] PTR FTN()void 
  2587 ;;		 -> i2c_ISR(1), 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2599 ;;      Params:         2       0       0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0
  2602 ;;      Totals:         2       0       0       0       0       0       0
  2603 ;;Total ram usage:        2 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    5
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_i2c_open
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text19
  2614  00115E                     __ptext19:
  2615                           	opt stack 0
  2616  00115E                     _i2c1_driver_setI2cISR:
  2617                           	opt stack 23
  2618                           
  2619                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  2620                           
  2621                           ;incstack = 0
  2622  00115E  C03A  F011         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  2623  001162  C03B  F012         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  2624  001166  0012               	return		;funcret
  2625  001168                     __end_of_i2c1_driver_setI2cISR:
  2626                           	opt stack 0
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           prodh	equ	0xFF4
  2632                           prodl	equ	0xFF3
  2633                           intcon	equ	0xFF2
  2634                           intcon2	equ	0xFF1
  2635                           postinc0	equ	0xFEE
  2636                           plusw0	equ	0xFEB
  2637                           wreg	equ	0xFE8
  2638                           postdec1	equ	0xFE5
  2639                           plusw1	equ	0xFE3
  2640                           fsr1l	equ	0xFE1
  2641                           indf2	equ	0xFDF
  2642                           plusw2	equ	0xFDB
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  2648 ;; Defined at:
  2649 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  f               2   20[COMRAM] PTR FTN()void 
  2652 ;;		 -> i2c_busCollisionISR(1), 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2, status,0
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2664 ;;      Params:         2       0       0       0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0
  2667 ;;      Totals:         2       0       0       0       0       0       0
  2668 ;;Total ram usage:        2 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    5
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_i2c_open
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text20
  2679  001168                     __ptext20:
  2680                           	opt stack 0
  2681  001168                     _i2c1_driver_setBusCollisionISR:
  2682                           	opt stack 23
  2683                           
  2684                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  2685                           
  2686                           ;incstack = 0
  2687  001168  C03A  F013         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  2688  00116C  C03B  F014         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  2689  001170  0012               	return		;funcret
  2690  001172                     __end_of_i2c1_driver_setBusCollisionISR:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           intcon	equ	0xFF2
  2699                           intcon2	equ	0xFF1
  2700                           postinc0	equ	0xFEE
  2701                           plusw0	equ	0xFEB
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           plusw1	equ	0xFE3
  2705                           fsr1l	equ	0xFE1
  2706                           indf2	equ	0xFDF
  2707                           plusw2	equ	0xFDB
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _i2c1_driver_open *****************
  2713 ;; Defined at:
  2714 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;		None               void
  2721 ;; Registers used:
  2722 ;;		wreg, status,2
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2728 ;;      Params:         0       0       0       0       0       0       0
  2729 ;;      Locals:         0       0       0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0
  2731 ;;      Totals:         0       0       0       0       0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    5
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_i2c_open
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           	psect	text21
  2743  000F56                     __ptext21:
  2744                           	opt stack 0
  2745  000F56                     _i2c1_driver_open:
  2746                           	opt stack 23
  2747                           
  2748                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  2749                           
  2750                           ;incstack = 0
  2751  000F56  BAC6               	btfsc	4038,5,c	;volatile
  2752  000F58  0012               	return	
  2753                           
  2754                           ;i2c1_driver.c: 86: {
  2755                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  2756  000F5A  0E00               	movlw	0
  2757  000F5C  6EC7               	movwf	4039,c	;volatile
  2758                           
  2759                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  2760  000F5E  0E28               	movlw	40
  2761  000F60  6EC6               	movwf	4038,c	;volatile
  2762                           
  2763                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  2764  000F62  0E00               	movlw	0
  2765  000F64  6EC5               	movwf	4037,c	;volatile
  2766                           
  2767                           ;i2c1_driver.c: 90: SSP1ADD = 0x27;
  2768  000F66  0E27               	movlw	39
  2769  000F68  6EC8               	movwf	4040,c	;volatile
  2770                           
  2771                           ;i2c1_driver.c: 93: else
  2772                           ;i2c1_driver.c: 94: return 0;
  2773                           ;	Return value of _i2c1_driver_open is never used
  2774                           
  2775                           ;i2c1_driver.c: 92: }
  2776                           
  2777                           ;i2c1_driver.c: 91: return 1;
  2778                           ;	Return value of _i2c1_driver_open is never used
  2779  000F6A  0012               	return	
  2780  000F6C                     __end_of_i2c1_driver_open:
  2781                           	opt stack 0
  2782                           tblptru	equ	0xFF8
  2783                           tblptrh	equ	0xFF7
  2784                           tblptrl	equ	0xFF6
  2785                           tablat	equ	0xFF5
  2786                           prodh	equ	0xFF4
  2787                           prodl	equ	0xFF3
  2788                           intcon	equ	0xFF2
  2789                           intcon2	equ	0xFF1
  2790                           postinc0	equ	0xFEE
  2791                           plusw0	equ	0xFEB
  2792                           wreg	equ	0xFE8
  2793                           postdec1	equ	0xFE5
  2794                           plusw1	equ	0xFE3
  2795                           fsr1l	equ	0xFE1
  2796                           indf2	equ	0xFDF
  2797                           plusw2	equ	0xFDB
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _i2c_masterAccelRead *****************
  2803 ;; Defined at:
  2804 ;;		line 249 in file "mcc_generated_files/drivers/i2c_master.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  reg             1    wreg     unsigned char 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  reg             1   25[COMRAM] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      enum E6837
  2811 ;; Registers used:
  2812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2818 ;;      Params:         0       0       0       0       0       0       0
  2819 ;;      Locals:         1       0       0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0
  2821 ;;      Totals:         1       0       0       0       0       0       0
  2822 ;;Total ram usage:        1 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:   11
  2825 ;; This function calls:
  2826 ;;		_i2c_masterOperation
  2827 ;; This function is called by:
  2828 ;;		_read_register
  2829 ;;		_read_xyzvalues
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text22
  2834  0010AA                     __ptext22:
  2835                           	opt stack 0
  2836  0010AA                     _i2c_masterAccelRead:
  2837                           	opt stack 18
  2838                           
  2839                           ;incstack = 0
  2840                           ;i2c_masterAccelRead@reg stored from wreg
  2841  0010AA  6E3F               	movwf	i2c_masterAccelRead@reg,c
  2842                           
  2843                           ;i2c_master.c: 252: i2c_status.register_address = reg;
  2844  0010AC  C03F  F0C0         	movff	i2c_masterAccelRead@reg,_i2c_status+36
  2845                           
  2846                           ;i2c_master.c: 254: return i2c_masterOperation(OPERATIONACCELREAD);
  2847  0010B0  0E01               	movlw	1
  2848  0010B2  EC47  F006         	call	_i2c_masterOperation
  2849  0010B6  0012               	return	
  2850  0010B8                     __end_of_i2c_masterAccelRead:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           intcon	equ	0xFF2
  2859                           intcon2	equ	0xFF1
  2860                           postinc0	equ	0xFEE
  2861                           plusw0	equ	0xFEB
  2862                           wreg	equ	0xFE8
  2863                           postdec1	equ	0xFE5
  2864                           plusw1	equ	0xFE3
  2865                           fsr1l	equ	0xFE1
  2866                           indf2	equ	0xFDF
  2867                           plusw2	equ	0xFDB
  2868                           fsr2h	equ	0xFDA
  2869                           fsr2l	equ	0xFD9
  2870                           status	equ	0xFD8
  2871                           
  2872 ;; *************** function _i2c_masterOperation *****************
  2873 ;; Defined at:
  2874 ;;		line 210 in file "mcc_generated_files/drivers/i2c_master.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  operation       1    wreg     enum E6863
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  operation       1   23[COMRAM] enum E6863
  2879 ;;  ret             1   24[COMRAM] enum E6837
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      enum E6837
  2882 ;; Registers used:
  2883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2889 ;;      Params:         0       0       0       0       0       0       0
  2890 ;;      Locals:         2       0       0       0       0       0       0
  2891 ;;      Temps:          0       0       0       0       0       0       0
  2892 ;;      Totals:         2       0       0       0       0       0       0
  2893 ;;Total ram usage:        2 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:   10
  2896 ;; This function calls:
  2897 ;;		_i2c1_driver_start
  2898 ;;		_i2c_poller
  2899 ;;		_mssp1_IRQisEnabled
  2900 ;; This function is called by:
  2901 ;;		_i2c_masterAccelRead
  2902 ;;		_i2c_masterWrite
  2903 ;;		_i2c_masterRead
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text23
  2908  000C8E                     __ptext23:
  2909                           	opt stack 0
  2910  000C8E                     _i2c_masterOperation:
  2911                           	opt stack 18
  2912                           
  2913                           ;incstack = 0
  2914                           ;i2c_masterOperation@operation stored from wreg
  2915  000C8E  6E3D               	movwf	i2c_masterOperation@operation,c
  2916                           
  2917                           ;i2c_master.c: 212: i2c_error_t ret = I2C_BUSY;
  2918  000C90  0E01               	movlw	1
  2919  000C92  6E3E               	movwf	i2c_masterOperation@ret,c
  2920                           
  2921                           ;i2c_master.c: 213: if(!i2c_status.busy)
  2922  000C94  0100               	movlb	0	; () banked
  2923  000C96  B19C               	btfsc	_i2c_status& (0+255),0,b
  2924  000C98  D01C               	goto	l100
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;i2c_master.c: 214: {
  2928                           ;i2c_master.c: 215: i2c_status.busy = 1;
  2929  000C9A  819C               	bsf	_i2c_status& (0+255),0,b
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;i2c_master.c: 216: ret = I2C_NOERR;
  2933  000C9C  0E00               	movlw	0
  2934  000C9E  6E3E               	movwf	i2c_masterOperation@ret,c
  2935                           
  2936                           ;i2c_master.c: 218: switch(operation) {
  2937  000CA0  D007               	goto	l95
  2938  000CA2                     
  2939                           ; BSR set to: 0
  2940                           ;i2c_master.c: 220: i2c_status.state = I2C_SEND_ADR_READ;
  2941                           
  2942                           ; BSR set to: 0
  2943  000CA2  0E01               	movlw	1
  2944  000CA4  D003               	goto	L2
  2945  000CA6                     
  2946                           ; BSR set to: 0
  2947                           ;i2c_master.c: 224: i2c_status.state = I2C_SEND_INITIAL_READ;
  2948                           
  2949                           ; BSR set to: 0
  2950  000CA6  0E10               	movlw	16
  2951  000CA8  D001               	goto	L2
  2952  000CAA                     
  2953                           ; BSR set to: 0
  2954                           ;i2c_master.c: 228: i2c_status.state = I2C_SEND_ADR_WRITE;
  2955                           
  2956                           ; BSR set to: 0
  2957  000CAA  0E02               	movlw	2
  2958  000CAC                     L2:
  2959  000CAC  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;i2c_master.c: 230: }
  2963                           
  2964                           ;i2c_master.c: 229: break;
  2965  000CAE  D00A               	goto	l97
  2966  000CB0                     l95:
  2967                           
  2968                           ; BSR set to: 0
  2969                           
  2970                           ; BSR set to: 0
  2971  000CB0  503D               	movf	i2c_masterOperation@operation,w,c
  2972                           
  2973                           ; Switch size 1, requested type "space"
  2974                           ; Number of cases is 3, Range of values is 0 to 2
  2975                           ; switch strategies available:
  2976                           ; Name         Instructions Cycles
  2977                           ; simple_byte           10     6 (average)
  2978                           ;	Chosen strategy is simple_byte
  2979  000CB2  0A00               	xorlw	0	; case 0
  2980  000CB4  B4D8               	btfsc	status,2,c
  2981  000CB6  D7F5               	goto	l96
  2982  000CB8  0A01               	xorlw	1	; case 1
  2983  000CBA  B4D8               	btfsc	status,2,c
  2984  000CBC  D7F4               	goto	l98
  2985  000CBE  0A03               	xorlw	3	; case 2
  2986  000CC0  B4D8               	btfsc	status,2,c
  2987  000CC2  D7F3               	goto	l99
  2988  000CC4                     l97:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;i2c_master.c: 241: i2c1_driver_start();
  2992                           
  2993                           ; BSR set to: 0
  2994  000CC4  EC06  F009         	call	_i2c1_driver_start	;wreg free
  2995                           
  2996                           ;i2c_master.c: 243: if(! mssp1_IRQisEnabled())
  2997  000CC8  EC26  F008         	call	_mssp1_IRQisEnabled	;wreg free
  2998  000CCC  A0D8               	btfss	status,0,c
  2999                           
  3000                           ;i2c_master.c: 244: i2c_poller();
  3001  000CCE  EC9E  F007         	call	_i2c_poller	;wreg free
  3002  000CD2                     l100:
  3003                           
  3004                           ;i2c_master.c: 245: }
  3005                           ;i2c_master.c: 246: return ret;
  3006  000CD2  503E               	movf	i2c_masterOperation@ret,w,c
  3007  000CD4  0012               	return	
  3008  000CD6                     __end_of_i2c_masterOperation:
  3009                           	opt stack 0
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           intcon2	equ	0xFF1
  3018                           postinc0	equ	0xFEE
  3019                           plusw0	equ	0xFEB
  3020                           wreg	equ	0xFE8
  3021                           postdec1	equ	0xFE5
  3022                           plusw1	equ	0xFE3
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           plusw2	equ	0xFDB
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _mssp1_IRQisEnabled *****************
  3031 ;; Defined at:
  3032 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;		None
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;		None               void
  3039 ;; Registers used:
  3040 ;;		wreg, status,0
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3046 ;;      Params:         0       0       0       0       0       0       0
  3047 ;;      Locals:         0       0       0       0       0       0       0
  3048 ;;      Temps:          1       0       0       0       0       0       0
  3049 ;;      Totals:         1       0       0       0       0       0       0
  3050 ;;Total ram usage:        1 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    5
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		_i2c_masterOperation
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text24
  3061  00104C                     __ptext24:
  3062                           	opt stack 0
  3063  00104C                     _mssp1_IRQisEnabled:
  3064                           	opt stack 22
  3065                           
  3066                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
  3067                           
  3068                           ;incstack = 0
  3069  00104C  A69D               	btfss	3997,3,c	;volatile
  3070  00104E  D003               	goto	u1280
  3071  001050  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  3072  001052  2A3A               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  3073  001054  D001               	goto	u1288
  3074  001056                     u1280:
  3075  001056  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  3076  001058                     u1288:
  3077  001058  303A               	rrcf	??_mssp1_IRQisEnabled,w,c
  3078  00105A  0012               	return	
  3079  00105C                     __end_of_mssp1_IRQisEnabled:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon	equ	0xFF2
  3088                           intcon2	equ	0xFF1
  3089                           postinc0	equ	0xFEE
  3090                           plusw0	equ	0xFEB
  3091                           wreg	equ	0xFE8
  3092                           postdec1	equ	0xFE5
  3093                           plusw1	equ	0xFE3
  3094                           fsr1l	equ	0xFE1
  3095                           indf2	equ	0xFDF
  3096                           plusw2	equ	0xFDB
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _i2c_poller *****************
  3102 ;; Defined at:
  3103 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3117 ;;      Params:         0       0       0       0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0
  3120 ;;      Totals:         0       0       0       0       0       0       0
  3121 ;;Total ram usage:        0 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    9
  3124 ;; This function calls:
  3125 ;;		_i2c_ISR
  3126 ;;		_mssp1_waitForEvent
  3127 ;; This function is called by:
  3128 ;;		_i2c_masterOperation
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text25
  3133  000F3C                     __ptext25:
  3134                           	opt stack 0
  3135  000F3C                     _i2c_poller:
  3136                           	opt stack 18
  3137                           
  3138                           ;i2c_master.c: 274: while(i2c_status.busy)
  3139                           
  3140                           ;incstack = 0
  3141  000F3C  D008               	goto	l113
  3142  000F3E                     
  3143                           ;i2c_master.c: 275: {
  3144                           ;i2c_master.c: 276: mssp1_waitForEvent((0));
  3145  000F3E  0E00               	movlw	0
  3146  000F40  6E3A               	movwf	mssp1_waitForEvent@timeout,c
  3147  000F42  0E00               	movlw	0
  3148  000F44  6E3B               	movwf	mssp1_waitForEvent@timeout+1,c
  3149  000F46  EC0B  F008         	call	_mssp1_waitForEvent	;wreg free
  3150                           
  3151                           ;i2c_master.c: 277: i2c_ISR();
  3152  000F4A  ECD3  F005         	call	_i2c_ISR	;wreg free
  3153  000F4E                     l113:
  3154  000F4E  0100               	movlb	0	; () banked
  3155  000F50  A19C               	btfss	_i2c_status& (0+255),0,b
  3156  000F52  0012               	return	
  3157  000F54  D7F4               	goto	l114
  3158  000F56                     __end_of_i2c_poller:
  3159                           	opt stack 0
  3160                           tblptru	equ	0xFF8
  3161                           tblptrh	equ	0xFF7
  3162                           tblptrl	equ	0xFF6
  3163                           tablat	equ	0xFF5
  3164                           prodh	equ	0xFF4
  3165                           prodl	equ	0xFF3
  3166                           intcon	equ	0xFF2
  3167                           intcon2	equ	0xFF1
  3168                           postinc0	equ	0xFEE
  3169                           plusw0	equ	0xFEB
  3170                           wreg	equ	0xFE8
  3171                           postdec1	equ	0xFE5
  3172                           plusw1	equ	0xFE3
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           plusw2	equ	0xFDB
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _mssp1_waitForEvent *****************
  3181 ;; Defined at:
  3182 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  timeout         2   20[COMRAM] PTR unsigned int 
  3185 ;;		 -> NULL(0), 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3197 ;;      Params:         2       0       0       0       0       0       0
  3198 ;;      Locals:         0       0       0       0       0       0       0
  3199 ;;      Temps:          0       0       0       0       0       0       0
  3200 ;;      Totals:         2       0       0       0       0       0       0
  3201 ;;Total ram usage:        2 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    5
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_i2c_poller
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text26
  3212  001016                     __ptext26:
  3213                           	opt stack 0
  3214  001016                     _mssp1_waitForEvent:
  3215                           	opt stack 21
  3216                           
  3217                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;incstack = 0
  3221  001016  B69E               	btfsc	3998,3,c	;volatile
  3222  001018  0012               	return	
  3223  00101A                     u1230:
  3224                           
  3225                           ;i2c1_driver.c: 76: {
  3226                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
  3227                           
  3228                           ;i2c1_driver.c: 74: {
  3229                           ;i2c1_driver.c: 75: while(1)
  3230  00101A  B69E               	btfsc	3998,3,c	;volatile
  3231  00101C  0012               	return	
  3232                           
  3233                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3234  00101E  0E85               	movlw	133
  3235  001020                     u1737:
  3236  001020  2EE8               	decfsz	wreg,f,c
  3237  001022  D7FE               	bra	u1737
  3238  001024  F000               	nop	
  3239  001026  D7F9               	goto	u1230
  3240  001028                     __end_of_mssp1_waitForEvent:
  3241                           	opt stack 0
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           intcon2	equ	0xFF1
  3250                           postinc0	equ	0xFEE
  3251                           plusw0	equ	0xFEB
  3252                           wreg	equ	0xFE8
  3253                           postdec1	equ	0xFE5
  3254                           plusw1	equ	0xFE3
  3255                           fsr1l	equ	0xFE1
  3256                           indf2	equ	0xFDF
  3257                           plusw2	equ	0xFDB
  3258                           fsr2h	equ	0xFDA
  3259                           fsr2l	equ	0xFD9
  3260                           status	equ	0xFD8
  3261                           
  3262 ;; *************** function _i2c_ISR *****************
  3263 ;; Defined at:
  3264 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  3265 ;; Parameters:    Size  Location     Type
  3266 ;;		None
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;		None
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3278 ;;      Params:         0       0       0       0       0       0       0
  3279 ;;      Locals:         0       0       0       0       0       0       0
  3280 ;;      Temps:          0       0       0       0       0       0       0
  3281 ;;      Totals:         0       0       0       0       0       0       0
  3282 ;;Total ram usage:        0 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    8
  3285 ;; This function calls:
  3286 ;;		_do_I2C_DO_ACK
  3287 ;;		_do_I2C_DO_ADDRESS_NACK
  3288 ;;		_do_I2C_DO_NACK_RESTART
  3289 ;;		_do_I2C_DO_NACK_STOP
  3290 ;;		_do_I2C_IDLE
  3291 ;;		_do_I2C_RCEN
  3292 ;;		_do_I2C_RESET
  3293 ;;		_do_I2C_RX
  3294 ;;		_do_I2C_SEND_ADR_READ
  3295 ;;		_do_I2C_SEND_ADR_WRITE
  3296 ;;		_do_I2C_SEND_INITIAL_READ
  3297 ;;		_do_I2C_SEND_RESTART
  3298 ;;		_do_I2C_SEND_RESTART_READ
  3299 ;;		_do_I2C_SEND_RESTART_WRITE
  3300 ;;		_do_I2C_SEND_STOP
  3301 ;;		_do_I2C_TX
  3302 ;;		_do_I2C_TX_EMPTY
  3303 ;;		_do_I2C_TX_REGISTER
  3304 ;;		_i2c1_driver_isNACK
  3305 ;;		_mssp1_clearIRQ
  3306 ;; This function is called by:
  3307 ;;		_i2c_open
  3308 ;;		_i2c_poller
  3309 ;;		_INTERRUPT_InterruptManager
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text27
  3314  000BA6                     __ptext27:
  3315                           	opt stack 0
  3316  000BA6                     _i2c_ISR:
  3317                           	opt stack 0
  3318                           
  3319                           ;Skip over the trampoline to the duplicate function for level 2
  3320  000BA6  B24B               	btfsc	btemp,1,c
  3321  000BA8  EF6B  F006         	goto	i2_i2c_ISR
  3322  000BAC                     _i2c_ISR$intlevel0:
  3323                           	opt stack 18
  3324                           
  3325                           ;i2c_master.c: 486: mssp1_clearIRQ();
  3326                           
  3327                           ;incstack = 0
  3328  000BAC  EC0A  F009         	call	_mssp1_clearIRQ	;wreg free
  3329                           
  3330                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  3331  000BB0  0100               	movlb	0	; () banked
  3332  000BB2  A79C               	btfss	_i2c_status& (0+255),3,b
  3333  000BB4  D007               	goto	l209
  3334                           
  3335                           ; BSR set to: 0
  3336  000BB6  ECE2  F007         	call	_i2c1_driver_isNACK	;wreg free
  3337  000BBA  A0D8               	btfss	status,0,c
  3338  000BBC  D003               	goto	l209
  3339                           
  3340                           ;i2c_master.c: 493: {
  3341                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  3342  000BBE  0E0F               	movlw	15
  3343  000BC0  0100               	movlb	0	; () banked
  3344  000BC2  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  3345  000BC4                     l209:
  3346                           
  3347                           ;i2c_master.c: 495: }
  3348                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  3349                           
  3350                           ; BSR set to: 0
  3351  000BC4  0100               	movlb	0	; () banked
  3352  000BC6  51A6               	movf	(_i2c_status+10)& (0+255),w,b
  3353  000BC8  0D02               	mullw	2
  3354  000BCA  0EC1               	movlw	low _fsmStateTable
  3355  000BCC  24F3               	addwf	prodl,w,c
  3356  000BCE  6ED9               	movwf	fsr2l,c
  3357  000BD0  0E00               	movlw	high _fsmStateTable
  3358  000BD2  20F4               	addwfc	prodh,w,c
  3359  000BD4  6EDA               	movwf	fsr2h,c
  3360  000BD6  D801               	call	u1278
  3361  000BD8  D00A               	goto	u1279
  3362  000BDA                     u1278:
  3363  000BDA  0005               	push	
  3364  000BDC  6EFA               	movwf	pclath,c
  3365  000BDE  50DE               	movf	postinc2,w,c
  3366  000BE0  6EFD               	movwf	tosl,c
  3367  000BE2  50DE               	movf	postinc2,w,c
  3368  000BE4  6EFE               	movwf	tosh,c
  3369  000BE6  50F8               	movf	tblptru,w,c
  3370  000BE8  6EFF               	movwf	tosu,c
  3371  000BEA  50FA               	movf	pclath,w,c
  3372  000BEC  0012               	return		;indir
  3373  000BEE                     u1279:
  3374  000BEE  0100               	movlb	0	; () banked
  3375  000BF0  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378  000BF2  0012               	return		;funcret
  3379  000BF4                     __end_of_i2c_ISR:
  3380                           	opt stack 0
  3381                           tosu	equ	0xFFF
  3382                           tosh	equ	0xFFE
  3383                           tosl	equ	0xFFD
  3384                           pclath	equ	0xFFA
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           prodh	equ	0xFF4
  3390                           prodl	equ	0xFF3
  3391                           intcon	equ	0xFF2
  3392                           intcon2	equ	0xFF1
  3393                           postinc0	equ	0xFEE
  3394                           plusw0	equ	0xFEB
  3395                           wreg	equ	0xFE8
  3396                           postdec1	equ	0xFE5
  3397                           plusw1	equ	0xFE3
  3398                           fsr1l	equ	0xFE1
  3399                           indf2	equ	0xFDF
  3400                           postinc2	equ	0xFDE
  3401                           plusw2	equ	0xFDB
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _do_I2C_TX_EMPTY *****************
  3407 ;; Defined at:
  3408 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      enum E7019
  3415 ;; Registers used:
  3416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3422 ;;      Params:         0       0       0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0
  3424 ;;      Temps:          0       0       0       0       0       0       0
  3425 ;;      Totals:         0       0       0       0       0       0       0
  3426 ;;Total ram usage:        0 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    7
  3429 ;; This function calls:
  3430 ;;		_do_I2C_SEND_RESTART
  3431 ;;		_do_I2C_SEND_STOP
  3432 ;;		_mssp1_setIRQ
  3433 ;;		_returnReset
  3434 ;;		_returnStop
  3435 ;; This function is called by:
  3436 ;;		_i2c_ISR
  3437 ;;		i2_i2c_ISR
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text28
  3442  000AF0                     __ptext28:
  3443                           	opt stack 0
  3444  000AF0                     _do_I2C_TX_EMPTY:
  3445                           	opt stack 0
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;Skip over the trampoline to the duplicate function for level 2
  3449  000AF0  B24B               	btfsc	btemp,1,c
  3450  000AF2  EFA7  F005         	goto	i2_do_I2C_TX_EMPTY
  3451  000AF6                     _do_I2C_TX_EMPTY$intlevel0:
  3452                           	opt stack 18
  3453                           
  3454                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  3455                           
  3456                           ;incstack = 0
  3457  000AF6  0100               	movlb	0	; () banked
  3458  000AF8  859C               	bsf	_i2c_status& (0+255),2,b
  3459                           
  3460                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3461  000AFA  D00A               	goto	l197
  3462  000AFC                     
  3463                           ;i2c_master.c: 448: case i2c_restart_write:
  3464                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  3465                           
  3466                           ; BSR set to: 0
  3467                           
  3468                           ; BSR set to: 0
  3469  000AFC  EC78  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3470  000B00  0012               	return	
  3471  000B02                     
  3472                           ;i2c_master.c: 451: mssp1_setIRQ();
  3473  000B02  ECFC  F008         	call	_mssp1_setIRQ	;wreg free
  3474                           
  3475                           ;i2c_master.c: 452: return I2C_TX;
  3476  000B06  0E03               	movlw	3
  3477  000B08  0012               	return	
  3478  000B0A                     
  3479                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  3480                           
  3481                           ;i2c_master.c: 454: case i2c_stop:
  3482  000B0A  EC71  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3483                           
  3484                           ;i2c_master.c: 456: }
  3485  000B0E  0012               	return	
  3486  000B10                     l197:
  3487  000B10  C0B4  F03A         	movff	_i2c_status+24,returnReset@p
  3488  000B14  C0B5  F03B         	movff	_i2c_status+25,returnReset@p+1
  3489  000B18  EE20  F0A8         	lfsr	2,_i2c_status+12
  3490  000B1C  D801               	call	u1228
  3491  000B1E  D00A               	goto	u1229
  3492  000B20                     u1228:
  3493  000B20  0005               	push	
  3494  000B22  6EFA               	movwf	pclath,c
  3495  000B24  50DE               	movf	postinc2,w,c
  3496  000B26  6EFD               	movwf	tosl,c
  3497  000B28  50DE               	movf	postinc2,w,c
  3498  000B2A  6EFE               	movwf	tosh,c
  3499  000B2C  50F8               	movf	tblptru,w,c
  3500  000B2E  6EFF               	movwf	tosu,c
  3501  000B30  50FA               	movf	pclath,w,c
  3502  000B32  0012               	return		;indir
  3503  000B34                     u1229:
  3504                           
  3505                           ; Switch size 1, requested type "space"
  3506                           ; Number of cases is 4, Range of values is 1 to 4
  3507                           ; switch strategies available:
  3508                           ; Name         Instructions Cycles
  3509                           ; simple_byte           13     7 (average)
  3510                           ;	Chosen strategy is simple_byte
  3511  000B34  0A01               	xorlw	1	; case 1
  3512  000B36  B4D8               	btfsc	status,2,c
  3513  000B38  D7E8               	goto	l202
  3514  000B3A  0A03               	xorlw	3	; case 2
  3515  000B3C  B4D8               	btfsc	status,2,c
  3516  000B3E  D7DE               	goto	l198
  3517  000B40  0A01               	xorlw	1	; case 3
  3518  000B42  B4D8               	btfsc	status,2,c
  3519  000B44  D7DB               	goto	l198
  3520  000B46  0A07               	xorlw	7	; case 4
  3521  000B48  B4D8               	btfsc	status,2,c
  3522  000B4A  D7DB               	goto	l201
  3523  000B4C  D7DE               	goto	l202
  3524  000B4E                     __end_of_do_I2C_TX_EMPTY:
  3525                           	opt stack 0
  3526                           tosu	equ	0xFFF
  3527                           tosh	equ	0xFFE
  3528                           tosl	equ	0xFFD
  3529                           pclath	equ	0xFFA
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           prodh	equ	0xFF4
  3535                           prodl	equ	0xFF3
  3536                           intcon	equ	0xFF2
  3537                           intcon2	equ	0xFF1
  3538                           postinc0	equ	0xFEE
  3539                           plusw0	equ	0xFEB
  3540                           wreg	equ	0xFE8
  3541                           postdec1	equ	0xFE5
  3542                           plusw1	equ	0xFE3
  3543                           fsr1l	equ	0xFE1
  3544                           indf2	equ	0xFDF
  3545                           postinc2	equ	0xFDE
  3546                           plusw2	equ	0xFDB
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _do_I2C_RX *****************
  3552 ;; Defined at:
  3553 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      enum E7019
  3560 ;; Registers used:
  3561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3567 ;;      Params:         0       0       0       0       0       0       0
  3568 ;;      Locals:         0       0       0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0
  3570 ;;      Totals:         0       0       0       0       0       0       0
  3571 ;;Total ram usage:        0 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    7
  3574 ;; This function calls:
  3575 ;;		_do_I2C_DO_NACK_RESTART
  3576 ;;		_do_I2C_DO_NACK_STOP
  3577 ;;		_i2c1_driver_getRXData
  3578 ;;		_i2c1_driver_sendACK
  3579 ;;		_returnReset
  3580 ;;		_returnStop
  3581 ;; This function is called by:
  3582 ;;		_i2c_ISR
  3583 ;;		i2_i2c_ISR
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text29
  3588  000858                     __ptext29:
  3589                           	opt stack 0
  3590  000858                     _do_I2C_RX:
  3591                           	opt stack 0
  3592                           
  3593                           ;Skip over the trampoline to the duplicate function for level 2
  3594  000858  B24B               	btfsc	btemp,1,c
  3595  00085A  EFA5  F004         	goto	i2_do_I2C_RX
  3596  00085E                     _do_I2C_RX$intlevel0:
  3597                           	opt stack 18
  3598                           
  3599                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  3600                           
  3601                           ;incstack = 0
  3602  00085E  ECFE  F008         	call	_i2c1_driver_getRXData	;wreg free
  3603  000862  C09E  FFD9         	movff	_i2c_status+2,fsr2l
  3604  000866  C09F  FFDA         	movff	_i2c_status+3,fsr2h
  3605  00086A  6EDF               	movwf	indf2,c
  3606  00086C  0100               	movlb	0	; () banked
  3607  00086E  4B9E               	infsnz	(_i2c_status+2)& (0+255),f,b
  3608  000870  2B9F               	incf	(_i2c_status+3)& (0+255),f,b
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  3612  000872  07A0               	decf	(_i2c_status+4)& (0+255),f,b
  3613  000874  A0D8               	btfss	status,0,c
  3614  000876  07A1               	decf	(_i2c_status+5)& (0+255),f,b
  3615  000878  51A0               	movf	(_i2c_status+4)& (0+255),w,b
  3616  00087A  11A1               	iorwf	(_i2c_status+5)& (0+255),w,b
  3617  00087C  B4D8               	btfsc	status,2,c
  3618  00087E  D004               	goto	l185
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;i2c_master.c: 421: {
  3622                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  3623  000880  ECEE  F008         	call	_i2c1_driver_sendACK	;wreg free
  3624                           
  3625                           ;i2c_master.c: 423: return I2C_RCEN;
  3626  000884  0E05               	movlw	5
  3627                           
  3628                           ;i2c_master.c: 424: }
  3629  000886  0012               	return	
  3630  000888                     l185:
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;i2c_master.c: 425: else
  3634                           ;i2c_master.c: 426: {
  3635                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  3636  000888  859C               	bsf	_i2c_status& (0+255),2,b
  3637                           
  3638                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3639  00088A  D006               	goto	l188
  3640  00088C                     
  3641                           ;i2c_master.c: 431: case i2c_restart_read:
  3642                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  3643                           
  3644                           ; BSR set to: 0
  3645                           
  3646                           ; BSR set to: 0
  3647  00088C  EC5C  F008         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  3648  000890  0012               	return	
  3649  000892                     
  3650                           ;i2c_master.c: 435: case i2c_stop:
  3651                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  3652                           
  3653                           ;i2c_master.c: 434: case i2c_continue:
  3654  000892  EC63  F008         	call	_do_I2C_DO_NACK_STOP	;wreg free
  3655                           
  3656                           ;i2c_master.c: 437: }
  3657  000896  0012               	return	
  3658  000898                     l188:
  3659  000898  C0B4  F03A         	movff	_i2c_status+24,returnReset@p
  3660  00089C  C0B5  F03B         	movff	_i2c_status+25,returnReset@p+1
  3661  0008A0  EE20  F0A8         	lfsr	2,_i2c_status+12
  3662  0008A4  D801               	call	u1218
  3663  0008A6  D00A               	goto	u1219
  3664  0008A8                     u1218:
  3665  0008A8  0005               	push	
  3666  0008AA  6EFA               	movwf	pclath,c
  3667  0008AC  50DE               	movf	postinc2,w,c
  3668  0008AE  6EFD               	movwf	tosl,c
  3669  0008B0  50DE               	movf	postinc2,w,c
  3670  0008B2  6EFE               	movwf	tosh,c
  3671  0008B4  50F8               	movf	tblptru,w,c
  3672  0008B6  6EFF               	movwf	tosu,c
  3673  0008B8  50FA               	movf	pclath,w,c
  3674  0008BA  0012               	return		;indir
  3675  0008BC                     u1219:
  3676                           
  3677                           ; Switch size 1, requested type "space"
  3678                           ; Number of cases is 4, Range of values is 1 to 4
  3679                           ; switch strategies available:
  3680                           ; Name         Instructions Cycles
  3681                           ; simple_byte           13     7 (average)
  3682                           ;	Chosen strategy is simple_byte
  3683  0008BC  0A01               	xorlw	1	; case 1
  3684  0008BE  B4D8               	btfsc	status,2,c
  3685  0008C0  D7E8               	goto	l191
  3686  0008C2  0A03               	xorlw	3	; case 2
  3687  0008C4  B4D8               	btfsc	status,2,c
  3688  0008C6  D7E2               	goto	l189
  3689  0008C8  0A01               	xorlw	1	; case 3
  3690  0008CA  B4D8               	btfsc	status,2,c
  3691  0008CC  D7DF               	goto	l189
  3692  0008CE  0A07               	xorlw	7	; case 4
  3693  0008D0  D7E0               	goto	l191
  3694  0008D2                     __end_of_do_I2C_RX:
  3695                           	opt stack 0
  3696                           tosu	equ	0xFFF
  3697                           tosh	equ	0xFFE
  3698                           tosl	equ	0xFFD
  3699                           pclath	equ	0xFFA
  3700                           tblptru	equ	0xFF8
  3701                           tblptrh	equ	0xFF7
  3702                           tblptrl	equ	0xFF6
  3703                           tablat	equ	0xFF5
  3704                           prodh	equ	0xFF4
  3705                           prodl	equ	0xFF3
  3706                           intcon	equ	0xFF2
  3707                           intcon2	equ	0xFF1
  3708                           postinc0	equ	0xFEE
  3709                           plusw0	equ	0xFEB
  3710                           wreg	equ	0xFE8
  3711                           postdec1	equ	0xFE5
  3712                           plusw1	equ	0xFE3
  3713                           fsr1l	equ	0xFE1
  3714                           indf2	equ	0xFDF
  3715                           postinc2	equ	0xFDE
  3716                           plusw2	equ	0xFDB
  3717                           fsr2h	equ	0xFDA
  3718                           fsr2l	equ	0xFD9
  3719                           status	equ	0xFD8
  3720                           
  3721 ;; *************** function _do_I2C_TX *****************
  3722 ;; Defined at:
  3723 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      enum E7019
  3730 ;; Registers used:
  3731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3737 ;;      Params:         0       0       0       0       0       0       0
  3738 ;;      Locals:         2       0       0       0       0       0       0
  3739 ;;      Temps:          0       0       0       0       0       0       0
  3740 ;;      Totals:         2       0       0       0       0       0       0
  3741 ;;Total ram usage:        2 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    7
  3744 ;; This function calls:
  3745 ;;		_do_I2C_SEND_RESTART_READ
  3746 ;;		_do_I2C_SEND_RESTART_WRITE
  3747 ;;		_do_I2C_SEND_STOP
  3748 ;;		_i2c1_driver_TXData
  3749 ;;		_i2c1_driver_isNACK
  3750 ;;		_returnReset
  3751 ;;		_returnStop
  3752 ;; This function is called by:
  3753 ;;		_i2c_ISR
  3754 ;;		i2_i2c_ISR
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text30
  3759  0006A0                     __ptext30:
  3760                           	opt stack 0
  3761  0006A0                     _do_I2C_TX:
  3762                           	opt stack 0
  3763                           
  3764                           ;Skip over the trampoline to the duplicate function for level 2
  3765  0006A0  B24B               	btfsc	btemp,1,c
  3766  0006A2  EFE4  F003         	goto	i2_do_I2C_TX
  3767  0006A6                     _do_I2C_TX$intlevel0:
  3768                           	opt stack 18
  3769                           
  3770                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  3771                           
  3772                           ;incstack = 0
  3773  0006A6  ECE2  F007         	call	_i2c1_driver_isNACK	;wreg free
  3774  0006AA  B0D8               	btfsc	status,0,c
  3775  0006AC  D00A               	goto	l170
  3776  0006AE  D026               	goto	l169
  3777  0006B0                     
  3778                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  3779  0006B0  EC86  F008         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  3780  0006B4  0012               	return	
  3781  0006B6                     
  3782                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  3783  0006B6  EC7F  F008         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  3784  0006BA  0012               	return	
  3785  0006BC                     
  3786                           ;i2c_master.c: 405: case i2c_stop:
  3787                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  3788                           
  3789                           ;i2c_master.c: 404: case i2c_continue:
  3790  0006BC  EC71  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3791                           
  3792                           ;i2c_master.c: 407: }
  3793  0006C0  0012               	return	
  3794  0006C2                     l170:
  3795  0006C2  C0BA  F03A         	movff	_i2c_status+30,returnReset@p
  3796  0006C6  C0BB  F03B         	movff	_i2c_status+31,returnReset@p+1
  3797  0006CA  EE20  F0AE         	lfsr	2,_i2c_status+18
  3798  0006CE  D801               	call	u1188
  3799  0006D0  D00A               	goto	u1189
  3800  0006D2                     u1188:
  3801  0006D2  0005               	push	
  3802  0006D4  6EFA               	movwf	pclath,c
  3803  0006D6  50DE               	movf	postinc2,w,c
  3804  0006D8  6EFD               	movwf	tosl,c
  3805  0006DA  50DE               	movf	postinc2,w,c
  3806  0006DC  6EFE               	movwf	tosh,c
  3807  0006DE  50F8               	movf	tblptru,w,c
  3808  0006E0  6EFF               	movwf	tosu,c
  3809  0006E2  50FA               	movf	pclath,w,c
  3810  0006E4  0012               	return		;indir
  3811  0006E6                     u1189:
  3812                           
  3813                           ; Switch size 1, requested type "space"
  3814                           ; Number of cases is 4, Range of values is 1 to 4
  3815                           ; switch strategies available:
  3816                           ; Name         Instructions Cycles
  3817                           ; simple_byte           13     7 (average)
  3818                           ;	Chosen strategy is simple_byte
  3819  0006E6  0A01               	xorlw	1	; case 1
  3820  0006E8  B4D8               	btfsc	status,2,c
  3821  0006EA  D7E8               	goto	l174
  3822  0006EC  0A03               	xorlw	3	; case 2
  3823  0006EE  B4D8               	btfsc	status,2,c
  3824  0006F0  D7DF               	goto	l171
  3825  0006F2  0A01               	xorlw	1	; case 3
  3826  0006F4  B4D8               	btfsc	status,2,c
  3827  0006F6  D7DF               	goto	l173
  3828  0006F8  0A07               	xorlw	7	; case 4
  3829  0006FA  D7E0               	goto	l174
  3830  0006FC                     l169:
  3831                           
  3832                           ;i2c_master.c: 409: else
  3833                           ;i2c_master.c: 410: {
  3834                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  3835  0006FC  0100               	movlb	0	; () banked
  3836  0006FE  979C               	bcf	_i2c_status& (0+255),3,b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  3840  000700  C09E  FFD9         	movff	_i2c_status+2,fsr2l
  3841  000704  C09F  FFDA         	movff	_i2c_status+3,fsr2h
  3842  000708  4B9E               	infsnz	(_i2c_status+2)& (0+255),f,b
  3843  00070A  2B9F               	incf	(_i2c_status+3)& (0+255),f,b
  3844  00070C  50DF               	movf	indf2,w,c
  3845  00070E  ECC7  F008         	call	_i2c1_driver_TXData
  3846                           
  3847                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  3848  000712  0100               	movlb	0	; () banked
  3849  000714  07A0               	decf	(_i2c_status+4)& (0+255),f,b
  3850  000716  A0D8               	btfss	status,0,c
  3851  000718  07A1               	decf	(_i2c_status+5)& (0+255),f,b
  3852  00071A  51A0               	movf	(_i2c_status+4)& (0+255),w,b
  3853  00071C  11A1               	iorwf	(_i2c_status+5)& (0+255),w,b
  3854  00071E  A4D8               	btfss	status,2,c
  3855  000720  D004               	goto	l180
  3856                           
  3857                           ; BSR set to: 0
  3858  000722  0E00               	movlw	0
  3859  000724  6E3C               	movwf	_do_I2C_TX$315+1,c
  3860  000726  0E06               	movlw	6
  3861  000728  D003               	goto	L3
  3862  00072A                     l180:
  3863                           
  3864                           ; BSR set to: 0
  3865                           
  3866                           ; BSR set to: 0
  3867  00072A  0E00               	movlw	0
  3868  00072C  6E3C               	movwf	_do_I2C_TX$315+1,c
  3869  00072E  0E03               	movlw	3
  3870  000730                     L3:
  3871  000730  6E3B               	movwf	_do_I2C_TX$315,c
  3872                           
  3873                           ; BSR set to: 0
  3874  000732  503B               	movf	_do_I2C_TX$315,w,c
  3875                           
  3876                           ; BSR set to: 0
  3877  000734  0012               	return	
  3878  000736                     __end_of_do_I2C_TX:
  3879                           	opt stack 0
  3880                           tosu	equ	0xFFF
  3881                           tosh	equ	0xFFE
  3882                           tosl	equ	0xFFD
  3883                           pclath	equ	0xFFA
  3884                           tblptru	equ	0xFF8
  3885                           tblptrh	equ	0xFF7
  3886                           tblptrl	equ	0xFF6
  3887                           tablat	equ	0xFF5
  3888                           prodh	equ	0xFF4
  3889                           prodl	equ	0xFF3
  3890                           intcon	equ	0xFF2
  3891                           intcon2	equ	0xFF1
  3892                           postinc0	equ	0xFEE
  3893                           plusw0	equ	0xFEB
  3894                           wreg	equ	0xFE8
  3895                           postdec1	equ	0xFE5
  3896                           plusw1	equ	0xFE3
  3897                           fsr1l	equ	0xFE1
  3898                           indf2	equ	0xFDF
  3899                           postinc2	equ	0xFDE
  3900                           plusw2	equ	0xFDB
  3901                           fsr2h	equ	0xFDA
  3902                           fsr2l	equ	0xFD9
  3903                           status	equ	0xFD8
  3904                           
  3905 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  3906 ;; Defined at:
  3907 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;		None
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;		None
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  1    wreg      enum E7019
  3914 ;; Registers used:
  3915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3921 ;;      Params:         0       0       0       0       0       0       0
  3922 ;;      Locals:         0       0       0       0       0       0       0
  3923 ;;      Temps:          0       0       0       0       0       0       0
  3924 ;;      Totals:         0       0       0       0       0       0       0
  3925 ;;Total ram usage:        0 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    7
  3928 ;; This function calls:
  3929 ;;		_do_I2C_SEND_RESTART
  3930 ;;		_do_I2C_SEND_STOP
  3931 ;;		_returnReset
  3932 ;;		_returnStop
  3933 ;; This function is called by:
  3934 ;;		_i2c_ISR
  3935 ;;		i2_i2c_ISR
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text31
  3940  000BF4                     __ptext31:
  3941                           	opt stack 0
  3942  000BF4                     _do_I2C_DO_ADDRESS_NACK:
  3943                           	opt stack 0
  3944                           
  3945                           ;Skip over the trampoline to the duplicate function for level 2
  3946  000BF4  B24B               	btfsc	btemp,1,c
  3947  000BF6  EF8F  F006         	goto	i2_do_I2C_DO_ADDRESS_NACK
  3948  000BFA                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  3949                           	opt stack 18
  3950                           
  3951                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  3952                           
  3953                           ;incstack = 0
  3954  000BFA  0100               	movlb	0	; () banked
  3955  000BFC  979C               	bcf	_i2c_status& (0+255),3,b
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  3959  000BFE  0E02               	movlw	2
  3960  000C00  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  3961                           
  3962                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  3963  000C02  D006               	goto	l161
  3964  000C04                     
  3965                           ;i2c_master.c: 386: case i2c_restart_write:
  3966                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  3967                           
  3968                           ; BSR set to: 0
  3969                           
  3970                           ; BSR set to: 0
  3971  000C04  EC78  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3972  000C08  0012               	return	
  3973  000C0A                     
  3974                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  3975  000C0A  EC71  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3976                           
  3977                           ;i2c_master.c: 390: }
  3978  000C0E  0012               	return	
  3979  000C10                     l161:
  3980  000C10  C0B8  F03A         	movff	_i2c_status+28,returnReset@p
  3981  000C14  C0B9  F03B         	movff	_i2c_status+29,returnReset@p+1
  3982  000C18  EE20  F0AC         	lfsr	2,_i2c_status+16
  3983  000C1C  D801               	call	u1168
  3984  000C1E  D00A               	goto	u1169
  3985  000C20                     u1168:
  3986  000C20  0005               	push	
  3987  000C22  6EFA               	movwf	pclath,c
  3988  000C24  50DE               	movf	postinc2,w,c
  3989  000C26  6EFD               	movwf	tosl,c
  3990  000C28  50DE               	movf	postinc2,w,c
  3991  000C2A  6EFE               	movwf	tosh,c
  3992  000C2C  50F8               	movf	tblptru,w,c
  3993  000C2E  6EFF               	movwf	tosu,c
  3994  000C30  50FA               	movf	pclath,w,c
  3995  000C32  0012               	return		;indir
  3996  000C34                     u1169:
  3997                           
  3998                           ; Switch size 1, requested type "space"
  3999                           ; Number of cases is 2, Range of values is 2 to 3
  4000                           ; switch strategies available:
  4001                           ; Name         Instructions Cycles
  4002                           ; simple_byte            7     4 (average)
  4003                           ;	Chosen strategy is simple_byte
  4004  000C34  0A02               	xorlw	2	; case 2
  4005  000C36  B4D8               	btfsc	status,2,c
  4006  000C38  D7E5               	goto	l162
  4007  000C3A  0A01               	xorlw	1	; case 3
  4008  000C3C  B4D8               	btfsc	status,2,c
  4009  000C3E  D7E2               	goto	l162
  4010  000C40  D7E4               	goto	l165
  4011  000C42                     __end_of_do_I2C_DO_ADDRESS_NACK:
  4012                           	opt stack 0
  4013                           tosu	equ	0xFFF
  4014                           tosh	equ	0xFFE
  4015                           tosl	equ	0xFFD
  4016                           pclath	equ	0xFFA
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           intcon2	equ	0xFF1
  4025                           postinc0	equ	0xFEE
  4026                           plusw0	equ	0xFEB
  4027                           wreg	equ	0xFE8
  4028                           postdec1	equ	0xFE5
  4029                           plusw1	equ	0xFE3
  4030                           fsr1l	equ	0xFE1
  4031                           indf2	equ	0xFDF
  4032                           postinc2	equ	0xFDE
  4033                           plusw2	equ	0xFDB
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  4039 ;; Defined at:
  4040 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;		None
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;		None
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      enum E7019
  4047 ;; Registers used:
  4048 ;;		wreg, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4054 ;;      Params:         0       0       0       0       0       0       0
  4055 ;;      Locals:         0       0       0       0       0       0       0
  4056 ;;      Temps:          0       0       0       0       0       0       0
  4057 ;;      Totals:         0       0       0       0       0       0       0
  4058 ;;Total ram usage:        0 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    6
  4061 ;; This function calls:
  4062 ;;		_i2c1_driver_sendNACK
  4063 ;; This function is called by:
  4064 ;;		_do_I2C_RX
  4065 ;;		_i2c_ISR
  4066 ;;		i2_i2c_ISR
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text32
  4071  0010B8                     __ptext32:
  4072                           	opt stack 0
  4073  0010B8                     _do_I2C_DO_NACK_RESTART:
  4074                           	opt stack 0
  4075                           
  4076                           ;Skip over the trampoline to the duplicate function for level 2
  4077  0010B8  B24B               	btfsc	btemp,1,c
  4078  0010BA  EFCB  F008         	goto	i2_do_I2C_DO_NACK_RESTART
  4079  0010BE                     _do_I2C_DO_NACK_RESTART$intlevel0:
  4080                           	opt stack 18
  4081                           
  4082                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  4083                           
  4084                           ;incstack = 0
  4085  0010BE  ECEB  F008         	call	_i2c1_driver_sendNACK	;wreg free
  4086                           
  4087                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  4088  0010C2  0E09               	movlw	9
  4089  0010C4  0012               	return	
  4090  0010C6                     __end_of_do_I2C_DO_NACK_RESTART:
  4091                           	opt stack 0
  4092                           tosu	equ	0xFFF
  4093                           tosh	equ	0xFFE
  4094                           tosl	equ	0xFFD
  4095                           pclath	equ	0xFFA
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           intcon2	equ	0xFF1
  4104                           postinc0	equ	0xFEE
  4105                           plusw0	equ	0xFEB
  4106                           wreg	equ	0xFE8
  4107                           postdec1	equ	0xFE5
  4108                           plusw1	equ	0xFE3
  4109                           fsr1l	equ	0xFE1
  4110                           indf2	equ	0xFDF
  4111                           postinc2	equ	0xFDE
  4112                           plusw2	equ	0xFDB
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  4118 ;; Defined at:
  4119 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;		None
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;		None
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      enum E7019
  4126 ;; Registers used:
  4127 ;;		wreg, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4133 ;;      Params:         0       0       0       0       0       0       0
  4134 ;;      Locals:         0       0       0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0
  4136 ;;      Totals:         0       0       0       0       0       0       0
  4137 ;;Total ram usage:        0 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    6
  4140 ;; This function calls:
  4141 ;;		_i2c1_driver_sendNACK
  4142 ;; This function is called by:
  4143 ;;		_do_I2C_RX
  4144 ;;		_i2c_ISR
  4145 ;;		i2_i2c_ISR
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text33
  4150  0010C6                     __ptext33:
  4151                           	opt stack 0
  4152  0010C6                     _do_I2C_DO_NACK_STOP:
  4153                           	opt stack 0
  4154                           
  4155                           ;Skip over the trampoline to the duplicate function for level 2
  4156  0010C6  B24B               	btfsc	btemp,1,c
  4157  0010C8  EFCF  F008         	goto	i2_do_I2C_DO_NACK_STOP
  4158  0010CC                     _do_I2C_DO_NACK_STOP$intlevel0:
  4159                           	opt stack 18
  4160                           
  4161                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  4162                           
  4163                           ;incstack = 0
  4164  0010CC  ECEB  F008         	call	_i2c1_driver_sendNACK	;wreg free
  4165                           
  4166                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  4167  0010D0  0E0A               	movlw	10
  4168  0010D2  0012               	return	
  4169  0010D4                     __end_of_do_I2C_DO_NACK_STOP:
  4170                           	opt stack 0
  4171                           tosu	equ	0xFFF
  4172                           tosh	equ	0xFFE
  4173                           tosl	equ	0xFFD
  4174                           pclath	equ	0xFFA
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           intcon2	equ	0xFF1
  4183                           postinc0	equ	0xFEE
  4184                           plusw0	equ	0xFEB
  4185                           wreg	equ	0xFE8
  4186                           postdec1	equ	0xFE5
  4187                           plusw1	equ	0xFE3
  4188                           fsr1l	equ	0xFE1
  4189                           indf2	equ	0xFDF
  4190                           postinc2	equ	0xFDE
  4191                           plusw2	equ	0xFDB
  4192                           fsr2h	equ	0xFDA
  4193                           fsr2l	equ	0xFD9
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function _do_I2C_DO_ACK *****************
  4197 ;; Defined at:
  4198 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      enum E7019
  4205 ;; Registers used:
  4206 ;;		wreg, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4212 ;;      Params:         0       0       0       0       0       0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0
  4215 ;;      Totals:         0       0       0       0       0       0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    6
  4219 ;; This function calls:
  4220 ;;		_i2c1_driver_sendACK
  4221 ;; This function is called by:
  4222 ;;		_i2c_ISR
  4223 ;;		i2_i2c_ISR
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text34
  4228  0010D4                     __ptext34:
  4229                           	opt stack 0
  4230  0010D4                     _do_I2C_DO_ACK:
  4231                           	opt stack 0
  4232                           
  4233                           ;Skip over the trampoline to the duplicate function for level 2
  4234  0010D4  B24B               	btfsc	btemp,1,c
  4235  0010D6  EFD3  F008         	goto	i2_do_I2C_DO_ACK
  4236  0010DA                     _do_I2C_DO_ACK$intlevel0:
  4237                           	opt stack 19
  4238                           
  4239                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  4240                           
  4241                           ;incstack = 0
  4242  0010DA  ECEE  F008         	call	_i2c1_driver_sendACK	;wreg free
  4243                           
  4244                           ;i2c_master.c: 362: return I2C_RCEN;
  4245  0010DE  0E05               	movlw	5
  4246  0010E0  0012               	return	
  4247  0010E2                     __end_of_do_I2C_DO_ACK:
  4248                           	opt stack 0
  4249                           tosu	equ	0xFFF
  4250                           tosh	equ	0xFFE
  4251                           tosl	equ	0xFFD
  4252                           pclath	equ	0xFFA
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           prodh	equ	0xFF4
  4258                           prodl	equ	0xFF3
  4259                           intcon	equ	0xFF2
  4260                           intcon2	equ	0xFF1
  4261                           postinc0	equ	0xFEE
  4262                           plusw0	equ	0xFEB
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           plusw1	equ	0xFE3
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           postinc2	equ	0xFDE
  4269                           plusw2	equ	0xFDB
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _do_I2C_RCEN *****************
  4275 ;; Defined at:
  4276 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      enum E7019
  4283 ;; Registers used:
  4284 ;;		wreg, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4290 ;;      Params:         0       0       0       0       0       0       0
  4291 ;;      Locals:         0       0       0       0       0       0       0
  4292 ;;      Temps:          0       0       0       0       0       0       0
  4293 ;;      Totals:         0       0       0       0       0       0       0
  4294 ;;Total ram usage:        0 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    6
  4297 ;; This function calls:
  4298 ;;		_i2c1_driver_startRX
  4299 ;; This function is called by:
  4300 ;;		_i2c_ISR
  4301 ;;		i2_i2c_ISR
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text35
  4306  001028                     __ptext35:
  4307                           	opt stack 0
  4308  001028                     _do_I2C_RCEN:
  4309                           	opt stack 0
  4310                           
  4311                           ;Skip over the trampoline to the duplicate function for level 2
  4312  001028  B24B               	btfsc	btemp,1,c
  4313  00102A  EF94  F008         	goto	i2_do_I2C_RCEN
  4314  00102E                     _do_I2C_RCEN$intlevel0:
  4315                           	opt stack 19
  4316                           
  4317                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  4318                           
  4319                           ;incstack = 0
  4320  00102E  0100               	movlb	0	; () banked
  4321  001030  979C               	bcf	_i2c_status& (0+255),3,b
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;i2c_master.c: 355: i2c1_driver_startRX();
  4325  001032  EC00  F009         	call	_i2c1_driver_startRX	;wreg free
  4326                           
  4327                           ;i2c_master.c: 356: return I2C_RX;
  4328  001036  0E04               	movlw	4
  4329  001038  0012               	return	
  4330  00103A                     __end_of_do_I2C_RCEN:
  4331                           	opt stack 0
  4332                           tosu	equ	0xFFF
  4333                           tosh	equ	0xFFE
  4334                           tosl	equ	0xFFD
  4335                           pclath	equ	0xFFA
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           intcon2	equ	0xFF1
  4344                           postinc0	equ	0xFEE
  4345                           plusw0	equ	0xFEB
  4346                           wreg	equ	0xFE8
  4347                           postdec1	equ	0xFE5
  4348                           plusw1	equ	0xFE3
  4349                           fsr1l	equ	0xFE1
  4350                           indf2	equ	0xFDF
  4351                           postinc2	equ	0xFDE
  4352                           plusw2	equ	0xFDB
  4353                           fsr2h	equ	0xFDA
  4354                           fsr2l	equ	0xFD9
  4355                           status	equ	0xFD8
  4356                           
  4357 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  4358 ;; Defined at:
  4359 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;		None
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;		None
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  1    wreg      enum E7019
  4366 ;; Registers used:
  4367 ;;		wreg, status,2, status,0, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4373 ;;      Params:         0       0       0       0       0       0       0
  4374 ;;      Locals:         0       0       0       0       0       0       0
  4375 ;;      Temps:          0       0       0       0       0       0       0
  4376 ;;      Totals:         0       0       0       0       0       0       0
  4377 ;;Total ram usage:        0 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    6
  4380 ;; This function calls:
  4381 ;;		_i2c1_driver_TXData
  4382 ;; This function is called by:
  4383 ;;		_i2c_ISR
  4384 ;;		i2_i2c_ISR
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text36
  4389  000F6C                     __ptext36:
  4390                           	opt stack 0
  4391  000F6C                     _do_I2C_SEND_ADR_WRITE:
  4392                           	opt stack 0
  4393                           
  4394                           ;Skip over the trampoline to the duplicate function for level 2
  4395  000F6C  B24B               	btfsc	btemp,1,c
  4396  000F6E  EF2E  F008         	goto	i2_do_I2C_SEND_ADR_WRITE
  4397  000F72                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  4398                           	opt stack 19
  4399                           
  4400                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  4401                           
  4402                           ;incstack = 0
  4403  000F72  0100               	movlb	0	; () banked
  4404  000F74  879C               	bsf	_i2c_status& (0+255),3,b
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  4408  000F76  519D               	movf	(_i2c_status+1)& (0+255),w,b
  4409  000F78  259D               	addwf	(_i2c_status+1)& (0+255),w,b
  4410  000F7A  ECC7  F008         	call	_i2c1_driver_TXData
  4411                           
  4412                           ;i2c_master.c: 349: return I2C_TX;
  4413  000F7E  0E03               	movlw	3
  4414  000F80  0012               	return	
  4415  000F82                     __end_of_do_I2C_SEND_ADR_WRITE:
  4416                           	opt stack 0
  4417                           tosu	equ	0xFFF
  4418                           tosh	equ	0xFFE
  4419                           tosl	equ	0xFFD
  4420                           pclath	equ	0xFFA
  4421                           tblptru	equ	0xFF8
  4422                           tblptrh	equ	0xFF7
  4423                           tblptrl	equ	0xFF6
  4424                           tablat	equ	0xFF5
  4425                           prodh	equ	0xFF4
  4426                           prodl	equ	0xFF3
  4427                           intcon	equ	0xFF2
  4428                           intcon2	equ	0xFF1
  4429                           postinc0	equ	0xFEE
  4430                           plusw0	equ	0xFEB
  4431                           wreg	equ	0xFE8
  4432                           postdec1	equ	0xFE5
  4433                           plusw1	equ	0xFE3
  4434                           fsr1l	equ	0xFE1
  4435                           indf2	equ	0xFDF
  4436                           postinc2	equ	0xFDE
  4437                           plusw2	equ	0xFDB
  4438                           fsr2h	equ	0xFDA
  4439                           fsr2l	equ	0xFD9
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function _do_I2C_SEND_INITIAL_READ *****************
  4443 ;; Defined at:
  4444 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;		None
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  1    wreg      enum E7019
  4451 ;; Registers used:
  4452 ;;		wreg, status,2, status,0, cstack
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4458 ;;      Params:         0       0       0       0       0       0       0
  4459 ;;      Locals:         0       0       0       0       0       0       0
  4460 ;;      Temps:          0       0       0       0       0       0       0
  4461 ;;      Totals:         0       0       0       0       0       0       0
  4462 ;;Total ram usage:        0 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:    6
  4465 ;; This function calls:
  4466 ;;		_i2c1_driver_TXData
  4467 ;; This function is called by:
  4468 ;;		_i2c_ISR
  4469 ;;		i2_i2c_ISR
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text37
  4474  000F82                     __ptext37:
  4475                           	opt stack 0
  4476  000F82                     _do_I2C_SEND_INITIAL_READ:
  4477                           	opt stack 0
  4478                           
  4479                           ;Skip over the trampoline to the duplicate function for level 2
  4480  000F82  B24B               	btfsc	btemp,1,c
  4481  000F84  EF36  F008         	goto	i2_do_I2C_SEND_INITIAL_READ
  4482  000F88                     _do_I2C_SEND_INITIAL_READ$intlevel0:
  4483                           	opt stack 19
  4484                           
  4485                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  4486                           
  4487                           ;incstack = 0
  4488  000F88  0100               	movlb	0	; () banked
  4489  000F8A  879C               	bsf	_i2c_status& (0+255),3,b
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  4493  000F8C  519D               	movf	(_i2c_status+1)& (0+255),w,b
  4494  000F8E  259D               	addwf	(_i2c_status+1)& (0+255),w,b
  4495  000F90  ECC7  F008         	call	_i2c1_driver_TXData
  4496                           
  4497                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  4498  000F94  0E11               	movlw	17
  4499  000F96  0012               	return	
  4500  000F98                     __end_of_do_I2C_SEND_INITIAL_READ:
  4501                           	opt stack 0
  4502                           tosu	equ	0xFFF
  4503                           tosh	equ	0xFFE
  4504                           tosl	equ	0xFFD
  4505                           pclath	equ	0xFFA
  4506                           tblptru	equ	0xFF8
  4507                           tblptrh	equ	0xFF7
  4508                           tblptrl	equ	0xFF6
  4509                           tablat	equ	0xFF5
  4510                           prodh	equ	0xFF4
  4511                           prodl	equ	0xFF3
  4512                           intcon	equ	0xFF2
  4513                           intcon2	equ	0xFF1
  4514                           postinc0	equ	0xFEE
  4515                           plusw0	equ	0xFEB
  4516                           wreg	equ	0xFE8
  4517                           postdec1	equ	0xFE5
  4518                           plusw1	equ	0xFE3
  4519                           fsr1l	equ	0xFE1
  4520                           indf2	equ	0xFDF
  4521                           postinc2	equ	0xFDE
  4522                           plusw2	equ	0xFDB
  4523                           fsr2h	equ	0xFDA
  4524                           fsr2l	equ	0xFD9
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  4528 ;; Defined at:
  4529 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;		None
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;		None
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  1    wreg      enum E7019
  4536 ;; Registers used:
  4537 ;;		wreg, status,0, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4543 ;;      Params:         0       0       0       0       0       0       0
  4544 ;;      Locals:         0       0       0       0       0       0       0
  4545 ;;      Temps:          0       0       0       0       0       0       0
  4546 ;;      Totals:         0       0       0       0       0       0       0
  4547 ;;Total ram usage:        0 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    6
  4550 ;; This function calls:
  4551 ;;		_i2c1_driver_TXData
  4552 ;; This function is called by:
  4553 ;;		_i2c_ISR
  4554 ;;		i2_i2c_ISR
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           	psect	text38
  4559  000F98                     __ptext38:
  4560                           	opt stack 0
  4561  000F98                     _do_I2C_SEND_ADR_READ:
  4562                           	opt stack 0
  4563                           
  4564                           ;Skip over the trampoline to the duplicate function for level 2
  4565  000F98  B24B               	btfsc	btemp,1,c
  4566  000F9A  EF3E  F008         	goto	i2_do_I2C_SEND_ADR_READ
  4567  000F9E                     _do_I2C_SEND_ADR_READ$intlevel0:
  4568                           	opt stack 19
  4569                           
  4570                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  4571                           
  4572                           ;incstack = 0
  4573  000F9E  0100               	movlb	0	; () banked
  4574  000FA0  879C               	bsf	_i2c_status& (0+255),3,b
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  4578  000FA2  80D8               	bsf	status,0,c
  4579  000FA4  359D               	rlcf	(_i2c_status+1)& (0+255),w,b
  4580  000FA6  ECC7  F008         	call	_i2c1_driver_TXData
  4581                           
  4582                           ;i2c_master.c: 325: return I2C_RCEN;
  4583  000FAA  0E05               	movlw	5
  4584  000FAC  0012               	return	
  4585  000FAE                     __end_of_do_I2C_SEND_ADR_READ:
  4586                           	opt stack 0
  4587                           tosu	equ	0xFFF
  4588                           tosh	equ	0xFFE
  4589                           tosl	equ	0xFFD
  4590                           pclath	equ	0xFFA
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           intcon	equ	0xFF2
  4598                           intcon2	equ	0xFF1
  4599                           postinc0	equ	0xFEE
  4600                           plusw0	equ	0xFEB
  4601                           wreg	equ	0xFE8
  4602                           postdec1	equ	0xFE5
  4603                           plusw1	equ	0xFE3
  4604                           fsr1l	equ	0xFE1
  4605                           indf2	equ	0xFDF
  4606                           postinc2	equ	0xFDE
  4607                           plusw2	equ	0xFDB
  4608                           fsr2h	equ	0xFDA
  4609                           fsr2l	equ	0xFD9
  4610                           status	equ	0xFD8
  4611                           
  4612 ;; *************** function _do_I2C_SEND_STOP *****************
  4613 ;; Defined at:
  4614 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;		None
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  1    wreg      enum E7019
  4621 ;; Registers used:
  4622 ;;		wreg, cstack
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4628 ;;      Params:         0       0       0       0       0       0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0
  4630 ;;      Temps:          0       0       0       0       0       0       0
  4631 ;;      Totals:         0       0       0       0       0       0       0
  4632 ;;Total ram usage:        0 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    6
  4635 ;; This function calls:
  4636 ;;		_i2c1_driver_stop
  4637 ;; This function is called by:
  4638 ;;		_do_I2C_DO_ADDRESS_NACK
  4639 ;;		_do_I2C_TX
  4640 ;;		_do_I2C_TX_EMPTY
  4641 ;;		_i2c_ISR
  4642 ;;		i2_i2c_ISR
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text39
  4647  0010E2                     __ptext39:
  4648                           	opt stack 0
  4649  0010E2                     _do_I2C_SEND_STOP:
  4650                           	opt stack 0
  4651                           
  4652                           ;Skip over the trampoline to the duplicate function for level 2
  4653  0010E2  B24B               	btfsc	btemp,1,c
  4654  0010E4  EFD7  F008         	goto	i2_do_I2C_SEND_STOP
  4655  0010E8                     _do_I2C_SEND_STOP$intlevel0:
  4656                           	opt stack 18
  4657                           
  4658                           ;i2c_master.c: 316: i2c1_driver_stop();
  4659                           
  4660                           ;incstack = 0
  4661  0010E8  EC02  F009         	call	_i2c1_driver_stop	;wreg free
  4662                           
  4663                           ;i2c_master.c: 317: return I2C_IDLE;
  4664  0010EC  0E00               	movlw	0
  4665  0010EE  0012               	return	
  4666  0010F0                     __end_of_do_I2C_SEND_STOP:
  4667                           	opt stack 0
  4668                           tosu	equ	0xFFF
  4669                           tosh	equ	0xFFE
  4670                           tosl	equ	0xFFD
  4671                           pclath	equ	0xFFA
  4672                           tblptru	equ	0xFF8
  4673                           tblptrh	equ	0xFF7
  4674                           tblptrl	equ	0xFF6
  4675                           tablat	equ	0xFF5
  4676                           prodh	equ	0xFF4
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           intcon2	equ	0xFF1
  4680                           postinc0	equ	0xFEE
  4681                           plusw0	equ	0xFEB
  4682                           wreg	equ	0xFE8
  4683                           postdec1	equ	0xFE5
  4684                           plusw1	equ	0xFE3
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           plusw2	equ	0xFDB
  4689                           fsr2h	equ	0xFDA
  4690                           fsr2l	equ	0xFD9
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function _do_I2C_SEND_RESTART *****************
  4694 ;; Defined at:
  4695 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      enum E7019
  4702 ;; Registers used:
  4703 ;;		wreg, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4709 ;;      Params:         0       0       0       0       0       0       0
  4710 ;;      Locals:         0       0       0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0
  4712 ;;      Totals:         0       0       0       0       0       0       0
  4713 ;;Total ram usage:        0 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    6
  4716 ;; This function calls:
  4717 ;;		_i2c1_driver_restart
  4718 ;; This function is called by:
  4719 ;;		_do_I2C_DO_ADDRESS_NACK
  4720 ;;		_do_I2C_TX_EMPTY
  4721 ;;		_i2c_ISR
  4722 ;;		i2_i2c_ISR
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text40
  4727  0010F0                     __ptext40:
  4728                           	opt stack 0
  4729  0010F0                     _do_I2C_SEND_RESTART:
  4730                           	opt stack 0
  4731                           
  4732                           ;Skip over the trampoline to the duplicate function for level 2
  4733  0010F0  B24B               	btfsc	btemp,1,c
  4734  0010F2  EFDB  F008         	goto	i2_do_I2C_SEND_RESTART
  4735  0010F6                     _do_I2C_SEND_RESTART$intlevel0:
  4736                           	opt stack 18
  4737                           
  4738                           ;i2c_master.c: 310: i2c1_driver_restart();
  4739                           
  4740                           ;incstack = 0
  4741  0010F6  EC04  F009         	call	_i2c1_driver_restart	;wreg free
  4742                           
  4743                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  4744  0010FA  0E01               	movlw	1
  4745  0010FC  0012               	return	
  4746  0010FE                     __end_of_do_I2C_SEND_RESTART:
  4747                           	opt stack 0
  4748                           tosu	equ	0xFFF
  4749                           tosh	equ	0xFFE
  4750                           tosl	equ	0xFFD
  4751                           pclath	equ	0xFFA
  4752                           tblptru	equ	0xFF8
  4753                           tblptrh	equ	0xFF7
  4754                           tblptrl	equ	0xFF6
  4755                           tablat	equ	0xFF5
  4756                           prodh	equ	0xFF4
  4757                           prodl	equ	0xFF3
  4758                           intcon	equ	0xFF2
  4759                           intcon2	equ	0xFF1
  4760                           postinc0	equ	0xFEE
  4761                           plusw0	equ	0xFEB
  4762                           wreg	equ	0xFE8
  4763                           postdec1	equ	0xFE5
  4764                           plusw1	equ	0xFE3
  4765                           fsr1l	equ	0xFE1
  4766                           indf2	equ	0xFDF
  4767                           postinc2	equ	0xFDE
  4768                           plusw2	equ	0xFDB
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  4774 ;; Defined at:
  4775 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      enum E7019
  4782 ;; Registers used:
  4783 ;;		wreg, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4789 ;;      Params:         0       0       0       0       0       0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0
  4792 ;;      Totals:         0       0       0       0       0       0       0
  4793 ;;Total ram usage:        0 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    6
  4796 ;; This function calls:
  4797 ;;		_i2c1_driver_restart
  4798 ;; This function is called by:
  4799 ;;		_do_I2C_TX
  4800 ;;		_i2c_ISR
  4801 ;;		i2_i2c_ISR
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text41
  4806  0010FE                     __ptext41:
  4807                           	opt stack 0
  4808  0010FE                     _do_I2C_SEND_RESTART_WRITE:
  4809                           	opt stack 0
  4810                           
  4811                           ;Skip over the trampoline to the duplicate function for level 2
  4812  0010FE  B24B               	btfsc	btemp,1,c
  4813  001100  EFDF  F008         	goto	i2_do_I2C_SEND_RESTART_WRITE
  4814  001104                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  4815                           	opt stack 18
  4816                           
  4817                           ;i2c_master.c: 304: i2c1_driver_restart();
  4818                           
  4819                           ;incstack = 0
  4820  001104  EC04  F009         	call	_i2c1_driver_restart	;wreg free
  4821                           
  4822                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  4823  001108  0E02               	movlw	2
  4824  00110A  0012               	return	
  4825  00110C                     __end_of_do_I2C_SEND_RESTART_WRITE:
  4826                           	opt stack 0
  4827                           tosu	equ	0xFFF
  4828                           tosh	equ	0xFFE
  4829                           tosl	equ	0xFFD
  4830                           pclath	equ	0xFFA
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           intcon2	equ	0xFF1
  4839                           postinc0	equ	0xFEE
  4840                           plusw0	equ	0xFEB
  4841                           wreg	equ	0xFE8
  4842                           postdec1	equ	0xFE5
  4843                           plusw1	equ	0xFE3
  4844                           fsr1l	equ	0xFE1
  4845                           indf2	equ	0xFDF
  4846                           postinc2	equ	0xFDE
  4847                           plusw2	equ	0xFDB
  4848                           fsr2h	equ	0xFDA
  4849                           fsr2l	equ	0xFD9
  4850                           status	equ	0xFD8
  4851                           
  4852 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  4853 ;; Defined at:
  4854 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;		None
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      enum E7019
  4861 ;; Registers used:
  4862 ;;		wreg, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4868 ;;      Params:         0       0       0       0       0       0       0
  4869 ;;      Locals:         0       0       0       0       0       0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0
  4871 ;;      Totals:         0       0       0       0       0       0       0
  4872 ;;Total ram usage:        0 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    6
  4875 ;; This function calls:
  4876 ;;		_i2c1_driver_restart
  4877 ;; This function is called by:
  4878 ;;		_do_I2C_TX
  4879 ;;		_i2c_ISR
  4880 ;;		i2_i2c_ISR
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text42
  4885  00110C                     __ptext42:
  4886                           	opt stack 0
  4887  00110C                     _do_I2C_SEND_RESTART_READ:
  4888                           	opt stack 0
  4889                           
  4890                           ;Skip over the trampoline to the duplicate function for level 2
  4891  00110C  B24B               	btfsc	btemp,1,c
  4892  00110E  EFE3  F008         	goto	i2_do_I2C_SEND_RESTART_READ
  4893  001112                     _do_I2C_SEND_RESTART_READ$intlevel0:
  4894                           	opt stack 18
  4895                           
  4896                           ;i2c_master.c: 298: i2c1_driver_restart();
  4897                           
  4898                           ;incstack = 0
  4899  001112  EC04  F009         	call	_i2c1_driver_restart	;wreg free
  4900                           
  4901                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  4902  001116  0E01               	movlw	1
  4903  001118  0012               	return	
  4904  00111A                     __end_of_do_I2C_SEND_RESTART_READ:
  4905                           	opt stack 0
  4906                           tosu	equ	0xFFF
  4907                           tosh	equ	0xFFE
  4908                           tosl	equ	0xFFD
  4909                           pclath	equ	0xFFA
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           intcon	equ	0xFF2
  4917                           intcon2	equ	0xFF1
  4918                           postinc0	equ	0xFEE
  4919                           plusw0	equ	0xFEB
  4920                           wreg	equ	0xFE8
  4921                           postdec1	equ	0xFE5
  4922                           plusw1	equ	0xFE3
  4923                           fsr1l	equ	0xFE1
  4924                           indf2	equ	0xFDF
  4925                           postinc2	equ	0xFDE
  4926                           plusw2	equ	0xFDB
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _do_I2C_IDLE *****************
  4932 ;; Defined at:
  4933 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;		None
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      enum E7019
  4940 ;; Registers used:
  4941 ;;		wreg, status,2
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4947 ;;      Params:         0       0       0       0       0       0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0
  4949 ;;      Temps:          0       0       0       0       0       0       0
  4950 ;;      Totals:         0       0       0       0       0       0       0
  4951 ;;Total ram usage:        0 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    5
  4954 ;; This function calls:
  4955 ;;		Nothing
  4956 ;; This function is called by:
  4957 ;;		_i2c_ISR
  4958 ;;		i2_i2c_ISR
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           	psect	text43
  4963  00103A                     __ptext43:
  4964                           	opt stack 0
  4965  00103A                     _do_I2C_IDLE:
  4966                           	opt stack 0
  4967                           
  4968                           ;Skip over the trampoline to the duplicate function for level 2
  4969  00103A  B24B               	btfsc	btemp,1,c
  4970  00103C  EF9A  F008         	goto	i2_do_I2C_IDLE
  4971  001040                     _do_I2C_IDLE$intlevel0:
  4972                           	opt stack 20
  4973                           
  4974                           ;i2c_master.c: 291: i2c_status.busy = 0;
  4975                           
  4976                           ;incstack = 0
  4977  001040  0100               	movlb	0	; () banked
  4978  001042  919C               	bcf	_i2c_status& (0+255),0,b
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  4982  001044  0E00               	movlw	0
  4983  001046  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;i2c_master.c: 293: return I2C_RESET;
  4987  001048  0E0E               	movlw	14
  4988  00104A  0012               	return	
  4989  00104C                     __end_of_do_I2C_IDLE:
  4990                           	opt stack 0
  4991                           tosu	equ	0xFFF
  4992                           tosh	equ	0xFFE
  4993                           tosl	equ	0xFFD
  4994                           pclath	equ	0xFFA
  4995                           tblptru	equ	0xFF8
  4996                           tblptrh	equ	0xFF7
  4997                           tblptrl	equ	0xFF6
  4998                           tablat	equ	0xFF5
  4999                           prodh	equ	0xFF4
  5000                           prodl	equ	0xFF3
  5001                           intcon	equ	0xFF2
  5002                           intcon2	equ	0xFF1
  5003                           postinc0	equ	0xFEE
  5004                           plusw0	equ	0xFEB
  5005                           wreg	equ	0xFE8
  5006                           postdec1	equ	0xFE5
  5007                           plusw1	equ	0xFE3
  5008                           fsr1l	equ	0xFE1
  5009                           indf2	equ	0xFDF
  5010                           postinc2	equ	0xFDE
  5011                           plusw2	equ	0xFDB
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function _do_I2C_RESET *****************
  5017 ;; Defined at:
  5018 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;		None
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      enum E7019
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5032 ;;      Params:         0       0       0       0       0       0       0
  5033 ;;      Locals:         0       0       0       0       0       0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0
  5035 ;;      Totals:         0       0       0       0       0       0       0
  5036 ;;Total ram usage:        0 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    6
  5039 ;; This function calls:
  5040 ;;		_i2c1_driver_resetBus
  5041 ;; This function is called by:
  5042 ;;		_i2c_ISR
  5043 ;;		i2_i2c_ISR
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text44
  5048  000FAE                     __ptext44:
  5049                           	opt stack 0
  5050  000FAE                     _do_I2C_RESET:
  5051                           	opt stack 0
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;Skip over the trampoline to the duplicate function for level 2
  5055  000FAE  B24B               	btfsc	btemp,1,c
  5056  000FB0  EF46  F008         	goto	i2_do_I2C_RESET
  5057  000FB4                     _do_I2C_RESET$intlevel0:
  5058                           	opt stack 19
  5059                           
  5060                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  5061                           
  5062                           ;incstack = 0
  5063  000FB4  EC1E  F009         	call	_i2c1_driver_resetBus	;wreg free
  5064                           
  5065                           ;i2c_master.c: 284: i2c_status.busy = 0;
  5066  000FB8  0100               	movlb	0	; () banked
  5067  000FBA  919C               	bcf	_i2c_status& (0+255),0,b
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  5071  000FBC  0E00               	movlw	0
  5072  000FBE  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;i2c_master.c: 286: return I2C_RESET;
  5076  000FC0  0E0E               	movlw	14
  5077  000FC2  0012               	return	
  5078  000FC4                     __end_of_do_I2C_RESET:
  5079                           	opt stack 0
  5080                           tosu	equ	0xFFF
  5081                           tosh	equ	0xFFE
  5082                           tosl	equ	0xFFD
  5083                           pclath	equ	0xFFA
  5084                           tblptru	equ	0xFF8
  5085                           tblptrh	equ	0xFF7
  5086                           tblptrl	equ	0xFF6
  5087                           tablat	equ	0xFF5
  5088                           prodh	equ	0xFF4
  5089                           prodl	equ	0xFF3
  5090                           intcon	equ	0xFF2
  5091                           intcon2	equ	0xFF1
  5092                           postinc0	equ	0xFEE
  5093                           plusw0	equ	0xFEB
  5094                           wreg	equ	0xFE8
  5095                           postdec1	equ	0xFE5
  5096                           plusw1	equ	0xFE3
  5097                           fsr1l	equ	0xFE1
  5098                           indf2	equ	0xFDF
  5099                           postinc2	equ	0xFDE
  5100                           plusw2	equ	0xFDB
  5101                           fsr2h	equ	0xFDA
  5102                           fsr2l	equ	0xFD9
  5103                           status	equ	0xFD8
  5104                           
  5105 ;; *************** function _do_I2C_TX_REGISTER *****************
  5106 ;; Defined at:
  5107 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;		None
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;		None
  5112 ;; Return value:  Size  Location     Type
  5113 ;;                  1    wreg      enum E7019
  5114 ;; Registers used:
  5115 ;;		wreg, status,2, cstack
  5116 ;; Tracked objects:
  5117 ;;		On entry : 0/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5121 ;;      Params:         0       0       0       0       0       0       0
  5122 ;;      Locals:         0       0       0       0       0       0       0
  5123 ;;      Temps:          0       0       0       0       0       0       0
  5124 ;;      Totals:         0       0       0       0       0       0       0
  5125 ;;Total ram usage:        0 bytes
  5126 ;; Hardware stack levels used:    1
  5127 ;; Hardware stack levels required when called:    6
  5128 ;; This function calls:
  5129 ;;		_i2c1_driver_TXData
  5130 ;; This function is called by:
  5131 ;;		_i2c_ISR
  5132 ;;		i2_i2c_ISR
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           	psect	text45
  5137  000FF0                     __ptext45:
  5138                           	opt stack 0
  5139  000FF0                     _do_I2C_TX_REGISTER:
  5140                           	opt stack 0
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;Skip over the trampoline to the duplicate function for level 2
  5144  000FF0  B24B               	btfsc	btemp,1,c
  5145  000FF2  EF8D  F008         	goto	i2_do_I2C_TX_REGISTER
  5146  000FF6                     _do_I2C_TX_REGISTER$intlevel0:
  5147                           	opt stack 19
  5148                           
  5149                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  5150                           
  5151                           ;incstack = 0
  5152  000FF6  0100               	movlb	0	; () banked
  5153  000FF8  879C               	bsf	_i2c_status& (0+255),3,b
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  5157  000FFA  51C0               	movf	(_i2c_status+36)& (0+255),w,b
  5158  000FFC  ECC7  F008         	call	_i2c1_driver_TXData
  5159                           
  5160                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  5161  001000  0E07               	movlw	7
  5162  001002  0012               	return	
  5163  001004                     __end_of_do_I2C_TX_REGISTER:
  5164                           	opt stack 0
  5165                           tosu	equ	0xFFF
  5166                           tosh	equ	0xFFE
  5167                           tosl	equ	0xFFD
  5168                           pclath	equ	0xFFA
  5169                           tblptru	equ	0xFF8
  5170                           tblptrh	equ	0xFF7
  5171                           tblptrl	equ	0xFF6
  5172                           tablat	equ	0xFF5
  5173                           prodh	equ	0xFF4
  5174                           prodl	equ	0xFF3
  5175                           intcon	equ	0xFF2
  5176                           intcon2	equ	0xFF1
  5177                           postinc0	equ	0xFEE
  5178                           plusw0	equ	0xFEB
  5179                           wreg	equ	0xFE8
  5180                           postdec1	equ	0xFE5
  5181                           plusw1	equ	0xFE3
  5182                           fsr1l	equ	0xFE1
  5183                           indf2	equ	0xFDF
  5184                           postinc2	equ	0xFDE
  5185                           plusw2	equ	0xFDB
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function _mssp1_setIRQ *****************
  5191 ;; Defined at:
  5192 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;		None
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;		None
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		None
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5206 ;;      Params:         0       0       0       0       0       0       0
  5207 ;;      Locals:         0       0       0       0       0       0       0
  5208 ;;      Temps:          0       0       0       0       0       0       0
  5209 ;;      Totals:         0       0       0       0       0       0       0
  5210 ;;Total ram usage:        0 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    5
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		_do_I2C_TX_EMPTY
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text46
  5221  0011F8                     __ptext46:
  5222                           	opt stack 0
  5223  0011F8                     _mssp1_setIRQ:
  5224                           	opt stack 19
  5225                           
  5226                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  5227                           
  5228                           ;incstack = 0
  5229  0011F8  869E               	bsf	3998,3,c	;volatile
  5230  0011FA  0012               	return		;funcret
  5231  0011FC                     __end_of_mssp1_setIRQ:
  5232                           	opt stack 0
  5233                           tosu	equ	0xFFF
  5234                           tosh	equ	0xFFE
  5235                           tosl	equ	0xFFD
  5236                           pclath	equ	0xFFA
  5237                           tblptru	equ	0xFF8
  5238                           tblptrh	equ	0xFF7
  5239                           tblptrl	equ	0xFF6
  5240                           tablat	equ	0xFF5
  5241                           prodh	equ	0xFF4
  5242                           prodl	equ	0xFF3
  5243                           intcon	equ	0xFF2
  5244                           intcon2	equ	0xFF1
  5245                           postinc0	equ	0xFEE
  5246                           plusw0	equ	0xFEB
  5247                           wreg	equ	0xFE8
  5248                           postdec1	equ	0xFE5
  5249                           plusw1	equ	0xFE3
  5250                           fsr1l	equ	0xFE1
  5251                           indf2	equ	0xFDF
  5252                           postinc2	equ	0xFDE
  5253                           plusw2	equ	0xFDB
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258 ;; *************** function _i2c1_driver_isNACK *****************
  5259 ;; Defined at:
  5260 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;		None
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;		None
  5265 ;; Return value:  Size  Location     Type
  5266 ;;		None               void
  5267 ;; Registers used:
  5268 ;;		wreg, status,2, status,0
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5274 ;;      Params:         0       0       0       0       0       0       0
  5275 ;;      Locals:         0       0       0       0       0       0       0
  5276 ;;      Temps:          1       0       0       0       0       0       0
  5277 ;;      Totals:         1       0       0       0       0       0       0
  5278 ;;Total ram usage:        1 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    5
  5281 ;; This function calls:
  5282 ;;		Nothing
  5283 ;; This function is called by:
  5284 ;;		_do_I2C_TX
  5285 ;;		_i2c_ISR
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text47
  5290  000FC4                     __ptext47:
  5291                           	opt stack 0
  5292  000FC4                     _i2c1_driver_isNACK:
  5293                           	opt stack 20
  5294                           
  5295                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  5296                           
  5297                           ;incstack = 0
  5298  000FC4  50C5               	movf	4037,w,c	;volatile
  5299  000FC6  0BBF               	andlw	-65
  5300  000FC8  0940               	iorlw	64
  5301  000FCA  6EC5               	movwf	4037,c	;volatile
  5302  000FCC  38C5               	swapf	4037,w,c	;volatile
  5303  000FCE  32E8               	rrcf	wreg,f,c
  5304  000FD0  32E8               	rrcf	wreg,f,c
  5305  000FD2  0B01               	andlw	1
  5306  000FD4  6E3A               	movwf	??_i2c1_driver_isNACK& (0+255),c
  5307  000FD6  303A               	rrcf	??_i2c1_driver_isNACK,w,c
  5308  000FD8  0012               	return	
  5309  000FDA                     __end_of_i2c1_driver_isNACK:
  5310                           	opt stack 0
  5311                           tosu	equ	0xFFF
  5312                           tosh	equ	0xFFE
  5313                           tosl	equ	0xFFD
  5314                           pclath	equ	0xFFA
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           intcon	equ	0xFF2
  5322                           intcon2	equ	0xFF1
  5323                           postinc0	equ	0xFEE
  5324                           plusw0	equ	0xFEB
  5325                           wreg	equ	0xFE8
  5326                           postdec1	equ	0xFE5
  5327                           plusw1	equ	0xFE3
  5328                           fsr1l	equ	0xFE1
  5329                           indf2	equ	0xFDF
  5330                           postinc2	equ	0xFDE
  5331                           plusw2	equ	0xFDB
  5332                           fsr2h	equ	0xFDA
  5333                           fsr2l	equ	0xFD9
  5334                           status	equ	0xFD8
  5335                           
  5336 ;; *************** function _i2c1_driver_TXData *****************
  5337 ;; Defined at:
  5338 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  d               1    wreg     unsigned char 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  d               1   20[COMRAM] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5352 ;;      Params:         0       0       0       0       0       0       0
  5353 ;;      Locals:         1       0       0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0
  5355 ;;      Totals:         1       0       0       0       0       0       0
  5356 ;;Total ram usage:        1 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    5
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_do_I2C_SEND_ADR_READ
  5363 ;;		_do_I2C_SEND_INITIAL_READ
  5364 ;;		_do_I2C_TX_REGISTER
  5365 ;;		_do_I2C_SEND_ADR_WRITE
  5366 ;;		_do_I2C_TX
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           	psect	text48
  5371  00118E                     __ptext48:
  5372                           	opt stack 0
  5373  00118E                     _i2c1_driver_TXData:
  5374                           	opt stack 19
  5375                           
  5376                           ;incstack = 0
  5377                           ;i2c1_driver_TXData@d stored from wreg
  5378  00118E  6E3A               	movwf	i2c1_driver_TXData@d,c
  5379                           
  5380                           ;i2c1_driver.c: 188: SSP1BUF = d;
  5381  001190  C03A  FFC9         	movff	i2c1_driver_TXData@d,4041	;volatile
  5382  001194  0012               	return		;funcret
  5383  001196                     __end_of_i2c1_driver_TXData:
  5384                           	opt stack 0
  5385                           tosu	equ	0xFFF
  5386                           tosh	equ	0xFFE
  5387                           tosl	equ	0xFFD
  5388                           pclath	equ	0xFFA
  5389                           tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           prodh	equ	0xFF4
  5394                           prodl	equ	0xFF3
  5395                           intcon	equ	0xFF2
  5396                           intcon2	equ	0xFF1
  5397                           postinc0	equ	0xFEE
  5398                           plusw0	equ	0xFEB
  5399                           wreg	equ	0xFE8
  5400                           postdec1	equ	0xFE5
  5401                           plusw1	equ	0xFE3
  5402                           fsr1l	equ	0xFE1
  5403                           indf2	equ	0xFDF
  5404                           postinc2	equ	0xFDE
  5405                           plusw2	equ	0xFDB
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function _i2c1_driver_getRXData *****************
  5411 ;; Defined at:
  5412 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      unsigned char 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5426 ;;      Params:         0       0       0       0       0       0       0
  5427 ;;      Locals:         0       0       0       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0
  5429 ;;      Totals:         0       0       0       0       0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    5
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_do_I2C_RX
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text49
  5441  0011FC                     __ptext49:
  5442                           	opt stack 0
  5443  0011FC                     _i2c1_driver_getRXData:
  5444                           	opt stack 19
  5445                           
  5446                           ;i2c1_driver.c: 173: return SSP1BUF;
  5447                           
  5448                           ;incstack = 0
  5449  0011FC  50C9               	movf	4041,w,c	;volatile
  5450  0011FE  0012               	return	
  5451  001200                     __end_of_i2c1_driver_getRXData:
  5452                           	opt stack 0
  5453                           tosu	equ	0xFFF
  5454                           tosh	equ	0xFFE
  5455                           tosl	equ	0xFFD
  5456                           pclath	equ	0xFFA
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           intcon	equ	0xFF2
  5464                           intcon2	equ	0xFF1
  5465                           postinc0	equ	0xFEE
  5466                           plusw0	equ	0xFEB
  5467                           wreg	equ	0xFE8
  5468                           postdec1	equ	0xFE5
  5469                           plusw1	equ	0xFE3
  5470                           fsr1l	equ	0xFE1
  5471                           indf2	equ	0xFDF
  5472                           postinc2	equ	0xFDE
  5473                           plusw2	equ	0xFDB
  5474                           fsr2h	equ	0xFDA
  5475                           fsr2l	equ	0xFD9
  5476                           status	equ	0xFD8
  5477                           
  5478 ;; *************** function _i2c1_driver_sendNACK *****************
  5479 ;; Defined at:
  5480 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;		None
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;		None
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  1    wreg      void 
  5487 ;; Registers used:
  5488 ;;		None
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5494 ;;      Params:         0       0       0       0       0       0       0
  5495 ;;      Locals:         0       0       0       0       0       0       0
  5496 ;;      Temps:          0       0       0       0       0       0       0
  5497 ;;      Totals:         0       0       0       0       0       0       0
  5498 ;;Total ram usage:        0 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    5
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_do_I2C_DO_NACK_STOP
  5505 ;;		_do_I2C_DO_NACK_RESTART
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text50
  5510  0011D6                     __ptext50:
  5511                           	opt stack 0
  5512  0011D6                     _i2c1_driver_sendNACK:
  5513                           	opt stack 18
  5514                           
  5515                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  5516                           
  5517                           ;incstack = 0
  5518  0011D6  8AC5               	bsf	4037,5,c	;volatile
  5519                           
  5520                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  5521  0011D8  88C5               	bsf	4037,4,c	;volatile
  5522  0011DA  0012               	return		;funcret
  5523  0011DC                     __end_of_i2c1_driver_sendNACK:
  5524                           	opt stack 0
  5525                           tosu	equ	0xFFF
  5526                           tosh	equ	0xFFE
  5527                           tosl	equ	0xFFD
  5528                           pclath	equ	0xFFA
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodh	equ	0xFF4
  5534                           prodl	equ	0xFF3
  5535                           intcon	equ	0xFF2
  5536                           intcon2	equ	0xFF1
  5537                           postinc0	equ	0xFEE
  5538                           plusw0	equ	0xFEB
  5539                           wreg	equ	0xFE8
  5540                           postdec1	equ	0xFE5
  5541                           plusw1	equ	0xFE3
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           postinc2	equ	0xFDE
  5545                           plusw2	equ	0xFDB
  5546                           fsr2h	equ	0xFDA
  5547                           fsr2l	equ	0xFD9
  5548                           status	equ	0xFD8
  5549                           
  5550 ;; *************** function _i2c1_driver_resetBus *****************
  5551 ;; Defined at:
  5552 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;		None
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;		None
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		None
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5566 ;;      Params:         0       0       0       0       0       0       0
  5567 ;;      Locals:         0       0       0       0       0       0       0
  5568 ;;      Temps:          0       0       0       0       0       0       0
  5569 ;;      Totals:         0       0       0       0       0       0       0
  5570 ;;Total ram usage:        0 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    5
  5573 ;; This function calls:
  5574 ;;		Nothing
  5575 ;; This function is called by:
  5576 ;;		_do_I2C_RESET
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text51
  5581  00123C                     __ptext51:
  5582                           	opt stack 0
  5583  00123C                     _i2c1_driver_resetBus:
  5584                           	opt stack 19
  5585                           
  5586                           ;incstack = 0
  5587  00123C  0012               	return		;funcret
  5588  00123E                     __end_of_i2c1_driver_resetBus:
  5589                           	opt stack 0
  5590                           tosu	equ	0xFFF
  5591                           tosh	equ	0xFFE
  5592                           tosl	equ	0xFFD
  5593                           pclath	equ	0xFFA
  5594                           tblptru	equ	0xFF8
  5595                           tblptrh	equ	0xFF7
  5596                           tblptrl	equ	0xFF6
  5597                           tablat	equ	0xFF5
  5598                           prodh	equ	0xFF4
  5599                           prodl	equ	0xFF3
  5600                           intcon	equ	0xFF2
  5601                           intcon2	equ	0xFF1
  5602                           postinc0	equ	0xFEE
  5603                           plusw0	equ	0xFEB
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           plusw1	equ	0xFE3
  5607                           fsr1l	equ	0xFE1
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           plusw2	equ	0xFDB
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function _i2c1_driver_startRX *****************
  5616 ;; Defined at:
  5617 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		None
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5631 ;;      Params:         0       0       0       0       0       0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0
  5633 ;;      Temps:          0       0       0       0       0       0       0
  5634 ;;      Totals:         0       0       0       0       0       0       0
  5635 ;;Total ram usage:        0 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    5
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_do_I2C_RCEN
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text52
  5646  001200                     __ptext52:
  5647                           	opt stack 0
  5648  001200                     _i2c1_driver_startRX:
  5649                           	opt stack 19
  5650                           
  5651                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  5652                           
  5653                           ;incstack = 0
  5654  001200  86C5               	bsf	4037,3,c	;volatile
  5655  001202  0012               	return		;funcret
  5656  001204                     __end_of_i2c1_driver_startRX:
  5657                           	opt stack 0
  5658                           tosu	equ	0xFFF
  5659                           tosh	equ	0xFFE
  5660                           tosl	equ	0xFFD
  5661                           pclath	equ	0xFFA
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           intcon	equ	0xFF2
  5669                           intcon2	equ	0xFF1
  5670                           postinc0	equ	0xFEE
  5671                           plusw0	equ	0xFEB
  5672                           wreg	equ	0xFE8
  5673                           postdec1	equ	0xFE5
  5674                           plusw1	equ	0xFE3
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           plusw2	equ	0xFDB
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function _returnReset *****************
  5684 ;; Defined at:
  5685 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  p               2   20[COMRAM] PTR void 
  5688 ;;		 -> NULL(0), 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      enum E6842
  5693 ;; Registers used:
  5694 ;;		wreg
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5700 ;;      Params:         2       0       0       0       0       0       0
  5701 ;;      Locals:         0       0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0
  5703 ;;      Totals:         2       0       0       0       0       0       0
  5704 ;;Total ram usage:        2 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    5
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_i2c_open
  5711 ;;		_do_I2C_DO_ADDRESS_NACK
  5712 ;;		_do_I2C_TX
  5713 ;;		_do_I2C_RX
  5714 ;;		_do_I2C_TX_EMPTY
  5715 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5716 ;;		i2_do_I2C_TX
  5717 ;;		i2_do_I2C_RX
  5718 ;;		i2_do_I2C_TX_EMPTY
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text53
  5723  001172                     __ptext53:
  5724                           	opt stack 0
  5725  001172                     _returnReset:
  5726                           	opt stack 0
  5727                           
  5728                           ;Skip over the trampoline to the duplicate function for level 2
  5729  001172  B24B               	btfsc	btemp,1,c
  5730  001174  EF14  F009         	goto	i2_returnReset
  5731  001178                     _returnReset$intlevel0:
  5732                           	opt stack 19
  5733                           
  5734                           ;i2c_master.c: 515: return i2c_reset_link;
  5735                           
  5736                           ;incstack = 0
  5737  001178  0E05               	movlw	5
  5738  00117A  0012               	return	
  5739  00117C                     __end_of_returnReset:
  5740                           	opt stack 0
  5741                           tosu	equ	0xFFF
  5742                           tosh	equ	0xFFE
  5743                           tosl	equ	0xFFD
  5744                           pclath	equ	0xFFA
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           prodh	equ	0xFF4
  5750                           prodl	equ	0xFF3
  5751                           intcon	equ	0xFF2
  5752                           intcon2	equ	0xFF1
  5753                           postinc0	equ	0xFEE
  5754                           plusw0	equ	0xFEB
  5755                           wreg	equ	0xFE8
  5756                           postdec1	equ	0xFE5
  5757                           plusw1	equ	0xFE3
  5758                           fsr1l	equ	0xFE1
  5759                           indf2	equ	0xFDF
  5760                           postinc2	equ	0xFDE
  5761                           plusw2	equ	0xFDB
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function _returnStop *****************
  5767 ;; Defined at:
  5768 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  p               2   20[COMRAM] PTR void 
  5771 ;;		 -> NULL(0), 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      enum E6842
  5776 ;; Registers used:
  5777 ;;		wreg
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5783 ;;      Params:         2       0       0       0       0       0       0
  5784 ;;      Locals:         0       0       0       0       0       0       0
  5785 ;;      Temps:          0       0       0       0       0       0       0
  5786 ;;      Totals:         2       0       0       0       0       0       0
  5787 ;;Total ram usage:        2 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    5
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_i2c_open
  5794 ;;		_setCallBack
  5795 ;;		_do_I2C_DO_ADDRESS_NACK
  5796 ;;		_do_I2C_TX
  5797 ;;		_do_I2C_RX
  5798 ;;		_do_I2C_TX_EMPTY
  5799 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5800 ;;		i2_do_I2C_TX
  5801 ;;		i2_do_I2C_RX
  5802 ;;		i2_do_I2C_TX_EMPTY
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text54
  5807  00117C                     __ptext54:
  5808                           	opt stack 0
  5809  00117C                     _returnStop:
  5810                           	opt stack 0
  5811                           
  5812                           ;Skip over the trampoline to the duplicate function for level 2
  5813  00117C  B24B               	btfsc	btemp,1,c
  5814  00117E  EF16  F009         	goto	i2_returnStop
  5815  001182                     _returnStop$intlevel0:
  5816                           	opt stack 19
  5817                           
  5818                           ;i2c_master.c: 510: return i2c_stop;
  5819                           
  5820                           ;incstack = 0
  5821  001182  0E01               	movlw	1
  5822  001184  0012               	return	
  5823  001186                     __end_of_returnStop:
  5824                           	opt stack 0
  5825                           tosu	equ	0xFFF
  5826                           tosh	equ	0xFFE
  5827                           tosl	equ	0xFFD
  5828                           pclath	equ	0xFFA
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           intcon2	equ	0xFF1
  5837                           postinc0	equ	0xFEE
  5838                           plusw0	equ	0xFEB
  5839                           wreg	equ	0xFE8
  5840                           postdec1	equ	0xFE5
  5841                           plusw1	equ	0xFE3
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           plusw2	equ	0xFDB
  5846                           fsr2h	equ	0xFDA
  5847                           fsr2l	equ	0xFD9
  5848                           status	equ	0xFD8
  5849                           
  5850 ;; *************** function _i2c1_driver_stop *****************
  5851 ;; Defined at:
  5852 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;		None
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;		None
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      void 
  5859 ;; Registers used:
  5860 ;;		None
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5866 ;;      Params:         0       0       0       0       0       0       0
  5867 ;;      Locals:         0       0       0       0       0       0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0
  5869 ;;      Totals:         0       0       0       0       0       0       0
  5870 ;;Total ram usage:        0 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    5
  5873 ;; This function calls:
  5874 ;;		Nothing
  5875 ;; This function is called by:
  5876 ;;		_do_I2C_SEND_STOP
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           	psect	text55
  5881  001204                     __ptext55:
  5882                           	opt stack 0
  5883  001204                     _i2c1_driver_stop:
  5884                           	opt stack 18
  5885                           
  5886                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  5887                           
  5888                           ;incstack = 0
  5889  001204  84C5               	bsf	4037,2,c	;volatile
  5890  001206  0012               	return		;funcret
  5891  001208                     __end_of_i2c1_driver_stop:
  5892                           	opt stack 0
  5893                           tosu	equ	0xFFF
  5894                           tosh	equ	0xFFE
  5895                           tosl	equ	0xFFD
  5896                           pclath	equ	0xFFA
  5897                           tblptru	equ	0xFF8
  5898                           tblptrh	equ	0xFF7
  5899                           tblptrl	equ	0xFF6
  5900                           tablat	equ	0xFF5
  5901                           prodh	equ	0xFF4
  5902                           prodl	equ	0xFF3
  5903                           intcon	equ	0xFF2
  5904                           intcon2	equ	0xFF1
  5905                           postinc0	equ	0xFEE
  5906                           plusw0	equ	0xFEB
  5907                           wreg	equ	0xFE8
  5908                           postdec1	equ	0xFE5
  5909                           plusw1	equ	0xFE3
  5910                           fsr1l	equ	0xFE1
  5911                           indf2	equ	0xFDF
  5912                           postinc2	equ	0xFDE
  5913                           plusw2	equ	0xFDB
  5914                           fsr2h	equ	0xFDA
  5915                           fsr2l	equ	0xFD9
  5916                           status	equ	0xFD8
  5917                           
  5918 ;; *************** function _i2c1_driver_restart *****************
  5919 ;; Defined at:
  5920 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;		None
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;		None
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      void 
  5927 ;; Registers used:
  5928 ;;		None
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5934 ;;      Params:         0       0       0       0       0       0       0
  5935 ;;      Locals:         0       0       0       0       0       0       0
  5936 ;;      Temps:          0       0       0       0       0       0       0
  5937 ;;      Totals:         0       0       0       0       0       0       0
  5938 ;;Total ram usage:        0 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    5
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_do_I2C_SEND_RESTART_READ
  5945 ;;		_do_I2C_SEND_RESTART_WRITE
  5946 ;;		_do_I2C_SEND_RESTART
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text56
  5951  001208                     __ptext56:
  5952                           	opt stack 0
  5953  001208                     _i2c1_driver_restart:
  5954                           	opt stack 18
  5955                           
  5956                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  5957                           
  5958                           ;incstack = 0
  5959  001208  82C5               	bsf	4037,1,c	;volatile
  5960  00120A  0012               	return		;funcret
  5961  00120C                     __end_of_i2c1_driver_restart:
  5962                           	opt stack 0
  5963                           tosu	equ	0xFFF
  5964                           tosh	equ	0xFFE
  5965                           tosl	equ	0xFFD
  5966                           pclath	equ	0xFFA
  5967                           tblptru	equ	0xFF8
  5968                           tblptrh	equ	0xFF7
  5969                           tblptrl	equ	0xFF6
  5970                           tablat	equ	0xFF5
  5971                           prodh	equ	0xFF4
  5972                           prodl	equ	0xFF3
  5973                           intcon	equ	0xFF2
  5974                           intcon2	equ	0xFF1
  5975                           postinc0	equ	0xFEE
  5976                           plusw0	equ	0xFEB
  5977                           wreg	equ	0xFE8
  5978                           postdec1	equ	0xFE5
  5979                           plusw1	equ	0xFE3
  5980                           fsr1l	equ	0xFE1
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           plusw2	equ	0xFDB
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function _i2c1_driver_sendACK *****************
  5989 ;; Defined at:
  5990 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;		None
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;		None
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  1    wreg      void 
  5997 ;; Registers used:
  5998 ;;		None
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6004 ;;      Params:         0       0       0       0       0       0       0
  6005 ;;      Locals:         0       0       0       0       0       0       0
  6006 ;;      Temps:          0       0       0       0       0       0       0
  6007 ;;      Totals:         0       0       0       0       0       0       0
  6008 ;;Total ram usage:        0 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    5
  6011 ;; This function calls:
  6012 ;;		Nothing
  6013 ;; This function is called by:
  6014 ;;		_do_I2C_DO_ACK
  6015 ;;		_do_I2C_RX
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text57
  6020  0011DC                     __ptext57:
  6021                           	opt stack 0
  6022  0011DC                     _i2c1_driver_sendACK:
  6023                           	opt stack 19
  6024                           
  6025                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  6026                           
  6027                           ;incstack = 0
  6028  0011DC  9AC5               	bcf	4037,5,c	;volatile
  6029                           
  6030                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  6031  0011DE  88C5               	bsf	4037,4,c	;volatile
  6032  0011E0  0012               	return		;funcret
  6033  0011E2                     __end_of_i2c1_driver_sendACK:
  6034                           	opt stack 0
  6035                           tosu	equ	0xFFF
  6036                           tosh	equ	0xFFE
  6037                           tosl	equ	0xFFD
  6038                           pclath	equ	0xFFA
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           prodh	equ	0xFF4
  6044                           prodl	equ	0xFF3
  6045                           intcon	equ	0xFF2
  6046                           intcon2	equ	0xFF1
  6047                           postinc0	equ	0xFEE
  6048                           plusw0	equ	0xFEB
  6049                           wreg	equ	0xFE8
  6050                           postdec1	equ	0xFE5
  6051                           plusw1	equ	0xFE3
  6052                           fsr1l	equ	0xFE1
  6053                           indf2	equ	0xFDF
  6054                           postinc2	equ	0xFDE
  6055                           plusw2	equ	0xFDB
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function _i2c1_driver_start *****************
  6061 ;; Defined at:
  6062 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;		None
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;		None
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      void 
  6069 ;; Registers used:
  6070 ;;		None
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6076 ;;      Params:         0       0       0       0       0       0       0
  6077 ;;      Locals:         0       0       0       0       0       0       0
  6078 ;;      Temps:          0       0       0       0       0       0       0
  6079 ;;      Totals:         0       0       0       0       0       0       0
  6080 ;;Total ram usage:        0 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    5
  6083 ;; This function calls:
  6084 ;;		Nothing
  6085 ;; This function is called by:
  6086 ;;		_i2c_masterOperation
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           	psect	text58
  6091  00120C                     __ptext58:
  6092                           	opt stack 0
  6093  00120C                     _i2c1_driver_start:
  6094                           	opt stack 22
  6095                           
  6096                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  6097                           
  6098                           ;incstack = 0
  6099  00120C  80C5               	bsf	4037,0,c	;volatile
  6100  00120E  0012               	return		;funcret
  6101  001210                     __end_of_i2c1_driver_start:
  6102                           	opt stack 0
  6103                           tosu	equ	0xFFF
  6104                           tosh	equ	0xFFE
  6105                           tosl	equ	0xFFD
  6106                           pclath	equ	0xFFA
  6107                           tblptru	equ	0xFF8
  6108                           tblptrh	equ	0xFF7
  6109                           tblptrl	equ	0xFF6
  6110                           tablat	equ	0xFF5
  6111                           prodh	equ	0xFF4
  6112                           prodl	equ	0xFF3
  6113                           intcon	equ	0xFF2
  6114                           intcon2	equ	0xFF1
  6115                           postinc0	equ	0xFEE
  6116                           plusw0	equ	0xFEB
  6117                           wreg	equ	0xFE8
  6118                           postdec1	equ	0xFE5
  6119                           plusw1	equ	0xFE3
  6120                           fsr1l	equ	0xFE1
  6121                           indf2	equ	0xFDF
  6122                           postinc2	equ	0xFDE
  6123                           plusw2	equ	0xFDB
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _i2c_close *****************
  6129 ;; Defined at:
  6130 ;;		line 170 in file "mcc_generated_files/drivers/i2c_master.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;		None
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  ret             1   20[COMRAM] enum E6837
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  1    wreg      enum E6837
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6144 ;;      Params:         0       0       0       0       0       0       0
  6145 ;;      Locals:         1       0       0       0       0       0       0
  6146 ;;      Temps:          0       0       0       0       0       0       0
  6147 ;;      Totals:         1       0       0       0       0       0       0
  6148 ;;Total ram usage:        1 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    6
  6151 ;; This function calls:
  6152 ;;		_mssp1_clearIRQ
  6153 ;;		_mssp1_disableIRQ
  6154 ;; This function is called by:
  6155 ;;		_write_register
  6156 ;;		_read_register
  6157 ;;		_read_xyzvalues
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	text59
  6162  000F04                     __ptext59:
  6163                           	opt stack 0
  6164  000F04                     _i2c_close:
  6165                           	opt stack 23
  6166                           
  6167                           ;i2c_master.c: 172: i2c_error_t ret = I2C_BUSY;
  6168                           
  6169                           ;incstack = 0
  6170  000F04  0E01               	movlw	1
  6171  000F06  6E3A               	movwf	i2c_close@ret,c
  6172                           
  6173                           ;i2c_master.c: 173: if(!i2c_status.busy)
  6174  000F08  0100               	movlb	0	; () banked
  6175  000F0A  B19C               	btfsc	_i2c_status& (0+255),0,b
  6176  000F0C  D008               	goto	l83
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;i2c_master.c: 174: {
  6180                           ;i2c_master.c: 175: i2c_status.inUse = 0;
  6181  000F0E  939C               	bcf	_i2c_status& (0+255),1,b
  6182                           
  6183                           ;i2c_master.c: 177: i2c_status.address = 0xff;
  6184  000F10  699D               	setf	(_i2c_status+1)& (0+255),b
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;i2c_master.c: 178: mssp1_clearIRQ();
  6188  000F12  EC0A  F009         	call	_mssp1_clearIRQ	;wreg free
  6189                           
  6190                           ;i2c_master.c: 179: mssp1_disableIRQ();
  6191  000F16  EC08  F009         	call	_mssp1_disableIRQ	;wreg free
  6192                           
  6193                           ;i2c_master.c: 180: ret = i2c_status.error;
  6194  000F1A  C0A7  F03A         	movff	_i2c_status+11,i2c_close@ret
  6195  000F1E                     l83:
  6196                           
  6197                           ;i2c_master.c: 181: }
  6198                           ;i2c_master.c: 182: return ret;
  6199  000F1E  503A               	movf	i2c_close@ret,w,c
  6200  000F20  0012               	return	
  6201  000F22                     __end_of_i2c_close:
  6202                           	opt stack 0
  6203                           tosu	equ	0xFFF
  6204                           tosh	equ	0xFFE
  6205                           tosl	equ	0xFFD
  6206                           pclath	equ	0xFFA
  6207                           tblptru	equ	0xFF8
  6208                           tblptrh	equ	0xFF7
  6209                           tblptrl	equ	0xFF6
  6210                           tablat	equ	0xFF5
  6211                           prodh	equ	0xFF4
  6212                           prodl	equ	0xFF3
  6213                           intcon	equ	0xFF2
  6214                           intcon2	equ	0xFF1
  6215                           postinc0	equ	0xFEE
  6216                           plusw0	equ	0xFEB
  6217                           wreg	equ	0xFE8
  6218                           postdec1	equ	0xFE5
  6219                           plusw1	equ	0xFE3
  6220                           fsr1l	equ	0xFE1
  6221                           indf2	equ	0xFDF
  6222                           postinc2	equ	0xFDE
  6223                           plusw2	equ	0xFDB
  6224                           fsr2h	equ	0xFDA
  6225                           fsr2l	equ	0xFD9
  6226                           status	equ	0xFD8
  6227                           
  6228 ;; *************** function _mssp1_disableIRQ *****************
  6229 ;; Defined at:
  6230 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;		None
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  1    wreg      void 
  6237 ;; Registers used:
  6238 ;;		None
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6244 ;;      Params:         0       0       0       0       0       0       0
  6245 ;;      Locals:         0       0       0       0       0       0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0
  6247 ;;      Totals:         0       0       0       0       0       0       0
  6248 ;;Total ram usage:        0 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    5
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_i2c_close
  6255 ;;		_i2c_setTimeOut
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           	psect	text60
  6260  001210                     __ptext60:
  6261                           	opt stack 0
  6262  001210                     _mssp1_disableIRQ:
  6263                           	opt stack 23
  6264                           
  6265                           ;i2c1_driver.c: 50: PIE1bits.SSP1IE = 0;
  6266                           
  6267                           ;incstack = 0
  6268  001210  969D               	bcf	3997,3,c	;volatile
  6269  001212  0012               	return		;funcret
  6270  001214                     __end_of_mssp1_disableIRQ:
  6271                           	opt stack 0
  6272                           tosu	equ	0xFFF
  6273                           tosh	equ	0xFFE
  6274                           tosl	equ	0xFFD
  6275                           pclath	equ	0xFFA
  6276                           tblptru	equ	0xFF8
  6277                           tblptrh	equ	0xFF7
  6278                           tblptrl	equ	0xFF6
  6279                           tablat	equ	0xFF5
  6280                           prodh	equ	0xFF4
  6281                           prodl	equ	0xFF3
  6282                           intcon	equ	0xFF2
  6283                           intcon2	equ	0xFF1
  6284                           postinc0	equ	0xFEE
  6285                           plusw0	equ	0xFEB
  6286                           wreg	equ	0xFE8
  6287                           postdec1	equ	0xFE5
  6288                           plusw1	equ	0xFE3
  6289                           fsr1l	equ	0xFE1
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           plusw2	equ	0xFDB
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _mssp1_clearIRQ *****************
  6298 ;; Defined at:
  6299 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      void 
  6306 ;; Registers used:
  6307 ;;		None
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6313 ;;      Params:         0       0       0       0       0       0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0
  6316 ;;      Totals:         0       0       0       0       0       0       0
  6317 ;;Total ram usage:        0 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    5
  6320 ;; This function calls:
  6321 ;;		Nothing
  6322 ;; This function is called by:
  6323 ;;		_i2c_open
  6324 ;;		_i2c_close
  6325 ;;		_i2c_ISR
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text61
  6330  001214                     __ptext61:
  6331                           	opt stack 0
  6332  001214                     _mssp1_clearIRQ:
  6333                           	opt stack 23
  6334                           
  6335                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6336                           
  6337                           ;incstack = 0
  6338  001214  969E               	bcf	3998,3,c	;volatile
  6339  001216  0012               	return		;funcret
  6340  001218                     __end_of_mssp1_clearIRQ:
  6341                           	opt stack 0
  6342                           tosu	equ	0xFFF
  6343                           tosh	equ	0xFFE
  6344                           tosl	equ	0xFFD
  6345                           pclath	equ	0xFFA
  6346                           tblptru	equ	0xFF8
  6347                           tblptrh	equ	0xFF7
  6348                           tblptrl	equ	0xFF6
  6349                           tablat	equ	0xFF5
  6350                           prodh	equ	0xFF4
  6351                           prodl	equ	0xFF3
  6352                           intcon	equ	0xFF2
  6353                           intcon2	equ	0xFF1
  6354                           postinc0	equ	0xFEE
  6355                           plusw0	equ	0xFEB
  6356                           wreg	equ	0xFE8
  6357                           postdec1	equ	0xFE5
  6358                           plusw1	equ	0xFE3
  6359                           fsr1l	equ	0xFE1
  6360                           indf2	equ	0xFDF
  6361                           postinc2	equ	0xFDE
  6362                           plusw2	equ	0xFDB
  6363                           fsr2h	equ	0xFDA
  6364                           fsr2l	equ	0xFD9
  6365                           status	equ	0xFD8
  6366                           
  6367 ;; *************** function _INTERRUPT_InterruptManager *****************
  6368 ;; Defined at:
  6369 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;		None
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;		None
  6374 ;; Return value:  Size  Location     Type
  6375 ;;                  1    wreg      void 
  6376 ;; Registers used:
  6377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6378 ;; Tracked objects:
  6379 ;;		On entry : 0/0
  6380 ;;		On exit  : 0/0
  6381 ;;		Unchanged: 0/0
  6382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6383 ;;      Params:         0       0       0       0       0       0       0
  6384 ;;      Locals:         0       0       0       0       0       0       0
  6385 ;;      Temps:         18       0       0       0       0       0       0
  6386 ;;      Totals:        18       0       0       0       0       0       0
  6387 ;;Total ram usage:       18 bytes
  6388 ;; Hardware stack levels used:    1
  6389 ;; Hardware stack levels required when called:    4
  6390 ;; This function calls:
  6391 ;;		Absolute function
  6392 ;;		_EUSART1_Receive_ISR
  6393 ;;		_EUSART1_Transmit_ISR
  6394 ;;		_i2c_busCollisionISR
  6395 ;;		i2_i2c_ISR
  6396 ;; This function is called by:
  6397 ;;		Interrupt level 2
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	intcode
  6402  000008                     __pintcode:
  6403                           	opt stack 0
  6404  000008                     _INTERRUPT_InterruptManager:
  6405                           	opt stack 17
  6406                           
  6407                           ;incstack = 0
  6408  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6409  00000A  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
  6410  00000E  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6411  000012  CFE9 F02A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6412  000016  CFEA F02B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6413  00001A  CFE1 F02C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6414  00001E  CFE2 F02D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6415  000022  CFD9 F02E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6416  000026  CFDA F02F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6417  00002A  CFF3 F030          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6418  00002E  CFF4 F031          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6419  000032  CFF6 F032          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6420  000036  CFF7 F033          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6421  00003A  CFF8 F034          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6422  00003E  CFF5 F035          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6423  000042  C04B  F036         	movff	btemp,??_INTERRUPT_InterruptManager+14
  6424  000046  C04C  F037         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  6425  00004A  C04D  F038         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  6426  00004E  C04E  F039         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  6427                           
  6428                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  6429  000052  ACF2               	btfss	intcon,6,c	;volatile
  6430  000054  D030               	goto	i2u168_49
  6431                           
  6432                           ;interrupt_manager.c: 61: {
  6433                           ;interrupt_manager.c: 62: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  6434  000056  B6A0               	btfsc	4000,3,c	;volatile
  6435  000058  A6A1               	btfss	4001,3,c	;volatile
  6436  00005A  D008               	goto	i2l567
  6437                           
  6438                           ;interrupt_manager.c: 63: {
  6439                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  6440  00005C  D801               	call	i2u159_48
  6441  00005E  D02B               	goto	i2u168_49
  6442  000060                     i2u159_48:
  6443  000060  0005               	push	
  6444  000062  6EFA               	movwf	pclath,c
  6445  000064  5013               	movf	_i2c1_driver_busCollisionISR,w,c
  6446  000066  6EFD               	movwf	tosl,c
  6447  000068  5014               	movf	_i2c1_driver_busCollisionISR+1,w,c
  6448  00006A  D020               	goto	L6
  6449  00006C                     i2l567:
  6450                           
  6451                           ;interrupt_manager.c: 66: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  6452  00006C  B69D               	btfsc	3997,3,c	;volatile
  6453  00006E  A69E               	btfss	3998,3,c	;volatile
  6454  000070  D008               	goto	i2l569
  6455                           
  6456                           ;interrupt_manager.c: 67: {
  6457                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  6458  000072  D801               	call	i2u162_48
  6459  000074  D020               	goto	i2u168_49
  6460  000076                     i2u162_48:
  6461  000076  0005               	push	
  6462  000078  6EFA               	movwf	pclath,c
  6463  00007A  5011               	movf	_i2c1_driver_i2cISR,w,c
  6464  00007C  6EFD               	movwf	tosl,c
  6465  00007E  5012               	movf	_i2c1_driver_i2cISR+1,w,c
  6466  000080  D015               	goto	L6
  6467  000082                     i2l569:
  6468                           
  6469                           ;interrupt_manager.c: 70: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6470  000082  B89D               	btfsc	3997,4,c	;volatile
  6471  000084  A89E               	btfss	3998,4,c	;volatile
  6472  000086  D008               	goto	i2l571
  6473                           
  6474                           ;interrupt_manager.c: 71: {
  6475                           ;interrupt_manager.c: 72: EUSART1_TxDefaultInterruptHandler();
  6476  000088  D801               	call	i2u165_48
  6477  00008A  D015               	goto	i2u168_49
  6478  00008C                     i2u165_48:
  6479  00008C  0005               	push	
  6480  00008E  6EFA               	movwf	pclath,c
  6481  000090  5048               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  6482  000092  6EFD               	movwf	tosl,c
  6483  000094  5049               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  6484  000096  D00A               	goto	L6
  6485  000098                     i2l571:
  6486                           
  6487                           ;interrupt_manager.c: 74: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6488  000098  BA9D               	btfsc	3997,5,c	;volatile
  6489  00009A  AA9E               	btfss	3998,5,c	;volatile
  6490  00009C  D00C               	goto	i2u168_49
  6491                           
  6492                           ;interrupt_manager.c: 75: {
  6493                           ;interrupt_manager.c: 76: EUSART1_RxDefaultInterruptHandler();
  6494  00009E  D801               	call	i2u168_48
  6495  0000A0  D00A               	goto	i2u168_49
  6496  0000A2                     i2u168_48:
  6497  0000A2  0005               	push	
  6498  0000A4  6EFA               	movwf	pclath,c
  6499  0000A6  5046               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  6500  0000A8  6EFD               	movwf	tosl,c
  6501  0000AA  5047               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  6502  0000AC                     L6:
  6503  0000AC  6EFE               	movwf	tosh,c
  6504  0000AE  50F8               	movf	tblptru,w,c
  6505  0000B0  6EFF               	movwf	tosu,c
  6506  0000B2  50FA               	movf	pclath,w,c
  6507  0000B4  0012               	return		;indir
  6508  0000B6                     i2u168_49:
  6509                           
  6510                           ;interrupt_manager.c: 83: else
  6511                           ;interrupt_manager.c: 84: {
  6512                           
  6513                           ;interrupt_manager.c: 81: }
  6514                           ;interrupt_manager.c: 82: }
  6515                           
  6516                           ;interrupt_manager.c: 78: else
  6517                           ;interrupt_manager.c: 79: {
  6518                           
  6519                           ;interrupt_manager.c: 77: }
  6520  0000B6  C039  F04E         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  6521  0000BA  C038  F04D         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  6522  0000BE  C037  F04C         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  6523  0000C2  C036  F04B         	movff	??_INTERRUPT_InterruptManager+14,btemp
  6524  0000C6  C035  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6525  0000CA  C034  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6526  0000CE  C033  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6527  0000D2  C032  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6528  0000D6  C031  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6529  0000DA  C030  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6530  0000DE  C02F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6531  0000E2  C02E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6532  0000E6  C02D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6533  0000EA  C02C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6534  0000EE  C02B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6535  0000F2  C02A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6536  0000F6  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6537  0000FA  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6538  0000FE  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6539  000100  0011               	retfie		f
  6540  000102                     __end_of_INTERRUPT_InterruptManager:
  6541                           	opt stack 0
  6542                           tosu	equ	0xFFF
  6543                           tosh	equ	0xFFE
  6544                           tosl	equ	0xFFD
  6545                           pclatu	equ	0xFFB
  6546                           pclath	equ	0xFFA
  6547                           tblptru	equ	0xFF8
  6548                           tblptrh	equ	0xFF7
  6549                           tblptrl	equ	0xFF6
  6550                           tablat	equ	0xFF5
  6551                           prodh	equ	0xFF4
  6552                           prodl	equ	0xFF3
  6553                           intcon	equ	0xFF2
  6554                           intcon2	equ	0xFF1
  6555                           postinc0	equ	0xFEE
  6556                           plusw0	equ	0xFEB
  6557                           fsr0h	equ	0xFEA
  6558                           fsr0l	equ	0xFE9
  6559                           wreg	equ	0xFE8
  6560                           postdec1	equ	0xFE5
  6561                           plusw1	equ	0xFE3
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           plusw2	equ	0xFDB
  6567                           fsr2h	equ	0xFDA
  6568                           fsr2l	equ	0xFD9
  6569                           status	equ	0xFD8
  6570                           
  6571 ;; *************** function i2_i2c_ISR *****************
  6572 ;; Defined at:
  6573 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;		None
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;		None
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  1    wreg      void 
  6580 ;; Registers used:
  6581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6587 ;;      Params:         0       0       0       0       0       0       0
  6588 ;;      Locals:         0       0       0       0       0       0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0
  6590 ;;      Totals:         0       0       0       0       0       0       0
  6591 ;;Total ram usage:        0 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    3
  6594 ;; This function calls:
  6595 ;;		i2_do_I2C_DO_ACK
  6596 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6597 ;;		i2_do_I2C_DO_NACK_RESTART
  6598 ;;		i2_do_I2C_DO_NACK_STOP
  6599 ;;		i2_do_I2C_IDLE
  6600 ;;		i2_do_I2C_RCEN
  6601 ;;		i2_do_I2C_RESET
  6602 ;;		i2_do_I2C_RX
  6603 ;;		i2_do_I2C_SEND_ADR_READ
  6604 ;;		i2_do_I2C_SEND_ADR_WRITE
  6605 ;;		i2_do_I2C_SEND_INITIAL_READ
  6606 ;;		i2_do_I2C_SEND_RESTART
  6607 ;;		i2_do_I2C_SEND_RESTART_READ
  6608 ;;		i2_do_I2C_SEND_RESTART_WRITE
  6609 ;;		i2_do_I2C_SEND_STOP
  6610 ;;		i2_do_I2C_TX
  6611 ;;		i2_do_I2C_TX_EMPTY
  6612 ;;		i2_do_I2C_TX_REGISTER
  6613 ;;		i2_i2c1_driver_isNACK
  6614 ;;		i2_mssp1_clearIRQ
  6615 ;; This function is called by:
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text63
  6620  000CD6                     __ptext63:
  6621                           	opt stack 0
  6622  000CD6                     i2_i2c_ISR:
  6623                           	opt stack 17
  6624                           
  6625                           ;i2c_master.c: 486: mssp1_clearIRQ();
  6626                           
  6627                           ;incstack = 0
  6628  000CD6  EC0C  F009         	call	i2_mssp1_clearIRQ	;wreg free
  6629                           
  6630                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  6631  000CDA  0100               	movlb	0	; () banked
  6632  000CDC  A79C               	btfss	_i2c_status& (0+255),3,b
  6633  000CDE  D007               	goto	i2l209
  6634                           
  6635                           ; BSR set to: 0
  6636  000CE0  ECED  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  6637  000CE4  A0D8               	btfss	status,0,c
  6638  000CE6  D003               	goto	i2l209
  6639                           
  6640                           ;i2c_master.c: 493: {
  6641                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  6642  000CE8  0E0F               	movlw	15
  6643  000CEA  0100               	movlb	0	; () banked
  6644  000CEC  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  6645  000CEE                     i2l209:
  6646                           
  6647                           ;i2c_master.c: 495: }
  6648                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  6649                           
  6650                           ; BSR set to: 0
  6651  000CEE  0100               	movlb	0	; () banked
  6652  000CF0  51A6               	movf	(_i2c_status+10)& (0+255),w,b
  6653  000CF2  0D02               	mullw	2
  6654  000CF4  0EC1               	movlw	low _fsmStateTable
  6655  000CF6  24F3               	addwf	prodl,w,c
  6656  000CF8  6ED9               	movwf	fsr2l,c
  6657  000CFA  0E00               	movlw	high _fsmStateTable
  6658  000CFC  20F4               	addwfc	prodh,w,c
  6659  000CFE  6EDA               	movwf	fsr2h,c
  6660  000D00  D801               	call	i2u154_48
  6661  000D02  D00A               	goto	i2u154_49
  6662  000D04                     i2u154_48:
  6663  000D04  0005               	push	
  6664  000D06  6EFA               	movwf	pclath,c
  6665  000D08  50DE               	movf	postinc2,w,c
  6666  000D0A  6EFD               	movwf	tosl,c
  6667  000D0C  50DE               	movf	postinc2,w,c
  6668  000D0E  6EFE               	movwf	tosh,c
  6669  000D10  50F8               	movf	tblptru,w,c
  6670  000D12  6EFF               	movwf	tosu,c
  6671  000D14  50FA               	movf	pclath,w,c
  6672  000D16  0012               	return		;indir
  6673  000D18                     i2u154_49:
  6674  000D18  0100               	movlb	0	; () banked
  6675  000D1A  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  6676                           
  6677                           ; BSR set to: 0
  6678  000D1C  0012               	return		;funcret
  6679  000D1E                     __end_ofi2_i2c_ISR:
  6680                           	opt stack 0
  6681                           tosu	equ	0xFFF
  6682                           tosh	equ	0xFFE
  6683                           tosl	equ	0xFFD
  6684                           pclatu	equ	0xFFB
  6685                           pclath	equ	0xFFA
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           intcon	equ	0xFF2
  6693                           intcon2	equ	0xFF1
  6694                           postinc0	equ	0xFEE
  6695                           plusw0	equ	0xFEB
  6696                           fsr0h	equ	0xFEA
  6697                           fsr0l	equ	0xFE9
  6698                           wreg	equ	0xFE8
  6699                           postdec1	equ	0xFE5
  6700                           plusw1	equ	0xFE3
  6701                           fsr1h	equ	0xFE2
  6702                           fsr1l	equ	0xFE1
  6703                           indf2	equ	0xFDF
  6704                           postinc2	equ	0xFDE
  6705                           plusw2	equ	0xFDB
  6706                           fsr2h	equ	0xFDA
  6707                           fsr2l	equ	0xFD9
  6708                           status	equ	0xFD8
  6709                           
  6710 ;; *************** function i2_mssp1_clearIRQ *****************
  6711 ;; Defined at:
  6712 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;		None
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;		None
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  1    wreg      void 
  6719 ;; Registers used:
  6720 ;;		None
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6726 ;;      Params:         0       0       0       0       0       0       0
  6727 ;;      Locals:         0       0       0       0       0       0       0
  6728 ;;      Temps:          0       0       0       0       0       0       0
  6729 ;;      Totals:         0       0       0       0       0       0       0
  6730 ;;Total ram usage:        0 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		i2_i2c_ISR
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text64
  6740  001218                     __ptext64:
  6741                           	opt stack 0
  6742  001218                     i2_mssp1_clearIRQ:
  6743                           	opt stack 19
  6744                           
  6745                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;incstack = 0
  6749  001218  969E               	bcf	3998,3,c	;volatile
  6750  00121A  0012               	return		;funcret
  6751  00121C                     __end_ofi2_mssp1_clearIRQ:
  6752                           	opt stack 0
  6753                           tosu	equ	0xFFF
  6754                           tosh	equ	0xFFE
  6755                           tosl	equ	0xFFD
  6756                           pclatu	equ	0xFFB
  6757                           pclath	equ	0xFFA
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           intcon	equ	0xFF2
  6765                           intcon2	equ	0xFF1
  6766                           postinc0	equ	0xFEE
  6767                           plusw0	equ	0xFEB
  6768                           fsr0h	equ	0xFEA
  6769                           fsr0l	equ	0xFE9
  6770                           wreg	equ	0xFE8
  6771                           postdec1	equ	0xFE5
  6772                           plusw1	equ	0xFE3
  6773                           fsr1h	equ	0xFE2
  6774                           fsr1l	equ	0xFE1
  6775                           indf2	equ	0xFDF
  6776                           postinc2	equ	0xFDE
  6777                           plusw2	equ	0xFDB
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8
  6781                           
  6782 ;; *************** function i2_do_I2C_TX_EMPTY *****************
  6783 ;; Defined at:
  6784 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;		None
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  1    wreg      enum E7019
  6791 ;; Registers used:
  6792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6798 ;;      Params:         0       0       0       0       0       0       0
  6799 ;;      Locals:         0       0       0       0       0       0       0
  6800 ;;      Temps:          0       0       0       0       0       0       0
  6801 ;;      Totals:         0       0       0       0       0       0       0
  6802 ;;Total ram usage:        0 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    2
  6805 ;; This function calls:
  6806 ;;		i2_do_I2C_SEND_RESTART
  6807 ;;		i2_do_I2C_SEND_STOP
  6808 ;;		i2_mssp1_setIRQ
  6809 ;;		i2_returnReset
  6810 ;;		i2_returnStop
  6811 ;; This function is called by:
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           	psect	text65
  6816  000B4E                     __ptext65:
  6817                           	opt stack 0
  6818  000B4E                     i2_do_I2C_TX_EMPTY:
  6819                           	opt stack 17
  6820                           
  6821                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  6822                           
  6823                           ;incstack = 0
  6824  000B4E  0100               	movlb	0	; () banked
  6825  000B50  859C               	bsf	_i2c_status& (0+255),2,b
  6826                           
  6827                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6828  000B52  D00A               	goto	i2l197
  6829  000B54                     
  6830                           ;i2c_master.c: 448: case i2c_restart_write:
  6831                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  6832                           
  6833                           ; BSR set to: 0
  6834                           
  6835                           ; BSR set to: 0
  6836  000B54  ECDB  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  6837  000B58  0012               	return	
  6838  000B5A                     
  6839                           ;i2c_master.c: 451: mssp1_setIRQ();
  6840  000B5A  EC0E  F009         	call	i2_mssp1_setIRQ	;wreg free
  6841                           
  6842                           ;i2c_master.c: 452: return I2C_TX;
  6843  000B5E  0E03               	movlw	3
  6844  000B60  0012               	return	
  6845  000B62                     
  6846                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  6847                           
  6848                           ;i2c_master.c: 454: case i2c_stop:
  6849  000B62  ECD7  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  6850                           
  6851                           ;i2c_master.c: 456: }
  6852  000B66  0012               	return	
  6853  000B68                     i2l197:
  6854  000B68  C0B4  F026         	movff	_i2c_status+24,i2returnReset@p
  6855  000B6C  C0B5  F027         	movff	_i2c_status+25,i2returnReset@p+1
  6856  000B70  EE20  F0A8         	lfsr	2,_i2c_status+12
  6857  000B74  D801               	call	i2u145_48
  6858  000B76  D00A               	goto	i2u145_49
  6859  000B78                     i2u145_48:
  6860  000B78  0005               	push	
  6861  000B7A  6EFA               	movwf	pclath,c
  6862  000B7C  50DE               	movf	postinc2,w,c
  6863  000B7E  6EFD               	movwf	tosl,c
  6864  000B80  50DE               	movf	postinc2,w,c
  6865  000B82  6EFE               	movwf	tosh,c
  6866  000B84  50F8               	movf	tblptru,w,c
  6867  000B86  6EFF               	movwf	tosu,c
  6868  000B88  50FA               	movf	pclath,w,c
  6869  000B8A  0012               	return		;indir
  6870  000B8C                     i2u145_49:
  6871                           
  6872                           ; Switch size 1, requested type "space"
  6873                           ; Number of cases is 4, Range of values is 1 to 4
  6874                           ; switch strategies available:
  6875                           ; Name         Instructions Cycles
  6876                           ; simple_byte           13     7 (average)
  6877                           ;	Chosen strategy is simple_byte
  6878  000B8C  0A01               	xorlw	1	; case 1
  6879  000B8E  B4D8               	btfsc	status,2,c
  6880  000B90  D7E8               	goto	i2l202
  6881  000B92  0A03               	xorlw	3	; case 2
  6882  000B94  B4D8               	btfsc	status,2,c
  6883  000B96  D7DE               	goto	i2l198
  6884  000B98  0A01               	xorlw	1	; case 3
  6885  000B9A  B4D8               	btfsc	status,2,c
  6886  000B9C  D7DB               	goto	i2l198
  6887  000B9E  0A07               	xorlw	7	; case 4
  6888  000BA0  B4D8               	btfsc	status,2,c
  6889  000BA2  D7DB               	goto	i2l201
  6890  000BA4  D7DE               	goto	i2l202
  6891  000BA6                     __end_ofi2_do_I2C_TX_EMPTY:
  6892                           	opt stack 0
  6893                           tosu	equ	0xFFF
  6894                           tosh	equ	0xFFE
  6895                           tosl	equ	0xFFD
  6896                           pclatu	equ	0xFFB
  6897                           pclath	equ	0xFFA
  6898                           tblptru	equ	0xFF8
  6899                           tblptrh	equ	0xFF7
  6900                           tblptrl	equ	0xFF6
  6901                           tablat	equ	0xFF5
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           intcon	equ	0xFF2
  6905                           intcon2	equ	0xFF1
  6906                           postinc0	equ	0xFEE
  6907                           plusw0	equ	0xFEB
  6908                           fsr0h	equ	0xFEA
  6909                           fsr0l	equ	0xFE9
  6910                           wreg	equ	0xFE8
  6911                           postdec1	equ	0xFE5
  6912                           plusw1	equ	0xFE3
  6913                           fsr1h	equ	0xFE2
  6914                           fsr1l	equ	0xFE1
  6915                           indf2	equ	0xFDF
  6916                           postinc2	equ	0xFDE
  6917                           plusw2	equ	0xFDB
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function i2_do_I2C_RX *****************
  6923 ;; Defined at:
  6924 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      enum E7019
  6931 ;; Registers used:
  6932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6938 ;;      Params:         0       0       0       0       0       0       0
  6939 ;;      Locals:         0       0       0       0       0       0       0
  6940 ;;      Temps:          0       0       0       0       0       0       0
  6941 ;;      Totals:         0       0       0       0       0       0       0
  6942 ;;Total ram usage:        0 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    2
  6945 ;; This function calls:
  6946 ;;		i2_do_I2C_DO_NACK_RESTART
  6947 ;;		i2_do_I2C_DO_NACK_STOP
  6948 ;;		i2_i2c1_driver_getRXData
  6949 ;;		i2_i2c1_driver_sendACK
  6950 ;;		i2_returnReset
  6951 ;;		i2_returnStop
  6952 ;; This function is called by:
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text66
  6957  00094A                     __ptext66:
  6958                           	opt stack 0
  6959  00094A                     i2_do_I2C_RX:
  6960                           	opt stack 17
  6961                           
  6962                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  6963                           
  6964                           ;incstack = 0
  6965  00094A  EC10  F009         	call	i2_i2c1_driver_getRXData	;wreg free
  6966  00094E  C09E  FFD9         	movff	_i2c_status+2,fsr2l
  6967  000952  C09F  FFDA         	movff	_i2c_status+3,fsr2h
  6968  000956  6EDF               	movwf	indf2,c
  6969  000958  0100               	movlb	0	; () banked
  6970  00095A  4B9E               	infsnz	(_i2c_status+2)& (0+255),f,b
  6971  00095C  2B9F               	incf	(_i2c_status+3)& (0+255),f,b
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  6975  00095E  07A0               	decf	(_i2c_status+4)& (0+255),f,b
  6976  000960  A0D8               	btfss	status,0,c
  6977  000962  07A1               	decf	(_i2c_status+5)& (0+255),f,b
  6978  000964  51A0               	movf	(_i2c_status+4)& (0+255),w,b
  6979  000966  11A1               	iorwf	(_i2c_status+5)& (0+255),w,b
  6980  000968  B4D8               	btfsc	status,2,c
  6981  00096A  D004               	goto	i2l185
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;i2c_master.c: 421: {
  6985                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  6986  00096C  ECF4  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  6987                           
  6988                           ;i2c_master.c: 423: return I2C_RCEN;
  6989  000970  0E05               	movlw	5
  6990                           
  6991                           ;i2c_master.c: 424: }
  6992  000972  0012               	return	
  6993  000974                     i2l185:
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;i2c_master.c: 425: else
  6997                           ;i2c_master.c: 426: {
  6998                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  6999  000974  859C               	bsf	_i2c_status& (0+255),2,b
  7000                           
  7001                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7002  000976  D006               	goto	i2l188
  7003  000978                     
  7004                           ;i2c_master.c: 431: case i2c_restart_read:
  7005                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  7006                           
  7007                           ; BSR set to: 0
  7008                           
  7009                           ; BSR set to: 0
  7010  000978  ECCB  F008         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  7011  00097C  0012               	return	
  7012  00097E                     
  7013                           ;i2c_master.c: 435: case i2c_stop:
  7014                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  7015                           
  7016                           ;i2c_master.c: 434: case i2c_continue:
  7017  00097E  ECCF  F008         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  7018                           
  7019                           ;i2c_master.c: 437: }
  7020  000982  0012               	return	
  7021  000984                     i2l188:
  7022  000984  C0B4  F026         	movff	_i2c_status+24,i2returnReset@p
  7023  000988  C0B5  F027         	movff	_i2c_status+25,i2returnReset@p+1
  7024  00098C  EE20  F0A8         	lfsr	2,_i2c_status+12
  7025  000990  D801               	call	i2u144_48
  7026  000992  D00A               	goto	i2u144_49
  7027  000994                     i2u144_48:
  7028  000994  0005               	push	
  7029  000996  6EFA               	movwf	pclath,c
  7030  000998  50DE               	movf	postinc2,w,c
  7031  00099A  6EFD               	movwf	tosl,c
  7032  00099C  50DE               	movf	postinc2,w,c
  7033  00099E  6EFE               	movwf	tosh,c
  7034  0009A0  50F8               	movf	tblptru,w,c
  7035  0009A2  6EFF               	movwf	tosu,c
  7036  0009A4  50FA               	movf	pclath,w,c
  7037  0009A6  0012               	return		;indir
  7038  0009A8                     i2u144_49:
  7039                           
  7040                           ; Switch size 1, requested type "space"
  7041                           ; Number of cases is 4, Range of values is 1 to 4
  7042                           ; switch strategies available:
  7043                           ; Name         Instructions Cycles
  7044                           ; simple_byte           13     7 (average)
  7045                           ;	Chosen strategy is simple_byte
  7046  0009A8  0A01               	xorlw	1	; case 1
  7047  0009AA  B4D8               	btfsc	status,2,c
  7048  0009AC  D7E8               	goto	i2l191
  7049  0009AE  0A03               	xorlw	3	; case 2
  7050  0009B0  B4D8               	btfsc	status,2,c
  7051  0009B2  D7E2               	goto	i2l189
  7052  0009B4  0A01               	xorlw	1	; case 3
  7053  0009B6  B4D8               	btfsc	status,2,c
  7054  0009B8  D7DF               	goto	i2l189
  7055  0009BA  0A07               	xorlw	7	; case 4
  7056  0009BC  D7E0               	goto	i2l191
  7057  0009BE                     __end_ofi2_do_I2C_RX:
  7058                           	opt stack 0
  7059                           tosu	equ	0xFFF
  7060                           tosh	equ	0xFFE
  7061                           tosl	equ	0xFFD
  7062                           pclatu	equ	0xFFB
  7063                           pclath	equ	0xFFA
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           intcon2	equ	0xFF1
  7072                           postinc0	equ	0xFEE
  7073                           plusw0	equ	0xFEB
  7074                           fsr0h	equ	0xFEA
  7075                           fsr0l	equ	0xFE9
  7076                           wreg	equ	0xFE8
  7077                           postdec1	equ	0xFE5
  7078                           plusw1	equ	0xFE3
  7079                           fsr1h	equ	0xFE2
  7080                           fsr1l	equ	0xFE1
  7081                           indf2	equ	0xFDF
  7082                           postinc2	equ	0xFDE
  7083                           plusw2	equ	0xFDB
  7084                           fsr2h	equ	0xFDA
  7085                           fsr2l	equ	0xFD9
  7086                           status	equ	0xFD8
  7087                           
  7088 ;; *************** function i2_do_I2C_TX *****************
  7089 ;; Defined at:
  7090 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;		None
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      enum E7019
  7097 ;; Registers used:
  7098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7104 ;;      Params:         0       0       0       0       0       0       0
  7105 ;;      Locals:         2       0       0       0       0       0       0
  7106 ;;      Temps:          0       0       0       0       0       0       0
  7107 ;;      Totals:         2       0       0       0       0       0       0
  7108 ;;Total ram usage:        2 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    2
  7111 ;; This function calls:
  7112 ;;		i2_do_I2C_SEND_RESTART_READ
  7113 ;;		i2_do_I2C_SEND_RESTART_WRITE
  7114 ;;		i2_do_I2C_SEND_STOP
  7115 ;;		i2_i2c1_driver_TXData
  7116 ;;		i2_i2c1_driver_isNACK
  7117 ;;		i2_returnReset
  7118 ;;		i2_returnStop
  7119 ;; This function is called by:
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           	psect	text67
  7124  0007C8                     __ptext67:
  7125                           	opt stack 0
  7126  0007C8                     i2_do_I2C_TX:
  7127                           	opt stack 17
  7128                           
  7129                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  7130                           
  7131                           ;incstack = 0
  7132  0007C8  ECED  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  7133  0007CC  B0D8               	btfsc	status,0,c
  7134  0007CE  D00A               	goto	i2l170
  7135  0007D0  D026               	goto	i2l169
  7136  0007D2                     
  7137                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  7138  0007D2  ECE3  F008         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  7139  0007D6  0012               	return	
  7140  0007D8                     
  7141                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  7142  0007D8  ECDF  F008         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  7143  0007DC  0012               	return	
  7144  0007DE                     
  7145                           ;i2c_master.c: 405: case i2c_stop:
  7146                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  7147                           
  7148                           ;i2c_master.c: 404: case i2c_continue:
  7149  0007DE  ECD7  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7150                           
  7151                           ;i2c_master.c: 407: }
  7152  0007E2  0012               	return	
  7153  0007E4                     i2l170:
  7154  0007E4  C0BA  F026         	movff	_i2c_status+30,i2returnReset@p
  7155  0007E8  C0BB  F027         	movff	_i2c_status+31,i2returnReset@p+1
  7156  0007EC  EE20  F0AE         	lfsr	2,_i2c_status+18
  7157  0007F0  D801               	call	i2u141_48
  7158  0007F2  D00A               	goto	i2u141_49
  7159  0007F4                     i2u141_48:
  7160  0007F4  0005               	push	
  7161  0007F6  6EFA               	movwf	pclath,c
  7162  0007F8  50DE               	movf	postinc2,w,c
  7163  0007FA  6EFD               	movwf	tosl,c
  7164  0007FC  50DE               	movf	postinc2,w,c
  7165  0007FE  6EFE               	movwf	tosh,c
  7166  000800  50F8               	movf	tblptru,w,c
  7167  000802  6EFF               	movwf	tosu,c
  7168  000804  50FA               	movf	pclath,w,c
  7169  000806  0012               	return		;indir
  7170  000808                     i2u141_49:
  7171                           
  7172                           ; Switch size 1, requested type "space"
  7173                           ; Number of cases is 4, Range of values is 1 to 4
  7174                           ; switch strategies available:
  7175                           ; Name         Instructions Cycles
  7176                           ; simple_byte           13     7 (average)
  7177                           ;	Chosen strategy is simple_byte
  7178  000808  0A01               	xorlw	1	; case 1
  7179  00080A  B4D8               	btfsc	status,2,c
  7180  00080C  D7E8               	goto	i2l174
  7181  00080E  0A03               	xorlw	3	; case 2
  7182  000810  B4D8               	btfsc	status,2,c
  7183  000812  D7DF               	goto	i2l171
  7184  000814  0A01               	xorlw	1	; case 3
  7185  000816  B4D8               	btfsc	status,2,c
  7186  000818  D7DF               	goto	i2l173
  7187  00081A  0A07               	xorlw	7	; case 4
  7188  00081C  D7E0               	goto	i2l174
  7189  00081E                     i2l169:
  7190                           
  7191                           ;i2c_master.c: 409: else
  7192                           ;i2c_master.c: 410: {
  7193                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  7194  00081E  0100               	movlb	0	; () banked
  7195  000820  979C               	bcf	_i2c_status& (0+255),3,b
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  7199  000822  C09E  FFD9         	movff	_i2c_status+2,fsr2l
  7200  000826  C09F  FFDA         	movff	_i2c_status+3,fsr2h
  7201  00082A  4B9E               	infsnz	(_i2c_status+2)& (0+255),f,b
  7202  00082C  2B9F               	incf	(_i2c_status+3)& (0+255),f,b
  7203  00082E  50DF               	movf	indf2,w,c
  7204  000830  ECE7  F008         	call	i2_i2c1_driver_TXData
  7205                           
  7206                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7207  000834  0100               	movlb	0	; () banked
  7208  000836  07A0               	decf	(_i2c_status+4)& (0+255),f,b
  7209  000838  A0D8               	btfss	status,0,c
  7210  00083A  07A1               	decf	(_i2c_status+5)& (0+255),f,b
  7211  00083C  51A0               	movf	(_i2c_status+4)& (0+255),w,b
  7212  00083E  11A1               	iorwf	(_i2c_status+5)& (0+255),w,b
  7213  000840  A4D8               	btfss	status,2,c
  7214  000842  D004               	goto	i2l180
  7215                           
  7216                           ; BSR set to: 0
  7217  000844  0E00               	movlw	0
  7218  000846  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7219  000848  0E06               	movlw	6
  7220  00084A  D003               	goto	L7
  7221  00084C                     i2l180:
  7222                           
  7223                           ; BSR set to: 0
  7224                           
  7225                           ; BSR set to: 0
  7226  00084C  0E00               	movlw	0
  7227  00084E  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7228  000850  0E03               	movlw	3
  7229  000852                     L7:
  7230  000852  6E26               	movwf	i2_do_I2C_TX$315,c
  7231                           
  7232                           ; BSR set to: 0
  7233  000854  5026               	movf	i2_do_I2C_TX$315,w,c
  7234                           
  7235                           ; BSR set to: 0
  7236  000856  0012               	return	
  7237  000858                     __end_ofi2_do_I2C_TX:
  7238                           	opt stack 0
  7239                           tosu	equ	0xFFF
  7240                           tosh	equ	0xFFE
  7241                           tosl	equ	0xFFD
  7242                           pclatu	equ	0xFFB
  7243                           pclath	equ	0xFFA
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           intcon2	equ	0xFF1
  7252                           postinc0	equ	0xFEE
  7253                           plusw0	equ	0xFEB
  7254                           fsr0h	equ	0xFEA
  7255                           fsr0l	equ	0xFE9
  7256                           wreg	equ	0xFE8
  7257                           postdec1	equ	0xFE5
  7258                           plusw1	equ	0xFE3
  7259                           fsr1h	equ	0xFE2
  7260                           fsr1l	equ	0xFE1
  7261                           indf2	equ	0xFDF
  7262                           postinc2	equ	0xFDE
  7263                           plusw2	equ	0xFDB
  7264                           fsr2h	equ	0xFDA
  7265                           fsr2l	equ	0xFD9
  7266                           status	equ	0xFD8
  7267                           
  7268 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  7269 ;; Defined at:
  7270 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;		None
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;		None
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      enum E7019
  7277 ;; Registers used:
  7278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7284 ;;      Params:         0       0       0       0       0       0       0
  7285 ;;      Locals:         0       0       0       0       0       0       0
  7286 ;;      Temps:          0       0       0       0       0       0       0
  7287 ;;      Totals:         0       0       0       0       0       0       0
  7288 ;;Total ram usage:        0 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    2
  7291 ;; This function calls:
  7292 ;;		i2_do_I2C_SEND_RESTART
  7293 ;;		i2_do_I2C_SEND_STOP
  7294 ;;		i2_returnReset
  7295 ;;		i2_returnStop
  7296 ;; This function is called by:
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text68
  7301  000D1E                     __ptext68:
  7302                           	opt stack 0
  7303  000D1E                     i2_do_I2C_DO_ADDRESS_NACK:
  7304                           	opt stack 17
  7305                           
  7306                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  7307                           
  7308                           ;incstack = 0
  7309  000D1E  0100               	movlb	0	; () banked
  7310  000D20  979C               	bcf	_i2c_status& (0+255),3,b
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  7314  000D22  0E02               	movlw	2
  7315  000D24  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  7316                           
  7317                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7318  000D26  D006               	goto	i2l161
  7319  000D28                     
  7320                           ;i2c_master.c: 386: case i2c_restart_write:
  7321                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  7322                           
  7323                           ; BSR set to: 0
  7324                           
  7325                           ; BSR set to: 0
  7326  000D28  ECDB  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7327  000D2C  0012               	return	
  7328  000D2E                     
  7329                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  7330  000D2E  ECD7  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7331                           
  7332                           ;i2c_master.c: 390: }
  7333  000D32  0012               	return	
  7334  000D34                     i2l161:
  7335  000D34  C0B8  F026         	movff	_i2c_status+28,i2returnReset@p
  7336  000D38  C0B9  F027         	movff	_i2c_status+29,i2returnReset@p+1
  7337  000D3C  EE20  F0AC         	lfsr	2,_i2c_status+16
  7338  000D40  D801               	call	i2u139_48
  7339  000D42  D00A               	goto	i2u139_49
  7340  000D44                     i2u139_48:
  7341  000D44  0005               	push	
  7342  000D46  6EFA               	movwf	pclath,c
  7343  000D48  50DE               	movf	postinc2,w,c
  7344  000D4A  6EFD               	movwf	tosl,c
  7345  000D4C  50DE               	movf	postinc2,w,c
  7346  000D4E  6EFE               	movwf	tosh,c
  7347  000D50  50F8               	movf	tblptru,w,c
  7348  000D52  6EFF               	movwf	tosu,c
  7349  000D54  50FA               	movf	pclath,w,c
  7350  000D56  0012               	return		;indir
  7351  000D58                     i2u139_49:
  7352                           
  7353                           ; Switch size 1, requested type "space"
  7354                           ; Number of cases is 2, Range of values is 2 to 3
  7355                           ; switch strategies available:
  7356                           ; Name         Instructions Cycles
  7357                           ; simple_byte            7     4 (average)
  7358                           ;	Chosen strategy is simple_byte
  7359  000D58  0A02               	xorlw	2	; case 2
  7360  000D5A  B4D8               	btfsc	status,2,c
  7361  000D5C  D7E5               	goto	i2l162
  7362  000D5E  0A01               	xorlw	1	; case 3
  7363  000D60  B4D8               	btfsc	status,2,c
  7364  000D62  D7E2               	goto	i2l162
  7365  000D64  D7E4               	goto	i2l165
  7366  000D66                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  7367                           	opt stack 0
  7368                           tosu	equ	0xFFF
  7369                           tosh	equ	0xFFE
  7370                           tosl	equ	0xFFD
  7371                           pclatu	equ	0xFFB
  7372                           pclath	equ	0xFFA
  7373                           tblptru	equ	0xFF8
  7374                           tblptrh	equ	0xFF7
  7375                           tblptrl	equ	0xFF6
  7376                           tablat	equ	0xFF5
  7377                           prodh	equ	0xFF4
  7378                           prodl	equ	0xFF3
  7379                           intcon	equ	0xFF2
  7380                           intcon2	equ	0xFF1
  7381                           postinc0	equ	0xFEE
  7382                           plusw0	equ	0xFEB
  7383                           fsr0h	equ	0xFEA
  7384                           fsr0l	equ	0xFE9
  7385                           wreg	equ	0xFE8
  7386                           postdec1	equ	0xFE5
  7387                           plusw1	equ	0xFE3
  7388                           fsr1h	equ	0xFE2
  7389                           fsr1l	equ	0xFE1
  7390                           indf2	equ	0xFDF
  7391                           postinc2	equ	0xFDE
  7392                           plusw2	equ	0xFDB
  7393                           fsr2h	equ	0xFDA
  7394                           fsr2l	equ	0xFD9
  7395                           status	equ	0xFD8
  7396                           
  7397 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  7398 ;; Defined at:
  7399 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;		None
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;		None
  7404 ;; Return value:  Size  Location     Type
  7405 ;;                  1    wreg      enum E7019
  7406 ;; Registers used:
  7407 ;;		wreg, cstack
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7413 ;;      Params:         0       0       0       0       0       0       0
  7414 ;;      Locals:         0       0       0       0       0       0       0
  7415 ;;      Temps:          0       0       0       0       0       0       0
  7416 ;;      Totals:         0       0       0       0       0       0       0
  7417 ;;Total ram usage:        0 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:    1
  7420 ;; This function calls:
  7421 ;;		i2_i2c1_driver_sendNACK
  7422 ;; This function is called by:
  7423 ;;		i2_do_I2C_RX
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text69
  7428  001196                     __ptext69:
  7429                           	opt stack 0
  7430  001196                     i2_do_I2C_DO_NACK_RESTART:
  7431                           	opt stack 17
  7432                           
  7433                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  7434                           
  7435                           ;incstack = 0
  7436  001196  ECF1  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7437                           
  7438                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  7439  00119A  0E09               	movlw	9
  7440  00119C  0012               	return	
  7441  00119E                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  7442                           	opt stack 0
  7443                           tosu	equ	0xFFF
  7444                           tosh	equ	0xFFE
  7445                           tosl	equ	0xFFD
  7446                           pclatu	equ	0xFFB
  7447                           pclath	equ	0xFFA
  7448                           tblptru	equ	0xFF8
  7449                           tblptrh	equ	0xFF7
  7450                           tblptrl	equ	0xFF6
  7451                           tablat	equ	0xFF5
  7452                           prodh	equ	0xFF4
  7453                           prodl	equ	0xFF3
  7454                           intcon	equ	0xFF2
  7455                           intcon2	equ	0xFF1
  7456                           postinc0	equ	0xFEE
  7457                           plusw0	equ	0xFEB
  7458                           fsr0h	equ	0xFEA
  7459                           fsr0l	equ	0xFE9
  7460                           wreg	equ	0xFE8
  7461                           postdec1	equ	0xFE5
  7462                           plusw1	equ	0xFE3
  7463                           fsr1h	equ	0xFE2
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           postinc2	equ	0xFDE
  7467                           plusw2	equ	0xFDB
  7468                           fsr2h	equ	0xFDA
  7469                           fsr2l	equ	0xFD9
  7470                           status	equ	0xFD8
  7471                           
  7472 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  7473 ;; Defined at:
  7474 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;		None
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;		None
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  1    wreg      enum E7019
  7481 ;; Registers used:
  7482 ;;		wreg, cstack
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7488 ;;      Params:         0       0       0       0       0       0       0
  7489 ;;      Locals:         0       0       0       0       0       0       0
  7490 ;;      Temps:          0       0       0       0       0       0       0
  7491 ;;      Totals:         0       0       0       0       0       0       0
  7492 ;;Total ram usage:        0 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    1
  7495 ;; This function calls:
  7496 ;;		i2_i2c1_driver_sendNACK
  7497 ;; This function is called by:
  7498 ;;		i2_do_I2C_RX
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text70
  7503  00119E                     __ptext70:
  7504                           	opt stack 0
  7505  00119E                     i2_do_I2C_DO_NACK_STOP:
  7506                           	opt stack 17
  7507                           
  7508                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  7509                           
  7510                           ;incstack = 0
  7511  00119E  ECF1  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7512                           
  7513                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  7514  0011A2  0E0A               	movlw	10
  7515  0011A4  0012               	return	
  7516  0011A6                     __end_ofi2_do_I2C_DO_NACK_STOP:
  7517                           	opt stack 0
  7518                           tosu	equ	0xFFF
  7519                           tosh	equ	0xFFE
  7520                           tosl	equ	0xFFD
  7521                           pclatu	equ	0xFFB
  7522                           pclath	equ	0xFFA
  7523                           tblptru	equ	0xFF8
  7524                           tblptrh	equ	0xFF7
  7525                           tblptrl	equ	0xFF6
  7526                           tablat	equ	0xFF5
  7527                           prodh	equ	0xFF4
  7528                           prodl	equ	0xFF3
  7529                           intcon	equ	0xFF2
  7530                           intcon2	equ	0xFF1
  7531                           postinc0	equ	0xFEE
  7532                           plusw0	equ	0xFEB
  7533                           fsr0h	equ	0xFEA
  7534                           fsr0l	equ	0xFE9
  7535                           wreg	equ	0xFE8
  7536                           postdec1	equ	0xFE5
  7537                           plusw1	equ	0xFE3
  7538                           fsr1h	equ	0xFE2
  7539                           fsr1l	equ	0xFE1
  7540                           indf2	equ	0xFDF
  7541                           postinc2	equ	0xFDE
  7542                           plusw2	equ	0xFDB
  7543                           fsr2h	equ	0xFDA
  7544                           fsr2l	equ	0xFD9
  7545                           status	equ	0xFD8
  7546                           
  7547 ;; *************** function i2_do_I2C_DO_ACK *****************
  7548 ;; Defined at:
  7549 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;		None
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;		None
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  1    wreg      enum E7019
  7556 ;; Registers used:
  7557 ;;		wreg, cstack
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7563 ;;      Params:         0       0       0       0       0       0       0
  7564 ;;      Locals:         0       0       0       0       0       0       0
  7565 ;;      Temps:          0       0       0       0       0       0       0
  7566 ;;      Totals:         0       0       0       0       0       0       0
  7567 ;;Total ram usage:        0 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; Hardware stack levels required when called:    1
  7570 ;; This function calls:
  7571 ;;		i2_i2c1_driver_sendACK
  7572 ;; This function is called by:
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text71
  7577  0011A6                     __ptext71:
  7578                           	opt stack 0
  7579  0011A6                     i2_do_I2C_DO_ACK:
  7580                           	opt stack 18
  7581                           
  7582                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  7583                           
  7584                           ;incstack = 0
  7585  0011A6  ECF4  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  7586                           
  7587                           ;i2c_master.c: 362: return I2C_RCEN;
  7588  0011AA  0E05               	movlw	5
  7589  0011AC  0012               	return	
  7590  0011AE                     __end_ofi2_do_I2C_DO_ACK:
  7591                           	opt stack 0
  7592                           tosu	equ	0xFFF
  7593                           tosh	equ	0xFFE
  7594                           tosl	equ	0xFFD
  7595                           pclatu	equ	0xFFB
  7596                           pclath	equ	0xFFA
  7597                           tblptru	equ	0xFF8
  7598                           tblptrh	equ	0xFF7
  7599                           tblptrl	equ	0xFF6
  7600                           tablat	equ	0xFF5
  7601                           prodh	equ	0xFF4
  7602                           prodl	equ	0xFF3
  7603                           intcon	equ	0xFF2
  7604                           intcon2	equ	0xFF1
  7605                           postinc0	equ	0xFEE
  7606                           plusw0	equ	0xFEB
  7607                           fsr0h	equ	0xFEA
  7608                           fsr0l	equ	0xFE9
  7609                           wreg	equ	0xFE8
  7610                           postdec1	equ	0xFE5
  7611                           plusw1	equ	0xFE3
  7612                           fsr1h	equ	0xFE2
  7613                           fsr1l	equ	0xFE1
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           plusw2	equ	0xFDB
  7617                           fsr2h	equ	0xFDA
  7618                           fsr2l	equ	0xFD9
  7619                           status	equ	0xFD8
  7620                           
  7621 ;; *************** function i2_do_I2C_RCEN *****************
  7622 ;; Defined at:
  7623 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;		None
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;		None
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  1    wreg      enum E7019
  7630 ;; Registers used:
  7631 ;;		wreg, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7637 ;;      Params:         0       0       0       0       0       0       0
  7638 ;;      Locals:         0       0       0       0       0       0       0
  7639 ;;      Temps:          0       0       0       0       0       0       0
  7640 ;;      Totals:         0       0       0       0       0       0       0
  7641 ;;Total ram usage:        0 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    1
  7644 ;; This function calls:
  7645 ;;		i2_i2c1_driver_startRX
  7646 ;; This function is called by:
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           	psect	text72
  7651  001128                     __ptext72:
  7652                           	opt stack 0
  7653  001128                     i2_do_I2C_RCEN:
  7654                           	opt stack 18
  7655                           
  7656                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  7657                           
  7658                           ;incstack = 0
  7659  001128  0100               	movlb	0	; () banked
  7660  00112A  979C               	bcf	_i2c_status& (0+255),3,b
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;i2c_master.c: 355: i2c1_driver_startRX();
  7664  00112C  EC12  F009         	call	i2_i2c1_driver_startRX	;wreg free
  7665                           
  7666                           ;i2c_master.c: 356: return I2C_RX;
  7667  001130  0E04               	movlw	4
  7668  001132  0012               	return	
  7669  001134                     __end_ofi2_do_I2C_RCEN:
  7670                           	opt stack 0
  7671                           tosu	equ	0xFFF
  7672                           tosh	equ	0xFFE
  7673                           tosl	equ	0xFFD
  7674                           pclatu	equ	0xFFB
  7675                           pclath	equ	0xFFA
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodh	equ	0xFF4
  7681                           prodl	equ	0xFF3
  7682                           intcon	equ	0xFF2
  7683                           intcon2	equ	0xFF1
  7684                           postinc0	equ	0xFEE
  7685                           plusw0	equ	0xFEB
  7686                           fsr0h	equ	0xFEA
  7687                           fsr0l	equ	0xFE9
  7688                           wreg	equ	0xFE8
  7689                           postdec1	equ	0xFE5
  7690                           plusw1	equ	0xFE3
  7691                           fsr1h	equ	0xFE2
  7692                           fsr1l	equ	0xFE1
  7693                           indf2	equ	0xFDF
  7694                           postinc2	equ	0xFDE
  7695                           plusw2	equ	0xFDB
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  7701 ;; Defined at:
  7702 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      enum E7019
  7709 ;; Registers used:
  7710 ;;		wreg, status,2, status,0, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7716 ;;      Params:         0       0       0       0       0       0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    1
  7723 ;; This function calls:
  7724 ;;		i2_i2c1_driver_TXData
  7725 ;; This function is called by:
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           	psect	text73
  7730  00105C                     __ptext73:
  7731                           	opt stack 0
  7732  00105C                     i2_do_I2C_SEND_ADR_WRITE:
  7733                           	opt stack 18
  7734                           
  7735                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  7736                           
  7737                           ;incstack = 0
  7738  00105C  0100               	movlb	0	; () banked
  7739  00105E  879C               	bsf	_i2c_status& (0+255),3,b
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  7743  001060  519D               	movf	(_i2c_status+1)& (0+255),w,b
  7744  001062  259D               	addwf	(_i2c_status+1)& (0+255),w,b
  7745  001064  ECE7  F008         	call	i2_i2c1_driver_TXData
  7746                           
  7747                           ;i2c_master.c: 349: return I2C_TX;
  7748  001068  0E03               	movlw	3
  7749  00106A  0012               	return	
  7750  00106C                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  7751                           	opt stack 0
  7752                           tosu	equ	0xFFF
  7753                           tosh	equ	0xFFE
  7754                           tosl	equ	0xFFD
  7755                           pclatu	equ	0xFFB
  7756                           pclath	equ	0xFFA
  7757                           tblptru	equ	0xFF8
  7758                           tblptrh	equ	0xFF7
  7759                           tblptrl	equ	0xFF6
  7760                           tablat	equ	0xFF5
  7761                           prodh	equ	0xFF4
  7762                           prodl	equ	0xFF3
  7763                           intcon	equ	0xFF2
  7764                           intcon2	equ	0xFF1
  7765                           postinc0	equ	0xFEE
  7766                           plusw0	equ	0xFEB
  7767                           fsr0h	equ	0xFEA
  7768                           fsr0l	equ	0xFE9
  7769                           wreg	equ	0xFE8
  7770                           postdec1	equ	0xFE5
  7771                           plusw1	equ	0xFE3
  7772                           fsr1h	equ	0xFE2
  7773                           fsr1l	equ	0xFE1
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           plusw2	equ	0xFDB
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           
  7781 ;; *************** function i2_do_I2C_SEND_INITIAL_READ *****************
  7782 ;; Defined at:
  7783 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;		None
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;		None
  7788 ;; Return value:  Size  Location     Type
  7789 ;;                  1    wreg      enum E7019
  7790 ;; Registers used:
  7791 ;;		wreg, status,2, status,0, cstack
  7792 ;; Tracked objects:
  7793 ;;		On entry : 0/0
  7794 ;;		On exit  : 0/0
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7797 ;;      Params:         0       0       0       0       0       0       0
  7798 ;;      Locals:         0       0       0       0       0       0       0
  7799 ;;      Temps:          0       0       0       0       0       0       0
  7800 ;;      Totals:         0       0       0       0       0       0       0
  7801 ;;Total ram usage:        0 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    1
  7804 ;; This function calls:
  7805 ;;		i2_i2c1_driver_TXData
  7806 ;; This function is called by:
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text74
  7811  00106C                     __ptext74:
  7812                           	opt stack 0
  7813  00106C                     i2_do_I2C_SEND_INITIAL_READ:
  7814                           	opt stack 18
  7815                           
  7816                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  7817                           
  7818                           ;incstack = 0
  7819  00106C  0100               	movlb	0	; () banked
  7820  00106E  879C               	bsf	_i2c_status& (0+255),3,b
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  7824  001070  519D               	movf	(_i2c_status+1)& (0+255),w,b
  7825  001072  259D               	addwf	(_i2c_status+1)& (0+255),w,b
  7826  001074  ECE7  F008         	call	i2_i2c1_driver_TXData
  7827                           
  7828                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  7829  001078  0E11               	movlw	17
  7830  00107A  0012               	return	
  7831  00107C                     __end_ofi2_do_I2C_SEND_INITIAL_READ:
  7832                           	opt stack 0
  7833                           tosu	equ	0xFFF
  7834                           tosh	equ	0xFFE
  7835                           tosl	equ	0xFFD
  7836                           pclatu	equ	0xFFB
  7837                           pclath	equ	0xFFA
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           intcon	equ	0xFF2
  7845                           intcon2	equ	0xFF1
  7846                           postinc0	equ	0xFEE
  7847                           plusw0	equ	0xFEB
  7848                           fsr0h	equ	0xFEA
  7849                           fsr0l	equ	0xFE9
  7850                           wreg	equ	0xFE8
  7851                           postdec1	equ	0xFE5
  7852                           plusw1	equ	0xFE3
  7853                           fsr1h	equ	0xFE2
  7854                           fsr1l	equ	0xFE1
  7855                           indf2	equ	0xFDF
  7856                           postinc2	equ	0xFDE
  7857                           plusw2	equ	0xFDB
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8
  7861                           
  7862 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  7863 ;; Defined at:
  7864 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;		None
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;		None
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  1    wreg      enum E7019
  7871 ;; Registers used:
  7872 ;;		wreg, status,0, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7878 ;;      Params:         0       0       0       0       0       0       0
  7879 ;;      Locals:         0       0       0       0       0       0       0
  7880 ;;      Temps:          0       0       0       0       0       0       0
  7881 ;;      Totals:         0       0       0       0       0       0       0
  7882 ;;Total ram usage:        0 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    1
  7885 ;; This function calls:
  7886 ;;		i2_i2c1_driver_TXData
  7887 ;; This function is called by:
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           	psect	text75
  7892  00107C                     __ptext75:
  7893                           	opt stack 0
  7894  00107C                     i2_do_I2C_SEND_ADR_READ:
  7895                           	opt stack 18
  7896                           
  7897                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  7898                           
  7899                           ;incstack = 0
  7900  00107C  0100               	movlb	0	; () banked
  7901  00107E  879C               	bsf	_i2c_status& (0+255),3,b
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  7905  001080  80D8               	bsf	status,0,c
  7906  001082  359D               	rlcf	(_i2c_status+1)& (0+255),w,b
  7907  001084  ECE7  F008         	call	i2_i2c1_driver_TXData
  7908                           
  7909                           ;i2c_master.c: 325: return I2C_RCEN;
  7910  001088  0E05               	movlw	5
  7911  00108A  0012               	return	
  7912  00108C                     __end_ofi2_do_I2C_SEND_ADR_READ:
  7913                           	opt stack 0
  7914                           tosu	equ	0xFFF
  7915                           tosh	equ	0xFFE
  7916                           tosl	equ	0xFFD
  7917                           pclatu	equ	0xFFB
  7918                           pclath	equ	0xFFA
  7919                           tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           prodh	equ	0xFF4
  7924                           prodl	equ	0xFF3
  7925                           intcon	equ	0xFF2
  7926                           intcon2	equ	0xFF1
  7927                           postinc0	equ	0xFEE
  7928                           plusw0	equ	0xFEB
  7929                           fsr0h	equ	0xFEA
  7930                           fsr0l	equ	0xFE9
  7931                           wreg	equ	0xFE8
  7932                           postdec1	equ	0xFE5
  7933                           plusw1	equ	0xFE3
  7934                           fsr1h	equ	0xFE2
  7935                           fsr1l	equ	0xFE1
  7936                           indf2	equ	0xFDF
  7937                           postinc2	equ	0xFDE
  7938                           plusw2	equ	0xFDB
  7939                           fsr2h	equ	0xFDA
  7940                           fsr2l	equ	0xFD9
  7941                           status	equ	0xFD8
  7942                           
  7943 ;; *************** function i2_do_I2C_SEND_STOP *****************
  7944 ;; Defined at:
  7945 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;		None
  7948 ;; Auto vars:     Size  Location     Type
  7949 ;;		None
  7950 ;; Return value:  Size  Location     Type
  7951 ;;                  1    wreg      enum E7019
  7952 ;; Registers used:
  7953 ;;		wreg, cstack
  7954 ;; Tracked objects:
  7955 ;;		On entry : 0/0
  7956 ;;		On exit  : 0/0
  7957 ;;		Unchanged: 0/0
  7958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7959 ;;      Params:         0       0       0       0       0       0       0
  7960 ;;      Locals:         0       0       0       0       0       0       0
  7961 ;;      Temps:          0       0       0       0       0       0       0
  7962 ;;      Totals:         0       0       0       0       0       0       0
  7963 ;;Total ram usage:        0 bytes
  7964 ;; Hardware stack levels used:    1
  7965 ;; Hardware stack levels required when called:    1
  7966 ;; This function calls:
  7967 ;;		i2_i2c1_driver_stop
  7968 ;; This function is called by:
  7969 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7970 ;;		i2_do_I2C_TX
  7971 ;;		i2_do_I2C_TX_EMPTY
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text76
  7976  0011AE                     __ptext76:
  7977                           	opt stack 0
  7978  0011AE                     i2_do_I2C_SEND_STOP:
  7979                           	opt stack 17
  7980                           
  7981                           ;i2c_master.c: 316: i2c1_driver_stop();
  7982                           
  7983                           ;incstack = 0
  7984  0011AE  EC18  F009         	call	i2_i2c1_driver_stop	;wreg free
  7985                           
  7986                           ;i2c_master.c: 317: return I2C_IDLE;
  7987  0011B2  0E00               	movlw	0
  7988  0011B4  0012               	return	
  7989  0011B6                     __end_ofi2_do_I2C_SEND_STOP:
  7990                           	opt stack 0
  7991                           tosu	equ	0xFFF
  7992                           tosh	equ	0xFFE
  7993                           tosl	equ	0xFFD
  7994                           pclatu	equ	0xFFB
  7995                           pclath	equ	0xFFA
  7996                           tblptru	equ	0xFF8
  7997                           tblptrh	equ	0xFF7
  7998                           tblptrl	equ	0xFF6
  7999                           tablat	equ	0xFF5
  8000                           prodh	equ	0xFF4
  8001                           prodl	equ	0xFF3
  8002                           intcon	equ	0xFF2
  8003                           intcon2	equ	0xFF1
  8004                           postinc0	equ	0xFEE
  8005                           plusw0	equ	0xFEB
  8006                           fsr0h	equ	0xFEA
  8007                           fsr0l	equ	0xFE9
  8008                           wreg	equ	0xFE8
  8009                           postdec1	equ	0xFE5
  8010                           plusw1	equ	0xFE3
  8011                           fsr1h	equ	0xFE2
  8012                           fsr1l	equ	0xFE1
  8013                           indf2	equ	0xFDF
  8014                           postinc2	equ	0xFDE
  8015                           plusw2	equ	0xFDB
  8016                           fsr2h	equ	0xFDA
  8017                           fsr2l	equ	0xFD9
  8018                           status	equ	0xFD8
  8019                           
  8020 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  8021 ;; Defined at:
  8022 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;		None
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;		None
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      enum E7019
  8029 ;; Registers used:
  8030 ;;		wreg, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8036 ;;      Params:         0       0       0       0       0       0       0
  8037 ;;      Locals:         0       0       0       0       0       0       0
  8038 ;;      Temps:          0       0       0       0       0       0       0
  8039 ;;      Totals:         0       0       0       0       0       0       0
  8040 ;;Total ram usage:        0 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    1
  8043 ;; This function calls:
  8044 ;;		i2_i2c1_driver_restart
  8045 ;; This function is called by:
  8046 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8047 ;;		i2_do_I2C_TX_EMPTY
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           	psect	text77
  8052  0011B6                     __ptext77:
  8053                           	opt stack 0
  8054  0011B6                     i2_do_I2C_SEND_RESTART:
  8055                           	opt stack 17
  8056                           
  8057                           ;i2c_master.c: 310: i2c1_driver_restart();
  8058                           
  8059                           ;incstack = 0
  8060  0011B6  EC1A  F009         	call	i2_i2c1_driver_restart	;wreg free
  8061                           
  8062                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  8063  0011BA  0E01               	movlw	1
  8064  0011BC  0012               	return	
  8065  0011BE                     __end_ofi2_do_I2C_SEND_RESTART:
  8066                           	opt stack 0
  8067                           tosu	equ	0xFFF
  8068                           tosh	equ	0xFFE
  8069                           tosl	equ	0xFFD
  8070                           pclatu	equ	0xFFB
  8071                           pclath	equ	0xFFA
  8072                           tblptru	equ	0xFF8
  8073                           tblptrh	equ	0xFF7
  8074                           tblptrl	equ	0xFF6
  8075                           tablat	equ	0xFF5
  8076                           prodh	equ	0xFF4
  8077                           prodl	equ	0xFF3
  8078                           intcon	equ	0xFF2
  8079                           intcon2	equ	0xFF1
  8080                           postinc0	equ	0xFEE
  8081                           plusw0	equ	0xFEB
  8082                           fsr0h	equ	0xFEA
  8083                           fsr0l	equ	0xFE9
  8084                           wreg	equ	0xFE8
  8085                           postdec1	equ	0xFE5
  8086                           plusw1	equ	0xFE3
  8087                           fsr1h	equ	0xFE2
  8088                           fsr1l	equ	0xFE1
  8089                           indf2	equ	0xFDF
  8090                           postinc2	equ	0xFDE
  8091                           plusw2	equ	0xFDB
  8092                           fsr2h	equ	0xFDA
  8093                           fsr2l	equ	0xFD9
  8094                           status	equ	0xFD8
  8095                           
  8096 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  8097 ;; Defined at:
  8098 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;		None
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;		None
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  1    wreg      enum E7019
  8105 ;; Registers used:
  8106 ;;		wreg, cstack
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8112 ;;      Params:         0       0       0       0       0       0       0
  8113 ;;      Locals:         0       0       0       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0
  8115 ;;      Totals:         0       0       0       0       0       0       0
  8116 ;;Total ram usage:        0 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    1
  8119 ;; This function calls:
  8120 ;;		i2_i2c1_driver_restart
  8121 ;; This function is called by:
  8122 ;;		i2_do_I2C_TX
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text78
  8127  0011BE                     __ptext78:
  8128                           	opt stack 0
  8129  0011BE                     i2_do_I2C_SEND_RESTART_WRITE:
  8130                           	opt stack 17
  8131                           
  8132                           ;i2c_master.c: 304: i2c1_driver_restart();
  8133                           
  8134                           ;incstack = 0
  8135  0011BE  EC1A  F009         	call	i2_i2c1_driver_restart	;wreg free
  8136                           
  8137                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  8138  0011C2  0E02               	movlw	2
  8139  0011C4  0012               	return	
  8140  0011C6                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  8141                           	opt stack 0
  8142                           tosu	equ	0xFFF
  8143                           tosh	equ	0xFFE
  8144                           tosl	equ	0xFFD
  8145                           pclatu	equ	0xFFB
  8146                           pclath	equ	0xFFA
  8147                           tblptru	equ	0xFF8
  8148                           tblptrh	equ	0xFF7
  8149                           tblptrl	equ	0xFF6
  8150                           tablat	equ	0xFF5
  8151                           prodh	equ	0xFF4
  8152                           prodl	equ	0xFF3
  8153                           intcon	equ	0xFF2
  8154                           intcon2	equ	0xFF1
  8155                           postinc0	equ	0xFEE
  8156                           plusw0	equ	0xFEB
  8157                           fsr0h	equ	0xFEA
  8158                           fsr0l	equ	0xFE9
  8159                           wreg	equ	0xFE8
  8160                           postdec1	equ	0xFE5
  8161                           plusw1	equ	0xFE3
  8162                           fsr1h	equ	0xFE2
  8163                           fsr1l	equ	0xFE1
  8164                           indf2	equ	0xFDF
  8165                           postinc2	equ	0xFDE
  8166                           plusw2	equ	0xFDB
  8167                           fsr2h	equ	0xFDA
  8168                           fsr2l	equ	0xFD9
  8169                           status	equ	0xFD8
  8170                           
  8171 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  8172 ;; Defined at:
  8173 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;		None
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;		None
  8178 ;; Return value:  Size  Location     Type
  8179 ;;                  1    wreg      enum E7019
  8180 ;; Registers used:
  8181 ;;		wreg, cstack
  8182 ;; Tracked objects:
  8183 ;;		On entry : 0/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8187 ;;      Params:         0       0       0       0       0       0       0
  8188 ;;      Locals:         0       0       0       0       0       0       0
  8189 ;;      Temps:          0       0       0       0       0       0       0
  8190 ;;      Totals:         0       0       0       0       0       0       0
  8191 ;;Total ram usage:        0 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; Hardware stack levels required when called:    1
  8194 ;; This function calls:
  8195 ;;		i2_i2c1_driver_restart
  8196 ;; This function is called by:
  8197 ;;		i2_do_I2C_TX
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           	psect	text79
  8202  0011C6                     __ptext79:
  8203                           	opt stack 0
  8204  0011C6                     i2_do_I2C_SEND_RESTART_READ:
  8205                           	opt stack 17
  8206                           
  8207                           ;i2c_master.c: 298: i2c1_driver_restart();
  8208                           
  8209                           ;incstack = 0
  8210  0011C6  EC1A  F009         	call	i2_i2c1_driver_restart	;wreg free
  8211                           
  8212                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  8213  0011CA  0E01               	movlw	1
  8214  0011CC  0012               	return	
  8215  0011CE                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  8216                           	opt stack 0
  8217                           tosu	equ	0xFFF
  8218                           tosh	equ	0xFFE
  8219                           tosl	equ	0xFFD
  8220                           pclatu	equ	0xFFB
  8221                           pclath	equ	0xFFA
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           intcon2	equ	0xFF1
  8230                           postinc0	equ	0xFEE
  8231                           plusw0	equ	0xFEB
  8232                           fsr0h	equ	0xFEA
  8233                           fsr0l	equ	0xFE9
  8234                           wreg	equ	0xFE8
  8235                           postdec1	equ	0xFE5
  8236                           plusw1	equ	0xFE3
  8237                           fsr1h	equ	0xFE2
  8238                           fsr1l	equ	0xFE1
  8239                           indf2	equ	0xFDF
  8240                           postinc2	equ	0xFDE
  8241                           plusw2	equ	0xFDB
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246 ;; *************** function i2_do_I2C_IDLE *****************
  8247 ;; Defined at:
  8248 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;		None
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;		None
  8253 ;; Return value:  Size  Location     Type
  8254 ;;                  1    wreg      enum E7019
  8255 ;; Registers used:
  8256 ;;		wreg, status,2
  8257 ;; Tracked objects:
  8258 ;;		On entry : 0/0
  8259 ;;		On exit  : 0/0
  8260 ;;		Unchanged: 0/0
  8261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8262 ;;      Params:         0       0       0       0       0       0       0
  8263 ;;      Locals:         0       0       0       0       0       0       0
  8264 ;;      Temps:          0       0       0       0       0       0       0
  8265 ;;      Totals:         0       0       0       0       0       0       0
  8266 ;;Total ram usage:        0 bytes
  8267 ;; Hardware stack levels used:    1
  8268 ;; This function calls:
  8269 ;;		Nothing
  8270 ;; This function is called by:
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text80
  8275  001134                     __ptext80:
  8276                           	opt stack 0
  8277  001134                     i2_do_I2C_IDLE:
  8278                           	opt stack 19
  8279                           
  8280                           ;i2c_master.c: 291: i2c_status.busy = 0;
  8281                           
  8282                           ;incstack = 0
  8283  001134  0100               	movlb	0	; () banked
  8284  001136  919C               	bcf	_i2c_status& (0+255),0,b
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  8288  001138  0E00               	movlw	0
  8289  00113A  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;i2c_master.c: 293: return I2C_RESET;
  8293  00113C  0E0E               	movlw	14
  8294  00113E  0012               	return	
  8295  001140                     __end_ofi2_do_I2C_IDLE:
  8296                           	opt stack 0
  8297                           tosu	equ	0xFFF
  8298                           tosh	equ	0xFFE
  8299                           tosl	equ	0xFFD
  8300                           pclatu	equ	0xFFB
  8301                           pclath	equ	0xFFA
  8302                           tblptru	equ	0xFF8
  8303                           tblptrh	equ	0xFF7
  8304                           tblptrl	equ	0xFF6
  8305                           tablat	equ	0xFF5
  8306                           prodh	equ	0xFF4
  8307                           prodl	equ	0xFF3
  8308                           intcon	equ	0xFF2
  8309                           intcon2	equ	0xFF1
  8310                           postinc0	equ	0xFEE
  8311                           plusw0	equ	0xFEB
  8312                           fsr0h	equ	0xFEA
  8313                           fsr0l	equ	0xFE9
  8314                           wreg	equ	0xFE8
  8315                           postdec1	equ	0xFE5
  8316                           plusw1	equ	0xFE3
  8317                           fsr1h	equ	0xFE2
  8318                           fsr1l	equ	0xFE1
  8319                           indf2	equ	0xFDF
  8320                           postinc2	equ	0xFDE
  8321                           plusw2	equ	0xFDB
  8322                           fsr2h	equ	0xFDA
  8323                           fsr2l	equ	0xFD9
  8324                           status	equ	0xFD8
  8325                           
  8326 ;; *************** function i2_do_I2C_RESET *****************
  8327 ;; Defined at:
  8328 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;		None
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;		None
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  1    wreg      enum E7019
  8335 ;; Registers used:
  8336 ;;		wreg, status,2, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8342 ;;      Params:         0       0       0       0       0       0       0
  8343 ;;      Locals:         0       0       0       0       0       0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0
  8345 ;;      Totals:         0       0       0       0       0       0       0
  8346 ;;Total ram usage:        0 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    1
  8349 ;; This function calls:
  8350 ;;		i2_i2c1_driver_resetBus
  8351 ;; This function is called by:
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	text81
  8356  00108C                     __ptext81:
  8357                           	opt stack 0
  8358  00108C                     i2_do_I2C_RESET:
  8359                           	opt stack 18
  8360                           
  8361                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;incstack = 0
  8365  00108C  EC1F  F009         	call	i2_i2c1_driver_resetBus	;wreg free
  8366                           
  8367                           ;i2c_master.c: 284: i2c_status.busy = 0;
  8368  001090  0100               	movlb	0	; () banked
  8369  001092  919C               	bcf	_i2c_status& (0+255),0,b
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  8373  001094  0E00               	movlw	0
  8374  001096  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;i2c_master.c: 286: return I2C_RESET;
  8378  001098  0E0E               	movlw	14
  8379  00109A  0012               	return	
  8380  00109C                     __end_ofi2_do_I2C_RESET:
  8381                           	opt stack 0
  8382                           tosu	equ	0xFFF
  8383                           tosh	equ	0xFFE
  8384                           tosl	equ	0xFFD
  8385                           pclatu	equ	0xFFB
  8386                           pclath	equ	0xFFA
  8387                           tblptru	equ	0xFF8
  8388                           tblptrh	equ	0xFF7
  8389                           tblptrl	equ	0xFF6
  8390                           tablat	equ	0xFF5
  8391                           prodh	equ	0xFF4
  8392                           prodl	equ	0xFF3
  8393                           intcon	equ	0xFF2
  8394                           intcon2	equ	0xFF1
  8395                           postinc0	equ	0xFEE
  8396                           plusw0	equ	0xFEB
  8397                           fsr0h	equ	0xFEA
  8398                           fsr0l	equ	0xFE9
  8399                           wreg	equ	0xFE8
  8400                           postdec1	equ	0xFE5
  8401                           plusw1	equ	0xFE3
  8402                           fsr1h	equ	0xFE2
  8403                           fsr1l	equ	0xFE1
  8404                           indf2	equ	0xFDF
  8405                           postinc2	equ	0xFDE
  8406                           plusw2	equ	0xFDB
  8407                           fsr2h	equ	0xFDA
  8408                           fsr2l	equ	0xFD9
  8409                           status	equ	0xFD8
  8410                           
  8411 ;; *************** function i2_do_I2C_TX_REGISTER *****************
  8412 ;; Defined at:
  8413 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;		None
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;		None
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  1    wreg      enum E7019
  8420 ;; Registers used:
  8421 ;;		wreg, status,2, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8427 ;;      Params:         0       0       0       0       0       0       0
  8428 ;;      Locals:         0       0       0       0       0       0       0
  8429 ;;      Temps:          0       0       0       0       0       0       0
  8430 ;;      Totals:         0       0       0       0       0       0       0
  8431 ;;Total ram usage:        0 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    1
  8434 ;; This function calls:
  8435 ;;		i2_i2c1_driver_TXData
  8436 ;; This function is called by:
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           	psect	text82
  8441  00111A                     __ptext82:
  8442                           	opt stack 0
  8443  00111A                     i2_do_I2C_TX_REGISTER:
  8444                           	opt stack 18
  8445                           
  8446                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;incstack = 0
  8450  00111A  0100               	movlb	0	; () banked
  8451  00111C  879C               	bsf	_i2c_status& (0+255),3,b
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  8455  00111E  51C0               	movf	(_i2c_status+36)& (0+255),w,b
  8456  001120  ECE7  F008         	call	i2_i2c1_driver_TXData
  8457                           
  8458                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  8459  001124  0E07               	movlw	7
  8460  001126  0012               	return	
  8461  001128                     __end_ofi2_do_I2C_TX_REGISTER:
  8462                           	opt stack 0
  8463                           tosu	equ	0xFFF
  8464                           tosh	equ	0xFFE
  8465                           tosl	equ	0xFFD
  8466                           pclatu	equ	0xFFB
  8467                           pclath	equ	0xFFA
  8468                           tblptru	equ	0xFF8
  8469                           tblptrh	equ	0xFF7
  8470                           tblptrl	equ	0xFF6
  8471                           tablat	equ	0xFF5
  8472                           prodh	equ	0xFF4
  8473                           prodl	equ	0xFF3
  8474                           intcon	equ	0xFF2
  8475                           intcon2	equ	0xFF1
  8476                           postinc0	equ	0xFEE
  8477                           plusw0	equ	0xFEB
  8478                           fsr0h	equ	0xFEA
  8479                           fsr0l	equ	0xFE9
  8480                           wreg	equ	0xFE8
  8481                           postdec1	equ	0xFE5
  8482                           plusw1	equ	0xFE3
  8483                           fsr1h	equ	0xFE2
  8484                           fsr1l	equ	0xFE1
  8485                           indf2	equ	0xFDF
  8486                           postinc2	equ	0xFDE
  8487                           plusw2	equ	0xFDB
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function i2_mssp1_setIRQ *****************
  8493 ;; Defined at:
  8494 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;		None
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;		None
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      void 
  8501 ;; Registers used:
  8502 ;;		None
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8508 ;;      Params:         0       0       0       0       0       0       0
  8509 ;;      Locals:         0       0       0       0       0       0       0
  8510 ;;      Temps:          0       0       0       0       0       0       0
  8511 ;;      Totals:         0       0       0       0       0       0       0
  8512 ;;Total ram usage:        0 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		i2_do_I2C_TX_EMPTY
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text83
  8522  00121C                     __ptext83:
  8523                           	opt stack 0
  8524  00121C                     i2_mssp1_setIRQ:
  8525                           	opt stack 18
  8526                           
  8527                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  8528                           
  8529                           ;incstack = 0
  8530  00121C  869E               	bsf	3998,3,c	;volatile
  8531  00121E  0012               	return		;funcret
  8532  001220                     __end_ofi2_mssp1_setIRQ:
  8533                           	opt stack 0
  8534                           tosu	equ	0xFFF
  8535                           tosh	equ	0xFFE
  8536                           tosl	equ	0xFFD
  8537                           pclatu	equ	0xFFB
  8538                           pclath	equ	0xFFA
  8539                           tblptru	equ	0xFF8
  8540                           tblptrh	equ	0xFF7
  8541                           tblptrl	equ	0xFF6
  8542                           tablat	equ	0xFF5
  8543                           prodh	equ	0xFF4
  8544                           prodl	equ	0xFF3
  8545                           intcon	equ	0xFF2
  8546                           intcon2	equ	0xFF1
  8547                           postinc0	equ	0xFEE
  8548                           plusw0	equ	0xFEB
  8549                           fsr0h	equ	0xFEA
  8550                           fsr0l	equ	0xFE9
  8551                           wreg	equ	0xFE8
  8552                           postdec1	equ	0xFE5
  8553                           plusw1	equ	0xFE3
  8554                           fsr1h	equ	0xFE2
  8555                           fsr1l	equ	0xFE1
  8556                           indf2	equ	0xFDF
  8557                           postinc2	equ	0xFDE
  8558                           plusw2	equ	0xFDB
  8559                           fsr2h	equ	0xFDA
  8560                           fsr2l	equ	0xFD9
  8561                           status	equ	0xFD8
  8562                           
  8563 ;; *************** function i2_i2c1_driver_isNACK *****************
  8564 ;; Defined at:
  8565 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;		None
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;		None
  8570 ;; Return value:  Size  Location     Type
  8571 ;;		None               void
  8572 ;; Registers used:
  8573 ;;		wreg, status,2, status,0
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8579 ;;      Params:         0       0       0       0       0       0       0
  8580 ;;      Locals:         0       0       0       0       0       0       0
  8581 ;;      Temps:          1       0       0       0       0       0       0
  8582 ;;      Totals:         1       0       0       0       0       0       0
  8583 ;;Total ram usage:        1 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		i2_do_I2C_TX
  8589 ;;		i2_i2c_ISR
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text84
  8594  000FDA                     __ptext84:
  8595                           	opt stack 0
  8596  000FDA                     i2_i2c1_driver_isNACK:
  8597                           	opt stack 19
  8598                           
  8599                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  8600                           
  8601                           ;incstack = 0
  8602  000FDA  50C5               	movf	4037,w,c	;volatile
  8603  000FDC  0BBF               	andlw	-65
  8604  000FDE  0940               	iorlw	64
  8605  000FE0  6EC5               	movwf	4037,c	;volatile
  8606  000FE2  38C5               	swapf	4037,w,c	;volatile
  8607  000FE4  32E8               	rrcf	wreg,f,c
  8608  000FE6  32E8               	rrcf	wreg,f,c
  8609  000FE8  0B01               	andlw	1
  8610  000FEA  6E26               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
  8611  000FEC  3026               	rrcf	??i2_i2c1_driver_isNACK,w,c
  8612  000FEE  0012               	return	
  8613  000FF0                     __end_ofi2_i2c1_driver_isNACK:
  8614                           	opt stack 0
  8615                           tosu	equ	0xFFF
  8616                           tosh	equ	0xFFE
  8617                           tosl	equ	0xFFD
  8618                           pclatu	equ	0xFFB
  8619                           pclath	equ	0xFFA
  8620                           tblptru	equ	0xFF8
  8621                           tblptrh	equ	0xFF7
  8622                           tblptrl	equ	0xFF6
  8623                           tablat	equ	0xFF5
  8624                           prodh	equ	0xFF4
  8625                           prodl	equ	0xFF3
  8626                           intcon	equ	0xFF2
  8627                           intcon2	equ	0xFF1
  8628                           postinc0	equ	0xFEE
  8629                           plusw0	equ	0xFEB
  8630                           fsr0h	equ	0xFEA
  8631                           fsr0l	equ	0xFE9
  8632                           wreg	equ	0xFE8
  8633                           postdec1	equ	0xFE5
  8634                           plusw1	equ	0xFE3
  8635                           fsr1h	equ	0xFE2
  8636                           fsr1l	equ	0xFE1
  8637                           indf2	equ	0xFDF
  8638                           postinc2	equ	0xFDE
  8639                           plusw2	equ	0xFDB
  8640                           fsr2h	equ	0xFDA
  8641                           fsr2l	equ	0xFD9
  8642                           status	equ	0xFD8
  8643                           
  8644 ;; *************** function i2_i2c1_driver_TXData *****************
  8645 ;; Defined at:
  8646 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  8647 ;; Parameters:    Size  Location     Type
  8648 ;;  d               1    wreg     unsigned char 
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;  d               1    0[COMRAM] unsigned char 
  8651 ;; Return value:  Size  Location     Type
  8652 ;;                  1    wreg      void 
  8653 ;; Registers used:
  8654 ;;		wreg
  8655 ;; Tracked objects:
  8656 ;;		On entry : 0/0
  8657 ;;		On exit  : 0/0
  8658 ;;		Unchanged: 0/0
  8659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8660 ;;      Params:         0       0       0       0       0       0       0
  8661 ;;      Locals:         1       0       0       0       0       0       0
  8662 ;;      Temps:          0       0       0       0       0       0       0
  8663 ;;      Totals:         1       0       0       0       0       0       0
  8664 ;;Total ram usage:        1 bytes
  8665 ;; Hardware stack levels used:    1
  8666 ;; This function calls:
  8667 ;;		Nothing
  8668 ;; This function is called by:
  8669 ;;		i2_do_I2C_SEND_ADR_READ
  8670 ;;		i2_do_I2C_SEND_INITIAL_READ
  8671 ;;		i2_do_I2C_TX_REGISTER
  8672 ;;		i2_do_I2C_SEND_ADR_WRITE
  8673 ;;		i2_do_I2C_TX
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           	psect	text85
  8678  0011CE                     __ptext85:
  8679                           	opt stack 0
  8680  0011CE                     i2_i2c1_driver_TXData:
  8681                           	opt stack 18
  8682                           
  8683                           ;incstack = 0
  8684                           ;i2i2c1_driver_TXData@d stored from wreg
  8685  0011CE  6E26               	movwf	i2i2c1_driver_TXData@d,c
  8686                           
  8687                           ;i2c1_driver.c: 188: SSP1BUF = d;
  8688  0011D0  C026  FFC9         	movff	i2i2c1_driver_TXData@d,4041	;volatile
  8689  0011D4  0012               	return		;funcret
  8690  0011D6                     __end_ofi2_i2c1_driver_TXData:
  8691                           	opt stack 0
  8692                           tosu	equ	0xFFF
  8693                           tosh	equ	0xFFE
  8694                           tosl	equ	0xFFD
  8695                           pclatu	equ	0xFFB
  8696                           pclath	equ	0xFFA
  8697                           tblptru	equ	0xFF8
  8698                           tblptrh	equ	0xFF7
  8699                           tblptrl	equ	0xFF6
  8700                           tablat	equ	0xFF5
  8701                           prodh	equ	0xFF4
  8702                           prodl	equ	0xFF3
  8703                           intcon	equ	0xFF2
  8704                           intcon2	equ	0xFF1
  8705                           postinc0	equ	0xFEE
  8706                           plusw0	equ	0xFEB
  8707                           fsr0h	equ	0xFEA
  8708                           fsr0l	equ	0xFE9
  8709                           wreg	equ	0xFE8
  8710                           postdec1	equ	0xFE5
  8711                           plusw1	equ	0xFE3
  8712                           fsr1h	equ	0xFE2
  8713                           fsr1l	equ	0xFE1
  8714                           indf2	equ	0xFDF
  8715                           postinc2	equ	0xFDE
  8716                           plusw2	equ	0xFDB
  8717                           fsr2h	equ	0xFDA
  8718                           fsr2l	equ	0xFD9
  8719                           status	equ	0xFD8
  8720                           
  8721 ;; *************** function i2_i2c1_driver_getRXData *****************
  8722 ;; Defined at:
  8723 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;		None
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;		None
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  1    wreg      unsigned char 
  8730 ;; Registers used:
  8731 ;;		wreg, status,2
  8732 ;; Tracked objects:
  8733 ;;		On entry : 0/0
  8734 ;;		On exit  : 0/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8737 ;;      Params:         0       0       0       0       0       0       0
  8738 ;;      Locals:         0       0       0       0       0       0       0
  8739 ;;      Temps:          0       0       0       0       0       0       0
  8740 ;;      Totals:         0       0       0       0       0       0       0
  8741 ;;Total ram usage:        0 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; This function calls:
  8744 ;;		Nothing
  8745 ;; This function is called by:
  8746 ;;		i2_do_I2C_RX
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text86
  8751  001220                     __ptext86:
  8752                           	opt stack 0
  8753  001220                     i2_i2c1_driver_getRXData:
  8754                           	opt stack 18
  8755                           
  8756                           ;i2c1_driver.c: 173: return SSP1BUF;
  8757                           
  8758                           ;incstack = 0
  8759  001220  50C9               	movf	4041,w,c	;volatile
  8760  001222  0012               	return	
  8761  001224                     __end_ofi2_i2c1_driver_getRXData:
  8762                           	opt stack 0
  8763                           tosu	equ	0xFFF
  8764                           tosh	equ	0xFFE
  8765                           tosl	equ	0xFFD
  8766                           pclatu	equ	0xFFB
  8767                           pclath	equ	0xFFA
  8768                           tblptru	equ	0xFF8
  8769                           tblptrh	equ	0xFF7
  8770                           tblptrl	equ	0xFF6
  8771                           tablat	equ	0xFF5
  8772                           prodh	equ	0xFF4
  8773                           prodl	equ	0xFF3
  8774                           intcon	equ	0xFF2
  8775                           intcon2	equ	0xFF1
  8776                           postinc0	equ	0xFEE
  8777                           plusw0	equ	0xFEB
  8778                           fsr0h	equ	0xFEA
  8779                           fsr0l	equ	0xFE9
  8780                           wreg	equ	0xFE8
  8781                           postdec1	equ	0xFE5
  8782                           plusw1	equ	0xFE3
  8783                           fsr1h	equ	0xFE2
  8784                           fsr1l	equ	0xFE1
  8785                           indf2	equ	0xFDF
  8786                           postinc2	equ	0xFDE
  8787                           plusw2	equ	0xFDB
  8788                           fsr2h	equ	0xFDA
  8789                           fsr2l	equ	0xFD9
  8790                           status	equ	0xFD8
  8791                           
  8792 ;; *************** function i2_i2c1_driver_sendNACK *****************
  8793 ;; Defined at:
  8794 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;		None
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		None
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8808 ;;      Params:         0       0       0       0       0       0       0
  8809 ;;      Locals:         0       0       0       0       0       0       0
  8810 ;;      Temps:          0       0       0       0       0       0       0
  8811 ;;      Totals:         0       0       0       0       0       0       0
  8812 ;;Total ram usage:        0 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; This function calls:
  8815 ;;		Nothing
  8816 ;; This function is called by:
  8817 ;;		i2_do_I2C_DO_NACK_STOP
  8818 ;;		i2_do_I2C_DO_NACK_RESTART
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text87
  8823  0011E2                     __ptext87:
  8824                           	opt stack 0
  8825  0011E2                     i2_i2c1_driver_sendNACK:
  8826                           	opt stack 17
  8827                           
  8828                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  8829                           
  8830                           ;incstack = 0
  8831  0011E2  8AC5               	bsf	4037,5,c	;volatile
  8832                           
  8833                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  8834  0011E4  88C5               	bsf	4037,4,c	;volatile
  8835  0011E6  0012               	return		;funcret
  8836  0011E8                     __end_ofi2_i2c1_driver_sendNACK:
  8837                           	opt stack 0
  8838                           tosu	equ	0xFFF
  8839                           tosh	equ	0xFFE
  8840                           tosl	equ	0xFFD
  8841                           pclatu	equ	0xFFB
  8842                           pclath	equ	0xFFA
  8843                           tblptru	equ	0xFF8
  8844                           tblptrh	equ	0xFF7
  8845                           tblptrl	equ	0xFF6
  8846                           tablat	equ	0xFF5
  8847                           prodh	equ	0xFF4
  8848                           prodl	equ	0xFF3
  8849                           intcon	equ	0xFF2
  8850                           intcon2	equ	0xFF1
  8851                           postinc0	equ	0xFEE
  8852                           plusw0	equ	0xFEB
  8853                           fsr0h	equ	0xFEA
  8854                           fsr0l	equ	0xFE9
  8855                           wreg	equ	0xFE8
  8856                           postdec1	equ	0xFE5
  8857                           plusw1	equ	0xFE3
  8858                           fsr1h	equ	0xFE2
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           plusw2	equ	0xFDB
  8863                           fsr2h	equ	0xFDA
  8864                           fsr2l	equ	0xFD9
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function i2_i2c1_driver_resetBus *****************
  8868 ;; Defined at:
  8869 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;		None
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  1    wreg      void 
  8876 ;; Registers used:
  8877 ;;		None
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8883 ;;      Params:         0       0       0       0       0       0       0
  8884 ;;      Locals:         0       0       0       0       0       0       0
  8885 ;;      Temps:          0       0       0       0       0       0       0
  8886 ;;      Totals:         0       0       0       0       0       0       0
  8887 ;;Total ram usage:        0 bytes
  8888 ;; Hardware stack levels used:    1
  8889 ;; This function calls:
  8890 ;;		Nothing
  8891 ;; This function is called by:
  8892 ;;		i2_do_I2C_RESET
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           	psect	text88
  8897  00123E                     __ptext88:
  8898                           	opt stack 0
  8899  00123E                     i2_i2c1_driver_resetBus:
  8900                           	opt stack 18
  8901                           
  8902                           ;incstack = 0
  8903  00123E  0012               	return		;funcret
  8904  001240                     __end_ofi2_i2c1_driver_resetBus:
  8905                           	opt stack 0
  8906                           tosu	equ	0xFFF
  8907                           tosh	equ	0xFFE
  8908                           tosl	equ	0xFFD
  8909                           pclatu	equ	0xFFB
  8910                           pclath	equ	0xFFA
  8911                           tblptru	equ	0xFF8
  8912                           tblptrh	equ	0xFF7
  8913                           tblptrl	equ	0xFF6
  8914                           tablat	equ	0xFF5
  8915                           prodh	equ	0xFF4
  8916                           prodl	equ	0xFF3
  8917                           intcon	equ	0xFF2
  8918                           intcon2	equ	0xFF1
  8919                           postinc0	equ	0xFEE
  8920                           plusw0	equ	0xFEB
  8921                           fsr0h	equ	0xFEA
  8922                           fsr0l	equ	0xFE9
  8923                           wreg	equ	0xFE8
  8924                           postdec1	equ	0xFE5
  8925                           plusw1	equ	0xFE3
  8926                           fsr1h	equ	0xFE2
  8927                           fsr1l	equ	0xFE1
  8928                           indf2	equ	0xFDF
  8929                           postinc2	equ	0xFDE
  8930                           plusw2	equ	0xFDB
  8931                           fsr2h	equ	0xFDA
  8932                           fsr2l	equ	0xFD9
  8933                           status	equ	0xFD8
  8934                           
  8935 ;; *************** function i2_i2c1_driver_startRX *****************
  8936 ;; Defined at:
  8937 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  8938 ;; Parameters:    Size  Location     Type
  8939 ;;		None
  8940 ;; Auto vars:     Size  Location     Type
  8941 ;;		None
  8942 ;; Return value:  Size  Location     Type
  8943 ;;                  1    wreg      void 
  8944 ;; Registers used:
  8945 ;;		None
  8946 ;; Tracked objects:
  8947 ;;		On entry : 0/0
  8948 ;;		On exit  : 0/0
  8949 ;;		Unchanged: 0/0
  8950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8951 ;;      Params:         0       0       0       0       0       0       0
  8952 ;;      Locals:         0       0       0       0       0       0       0
  8953 ;;      Temps:          0       0       0       0       0       0       0
  8954 ;;      Totals:         0       0       0       0       0       0       0
  8955 ;;Total ram usage:        0 bytes
  8956 ;; Hardware stack levels used:    1
  8957 ;; This function calls:
  8958 ;;		Nothing
  8959 ;; This function is called by:
  8960 ;;		i2_do_I2C_RCEN
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           	psect	text89
  8965  001224                     __ptext89:
  8966                           	opt stack 0
  8967  001224                     i2_i2c1_driver_startRX:
  8968                           	opt stack 18
  8969                           
  8970                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  8971                           
  8972                           ;incstack = 0
  8973  001224  86C5               	bsf	4037,3,c	;volatile
  8974  001226  0012               	return		;funcret
  8975  001228                     __end_ofi2_i2c1_driver_startRX:
  8976                           	opt stack 0
  8977                           tosu	equ	0xFFF
  8978                           tosh	equ	0xFFE
  8979                           tosl	equ	0xFFD
  8980                           pclatu	equ	0xFFB
  8981                           pclath	equ	0xFFA
  8982                           tblptru	equ	0xFF8
  8983                           tblptrh	equ	0xFF7
  8984                           tblptrl	equ	0xFF6
  8985                           tablat	equ	0xFF5
  8986                           prodh	equ	0xFF4
  8987                           prodl	equ	0xFF3
  8988                           intcon	equ	0xFF2
  8989                           intcon2	equ	0xFF1
  8990                           postinc0	equ	0xFEE
  8991                           plusw0	equ	0xFEB
  8992                           fsr0h	equ	0xFEA
  8993                           fsr0l	equ	0xFE9
  8994                           wreg	equ	0xFE8
  8995                           postdec1	equ	0xFE5
  8996                           plusw1	equ	0xFE3
  8997                           fsr1h	equ	0xFE2
  8998                           fsr1l	equ	0xFE1
  8999                           indf2	equ	0xFDF
  9000                           postinc2	equ	0xFDE
  9001                           plusw2	equ	0xFDB
  9002                           fsr2h	equ	0xFDA
  9003                           fsr2l	equ	0xFD9
  9004                           status	equ	0xFD8
  9005                           
  9006 ;; *************** function i2_returnReset *****************
  9007 ;; Defined at:
  9008 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  p               2    0[COMRAM] PTR void 
  9011 ;;		 -> NULL(0), 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      enum E6842
  9016 ;; Registers used:
  9017 ;;		wreg
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9023 ;;      Params:         2       0       0       0       0       0       0
  9024 ;;      Locals:         0       0       0       0       0       0       0
  9025 ;;      Temps:          0       0       0       0       0       0       0
  9026 ;;      Totals:         2       0       0       0       0       0       0
  9027 ;;Total ram usage:        2 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; This function calls:
  9030 ;;		Nothing
  9031 ;; This function is called by:
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           	psect	text90
  9036  001228                     __ptext90:
  9037                           	opt stack 0
  9038  001228                     i2_returnReset:
  9039                           	opt stack 18
  9040                           
  9041                           ;i2c_master.c: 515: return i2c_reset_link;
  9042                           
  9043                           ;incstack = 0
  9044  001228  0E05               	movlw	5
  9045  00122A  0012               	return	
  9046  00122C                     __end_ofi2_returnReset:
  9047                           	opt stack 0
  9048                           tosu	equ	0xFFF
  9049                           tosh	equ	0xFFE
  9050                           tosl	equ	0xFFD
  9051                           pclatu	equ	0xFFB
  9052                           pclath	equ	0xFFA
  9053                           tblptru	equ	0xFF8
  9054                           tblptrh	equ	0xFF7
  9055                           tblptrl	equ	0xFF6
  9056                           tablat	equ	0xFF5
  9057                           prodh	equ	0xFF4
  9058                           prodl	equ	0xFF3
  9059                           intcon	equ	0xFF2
  9060                           intcon2	equ	0xFF1
  9061                           postinc0	equ	0xFEE
  9062                           plusw0	equ	0xFEB
  9063                           fsr0h	equ	0xFEA
  9064                           fsr0l	equ	0xFE9
  9065                           wreg	equ	0xFE8
  9066                           postdec1	equ	0xFE5
  9067                           plusw1	equ	0xFE3
  9068                           fsr1h	equ	0xFE2
  9069                           fsr1l	equ	0xFE1
  9070                           indf2	equ	0xFDF
  9071                           postinc2	equ	0xFDE
  9072                           plusw2	equ	0xFDB
  9073                           fsr2h	equ	0xFDA
  9074                           fsr2l	equ	0xFD9
  9075                           status	equ	0xFD8
  9076                           
  9077 ;; *************** function i2_returnStop *****************
  9078 ;; Defined at:
  9079 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;  p               2    0[COMRAM] PTR void 
  9082 ;;		 -> NULL(0), 
  9083 ;; Auto vars:     Size  Location     Type
  9084 ;;		None
  9085 ;; Return value:  Size  Location     Type
  9086 ;;                  1    wreg      enum E6842
  9087 ;; Registers used:
  9088 ;;		wreg
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9094 ;;      Params:         2       0       0       0       0       0       0
  9095 ;;      Locals:         0       0       0       0       0       0       0
  9096 ;;      Temps:          0       0       0       0       0       0       0
  9097 ;;      Totals:         2       0       0       0       0       0       0
  9098 ;;Total ram usage:        2 bytes
  9099 ;; Hardware stack levels used:    1
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;; This function uses a non-reentrant model
  9104 ;;
  9105                           
  9106                           	psect	text91
  9107  00122C                     __ptext91:
  9108                           	opt stack 0
  9109  00122C                     i2_returnStop:
  9110                           	opt stack 18
  9111                           
  9112                           ;i2c_master.c: 510: return i2c_stop;
  9113                           
  9114                           ;incstack = 0
  9115  00122C  0E01               	movlw	1
  9116  00122E  0012               	return	
  9117  001230                     __end_ofi2_returnStop:
  9118                           	opt stack 0
  9119                           tosu	equ	0xFFF
  9120                           tosh	equ	0xFFE
  9121                           tosl	equ	0xFFD
  9122                           pclatu	equ	0xFFB
  9123                           pclath	equ	0xFFA
  9124                           tblptru	equ	0xFF8
  9125                           tblptrh	equ	0xFF7
  9126                           tblptrl	equ	0xFF6
  9127                           tablat	equ	0xFF5
  9128                           prodh	equ	0xFF4
  9129                           prodl	equ	0xFF3
  9130                           intcon	equ	0xFF2
  9131                           intcon2	equ	0xFF1
  9132                           postinc0	equ	0xFEE
  9133                           plusw0	equ	0xFEB
  9134                           fsr0h	equ	0xFEA
  9135                           fsr0l	equ	0xFE9
  9136                           wreg	equ	0xFE8
  9137                           postdec1	equ	0xFE5
  9138                           plusw1	equ	0xFE3
  9139                           fsr1h	equ	0xFE2
  9140                           fsr1l	equ	0xFE1
  9141                           indf2	equ	0xFDF
  9142                           postinc2	equ	0xFDE
  9143                           plusw2	equ	0xFDB
  9144                           fsr2h	equ	0xFDA
  9145                           fsr2l	equ	0xFD9
  9146                           status	equ	0xFD8
  9147                           
  9148 ;; *************** function i2_i2c1_driver_stop *****************
  9149 ;; Defined at:
  9150 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;		None
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;		None
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  1    wreg      void 
  9157 ;; Registers used:
  9158 ;;		None
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9164 ;;      Params:         0       0       0       0       0       0       0
  9165 ;;      Locals:         0       0       0       0       0       0       0
  9166 ;;      Temps:          0       0       0       0       0       0       0
  9167 ;;      Totals:         0       0       0       0       0       0       0
  9168 ;;Total ram usage:        0 bytes
  9169 ;; Hardware stack levels used:    1
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		i2_do_I2C_SEND_STOP
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           	psect	text92
  9178  001230                     __ptext92:
  9179                           	opt stack 0
  9180  001230                     i2_i2c1_driver_stop:
  9181                           	opt stack 17
  9182                           
  9183                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  9184                           
  9185                           ;incstack = 0
  9186  001230  84C5               	bsf	4037,2,c	;volatile
  9187  001232  0012               	return		;funcret
  9188  001234                     __end_ofi2_i2c1_driver_stop:
  9189                           	opt stack 0
  9190                           tosu	equ	0xFFF
  9191                           tosh	equ	0xFFE
  9192                           tosl	equ	0xFFD
  9193                           pclatu	equ	0xFFB
  9194                           pclath	equ	0xFFA
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           intcon2	equ	0xFF1
  9203                           postinc0	equ	0xFEE
  9204                           plusw0	equ	0xFEB
  9205                           fsr0h	equ	0xFEA
  9206                           fsr0l	equ	0xFE9
  9207                           wreg	equ	0xFE8
  9208                           postdec1	equ	0xFE5
  9209                           plusw1	equ	0xFE3
  9210                           fsr1h	equ	0xFE2
  9211                           fsr1l	equ	0xFE1
  9212                           indf2	equ	0xFDF
  9213                           postinc2	equ	0xFDE
  9214                           plusw2	equ	0xFDB
  9215                           fsr2h	equ	0xFDA
  9216                           fsr2l	equ	0xFD9
  9217                           status	equ	0xFD8
  9218                           
  9219 ;; *************** function i2_i2c1_driver_restart *****************
  9220 ;; Defined at:
  9221 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;		None
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;		None
  9226 ;; Return value:  Size  Location     Type
  9227 ;;                  1    wreg      void 
  9228 ;; Registers used:
  9229 ;;		None
  9230 ;; Tracked objects:
  9231 ;;		On entry : 0/0
  9232 ;;		On exit  : 0/0
  9233 ;;		Unchanged: 0/0
  9234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9235 ;;      Params:         0       0       0       0       0       0       0
  9236 ;;      Locals:         0       0       0       0       0       0       0
  9237 ;;      Temps:          0       0       0       0       0       0       0
  9238 ;;      Totals:         0       0       0       0       0       0       0
  9239 ;;Total ram usage:        0 bytes
  9240 ;; Hardware stack levels used:    1
  9241 ;; This function calls:
  9242 ;;		Nothing
  9243 ;; This function is called by:
  9244 ;;		i2_do_I2C_SEND_RESTART_READ
  9245 ;;		i2_do_I2C_SEND_RESTART_WRITE
  9246 ;;		i2_do_I2C_SEND_RESTART
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           	psect	text93
  9251  001234                     __ptext93:
  9252                           	opt stack 0
  9253  001234                     i2_i2c1_driver_restart:
  9254                           	opt stack 17
  9255                           
  9256                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  9257                           
  9258                           ;incstack = 0
  9259  001234  82C5               	bsf	4037,1,c	;volatile
  9260  001236  0012               	return		;funcret
  9261  001238                     __end_ofi2_i2c1_driver_restart:
  9262                           	opt stack 0
  9263                           tosu	equ	0xFFF
  9264                           tosh	equ	0xFFE
  9265                           tosl	equ	0xFFD
  9266                           pclatu	equ	0xFFB
  9267                           pclath	equ	0xFFA
  9268                           tblptru	equ	0xFF8
  9269                           tblptrh	equ	0xFF7
  9270                           tblptrl	equ	0xFF6
  9271                           tablat	equ	0xFF5
  9272                           prodh	equ	0xFF4
  9273                           prodl	equ	0xFF3
  9274                           intcon	equ	0xFF2
  9275                           intcon2	equ	0xFF1
  9276                           postinc0	equ	0xFEE
  9277                           plusw0	equ	0xFEB
  9278                           fsr0h	equ	0xFEA
  9279                           fsr0l	equ	0xFE9
  9280                           wreg	equ	0xFE8
  9281                           postdec1	equ	0xFE5
  9282                           plusw1	equ	0xFE3
  9283                           fsr1h	equ	0xFE2
  9284                           fsr1l	equ	0xFE1
  9285                           indf2	equ	0xFDF
  9286                           postinc2	equ	0xFDE
  9287                           plusw2	equ	0xFDB
  9288                           fsr2h	equ	0xFDA
  9289                           fsr2l	equ	0xFD9
  9290                           status	equ	0xFD8
  9291                           
  9292 ;; *************** function i2_i2c1_driver_sendACK *****************
  9293 ;; Defined at:
  9294 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  9295 ;; Parameters:    Size  Location     Type
  9296 ;;		None
  9297 ;; Auto vars:     Size  Location     Type
  9298 ;;		None
  9299 ;; Return value:  Size  Location     Type
  9300 ;;                  1    wreg      void 
  9301 ;; Registers used:
  9302 ;;		None
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9308 ;;      Params:         0       0       0       0       0       0       0
  9309 ;;      Locals:         0       0       0       0       0       0       0
  9310 ;;      Temps:          0       0       0       0       0       0       0
  9311 ;;      Totals:         0       0       0       0       0       0       0
  9312 ;;Total ram usage:        0 bytes
  9313 ;; Hardware stack levels used:    1
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		i2_do_I2C_DO_ACK
  9318 ;;		i2_do_I2C_RX
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           	psect	text94
  9323  0011E8                     __ptext94:
  9324                           	opt stack 0
  9325  0011E8                     i2_i2c1_driver_sendACK:
  9326                           	opt stack 18
  9327                           
  9328                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  9329                           
  9330                           ;incstack = 0
  9331  0011E8  9AC5               	bcf	4037,5,c	;volatile
  9332                           
  9333                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  9334  0011EA  88C5               	bsf	4037,4,c	;volatile
  9335  0011EC  0012               	return		;funcret
  9336  0011EE                     __end_ofi2_i2c1_driver_sendACK:
  9337                           	opt stack 0
  9338                           tosu	equ	0xFFF
  9339                           tosh	equ	0xFFE
  9340                           tosl	equ	0xFFD
  9341                           pclatu	equ	0xFFB
  9342                           pclath	equ	0xFFA
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           intcon2	equ	0xFF1
  9351                           postinc0	equ	0xFEE
  9352                           plusw0	equ	0xFEB
  9353                           fsr0h	equ	0xFEA
  9354                           fsr0l	equ	0xFE9
  9355                           wreg	equ	0xFE8
  9356                           postdec1	equ	0xFE5
  9357                           plusw1	equ	0xFE3
  9358                           fsr1h	equ	0xFE2
  9359                           fsr1l	equ	0xFE1
  9360                           indf2	equ	0xFDF
  9361                           postinc2	equ	0xFDE
  9362                           plusw2	equ	0xFDB
  9363                           fsr2h	equ	0xFDA
  9364                           fsr2l	equ	0xFD9
  9365                           status	equ	0xFD8
  9366                           
  9367 ;; *************** function _i2c_busCollisionISR *****************
  9368 ;; Defined at:
  9369 ;;		line 500 in file "mcc_generated_files/drivers/i2c_master.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;		None
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      void 
  9376 ;; Registers used:
  9377 ;;		cstack
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9383 ;;      Params:         0       0       0       0       0       0       0
  9384 ;;      Locals:         0       0       0       0       0       0       0
  9385 ;;      Temps:          0       0       0       0       0       0       0
  9386 ;;      Totals:         0       0       0       0       0       0       0
  9387 ;;Total ram usage:        0 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    1
  9390 ;; This function calls:
  9391 ;;		_i2c1_driver_clearBusCollision
  9392 ;; This function is called by:
  9393 ;;		_i2c_open
  9394 ;;		_INTERRUPT_InterruptManager
  9395 ;; This function uses a non-reentrant model
  9396 ;;
  9397                           
  9398                           	psect	text95
  9399  0011EE                     __ptext95:
  9400                           	opt stack 0
  9401  0011EE                     _i2c_busCollisionISR:
  9402                           	opt stack 19
  9403                           
  9404                           ;i2c_master.c: 502: i2c1_driver_clearBusCollision();
  9405                           
  9406                           ;incstack = 0
  9407  0011EE  EC1C  F009         	call	_i2c1_driver_clearBusCollision	;wreg free
  9408  0011F2  0012               	return		;funcret
  9409  0011F4                     __end_of_i2c_busCollisionISR:
  9410                           	opt stack 0
  9411                           tosu	equ	0xFFF
  9412                           tosh	equ	0xFFE
  9413                           tosl	equ	0xFFD
  9414                           pclatu	equ	0xFFB
  9415                           pclath	equ	0xFFA
  9416                           tblptru	equ	0xFF8
  9417                           tblptrh	equ	0xFF7
  9418                           tblptrl	equ	0xFF6
  9419                           tablat	equ	0xFF5
  9420                           prodh	equ	0xFF4
  9421                           prodl	equ	0xFF3
  9422                           intcon	equ	0xFF2
  9423                           intcon2	equ	0xFF1
  9424                           postinc0	equ	0xFEE
  9425                           plusw0	equ	0xFEB
  9426                           fsr0h	equ	0xFEA
  9427                           fsr0l	equ	0xFE9
  9428                           wreg	equ	0xFE8
  9429                           postdec1	equ	0xFE5
  9430                           plusw1	equ	0xFE3
  9431                           fsr1h	equ	0xFE2
  9432                           fsr1l	equ	0xFE1
  9433                           indf2	equ	0xFDF
  9434                           postinc2	equ	0xFDE
  9435                           plusw2	equ	0xFDB
  9436                           fsr2h	equ	0xFDA
  9437                           fsr2l	equ	0xFD9
  9438                           status	equ	0xFD8
  9439                           
  9440 ;; *************** function _i2c1_driver_clearBusCollision *****************
  9441 ;; Defined at:
  9442 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;		None
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;		None
  9447 ;; Return value:  Size  Location     Type
  9448 ;;                  1    wreg      void 
  9449 ;; Registers used:
  9450 ;;		None
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9456 ;;      Params:         0       0       0       0       0       0       0
  9457 ;;      Locals:         0       0       0       0       0       0       0
  9458 ;;      Temps:          0       0       0       0       0       0       0
  9459 ;;      Totals:         0       0       0       0       0       0       0
  9460 ;;Total ram usage:        0 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; This function calls:
  9463 ;;		Nothing
  9464 ;; This function is called by:
  9465 ;;		_i2c_busCollisionISR
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           	psect	text96
  9470  001238                     __ptext96:
  9471                           	opt stack 0
  9472  001238                     _i2c1_driver_clearBusCollision:
  9473                           	opt stack 19
  9474                           
  9475                           ;i2c1_driver.c: 255: PIR2bits.BCL1IF = 0;
  9476                           
  9477                           ;incstack = 0
  9478  001238  96A1               	bcf	4001,3,c	;volatile
  9479  00123A  0012               	return		;funcret
  9480  00123C                     __end_of_i2c1_driver_clearBusCollision:
  9481                           	opt stack 0
  9482                           tosu	equ	0xFFF
  9483                           tosh	equ	0xFFE
  9484                           tosl	equ	0xFFD
  9485                           pclatu	equ	0xFFB
  9486                           pclath	equ	0xFFA
  9487                           tblptru	equ	0xFF8
  9488                           tblptrh	equ	0xFF7
  9489                           tblptrl	equ	0xFF6
  9490                           tablat	equ	0xFF5
  9491                           prodh	equ	0xFF4
  9492                           prodl	equ	0xFF3
  9493                           intcon	equ	0xFF2
  9494                           intcon2	equ	0xFF1
  9495                           postinc0	equ	0xFEE
  9496                           plusw0	equ	0xFEB
  9497                           fsr0h	equ	0xFEA
  9498                           fsr0l	equ	0xFE9
  9499                           wreg	equ	0xFE8
  9500                           postdec1	equ	0xFE5
  9501                           plusw1	equ	0xFE3
  9502                           fsr1h	equ	0xFE2
  9503                           fsr1l	equ	0xFE1
  9504                           indf2	equ	0xFDF
  9505                           postinc2	equ	0xFDE
  9506                           plusw2	equ	0xFDB
  9507                           fsr2h	equ	0xFDA
  9508                           fsr2l	equ	0xFD9
  9509                           status	equ	0xFD8
  9510                           
  9511 ;; *************** function _EUSART1_Transmit_ISR *****************
  9512 ;; Defined at:
  9513 ;;		line 183 in file "mcc_generated_files/eusart1.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;		None
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;		None
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  1    wreg      void 
  9520 ;; Registers used:
  9521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9527 ;;      Params:         0       0       0       0       0       0       0
  9528 ;;      Locals:         0       0       0       0       0       0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0
  9530 ;;      Totals:         0       0       0       0       0       0       0
  9531 ;;Total ram usage:        0 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;;		_EUSART1_Initialize
  9537 ;;		_INTERRUPT_InterruptManager
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           	psect	text97
  9542  000E32                     __ptext97:
  9543                           	opt stack 0
  9544  000E32                     _EUSART1_Transmit_ISR:
  9545                           	opt stack 20
  9546                           
  9547                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  9548                           
  9549                           ;incstack = 0
  9550  000E32  0E08               	movlw	8
  9551  000E34  604A               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  9552  000E36  D012               	goto	i2l321
  9553                           
  9554                           ;eusart1.c: 188: {
  9555                           ;eusart1.c: 189: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  9556  000E38  501B               	movf	_eusart1TxTail,w,c	;volatile
  9557  000E3A  0D01               	mullw	1
  9558  000E3C  0E09               	movlw	low _eusart1TxBuffer
  9559  000E3E  24F3               	addwf	prodl,w,c
  9560  000E40  6ED9               	movwf	fsr2l,c
  9561  000E42  0E00               	movlw	high _eusart1TxBuffer
  9562  000E44  20F4               	addwfc	prodh,w,c
  9563  000E46  6EDA               	movwf	fsr2h,c
  9564  000E48  50DF               	movf	indf2,w,c
  9565  000E4A  6EAD               	movwf	4013,c	;volatile
  9566  000E4C  2A1B               	incf	_eusart1TxTail,f,c	;volatile
  9567                           
  9568                           ;eusart1.c: 190: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  9569  000E4E  0E07               	movlw	7
  9570  000E50  641B               	cpfsgt	_eusart1TxTail,c	;volatile
  9571  000E52  D002               	goto	i2l322
  9572                           
  9573                           ;eusart1.c: 191: {
  9574                           ;eusart1.c: 192: eusart1TxTail = 0;
  9575  000E54  0E00               	movlw	0
  9576  000E56  6E1B               	movwf	_eusart1TxTail,c	;volatile
  9577  000E58                     i2l322:
  9578                           
  9579                           ;eusart1.c: 193: }
  9580                           ;eusart1.c: 194: eusart1TxBufferRemaining++;
  9581  000E58  2A4A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9582                           
  9583                           ;eusart1.c: 195: }
  9584  000E5A  0012               	return	
  9585  000E5C                     i2l321:
  9586                           
  9587                           ;eusart1.c: 196: else
  9588                           ;eusart1.c: 197: {
  9589                           ;eusart1.c: 198: PIE1bits.TX1IE = 0;
  9590  000E5C  989D               	bcf	3997,4,c	;volatile
  9591  000E5E  0012               	return	
  9592  000E60                     __end_of_EUSART1_Transmit_ISR:
  9593                           	opt stack 0
  9594                           tosu	equ	0xFFF
  9595                           tosh	equ	0xFFE
  9596                           tosl	equ	0xFFD
  9597                           pclatu	equ	0xFFB
  9598                           pclath	equ	0xFFA
  9599                           tblptru	equ	0xFF8
  9600                           tblptrh	equ	0xFF7
  9601                           tblptrl	equ	0xFF6
  9602                           tablat	equ	0xFF5
  9603                           prodh	equ	0xFF4
  9604                           prodl	equ	0xFF3
  9605                           intcon	equ	0xFF2
  9606                           intcon2	equ	0xFF1
  9607                           postinc0	equ	0xFEE
  9608                           plusw0	equ	0xFEB
  9609                           fsr0h	equ	0xFEA
  9610                           fsr0l	equ	0xFE9
  9611                           wreg	equ	0xFE8
  9612                           postdec1	equ	0xFE5
  9613                           plusw1	equ	0xFE3
  9614                           fsr1h	equ	0xFE2
  9615                           fsr1l	equ	0xFE1
  9616                           indf2	equ	0xFDF
  9617                           postinc2	equ	0xFDE
  9618                           plusw2	equ	0xFDB
  9619                           fsr2h	equ	0xFDA
  9620                           fsr2l	equ	0xFD9
  9621                           status	equ	0xFD8
  9622                           
  9623 ;; *************** function _EUSART1_Receive_ISR *****************
  9624 ;; Defined at:
  9625 ;;		line 202 in file "mcc_generated_files/eusart1.c"
  9626 ;; Parameters:    Size  Location     Type
  9627 ;;		None
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;		None
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  1    wreg      void 
  9632 ;; Registers used:
  9633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9639 ;;      Params:         0       0       0       0       0       0       0
  9640 ;;      Locals:         0       0       0       0       0       0       0
  9641 ;;      Temps:          0       0       0       0       0       0       0
  9642 ;;      Totals:         0       0       0       0       0       0       0
  9643 ;;Total ram usage:        0 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; This function calls:
  9646 ;;		Nothing
  9647 ;; This function is called by:
  9648 ;;		_EUSART1_Initialize
  9649 ;;		_INTERRUPT_InterruptManager
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           	psect	text98
  9654  000E60                     __ptext98:
  9655                           	opt stack 0
  9656  000E60                     _EUSART1_Receive_ISR:
  9657                           	opt stack 20
  9658                           
  9659                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
  9660                           
  9661                           ;incstack = 0
  9662  000E60  A2AB               	btfss	4011,1,c	;volatile
  9663  000E62  D002               	goto	i2l327
  9664                           
  9665                           ;eusart1.c: 206: {
  9666                           ;eusart1.c: 209: RCSTA1bits.CREN = 0;
  9667  000E64  98AB               	bcf	4011,4,c	;volatile
  9668                           
  9669                           ;eusart1.c: 210: RCSTA1bits.CREN = 1;
  9670  000E66  88AB               	bsf	4011,4,c	;volatile
  9671  000E68                     i2l327:
  9672                           
  9673                           ;eusart1.c: 211: }
  9674                           ;eusart1.c: 214: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  9675  000E68  501A               	movf	_eusart1RxHead,w,c	;volatile
  9676  000E6A  0D01               	mullw	1
  9677  000E6C  0E01               	movlw	low _eusart1RxBuffer
  9678  000E6E  24F3               	addwf	prodl,w,c
  9679  000E70  6ED9               	movwf	fsr2l,c
  9680  000E72  0E00               	movlw	high _eusart1RxBuffer
  9681  000E74  20F4               	addwfc	prodh,w,c
  9682  000E76  6EDA               	movwf	fsr2h,c
  9683  000E78  CFAE FFDF          	movff	4014,indf2	;volatile
  9684  000E7C  2A1A               	incf	_eusart1RxHead,f,c	;volatile
  9685                           
  9686                           ;eusart1.c: 215: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  9687  000E7E  0E07               	movlw	7
  9688  000E80  641A               	cpfsgt	_eusart1RxHead,c	;volatile
  9689  000E82  D002               	goto	i2l328
  9690                           
  9691                           ;eusart1.c: 216: {
  9692                           ;eusart1.c: 217: eusart1RxHead = 0;
  9693  000E84  0E00               	movlw	0
  9694  000E86  6E1A               	movwf	_eusart1RxHead,c	;volatile
  9695  000E88                     i2l328:
  9696                           
  9697                           ;eusart1.c: 218: }
  9698                           ;eusart1.c: 219: eusart1RxCount++;
  9699  000E88  2A18               	incf	_eusart1RxCount,f,c	;volatile
  9700  000E8A  0012               	return		;funcret
  9701  000E8C                     __end_of_EUSART1_Receive_ISR:
  9702                           	opt stack 0
  9703                           tosu	equ	0xFFF
  9704                           tosh	equ	0xFFE
  9705                           tosl	equ	0xFFD
  9706                           pclatu	equ	0xFFB
  9707                           pclath	equ	0xFFA
  9708                           tblptru	equ	0xFF8
  9709                           tblptrh	equ	0xFF7
  9710                           tblptrl	equ	0xFF6
  9711                           tablat	equ	0xFF5
  9712                           prodh	equ	0xFF4
  9713                           prodl	equ	0xFF3
  9714                           intcon	equ	0xFF2
  9715                           intcon2	equ	0xFF1
  9716                           postinc0	equ	0xFEE
  9717                           plusw0	equ	0xFEB
  9718                           fsr0h	equ	0xFEA
  9719                           fsr0l	equ	0xFE9
  9720                           wreg	equ	0xFE8
  9721                           postdec1	equ	0xFE5
  9722                           plusw1	equ	0xFE3
  9723                           fsr1h	equ	0xFE2
  9724                           fsr1l	equ	0xFE1
  9725                           indf2	equ	0xFDF
  9726                           postinc2	equ	0xFDE
  9727                           plusw2	equ	0xFDB
  9728                           fsr2h	equ	0xFDA
  9729                           fsr2l	equ	0xFD9
  9730                           status	equ	0xFD8
  9731                           tosu	equ	0xFFF
  9732                           tosh	equ	0xFFE
  9733                           tosl	equ	0xFFD
  9734                           pclatu	equ	0xFFB
  9735                           pclath	equ	0xFFA
  9736                           tblptru	equ	0xFF8
  9737                           tblptrh	equ	0xFF7
  9738                           tblptrl	equ	0xFF6
  9739                           tablat	equ	0xFF5
  9740                           prodh	equ	0xFF4
  9741                           prodl	equ	0xFF3
  9742                           intcon	equ	0xFF2
  9743                           intcon2	equ	0xFF1
  9744                           postinc0	equ	0xFEE
  9745                           plusw0	equ	0xFEB
  9746                           fsr0h	equ	0xFEA
  9747                           fsr0l	equ	0xFE9
  9748                           wreg	equ	0xFE8
  9749                           postdec1	equ	0xFE5
  9750                           plusw1	equ	0xFE3
  9751                           fsr1h	equ	0xFE2
  9752                           fsr1l	equ	0xFE1
  9753                           indf2	equ	0xFDF
  9754                           postinc2	equ	0xFDE
  9755                           plusw2	equ	0xFDB
  9756                           fsr2h	equ	0xFDA
  9757                           fsr2l	equ	0xFD9
  9758                           status	equ	0xFD8
  9759                           
  9760                           	psect	text99
  9761  000000                     __ptext99:
  9762                           	opt stack 0
  9763                           tosu	equ	0xFFF
  9764                           tosh	equ	0xFFE
  9765                           tosl	equ	0xFFD
  9766                           pclatu	equ	0xFFB
  9767                           pclath	equ	0xFFA
  9768                           tblptru	equ	0xFF8
  9769                           tblptrh	equ	0xFF7
  9770                           tblptrl	equ	0xFF6
  9771                           tablat	equ	0xFF5
  9772                           prodh	equ	0xFF4
  9773                           prodl	equ	0xFF3
  9774                           intcon	equ	0xFF2
  9775                           intcon2	equ	0xFF1
  9776                           postinc0	equ	0xFEE
  9777                           plusw0	equ	0xFEB
  9778                           fsr0h	equ	0xFEA
  9779                           fsr0l	equ	0xFE9
  9780                           wreg	equ	0xFE8
  9781                           postdec1	equ	0xFE5
  9782                           plusw1	equ	0xFE3
  9783                           fsr1h	equ	0xFE2
  9784                           fsr1l	equ	0xFE1
  9785                           indf2	equ	0xFDF
  9786                           postinc2	equ	0xFDE
  9787                           plusw2	equ	0xFDB
  9788                           fsr2h	equ	0xFDA
  9789                           fsr2l	equ	0xFD9
  9790                           status	equ	0xFD8
  9791                           
  9792                           	psect	rparam
  9793  0000                     tosu	equ	0xFFF
  9794                           tosh	equ	0xFFE
  9795                           tosl	equ	0xFFD
  9796                           pclatu	equ	0xFFB
  9797                           pclath	equ	0xFFA
  9798                           tblptru	equ	0xFF8
  9799                           tblptrh	equ	0xFF7
  9800                           tblptrl	equ	0xFF6
  9801                           tablat	equ	0xFF5
  9802                           prodh	equ	0xFF4
  9803                           prodl	equ	0xFF3
  9804                           intcon	equ	0xFF2
  9805                           intcon2	equ	0xFF1
  9806                           postinc0	equ	0xFEE
  9807                           plusw0	equ	0xFEB
  9808                           fsr0h	equ	0xFEA
  9809                           fsr0l	equ	0xFE9
  9810                           wreg	equ	0xFE8
  9811                           postdec1	equ	0xFE5
  9812                           plusw1	equ	0xFE3
  9813                           fsr1h	equ	0xFE2
  9814                           fsr1l	equ	0xFE1
  9815                           indf2	equ	0xFDF
  9816                           postinc2	equ	0xFDE
  9817                           plusw2	equ	0xFDB
  9818                           fsr2h	equ	0xFDA
  9819                           fsr2l	equ	0xFD9
  9820                           status	equ	0xFD8
  9821                           
  9822                           	psect	temp
  9823  00004B                     btemp:
  9824                           	opt stack 0
  9825  00004B                     	ds	1
  9826  0000                     int$flags	set	btemp
  9827  0000                     wtemp6	set	btemp+1
  9828                           tosu	equ	0xFFF
  9829                           tosh	equ	0xFFE
  9830                           tosl	equ	0xFFD
  9831                           pclatu	equ	0xFFB
  9832                           pclath	equ	0xFFA
  9833                           tblptru	equ	0xFF8
  9834                           tblptrh	equ	0xFF7
  9835                           tblptrl	equ	0xFF6
  9836                           tablat	equ	0xFF5
  9837                           prodh	equ	0xFF4
  9838                           prodl	equ	0xFF3
  9839                           intcon	equ	0xFF2
  9840                           intcon2	equ	0xFF1
  9841                           postinc0	equ	0xFEE
  9842                           plusw0	equ	0xFEB
  9843                           fsr0h	equ	0xFEA
  9844                           fsr0l	equ	0xFE9
  9845                           wreg	equ	0xFE8
  9846                           postdec1	equ	0xFE5
  9847                           plusw1	equ	0xFE3
  9848                           fsr1h	equ	0xFE2
  9849                           fsr1l	equ	0xFE1
  9850                           indf2	equ	0xFDF
  9851                           postinc2	equ	0xFDE
  9852                           plusw2	equ	0xFDB
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        86
    BSS         74
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      74
    BANK0           160     60     133
    BANK1           256      0      50
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_ISR$2283	PTR const FTN()enum E7019 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$11$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    i2c1_driver_setI2cISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART1_SetRxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_SetTxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E7019[18] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    S53$callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S53$data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_read_xyzvalues
    _read_xyzvalues->_i2c_masterAccelRead
    _printf->_putch
    _putch->_EUSART1_Write
    _printString->_EUSART1_Write
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ACCELEROMETER_Initialize->_read_register
    _ACCELEROMETER_Initialize->_write_register
    _i2c_masterWrite->_i2c_masterOperation
    _read_register->_i2c_masterAccelRead
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterAccelRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_REGISTER->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_INITIAL_READ->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX

Critical Paths under _main in BANK0

    _main->_printString

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    9023
                                             52 BANK0      8     8      0
           _ACCELEROMETER_Initialize
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _printString
                             _printf
                     _read_xyzvalues
 ---------------------------------------------------------------------------------
 (1) _read_xyzvalues                                      12     6      6    2685
                                             26 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     251
                                             22 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (1) _printString                                         54    54      0     198
                                             21 COMRAM     2     2      0
                                              0 BANK0     52    52      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ACCELEROMETER_Initialize                             2     2      0    5384
                                             27 COMRAM     2     2      0
                      _read_register
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _write_register                                       2     1      1    3007
                                             25 COMRAM     2     1      1
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0    1390
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (2) _read_register                                        1     1      0    2377
                                             26 COMRAM     1     1      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4     602
                                             20 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     286
                                             22 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterAccelRead                                  1     1      0    1421
                                             25 COMRAM     1     1      0
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0    1390
                                             23 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0    1322
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0    1232
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
           _do_I2C_SEND_INITIAL_READ *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _do_I2C_TX_REGISTER *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_REGISTER                                   0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0     328
                                             21 COMRAM     2     2      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_INITIAL_READ                             0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0     260
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2     260
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            1     1      0      37
                                             20 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     563
                                              2 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (11) i2_i2c_ISR                                           0     0      0     563
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
         i2_do_I2C_SEND_INITIAL_READ *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_do_I2C_TX_REGISTER *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (12) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_REGISTER                                0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_EMPTY                                   0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                     i2_mssp1_setIRQ
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX                                         2     2      0     163
                                              0 COMRAM     2     2      0
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_INITIAL_READ                          0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RX                                         0     0      0     104
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_returnStop                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_returnReset                                       2     0      2     104
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (12) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACCELEROMETER_Initialize
     _read_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterAccelRead
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
     _write_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printString
     _EUSART1_Write
   _printf
     _putch
       _EUSART1_Write
   _read_xyzvalues
     _i2c_close
       _mssp1_clearIRQ
       _mssp1_disableIRQ
     _i2c_masterAccelRead
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _returnReset *
               _returnStop *
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               _do_I2C_DO_NACK_RESTART
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData
               _i2c1_driver_sendACK
               _returnReset *
               _returnStop *
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_INITIAL_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               _do_I2C_SEND_RESTART_READ
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _i2c1_driver_TXData
               _i2c1_driver_isNACK
               _returnReset *
               _returnStop *
             _do_I2C_TX_EMPTY *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _mssp1_setIRQ
               _returnReset *
               _returnStop *
             _do_I2C_TX_REGISTER *
               _i2c1_driver_TXData
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       i2_do_I2C_DO_NACK_RESTART
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData
       i2_i2c1_driver_sendACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_INITIAL_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       i2_do_I2C_SEND_RESTART_READ
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData
       i2_i2c1_driver_isNACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_EMPTY *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_mssp1_setIRQ
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_REGISTER *
       i2_i2c1_driver_TXData
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      32       6       19.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3C      85       4       83.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      4A       1       78.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     101       9        0.0%
DATA                 0      0     101      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 26 14:27:15 2018

                ??i2_i2c1_driver_startRX 0026             _do_I2C_TX_REGISTER$intlevel0 0FF6  
                           returnReset@p 003A                 _eusart1TxBufferRemaining 004A  
          _do_I2C_SEND_RESTART$intlevel0 10F6                                       l83 0F1E  
                                     l95 0CB0                                       l96 0CA2  
                                     l97 0CC4                                       l98 0CA6  
                                     l99 0CAA                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 10F0                     __size_of_do_I2C_RCEN 0012  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                            __CFG_LVP$ON 000000                                      l100 0CD2  
                                    l201 0B02                                      l113 0F4E  
                                    l202 0B0A                                      l114 0F3E  
                                    l310 0D9C                                      l311 0D9A  
                                    l161 0C10                                      l209 0BC4  
                                    l162 0C04                                      l170 06C2  
                                    l171 06B0                                      l180 072A  
                                    l165 0C0A                                      l173 06B6  
                                    l309 0D78                                      l174 06BC  
                                    l191 0892                                      l169 06FC  
                                    l185 0888                                      l188 0898  
                                    l189 088C                                      l197 0B10  
                                    l613 08E2                                      l198 0AFC  
                                    l606 0ABC                                      l608 0AEE  
                                    l636 09E0                                      l666 0E9C  
                                    l667 0E96                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000          __end_ofi2_i2c1_driver_getRXData 1224  
           __size_of_i2c_masterOperation 0048                     _returnStop$intlevel0 1182  
                  __size_of_do_I2C_RESET 0016                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                             _TXSTA1bits 000FAC          i2c1_driver_setBusCollisionISR@f 003A  
                            i2_do_I2C_RX 094A                              i2_do_I2C_TX 07C8  
                                   l3521 0D68                                     l3707 0AAC  
                         i2_mssp1_setIRQ 121C                   __size_ofi2_do_I2C_IDLE 000C  
                                   STR_1 0601                                     u1230 101A  
                 __size_ofi2_do_I2C_RCEN 000C                                     u1218 08A8  
                                   u1219 08BC                                     u1228 0B20  
                                   u1229 0B34                                     u1501 07BE  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u1168 0C20  
                                   u1280 1056                                     u1169 0C34  
                                   u1188 06D2                                     u1189 06E6  
                                   u1461 0A9A                                     u1278 0BDA  
                                   u1279 0BEE                                     u1288 1058  
                                   u1707 0900                                     u1717 0AD8  
                                   u1727 09D2                                     u1737 1020  
                                   u1691 08EC                     ?_do_I2C_SEND_RESTART 0026  
                                   _WPUB 000F61                            _EUSART1_Write 0D66  
      __size_of_do_I2C_SEND_RESTART_READ 000E                     __end_ofi2_returnStop 1230  
              ?_do_I2C_SEND_RESTART_READ 0026                                     _main 08D2  
              __size_of_do_I2C_SEND_STOP 000E                   __size_of_do_I2C_DO_ACK 000E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 004B  
                          __CFG_BORV$190 000000                             printString@i 0092  
                  ?_do_I2C_SEND_ADR_READ 0026                                     prodh 000FF4  
                                   prodl 000FF3          ??_i2c1_driver_clearBusCollision 0026  
                                   start 0102                            __CFG_IESO$OFF 000000  
                          _i2c_setBuffer 0F22                          __end_of_i2c_ISR 0BF4  
                           ___param_bank 000000                 ??_do_I2C_DO_NACK_RESTART 003A  
              __size_of_mssp1_disableIRQ 0004                             _do_I2C_RESET 0FAE  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 10AA  
               __end_of_i2c1_driver_open 0F6C                                    ?_main 0026  
               __end_of_i2c1_driver_stop 1208               __end_of_i2c1_driver_TXData 1196  
                         __CFG_DEBUG$OFF 000000                                    i2l201 0B5A  
                                  i2l202 0B62                  __size_ofi2_do_I2C_RESET 0010  
                                  i2l321 0E5C                                    i2l161 0D34  
                                  i2l209 0CEE                                    i2l322 0E58  
                                  i2l162 0D28                                    i2l170 07E4  
                                  i2l171 07D2                                    i2l180 084C  
                                  i2l165 0D2E                                    i2l173 07D8  
                                  i2l174 07DE                                    i2l327 0E68  
                                  i2l191 097E                                    i2l328 0E88  
                                  i2l169 081E                                    i2l185 0974  
                                  i2l188 0984                                    i2l189 0978  
                                  i2l197 0B68                                    i2l198 0B54  
                                  i2l571 0098                                    i2l567 006C  
                                  i2l569 0082                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 0E32                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                            i2c_open@ret 003C                            __CFG_WRTB$OFF 000000  
                  __end_ofi2_returnReset 122C                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                   __end_ofi2_mssp1_setIRQ 1220  
                         __CFG_EBTRB$OFF 000000               __end_of_i2c1_driver_isNACK 0FDA  
                      write_register@reg 0040                       __size_ofi2_i2c_ISR 0048  
             ?_do_I2C_SEND_RESTART_WRITE 0026                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 1140                    ??_do_I2C_SEND_RESTART 003A  
                          i2returnStop@p 0026   __end_of_i2c1_driver_setBusCollisionISR 1172  
__size_of_i2c1_driver_setBusCollisionISR 000A           _i2c1_driver_setBusCollisionISR 1168  
                         ?_EUSART1_Write 0026                                    pclath 000FFA  
                                  tablat 000FF5                  __size_of_mssp1_clearIRQ 0004  
                                  plusw0 000FEB                                    plusw1 000FE3  
                                  plusw2 000FDB                   ?_do_I2C_SEND_ADR_WRITE 0026  
                                  status 000FD8                                    wtemp6 004C  
                         __CFG_HFOFST$ON 000000          __size_ofi2_i2c1_driver_sendNACK 0006  
                         ?_i2c_setBuffer 003A                           __CFG_PBADEN$ON 000000  
        __size_ofi2_i2c1_driver_resetBus 0002                            _fsmStateTable 00C1  
                        __initialization 0A2A                               _i2c_poller 0F3C  
                             _i2c_status 009C               __end_of_EUSART1_Initialize 0C8E  
                           __end_of_main 094A                            i2_do_I2C_IDLE 1134  
                          i2_do_I2C_RCEN 1128                         __end_of_i2c_open 06A0  
            ?_INTERRUPT_InterruptManager 0026                         i2_mssp1_clearIRQ 1218  
       __end_ofi2_do_I2C_DO_ADDRESS_NACK 0D66                            _do_I2C_DO_ACK 10D4  
                                 ??_main 0094                            _do_I2C_TX$315 003B  
          __size_of_i2c1_driver_sendNACK 0006                            __activetblptr 000002  
                           i2c_close@ret 003A                      _i2c_masterAccelRead 10AA  
                  ?_EUSART1_Transmit_ISR 0026            __size_of_i2c1_driver_resetBus 0002  
                ?_do_I2C_DO_ADDRESS_NACK 0026                          ?i2_mssp1_setIRQ 0026  
     __end_ofi2_do_I2C_SEND_RESTART_READ 11CE               i2_do_I2C_SEND_RESTART_READ 11C6  
                       ??_read_xyzvalues 0046                                   _ANSELA 000F38  
                                 ?_putch 0026                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                 __size_ofi2_do_I2C_DO_ACK 0008  
                       ??_write_register 0040                           __CFG_WDTEN$OFF 000000  
                                 _RCREG1 000FAE                                   _RCSTA1 000FAB  
                     __size_of_i2c_close 001E                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                  i2_do_I2C_SEND_ADR_WRITE 105C  
                 ??_do_I2C_SEND_ADR_READ 003A            __size_ofi2_do_I2C_TX_REGISTER 000E  
                              ??_i2c_ISR 003D                                   _TXREG1 000FAD  
                                 _TXSTA1 000FAC                     ?_i2c_masterAccelRead 0026  
           i2c_masterOperation@operation 003D                  ??i2_do_I2C_SEND_RESTART 0026  
            ?i2_do_I2C_SEND_INITIAL_READ 0026                 _do_I2C_SEND_INITIAL_READ 0F82  
                         __CFG_XINST$OFF 000000         __size_ofi2_i2c1_driver_getRXData 0004  
                  _i2c1_driver_getRXData 11FC                       i2_i2c1_driver_stop 1230  
                    _do_I2C_RX$intlevel0 085E        __size_of_ACCELEROMETER_Initialize 006C  
            __end_of_do_I2C_DO_NACK_STOP 10D4                ?_ACCELEROMETER_Initialize 0026  
                         ?i2_do_I2C_IDLE 0026                          _i2c_masterWrite 1186  
                         ?i2_do_I2C_RCEN 0026    __end_of_i2c1_driver_clearBusCollision 123C  
 __size_of_i2c1_driver_clearBusCollision 0004            _i2c1_driver_clearBusCollision 1238  
                         __CFG_STVREN$ON 000000                        __end_ofi2_i2c_ISR 0D1E  
        __size_of_do_I2C_DO_NACK_RESTART 000E                       write_register@data 003F  
                         i2returnReset@p 0026                                   clear_0 0A70  
                                 clear_1 0A7C                           ?_do_I2C_DO_ACK 0026  
                                 _printf 0E8C                      ?i2_i2c1_driver_stop 0026  
                 i2_i2c1_driver_sendNACK 11E2                   i2c1_driver_setI2cISR@f 003A  
            __end_of_i2c1_driver_sendACK 11E2           __end_of_do_I2C_DO_ADDRESS_NACK 0C42  
                 i2_i2c1_driver_resetBus 123E                             __mediumconst 0000  
   __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008              __end_of_i2c1_driver_restart 120C  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_returnReset 003A  
          _do_I2C_DO_NACK_STOP$intlevel0 10CC                    _i2c1_driver_setI2cISR 115E  
            __end_of_i2c1_driver_startRX 1204                          ??_EUSART1_Write 003A  
                  __size_ofi2_returnStop 0004                          _eusart1RxBuffer 0001  
   EUSART1_SetTxInterruptHandler@handler 003A           __size_ofi2_do_I2C_DO_NACK_STOP 0008  
          __size_of_INTERRUPT_Initialize 0004            __end_ofi2_do_I2C_DO_NACK_STOP 11A6  
                           ?_printString 0026                          _eusart1TxBuffer 0009  
                      _SYSTEM_Initialize 1004                               __accesstop 0060  
                   ??i2_i2c1_driver_stop 0026                  __end_of__initialization 0A82  
                        ??_i2c_setBuffer 003E           _do_I2C_SEND_ADR_READ$intlevel0 0F9E  
                       _do_I2C_SEND_STOP 10E2                       __size_of_do_I2C_RX 007A  
                     _do_I2C_TX_REGISTER 0FF0                       __size_of_do_I2C_TX 0096  
                 __size_of_read_register 002E                       ?_SYSTEM_Initialize 0026  
                  ??_i2c_masterAccelRead 003F                            ___rparam_used 000001  
             __end_of_mssp1_IRQisEnabled 105C                      _i2c_masterOperation 0C8E  
               __size_of_do_I2C_TX_EMPTY 005E           __size_ofi2_i2c1_driver_sendACK 0006  
             __end_of_mssp1_waitForEvent 1028            __end_ofi2_i2c1_driver_sendACK 11EE  
                            ?_i2c_poller 0026                           __pcstackCOMRAM 0026  
                    ?_do_I2C_TX_REGISTER 0026                      _do_I2C_TX$intlevel0 06A6  
                           __pidataBANK0 0EE0                             __pidataBANK1 0DA0  
                    ??_SYSTEM_Initialize 003C           __size_ofi2_i2c1_driver_restart 0004  
          __end_ofi2_i2c1_driver_restart 1238                         _mssp1_disableIRQ 1210  
         __size_ofi2_i2c1_driver_startRX 0004            __end_ofi2_i2c1_driver_startRX 1228  
                          __end_of_putch 114A                        __end_of_i2c_close 0F22  
                           i2_returnStop 122C                           i2_do_I2C_RESET 108C  
                 ??_EUSART1_Transmit_ISR 0026                     ?_i2c_masterOperation 0026  
               i2_do_I2C_DO_ADDRESS_NACK 0D1E              __end_of_EUSART1_Receive_ISR 0E8C  
                   ??_do_I2C_TX_REGISTER 003B                             ?i2_do_I2C_RX 0026  
                           ?i2_do_I2C_TX 0026        __size_ofi2_do_I2C_DO_NACK_RESTART 0008  
              ?i2_do_I2C_DO_NACK_RESTART 0026                   _do_I2C_DO_NACK_RESTART 10B8  
              __end_of_SYSTEM_Initialize 1016                ??i2_do_I2C_SEND_ADR_WRITE 0026  
                                ??_putch 003B                            _eusart1RxHead 001A  
             __end_ofi2_do_I2C_SEND_STOP 11B6                            _eusart1TxHead 001C  
                          _eusart1RxTail 0019                           _mssp1_clearIRQ 1214  
                             __pbssBANK0 009C                            _eusart1TxTail 001B  
      _EUSART1_TxDefaultInterruptHandler 0048          ??_EUSART1_SetRxInterruptHandler 003C  
          __size_ofi2_i2c1_driver_TXData 0008                          __CFG_PLLCFG$OFF 000000  
                              ?_i2c_open 0026                               __pnvCOMRAM 0046  
                __end_of_i2c_masterWrite 118E                   ?_i2c1_driver_getRXData 0026  
                      ??i2_do_I2C_DO_ACK 0026            __size_ofi2_i2c1_driver_isNACK 0016  
                  _do_I2C_IDLE$intlevel0 1040                        i2_do_I2C_TX_EMPTY 0B4E  
                        ??i2_do_I2C_IDLE 0026             __size_of_i2c_busCollisionISR 0006  
                        ??i2_do_I2C_RCEN 0026                       __CFG_CCP2MX$PORTC1 000000  
                          ??_do_I2C_IDLE 003A                            ??_do_I2C_RCEN 003A  
                     ?i2_do_I2C_TX_EMPTY 0026                       __CFG_CCP3MX$PORTB5 000000  
                        ??_do_I2C_DO_ACK 003A                   __end_ofi2_do_I2C_RESET 109C  
                    i2c_setBuffer@buffer 003A                                  ?_printf 003C  
                          _read_register 0E04           ?_i2c1_driver_clearBusCollision 0026  
                    ??i2_do_I2C_TX_EMPTY 0026                    ??_i2c_masterOperation 003D  
                      ?_i2c1_driver_open 0026                        __end_of_do_I2C_RX 08D2  
                      __end_of_do_I2C_TX 0736                 ??i2_do_I2C_SEND_ADR_READ 0026  
                      ?_i2c1_driver_stop 0026                   ?_i2c1_driver_setI2cISR 003A  
                     ??_i2c1_driver_open 003A                       ??_i2c1_driver_stop 003A  
                                _OSCCON2 000FD2                            ?_mssp1_setIRQ 0026  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                                _SSP1ADD 000FC8                                  _SSP1BUF 000FC9  
                 __end_of_mssp1_clearIRQ 1218                                  _SSP1MSK 000FCA  
    __size_ofi2_do_I2C_SEND_INITIAL_READ 0010                      __size_of_i2c_poller 001A  
                ??_do_I2C_SEND_ADR_WRITE 003B      _do_I2C_SEND_RESTART_WRITE$intlevel0 1104  
            ??_do_I2C_SEND_RESTART_WRITE 003A                       _i2c1_driver_TXData 118E  
                             ??_i2c_open 003C                 __end_ofi2_mssp1_clearIRQ 121C  
                     _i2c1_driver_i2cISR 0011                                  _i2c_ISR 0BA6  
              __end_ofi2_do_I2C_TX_EMPTY 0BA6                  i2_i2c1_driver_getRXData 1220  
                        __CFG_PWRTEN$OFF 000000                                  __Hparam 0000  
                  _returnReset$intlevel0 1178                    _do_I2C_RCEN$intlevel0 102E  
                     _i2c1_driver_isNACK 0FC4                      ?_i2c1_driver_TXData 0026  
                                __Lparam 0000         _do_I2C_DO_ADDRESS_NACK$intlevel0 0BFA  
                           __psmallconst 0600                        ??_do_I2C_TX_EMPTY 003A  
                    ?_i2c1_driver_isNACK 0026                          ?i2_do_I2C_RESET 0026  
                                __pcinit 0A2A                                  __ramtop 0600  
                         ?_read_register 0026                                  __ptext0 08D2  
                                __ptext1 0736                                  __ptext2 0E8C  
                                __ptext3 1140                                  __ptext4 0A90  
                                __ptext5 0D66                                  __ptext6 1004  
                                __ptext7 0EB6                                  __ptext8 109C  
                                __ptext9 11F4                      __end_of_do_I2C_IDLE 104C  
                        __size_of_printf 002A                      __end_of_do_I2C_RCEN 103A  
                       ??i2_mssp1_setIRQ 0026                    _OSCILLATOR_Initialize 109C  
            __end_of_do_I2C_SEND_RESTART 10FE                           ??_mssp1_setIRQ 003A  
                   ??_i2c1_driver_TXData 003A                       _EUSART1_Initialize 0C42  
               ??_PIN_MANAGER_Initialize 003A                   i2c_masterOperation@ret 003E  
                        ?_mssp1_clearIRQ 0026               _do_I2C_SEND_STOP$intlevel0 10E8  
            ?i2_do_I2C_SEND_RESTART_READ 0026                 _do_I2C_SEND_RESTART_READ 110C  
             __size_of_SYSTEM_Initialize 0012                     __size_of_returnReset 000A  
                   end_of_initialization 0A82               ??_do_I2C_SEND_INITIAL_READ 003B  
       __end_of_ACCELEROMETER_Initialize 0A2A                     ??_i2c1_driver_isNACK 003A  
                    ?_EUSART1_Initialize 0026             __end_of_i2c1_driver_sendNACK 11DC  
                          __Lmediumconst 0000                     __size_of_printString 0060  
                       ?_i2c_masterWrite 0026             __end_of_i2c1_driver_resetBus 123E  
  __end_of_EUSART1_SetRxInterruptHandler 115E   __size_of_EUSART1_SetRxInterruptHandler 000A  
          _EUSART1_SetRxInterruptHandler 1154           __size_ofi2_do_I2C_SEND_RESTART 0008  
                                printf@c 0040                                  printf@f 003C  
          __end_ofi2_do_I2C_SEND_RESTART 11BE                                  postdec1 000FE5  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __size_ofi2_returnReset 0004             ?i2_do_I2C_SEND_RESTART_WRITE 0026  
              _do_I2C_SEND_RESTART_WRITE 10FE                  ?i2_i2c1_driver_sendNACK 0026  
                   ??_EUSART1_Initialize 003C             __end_ofi2_do_I2C_TX_REGISTER 1128  
                ?i2_i2c1_driver_resetBus 0026                               _returnStop 117C  
               __end_of_do_I2C_SEND_STOP 10F0                                i2_i2c_ISR 0CD6  
        __size_ofi2_do_I2C_SEND_ADR_READ 0010                 read_xyzvalues@readbuffer 001D  
                            returnStop@p 003A                      EUSART1_Write@txData 003A  
               __end_of_mssp1_disableIRQ 1214                     __size_ofi2_do_I2C_RX 0074  
                   __size_ofi2_do_I2C_TX 0090                ??i2_i2c1_driver_getRXData 0026  
             __size_ofi2_do_I2C_TX_EMPTY 0058            __size_of_do_I2C_SEND_ADR_READ 0016  
                           ??_i2c_poller 003D           __end_ofi2_i2c1_driver_sendNACK 11E8  
                            _do_I2C_IDLE 103A                              _do_I2C_RCEN 1028  
           __end_of_INTERRUPT_Initialize 11F8                          ??_read_register 0040  
         __end_ofi2_i2c1_driver_resetBus 1240                      read_register@status 0016  
             ??i2_do_I2C_DO_ADDRESS_NACK 0026         __end_ofi2_do_I2C_DO_NACK_RESTART 119E  
          ??i2_do_I2C_SEND_RESTART_WRITE 0026                       _mssp1_IRQisEnabled 104C  
                 ?_OSCILLATOR_Initialize 0026                               ?i2_i2c_ISR 0026  
           __size_of_do_I2C_DO_NACK_STOP 000E                 read_xyzvalues@sensorData 0060  
                         __end_of_printf 0EB6                       _mssp1_waitForEvent 1016  
                ?_do_I2C_DO_NACK_RESTART 0026                      start_initialization 0A2A  
                              _i2c_close 0F04                      _i2c_busCollisionISR 11EE  
        __size_of_PIN_MANAGER_Initialize 002A                      ?_mssp1_IRQisEnabled 0026  
                        i2_do_I2C_DO_ACK 11A6                            i2_returnReset 1228  
                        i2_do_I2C_TX$315 0026                      ?_mssp1_waitForEvent 003A  
            __end_of_i2c_masterAccelRead 10B8                              putch@txData 003B  
                     __end_of_i2c_poller 0F56             __size_of_i2c1_driver_sendACK 0006  
                  __end_of_EUSART1_Write 0DA0                          i2c_open@address 003D  
                     printString@welcome 0060                  i2c_setBuffer@bufferSize 003C  
                ??_i2c1_driver_getRXData 003A             __size_of_i2c1_driver_restart 0004  
            __size_ofi2_i2c1_driver_stop 0004             __size_of_i2c1_driver_startRX 0004  
                  i2_do_I2C_DO_NACK_STOP 119E                   i2_do_I2C_SEND_ADR_READ 107C  
                  __end_of_i2c_setBuffer 0F3C                 _ACCELEROMETER_Initialize 09BE  
                      __size_of_i2c_open 009A                     ?_i2c_busCollisionISR 0026  
                   __end_of_mssp1_setIRQ 11FC                     ??_mssp1_IRQisEnabled 003A  
                __size_of_read_xyzvalues 0092                     read_xyzvalues@status 0015  
                __size_of_write_register 0032                       i2_do_I2C_SEND_STOP 11AE  
                   ??_mssp1_waitForEvent 003C           ?_EUSART1_SetRxInterruptHandler 003A  
                  i2_i2c1_driver_sendACK 11E8                            ?_do_I2C_RESET 0026  
           __end_ofi2_i2c1_driver_TXData 11D6                              __pdataBANK0 00C1  
                            __pdataBANK1 0100                    i2i2c1_driver_TXData@d 0026  
              _do_I2C_TX_EMPTY$intlevel0 0AF6      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 1234                              ?_returnStop 003A  
                               ??_printf 003E                      ?i2_do_I2C_SEND_STOP 0026  
                ??_i2c1_driver_setI2cISR 003C                    i2_i2c1_driver_startRX 1224  
         __end_of_do_I2C_DO_NACK_RESTART 10C6                           _eusart1RxCount 0018  
                   _i2c1_driver_sendNACK 11D6             __end_ofi2_i2c1_driver_isNACK 0FF0  
                            __pbssCOMRAM 0001        _EUSART1_RxDefaultInterruptHandler 0046  
                             ?_i2c_close 0026                     _i2c1_driver_resetBus 123C  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 0060  
                         ?i2_returnReset 0026                                _do_I2C_RX 0858  
                              _do_I2C_TX 06A0              __size_of_do_I2C_TX_REGISTER 0014  
       __end_of_do_I2C_SEND_INITIAL_READ 0F98           __size_of_do_I2C_SEND_ADR_WRITE 0016  
        ??_EUSART1_SetTxInterruptHandler 003C            __end_of_do_I2C_SEND_ADR_WRITE 0F82  
           __size_of_EUSART1_Receive_ISR 002C                     ??i2_do_I2C_SEND_STOP 0026  
              __size_of_i2c1_driver_open 0016                        ?i2_mssp1_clearIRQ 0026  
                   i2_do_I2C_TX_REGISTER 111A                __size_of_i2c1_driver_stop 0004  
                               ?_i2c_ISR 0026          _do_I2C_SEND_ADR_WRITE$intlevel0 0F72  
                        _do_I2C_TX_EMPTY 0AF0                       ??i2_mssp1_clearIRQ 0026  
                  ??_i2c_busCollisionISR 0026                   _PIN_MANAGER_Initialize 0EB6  
                       ??i2_do_I2C_RESET 0026                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 1140                    __end_ofi2_do_I2C_RCEN 1134  
                         ??_do_I2C_RESET 003A              __end_of_i2c_masterOperation 0CD6  
               ??_do_I2C_DO_ADDRESS_NACK 003A              _i2c1_driver_busCollisionISR 0013  
                  __end_of_do_I2C_DO_ACK 10E2             ??_INTERRUPT_InterruptManager 0028  
                       __CFG_PRICLKEN$ON 000000               ??_do_I2C_SEND_RESTART_READ 003A  
                  ?_i2c1_driver_sendNACK 0026                              ??i2_i2c_ISR 0028  
                __end_ofi2_do_I2C_DO_ACK 11AE                         ??_mssp1_clearIRQ 003A  
                            __smallconst 0600                                 _BAUDCON1 000FB8  
               i2_do_I2C_DO_NACK_RESTART 1196                    ?_i2c1_driver_resetBus 0026  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0026  
                             ?_do_I2C_RX 0026                               ?_do_I2C_TX 0026  
                      _i2c1_driver_start 120C               read_register@receivebuffer 0025  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 11F4  
                      _i2c_ISR$intlevel0 0BAC                       ?_i2c1_driver_start 0026  
                 ?i2_do_I2C_DO_NACK_STOP 0026                    ?i2_do_I2C_TX_REGISTER 0026  
                    __size_of_returnStop 000A                                 _PIE1bits 000F9D  
                               _PIE2bits 000FA0       _do_I2C_SEND_INITIAL_READ$intlevel0 0F88  
                    ??_i2c1_driver_start 003A                                 i2u141_48 07F4  
                               i2u141_49 0808      __size_of_INTERRUPT_InterruptManager 00FA  
                               i2u144_48 0994                                 i2u144_49 09A8  
                               i2u145_48 0B78                                 i2u145_49 0B8C  
                               i2u154_48 0D04                                 i2u162_48 0076  
                               i2u154_49 0D18                                 i2u139_48 0D44  
                               i2u139_49 0D58                                 i2u165_48 008C  
                               i2u159_48 0060                                 i2u168_48 00A2  
                               i2u168_49 00B6                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1             ??i2_do_I2C_SEND_INITIAL_READ 0026  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                 ?i2_i2c1_driver_sendACK 0026                                 _SSP1CON1 000FC6  
                               _SSP1CON2 000FC5                                 _SSP1STAT 000FC7  
                 ?i2_i2c1_driver_restart 0026                   ?i2_i2c1_driver_startRX 0026  
                      ?_do_I2C_SEND_STOP 0026                          ??i2_returnReset 0028  
                            ??_i2c_close 003A                __end_of_i2c1_driver_start 1210  
                          ??_returnReset 003C                       ??_do_I2C_SEND_STOP 003A  
            __size_of_i2c1_driver_TXData 0008        __end_of_do_I2C_SEND_RESTART_WRITE 110C  
                __end_of_do_I2C_TX_EMPTY 0B4E                              _INTCON2bits 000FF1  
                              copy_data0 0A3E                                copy_data1 0A5E  
                  ?_INTERRUPT_Initialize 0026                            ??_printString 003B  
                      ?_mssp1_disableIRQ 0026             __size_of_do_I2C_SEND_RESTART 000E  
            __size_of_i2c1_driver_isNACK 0016                     i2_i2c1_driver_TXData 11CE  
                _do_I2C_DO_ACK$intlevel0 10DA                                 _i2c_open 0606  
                  __size_of_mssp1_setIRQ 0004                       ??_mssp1_disableIRQ 003A  
                    _do_I2C_DO_NACK_STOP 10C6                         __size_of_i2c_ISR 004E  
  __end_of_EUSART1_SetTxInterruptHandler 1154   __size_of_EUSART1_SetTxInterruptHandler 000A  
          _EUSART1_SetTxInterruptHandler 114A                                 __Hrparam 0000  
                   i2_i2c1_driver_isNACK 0FDA                           _read_xyzvalues 0736  
                         _write_register 0DD2                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                             ?_do_I2C_IDLE 0026  
                           ?_do_I2C_RCEN 0026                        __CFG_P2BMX$PORTB5 000000  
      __size_of_do_I2C_SEND_INITIAL_READ 0016                  ??_OSCILLATOR_Initialize 003A  
              ?_do_I2C_SEND_INITIAL_READ 0026                      _i2c1_driver_sendACK 11DC  
               __size_of_i2c_masterWrite 0008                    i2_do_I2C_SEND_RESTART 11B6  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                      i2c1_driver_TXData@d 003A  
            __size_of_EUSART1_Initialize 004C                   ??_i2c1_driver_sendNACK 003A  
        __end_ofi2_do_I2C_SEND_ADR_WRITE 106C         ??_i2c1_driver_setBusCollisionISR 003C  
        ?_i2c1_driver_setBusCollisionISR 003A                         read_register@reg 0040  
     _do_I2C_SEND_RESTART_READ$intlevel0 1112                      _i2c1_driver_restart 1208  
                          ?i2_returnStop 0026                     ?_do_I2C_DO_NACK_STOP 0026  
                    _i2c1_driver_startRX 1200             __end_of_do_I2C_SEND_ADR_READ 0FAE  
                 ??_i2c1_driver_resetBus 003A                         ?i2_do_I2C_DO_ACK 0026  
                          ??i2_do_I2C_RX 0026                            ??i2_do_I2C_TX 0026  
                           _mssp1_setIRQ 11F8                              ??_do_I2C_RX 003A  
                            ??_do_I2C_TX 003B                                 __ptext10 0C42  
                               __ptext11 114A                                 __ptext20 1168  
                               __ptext12 1154                                 __ptext21 0F56  
                               __ptext13 09BE                                 __ptext30 06A0  
                               __ptext22 10AA                                 __ptext14 0DD2  
                               __ptext31 0BF4                                 __ptext23 0C8E  
                               __ptext15 1186                                 __ptext40 10F0  
                               __ptext32 10B8                                 __ptext24 104C  
                               __ptext16 0E04                                 __ptext41 10FE  
                               __ptext33 10C6                                 __ptext25 0F3C  
                               __ptext17 0F22                                 __ptext50 11D6  
                               __ptext42 110C                                 __ptext34 10D4  
                               __ptext26 1016                                 __ptext18 0606  
                               __ptext51 123C                                 __ptext43 103A  
                               __ptext35 1028                                 __ptext27 0BA6  
                               __ptext19 115E                                 __ptext60 1210  
                               __ptext52 1200                                 __ptext44 0FAE  
                               __ptext36 0F6C                                 __ptext28 0AF0  
                               __ptext61 1214                                 __ptext53 1172  
                               __ptext45 0FF0                                 __ptext37 0F82  
                               __ptext29 0858                                 __ptext70 119E  
                               __ptext54 117C                                 __ptext46 11F8  
                               __ptext38 0F98                                 __ptext71 11A6  
                               __ptext63 0CD6                                 __ptext55 1204  
                               __ptext47 0FC4                                 __ptext39 10E2  
                               __ptext80 1134                                 __ptext72 1128  
                               __ptext64 1218                                 __ptext56 1208  
                               __ptext48 118E                                 __ptext81 108C  
                               __ptext73 105C                                 __ptext65 0B4E  
                               __ptext57 11DC                                 __ptext49 11FC  
                               __ptext90 1228                                 __ptext82 111A  
                               __ptext74 106C                                 __ptext66 094A  
                               __ptext58 120C                                 __ptext91 122C  
                               __ptext83 121C                                 __ptext75 107C  
                               __ptext67 07C8                                 __ptext59 0F04  
                               __ptext92 1230                                 __ptext84 0FDA  
                               __ptext76 11AE                                 __ptext68 0D1E  
                               __ptext93 1234                                 __ptext85 11CE  
                               __ptext77 11B6                                 __ptext69 1196  
                               __ptext94 11E8                                 __ptext86 1220  
                               __ptext78 11BE                                 __ptext95 11EE  
                               __ptext87 11E2                                 __ptext79 11C6  
                               __ptext96 1238                                 __ptext88 123E  
                               __ptext97 0E32                                 __ptext89 1224  
                               __ptext98 0E60                                 __ptext99 0000  
                           _SSP1CON1bits 000FC6               ??_ACCELEROMETER_Initialize 0041  
                           _SSP1CON2bits 000FC5                     ?_i2c1_driver_sendACK 0026  
                   __end_of_do_I2C_RESET 0FC4                   ??i2_do_I2C_TX_REGISTER 0026  
                  ?i2_i2c1_driver_TXData 0026                  ?i2_do_I2C_SEND_ADR_READ 0026  
                __size_ofi2_mssp1_setIRQ 0004                     write_register@buffer 0023  
                   ?_i2c1_driver_restart 0026                      __end_of_returnReset 117C  
                       _i2c1_driver_open 0F56                         _i2c1_driver_stop 1204  
                          __size_of_main 0078                     ?_i2c1_driver_startRX 0026  
         __size_of_i2c1_driver_getRXData 0004                   __end_of_read_xyzvalues 07C8  
                   write_register@status 0017            __end_of_i2c1_driver_getRXData 1200  
                 __end_of_write_register 0E04                   i2c_masterAccelRead@reg 003F  
                  ?i2_i2c1_driver_isNACK 0026                      __end_of_printString 0AF0  
                       printString@F7170 0100                                 int$flags 004B  
   EUSART1_SetRxInterruptHandler@handler 003A       __end_of_INTERRUPT_InterruptManager 0102  
             _INTERRUPT_InterruptManager 0008                                 main@data 0096  
                           _SSP1STATbits 000FC7                           ??i2_returnStop 0028  
       __end_of_do_I2C_SEND_RESTART_READ 111A                    __end_of_read_register 0E32  
                           ??_returnStop 003C                      _EUSART1_Receive_ISR 0E60  
                  ??_do_I2C_DO_NACK_STOP 003A                mssp1_waitForEvent@timeout 003A  
         __size_of_i2c1_driver_setI2cISR 000A            __end_of_i2c1_driver_setI2cISR 1168  
                             _INTCONbits 000FF2               __size_of_i2c1_driver_start 0004  
                 ??_INTERRUPT_Initialize 003A                 ?i2_i2c1_driver_getRXData 0026  
         __end_ofi2_do_I2C_SEND_ADR_READ 108C                    ??_i2c1_driver_sendACK 003A  
                       ?_do_I2C_TX_EMPTY 0026        __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048  
             __end_ofi2_i2c1_driver_stop 1234                ?i2_do_I2C_DO_ADDRESS_NACK 0026  
                 _do_I2C_DO_ADDRESS_NACK 0BF4                                 intlevel2 0000  
                 _do_I2C_RESET$intlevel0 0FB4                    ??_i2c1_driver_restart 003A  
                   ?_EUSART1_Receive_ISR 0026                    ??_i2c1_driver_startRX 003A  
                    __end_ofi2_do_I2C_RX 09BE                      __end_ofi2_do_I2C_TX 0858  
                ?_PIN_MANAGER_Initialize 0026                          ?_read_xyzvalues 0040  
                             _RCSTA1bits 000FAB                          ?_write_register 003F  
                     __end_of_returnStop 1186             __end_of_EUSART1_Transmit_ISR 0E60  
           __size_of_i2c_masterAccelRead 000E       __end_ofi2_do_I2C_SEND_INITIAL_READ 107C  
             i2_do_I2C_SEND_INITIAL_READ 106C              __size_of_mssp1_IRQisEnabled 0010  
    __end_ofi2_do_I2C_SEND_RESTART_WRITE 11C6              i2_do_I2C_SEND_RESTART_WRITE 11BE  
                               printf@ap 003E                   ?i2_do_I2C_SEND_RESTART 0026  
             ??i2_do_I2C_DO_NACK_RESTART 0026              __size_of_mssp1_waitForEvent 0012  
         ?_EUSART1_SetTxInterruptHandler 003A                __size_ofi2_mssp1_clearIRQ 0004  
                 __size_of_EUSART1_Write 003A               __end_of_do_I2C_TX_REGISTER 1004  
                      ??_i2c_masterWrite 003F                   __size_of_i2c_setBuffer 001A  
                      __CFG_T3CMX$PORTC0 000000                              _returnReset 1172  
       _do_I2C_DO_NACK_RESTART$intlevel0 10BE                  ??i2_do_I2C_DO_NACK_STOP 0026  
                 ??i2_i2c1_driver_TXData 0026             ??i2_do_I2C_SEND_RESTART_READ 0026  
                  ??_EUSART1_Receive_ISR 0026           __end_of_PIN_MANAGER_Initialize 0EE0  
            __end_of_i2c_busCollisionISR 11F4                              _printString 0A90  
            __size_ofi2_do_I2C_SEND_STOP 0008                 ??i2_i2c1_driver_sendNACK 0026  
                      __CFG_FOSC$INTIO67 000000                   ??i2_i2c1_driver_isNACK 0026  
       __size_ofi2_do_I2C_SEND_ADR_WRITE 0010                    _do_I2C_SEND_ADR_WRITE 0F6C  
                ??i2_i2c1_driver_sendACK 0026                     _do_I2C_SEND_ADR_READ 0F98  
               ??i2_i2c1_driver_resetBus 0026                  ??i2_i2c1_driver_restart 0026  
