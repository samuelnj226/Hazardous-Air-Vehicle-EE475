

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 26 14:11:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,inline
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,inline
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,inline
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,inline
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,inline
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1,inline
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1,inline
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   118                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           ; Version 1.45
   121                           ; Generated 16/11/2017 GMT
   122                           ; 
   123                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution.
   137                           ; 
   138                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   139                           ;        software without specific prior written permission.
   140                           ; 
   141                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   142                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   143                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   144                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   145                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   146                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   147                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   148                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   149                           ; 
   150                           ; 
   151                           ; Code-generator required, PIC18F25K22 Definitions
   152                           ; 
   153                           ; SFR Addresses
   154  0000                     
   155                           	psect	idataBANK0
   156  000EDE                     __pidataBANK0:
   157                           	opt stack 0
   158                           
   159                           ;initializer for _fsmStateTable
   160  000EDE  38                 	db	low _do_I2C_IDLE
   161  000EDF  10                 	db	high _do_I2C_IDLE
   162  000EE0  96                 	db	low _do_I2C_SEND_ADR_READ
   163  000EE1  0F                 	db	high _do_I2C_SEND_ADR_READ
   164  000EE2  6A                 	db	low _do_I2C_SEND_ADR_WRITE
   165  000EE3  0F                 	db	high _do_I2C_SEND_ADR_WRITE
   166  000EE4  9E                 	db	low _do_I2C_TX
   167  000EE5  06                 	db	high _do_I2C_TX
   168  000EE6  56                 	db	low _do_I2C_RX
   169  000EE7  08                 	db	high _do_I2C_RX
   170  000EE8  26                 	db	low _do_I2C_RCEN
   171  000EE9  10                 	db	high _do_I2C_RCEN
   172  000EEA  EE                 	db	low _do_I2C_TX_EMPTY
   173  000EEB  0A                 	db	high _do_I2C_TX_EMPTY
   174  000EEC  0A                 	db	low _do_I2C_SEND_RESTART_READ
   175  000EED  11                 	db	high _do_I2C_SEND_RESTART_READ
   176  000EEE  FC                 	db	low _do_I2C_SEND_RESTART_WRITE
   177  000EEF  10                 	db	high _do_I2C_SEND_RESTART_WRITE
   178  000EF0  EE                 	db	low _do_I2C_SEND_RESTART
   179  000EF1  10                 	db	high _do_I2C_SEND_RESTART
   180  000EF2  E0                 	db	low _do_I2C_SEND_STOP
   181  000EF3  10                 	db	high _do_I2C_SEND_STOP
   182  000EF4  D2                 	db	low _do_I2C_DO_ACK
   183  000EF5  10                 	db	high _do_I2C_DO_ACK
   184  000EF6  C4                 	db	low _do_I2C_DO_NACK_STOP
   185  000EF7  10                 	db	high _do_I2C_DO_NACK_STOP
   186  000EF8  B6                 	db	low _do_I2C_DO_NACK_RESTART
   187  000EF9  10                 	db	high _do_I2C_DO_NACK_RESTART
   188  000EFA  AC                 	db	low _do_I2C_RESET
   189  000EFB  0F                 	db	high _do_I2C_RESET
   190  000EFC  F2                 	db	low _do_I2C_DO_ADDRESS_NACK
   191  000EFD  0B                 	db	high _do_I2C_DO_ADDRESS_NACK
   192  000EFE  80                 	db	low _do_I2C_SEND_INITIAL_READ
   193  000EFF  0F                 	db	high _do_I2C_SEND_INITIAL_READ
   194  000F00  EE                 	db	low _do_I2C_TX_REGISTER
   195  000F01  0F                 	db	high _do_I2C_TX_REGISTER
   196                           
   197                           	psect	idataBANK1
   198  000D9E                     __pidataBANK1:
   199                           	opt stack 0
   200                           
   201                           ;initializer for printString@F7170
   202  000D9E  0A                 	db	10
   203  000D9F  0D                 	db	13
   204  000DA0  47                 	db	71
   205  000DA1  4F                 	db	79
   206  000DA2  54                 	db	84
   207  000DA3  20                 	db	32
   208  000DA4  48                 	db	72
   209  000DA5  45                 	db	69
   210  000DA6  52                 	db	82
   211  000DA7  45                 	db	69
   212  000DA8  2E                 	db	46
   213  000DA9  20                 	db	32
   214  000DAA  0A                 	db	10
   215  000DAB  0D                 	db	13
   216  000DAC  00                 	db	0
   217  000DAD  00                 	db	0
   218  000DAE  00                 	db	0
   219  000DAF  00                 	db	0
   220  000DB0  00                 	db	0
   221  000DB1  00                 	db	0
   222  000DB2  00                 	db	0
   223  000DB3  00                 	db	0
   224  000DB4  00                 	db	0
   225  000DB5  00                 	db	0
   226  000DB6  00                 	db	0
   227  000DB7  00                 	db	0
   228  000DB8  00                 	db	0
   229  000DB9  00                 	db	0
   230  000DBA  00                 	db	0
   231  000DBB  00                 	db	0
   232  000DBC  00                 	db	0
   233  000DBD  00                 	db	0
   234  000DBE  00                 	db	0
   235  000DBF  00                 	db	0
   236  000DC0  00                 	db	0
   237  000DC1  00                 	db	0
   238  000DC2  00                 	db	0
   239  000DC3  00                 	db	0
   240  000DC4  00                 	db	0
   241  000DC5  00                 	db	0
   242  000DC6  00                 	db	0
   243  000DC7  00                 	db	0
   244  000DC8  00                 	db	0
   245  000DC9  00                 	db	0
   246  000DCA  00                 	db	0
   247  000DCB  00                 	db	0
   248  000DCC  00                 	db	0
   249  000DCD  00                 	db	0
   250  000DCE  00                 	db	0
   251  000DCF  00                 	db	0
   252                           
   253                           	psect	nvCOMRAM
   254  000046                     __pnvCOMRAM:
   255                           	opt stack 0
   256  000046                     _EUSART1_RxDefaultInterruptHandler:
   257                           	opt stack 0
   258  000046                     	ds	2
   259  000048                     _EUSART1_TxDefaultInterruptHandler:
   260                           	opt stack 0
   261  000048                     	ds	2
   262  00004A                     _eusart1TxBufferRemaining:
   263                           	opt stack 0
   264  00004A                     	ds	1
   265  0000                     _ANSELA	set	3896
   266  0000                     _ANSELB	set	3897
   267  0000                     _ANSELC	set	3898
   268  0000                     _PIE2bits	set	4000
   269  0000                     _INTCONbits	set	4082
   270  0000                     _RCONbits	set	4048
   271  0000                     _INTCON2bits	set	4081
   272  0000                     _WPUB	set	3937
   273  0000                     _TRISC	set	3988
   274  0000                     _TRISB	set	3987
   275  0000                     _TRISA	set	3986
   276  0000                     _LATC	set	3979
   277  0000                     _LATB	set	3978
   278  0000                     _LATA	set	3977
   279  0000                     _PIR2bits	set	4001
   280  0000                     _SSP1STATbits	set	4039
   281  0000                     _SSP1MSK	set	4042
   282  0000                     _SSP1BUF	set	4041
   283  0000                     _SSP1CON2bits	set	4037
   284  0000                     _SSP1ADD	set	4040
   285  0000                     _SSP1CON2	set	4037
   286  0000                     _SSP1CON1	set	4038
   287  0000                     _SSP1STAT	set	4039
   288  0000                     _PIR1bits	set	3998
   289  0000                     _SSP1CON1bits	set	4038
   290  0000                     _OSCTUNE	set	3995
   291  0000                     _OSCCON2	set	4050
   292  0000                     _OSCCON	set	4051
   293  0000                     _RCREG1	set	4014
   294  0000                     _RCSTA1bits	set	4011
   295  0000                     _TXREG1	set	4013
   296  0000                     _TXSTA1bits	set	4012
   297  0000                     _SPBRGH1	set	4016
   298  0000                     _SPBRG1	set	4015
   299  0000                     _TXSTA1	set	4012
   300  0000                     _RCSTA1	set	4011
   301  0000                     _BAUDCON1	set	4024
   302  0000                     _PIE1bits	set	3997
   303                           
   304                           	psect	smallconst
   305  000600                     __psmallconst:
   306                           	opt stack 0
   307  000600  00                 	db	0
   308  000601                     STR_1:
   309  000601  0A                 	db	10
   310  000602  00                 	db	0
   311                           
   312                           ; #config settings
   313  000603  00                 	db	0	; dummy byte at the end
   314  0000                     
   315                           	psect	cinit
   316  000A28                     __pcinit:
   317                           	opt stack 0
   318  000A28                     start_initialization:
   319                           	opt stack 0
   320  000A28                     __initialization:
   321                           	opt stack 0
   322                           
   323                           ; Initialize objects allocated to BANK1 (50 bytes)
   324                           ; load TBLPTR registers with __pidataBANK1
   325  000A28  0E9E               	movlw	low __pidataBANK1
   326  000A2A  6EF6               	movwf	tblptrl,c
   327  000A2C  0E0D               	movlw	high __pidataBANK1
   328  000A2E  6EF7               	movwf	tblptrh,c
   329  000A30  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   330  000A32  6EF8               	movwf	tblptru,c
   331  000A34  EE01  F000         	lfsr	0,__pdataBANK1
   332  000A38  EE10 F032          	lfsr	1,50
   333  000A3C                     copy_data0:
   334  000A3C  0009               	tblrd		*+
   335  000A3E  CFF5 FFEE          	movff	tablat,postinc0
   336  000A42  50E5               	movf	postdec1,w,c
   337  000A44  50E1               	movf	fsr1l,w,c
   338  000A46  E1FA               	bnz	copy_data0
   339                           
   340                           ; Initialize objects allocated to BANK0 (36 bytes)
   341                           ; load TBLPTR registers with __pidataBANK0
   342  000A48  0EDE               	movlw	low __pidataBANK0
   343  000A4A  6EF6               	movwf	tblptrl,c
   344  000A4C  0E0E               	movlw	high __pidataBANK0
   345  000A4E  6EF7               	movwf	tblptrh,c
   346  000A50  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   347  000A52  6EF8               	movwf	tblptru,c
   348  000A54  EE00  F0C1         	lfsr	0,__pdataBANK0
   349  000A58  EE10 F024          	lfsr	1,36
   350  000A5C                     copy_data1:
   351  000A5C  0009               	tblrd		*+
   352  000A5E  CFF5 FFEE          	movff	tablat,postinc0
   353  000A62  50E5               	movf	postdec1,w,c
   354  000A64  50E1               	movf	fsr1l,w,c
   355  000A66  E1FA               	bnz	copy_data1
   356                           
   357                           ; Clear objects allocated to BANK0 (37 bytes)
   358  000A68  EE00  F09C         	lfsr	0,__pbssBANK0
   359  000A6C  0E25               	movlw	37
   360  000A6E                     clear_0:
   361  000A6E  6AEE               	clrf	postinc0,c
   362  000A70  06E8               	decf	wreg,f,c
   363  000A72  E1FD               	bnz	clear_0
   364                           
   365                           ; Clear objects allocated to COMRAM (37 bytes)
   366  000A74  EE00  F001         	lfsr	0,__pbssCOMRAM
   367  000A78  0E25               	movlw	37
   368  000A7A                     clear_1:
   369  000A7A  6AEE               	clrf	postinc0,c
   370  000A7C  06E8               	decf	wreg,f,c
   371  000A7E  E1FD               	bnz	clear_1
   372  000A80                     end_of_initialization:
   373                           	opt stack 0
   374  000A80                     __end_of__initialization:
   375                           	opt stack 0
   376  000A80  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   377  000A82  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   378  000A84  0E00               	movlw	low (__Lmediumconst shr (0+16))
   379  000A86  6EF8               	movwf	tblptru,c
   380  000A88  0100               	movlb	0
   381  000A8A  EF68  F004         	goto	_main	;jump to C main() function
   382                           tblptru	equ	0xFF8
   383                           tblptrh	equ	0xFF7
   384                           tblptrl	equ	0xFF6
   385                           tablat	equ	0xFF5
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           postdec1	equ	0xFE5
   389                           fsr1l	equ	0xFE1
   390                           
   391                           	psect	bssCOMRAM
   392  000001                     __pbssCOMRAM:
   393                           	opt stack 0
   394  000001                     _eusart1RxBuffer:
   395                           	opt stack 0
   396  000001                     	ds	8
   397  000009                     _eusart1TxBuffer:
   398                           	opt stack 0
   399  000009                     	ds	8
   400  000011                     _i2c1_driver_i2cISR:
   401                           	opt stack 0
   402  000011                     	ds	2
   403  000013                     _i2c1_driver_busCollisionISR:
   404                           	opt stack 0
   405  000013                     	ds	2
   406  000015                     read_xyzvalues@status:
   407                           	opt stack 0
   408  000015                     	ds	1
   409  000016                     read_register@status:
   410                           	opt stack 0
   411  000016                     	ds	1
   412  000017                     write_register@status:
   413                           	opt stack 0
   414  000017                     	ds	1
   415  000018                     _eusart1RxCount:
   416                           	opt stack 0
   417  000018                     	ds	1
   418  000019                     _eusart1RxTail:
   419                           	opt stack 0
   420  000019                     	ds	1
   421  00001A                     _eusart1RxHead:
   422                           	opt stack 0
   423  00001A                     	ds	1
   424  00001B                     _eusart1TxTail:
   425                           	opt stack 0
   426  00001B                     	ds	1
   427  00001C                     _eusart1TxHead:
   428                           	opt stack 0
   429  00001C                     	ds	1
   430  00001D                     read_xyzvalues@readbuffer:
   431                           	opt stack 0
   432  00001D                     	ds	6
   433  000023                     write_register@buffer:
   434                           	opt stack 0
   435  000023                     	ds	2
   436  000025                     read_register@receivebuffer:
   437                           	opt stack 0
   438  000025                     	ds	1
   439                           tblptru	equ	0xFF8
   440                           tblptrh	equ	0xFF7
   441                           tblptrl	equ	0xFF6
   442                           tablat	equ	0xFF5
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1l	equ	0xFE1
   447                           
   448                           	psect	bssBANK0
   449  00009C                     __pbssBANK0:
   450                           	opt stack 0
   451  00009C                     _i2c_status:
   452                           	opt stack 0
   453  00009C                     	ds	37
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1l	equ	0xFE1
   462                           
   463                           	psect	dataBANK0
   464  0000C1                     __pdataBANK0:
   465                           	opt stack 0
   466  0000C1                     _fsmStateTable:
   467                           	opt stack 0
   468  0000C1                     	ds	36
   469                           tblptru	equ	0xFF8
   470                           tblptrh	equ	0xFF7
   471                           tblptrl	equ	0xFF6
   472                           tablat	equ	0xFF5
   473                           postinc0	equ	0xFEE
   474                           wreg	equ	0xFE8
   475                           postdec1	equ	0xFE5
   476                           fsr1l	equ	0xFE1
   477                           
   478                           	psect	dataBANK1
   479  000100                     __pdataBANK1:
   480                           	opt stack 0
   481  000100                     printString@F7170:
   482                           	opt stack 0
   483  000100                     	ds	50
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           postinc0	equ	0xFEE
   489                           wreg	equ	0xFE8
   490                           postdec1	equ	0xFE5
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	cstackBANK0
   494  000060                     __pcstackBANK0:
   495                           	opt stack 0
   496  000060                     read_xyzvalues@sensorData:
   497                           	opt stack 0
   498  000060                     printString@welcome:
   499                           	opt stack 0
   500                           
   501                           ; 50 bytes @ 0x0
   502  000060                     	ds	50
   503  000092                     printString@i:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x32
   507  000092                     	ds	2
   508  000094                     ??_main:
   509                           
   510                           ; 1 bytes @ 0x34
   511  000094                     	ds	2
   512  000096                     main@data:
   513                           	opt stack 0
   514                           
   515                           ; 6 bytes @ 0x36
   516  000096                     	ds	6
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	cstackCOMRAM
   527  000026                     __pcstackCOMRAM:
   528                           	opt stack 0
   529  000026                     ??i2_i2c1_driver_isNACK:
   530  000026                     i2i2c1_driver_TXData@d:
   531                           	opt stack 0
   532  000026                     i2_do_I2C_TX$315:
   533                           	opt stack 0
   534  000026                     i2returnReset@p:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x0
   538  000026                     	ds	2
   539  000028                     ??_INTERRUPT_InterruptManager:
   540  000028                     
   541                           ; 1 bytes @ 0x2
   542  000028                     	ds	18
   543  00003A                     ??_mssp1_IRQisEnabled:
   544  00003A                     ??_i2c1_driver_isNACK:
   545  00003A                     i2c_close@ret:
   546                           	opt stack 0
   547  00003A                     EUSART1_Write@txData:
   548                           	opt stack 0
   549  00003A                     i2c1_driver_TXData@d:
   550                           	opt stack 0
   551  00003A                     i2c_setBuffer@buffer:
   552                           	opt stack 0
   553  00003A                     returnReset@p:
   554                           	opt stack 0
   555  00003A                     EUSART1_SetTxInterruptHandler@handler:
   556                           	opt stack 0
   557  00003A                     EUSART1_SetRxInterruptHandler@handler:
   558                           	opt stack 0
   559  00003A                     mssp1_waitForEvent@timeout:
   560                           	opt stack 0
   561  00003A                     i2c1_driver_setBusCollisionISR@f:
   562                           	opt stack 0
   563  00003A                     i2c1_driver_setI2cISR@f:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x14
   567  00003A                     	ds	1
   568  00003B                     ??_printString:
   569  00003B                     putch@txData:
   570                           	opt stack 0
   571  00003B                     _do_I2C_TX$315:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x15
   575  00003B                     	ds	1
   576  00003C                     ?_printf:
   577                           	opt stack 0
   578  00003C                     i2c_open@ret:
   579                           	opt stack 0
   580  00003C                     i2c_setBuffer@bufferSize:
   581                           	opt stack 0
   582  00003C                     printf@f:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x16
   586  00003C                     	ds	1
   587  00003D                     i2c_open@address:
   588                           	opt stack 0
   589  00003D                     i2c_masterOperation@operation:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x17
   593  00003D                     	ds	1
   594  00003E                     i2c_masterOperation@ret:
   595                           	opt stack 0
   596  00003E                     printf@ap:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x18
   600  00003E                     	ds	1
   601  00003F                     i2c_masterAccelRead@reg:
   602                           	opt stack 0
   603  00003F                     write_register@data:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x19
   607  00003F                     	ds	1
   608  000040                     ?_read_xyzvalues:
   609                           	opt stack 0
   610  000040                     write_register@reg:
   611                           	opt stack 0
   612  000040                     read_register@reg:
   613                           	opt stack 0
   614  000040                     printf@c:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x1A
   618  000040                     	ds	1
   619  000041                     ??_ACCELEROMETER_Initialize:
   620                           
   621                           ; 1 bytes @ 0x1B
   622  000041                     	ds	5
   623  000046                     tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           postdec1	equ	0xFE5
   630                           fsr1l	equ	0xFE1
   631                           
   632                           ; 1 bytes @ 0x20
   633 ;;
   634 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   635 ;;
   636 ;; *************** function _main *****************
   637 ;; Defined at:
   638 ;;		line 70 in file "main.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;  data            6   54[BANK0 ] struct .
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   652 ;;      Params:         0       0       0       0       0       0       0
   653 ;;      Locals:         0       6       0       0       0       0       0
   654 ;;      Temps:          0       2       0       0       0       0       0
   655 ;;      Totals:         0       8       0       0       0       0       0
   656 ;;Total ram usage:        8 bytes
   657 ;; Hardware stack levels required when called:   14
   658 ;; This function calls:
   659 ;;		_ACCELEROMETER_Initialize
   660 ;;		_EUSART1_Write
   661 ;;		_SYSTEM_Initialize
   662 ;;		_printString
   663 ;;		_printf
   664 ;;		_read_xyzvalues
   665 ;; This function is called by:
   666 ;;		Startup code after reset
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text0
   671  0008D0                     __ptext0:
   672                           	opt stack 0
   673  0008D0                     _main:
   674                           	opt stack 17
   675                           
   676                           ;main.c: 71: accelerometer_data_t data;
   677                           ;main.c: 74: SYSTEM_Initialize();
   678                           
   679                           ;incstack = 0
   680  0008D0  EC01  F008         	call	_SYSTEM_Initialize	;wreg free
   681                           
   682                           ;main.c: 77: (INTCONbits.GIE = 1);
   683  0008D4  8EF2               	bsf	intcon,7,c	;volatile
   684                           
   685                           ;main.c: 80: (INTCONbits.PEIE = 1);
   686  0008D6  8CF2               	bsf	intcon,6,c	;volatile
   687                           
   688                           ;main.c: 82: ACCELEROMETER_Initialize();
   689  0008D8  ECDE  F004         	call	_ACCELEROMETER_Initialize	;wreg free
   690                           
   691                           ;main.c: 84: printString();
   692  0008DC  EC47  F005         	call	_printString	;wreg free
   693  0008E0                     
   694                           ;main.c: 87: data = read_xyzvalues();
   695  0008E0  EC9A  F003         	call	_read_xyzvalues	;wreg free
   696  0008E4  EE20  F096         	lfsr	2,main@data
   697  0008E8  0E05               	movlw	5
   698  0008EA                     u1691:
   699  0008EA  CFEB FFDB          	movff	plusw0,plusw2
   700  0008EE  06E8               	decf	wreg,f,c
   701  0008F0  E2FC               	bc	u1691
   702                           
   703                           ;main.c: 88: _delay((unsigned long)((100)*(16000000/4000.0)));
   704  0008F2  0E03               	movlw	3
   705  0008F4  0100               	movlb	0	; () banked
   706  0008F6  6F95               	movwf	(??_main+1)& (0+255),b
   707  0008F8  0E08               	movlw	8
   708  0008FA  6F94               	movwf	??_main& (0+255),b
   709  0008FC  0E77               	movlw	119
   710  0008FE                     u1707:
   711  0008FE  2EE8               	decfsz	wreg,f,c
   712  000900  D7FE               	bra	u1707
   713  000902  2F94               	decfsz	??_main& (0+255),f,b
   714  000904  D7FC               	bra	u1707
   715  000906  2F95               	decfsz	(??_main+1)& (0+255),f,b
   716  000908  D7FA               	bra	u1707
   717                           
   718                           ;main.c: 91: EUSART1_Write((uint8_t) (data.x >> 8) & 0xff);
   719  00090A  0100               	movlb	0	; () banked
   720  00090C  5197               	movf	(main@data+1)& (0+255),w,b
   721  00090E  ECB2  F006         	call	_EUSART1_Write
   722                           
   723                           ;main.c: 92: EUSART1_Write((uint8_t) (data.x) & 0xff);
   724  000912  0100               	movlb	0	; () banked
   725  000914  5196               	movf	main@data& (0+255),w,b
   726  000916  ECB2  F006         	call	_EUSART1_Write
   727                           
   728                           ;main.c: 93: EUSART1_Write((uint8_t) (data.y >> 8) & 0xff);
   729  00091A  0100               	movlb	0	; () banked
   730  00091C  5199               	movf	(main@data+3)& (0+255),w,b
   731  00091E  ECB2  F006         	call	_EUSART1_Write
   732                           
   733                           ;main.c: 94: EUSART1_Write((uint8_t) (data.y) & 0xff);
   734  000922  0100               	movlb	0	; () banked
   735  000924  5198               	movf	(main@data+2)& (0+255),w,b
   736  000926  ECB2  F006         	call	_EUSART1_Write
   737                           
   738                           ;main.c: 95: EUSART1_Write((uint8_t) (data.y >> 8) & 0xff);
   739  00092A  0100               	movlb	0	; () banked
   740  00092C  5199               	movf	(main@data+3)& (0+255),w,b
   741  00092E  ECB2  F006         	call	_EUSART1_Write
   742                           
   743                           ;main.c: 96: EUSART1_Write((uint8_t) (data.y) & 0xff);
   744  000932  0100               	movlb	0	; () banked
   745  000934  5198               	movf	(main@data+2)& (0+255),w,b
   746  000936  ECB2  F006         	call	_EUSART1_Write
   747                           
   748                           ;main.c: 97: printf("\n");
   749  00093A  0E01               	movlw	low STR_1
   750  00093C  6E3C               	movwf	printf@f,c
   751  00093E  0E06               	movlw	high STR_1
   752  000940  6E3D               	movwf	printf@f+1,c
   753  000942  EC45  F007         	call	_printf	;wreg free
   754  000946  D7CC               	goto	l613
   755  000948                     __end_of_main:
   756                           	opt stack 0
   757                           tblptru	equ	0xFF8
   758                           tblptrh	equ	0xFF7
   759                           tblptrl	equ	0xFF6
   760                           tablat	equ	0xFF5
   761                           intcon	equ	0xFF2
   762                           postinc0	equ	0xFEE
   763                           plusw0	equ	0xFEB
   764                           wreg	equ	0xFE8
   765                           postdec1	equ	0xFE5
   766                           fsr1l	equ	0xFE1
   767                           plusw2	equ	0xFDB
   768                           
   769 ;; *************** function _read_xyzvalues *****************
   770 ;; Defined at:
   771 ;;		line 67 in file "accelerometer.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  sensorData      6    0[BANK0 ] struct .
   776 ;; Return value:  Size  Location     Type
   777 ;;                  6   26[COMRAM] struct .
   778 ;; Registers used:
   779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   785 ;;      Params:         6       0       0       0       0       0       0
   786 ;;      Locals:         0       6       0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0       0       0
   788 ;;      Totals:         6       6       0       0       0       0       0
   789 ;;Total ram usage:       12 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:   12
   792 ;; This function calls:
   793 ;;		_i2c_close
   794 ;;		_i2c_masterAccelRead
   795 ;;		_i2c_open
   796 ;;		_i2c_setBuffer
   797 ;; This function is called by:
   798 ;;		_main
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text1
   803  000734                     __ptext1:
   804                           	opt stack 0
   805  000734                     _read_xyzvalues:
   806                           	opt stack 18
   807                           
   808                           ;accelerometer.c: 68: static i2c_error_t status;
   809                           ;accelerometer.c: 69: static volatile uint8_t readbuffer[6];
   810                           ;accelerometer.c: 70: accelerometer_data_t sensorData;
   811                           ;accelerometer.c: 73: i2c_open(0x1D);
   812                           
   813                           ;incstack = 0
   814  000734  0E1D               	movlw	29
   815  000736  EC02  F003         	call	_i2c_open
   816                           
   817                           ;accelerometer.c: 74: i2c_setBuffer(readbuffer, 6);
   818  00073A  0E1D               	movlw	low read_xyzvalues@readbuffer
   819  00073C  6E3A               	movwf	i2c_setBuffer@buffer,c
   820  00073E  0E00               	movlw	high read_xyzvalues@readbuffer
   821  000740  6E3B               	movwf	i2c_setBuffer@buffer+1,c
   822  000742  0E00               	movlw	0
   823  000744  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
   824  000746  0E06               	movlw	6
   825  000748  6E3C               	movwf	i2c_setBuffer@bufferSize,c
   826  00074A  EC90  F007         	call	_i2c_setBuffer	;wreg free
   827                           
   828                           ;accelerometer.c: 77: status = i2c_masterAccelRead(0x01);
   829  00074E  0E01               	movlw	1
   830  000750  EC54  F008         	call	_i2c_masterAccelRead
   831  000754  6E15               	movwf	read_xyzvalues@status,c
   832                           
   833                           ;accelerometer.c: 80: status = i2c_close();
   834  000756  EC81  F007         	call	_i2c_close	;wreg free
   835  00075A  6E15               	movwf	read_xyzvalues@status,c
   836                           
   837                           ;accelerometer.c: 82: sensorData.x = readbuffer[0];
   838  00075C  C01D  F060         	movff	read_xyzvalues@readbuffer,read_xyzvalues@sensorData	;volatile
   839  000760  0100               	movlb	0	; () banked
   840  000762  6B61               	clrf	(read_xyzvalues@sensorData+1)& (0+255),b
   841                           
   842                           ; BSR set to: 0
   843                           ;accelerometer.c: 83: sensorData.x <<= 8;
   844  000764  5160               	movf	read_xyzvalues@sensorData& (0+255),w,b
   845  000766  6F61               	movwf	(read_xyzvalues@sensorData+1)& (0+255),b
   846  000768  6B60               	clrf	read_xyzvalues@sensorData& (0+255),b
   847                           
   848                           ; BSR set to: 0
   849                           ;accelerometer.c: 84: sensorData.x |= readbuffer[1];
   850  00076A  501E               	movf	read_xyzvalues@readbuffer+1,w,c	;volatile
   851  00076C  1360               	iorwf	read_xyzvalues@sensorData& (0+255),f,b
   852                           
   853                           ; BSR set to: 0
   854                           ;accelerometer.c: 85: sensorData.x >>= 2;
   855  00076E  3561               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   856  000770  3361               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   857  000772  3360               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   858  000774  3561               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   859  000776  3361               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   860  000778  3360               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   861                           
   862                           ; BSR set to: 0
   863                           ;accelerometer.c: 87: sensorData.y = readbuffer[2];
   864  00077A  C01F  F062         	movff	read_xyzvalues@readbuffer+2,read_xyzvalues@sensorData+2	;volatile
   865  00077E  6B63               	clrf	(read_xyzvalues@sensorData+3)& (0+255),b
   866                           
   867                           ; BSR set to: 0
   868                           ;accelerometer.c: 88: sensorData.y <<= 8;
   869  000780  5162               	movf	(read_xyzvalues@sensorData+2)& (0+255),w,b
   870  000782  6F63               	movwf	(read_xyzvalues@sensorData+3)& (0+255),b
   871  000784  6B62               	clrf	(read_xyzvalues@sensorData+2)& (0+255),b
   872                           
   873                           ; BSR set to: 0
   874                           ;accelerometer.c: 89: sensorData.y |= readbuffer[3];
   875  000786  5020               	movf	read_xyzvalues@readbuffer+3,w,c	;volatile
   876  000788  1362               	iorwf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   877                           
   878                           ; BSR set to: 0
   879                           ;accelerometer.c: 90: sensorData.y >>= 2;
   880  00078A  3563               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   881  00078C  3363               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   882  00078E  3362               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   883  000790  3563               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   884  000792  3363               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   885  000794  3362               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   886                           
   887                           ; BSR set to: 0
   888                           ;accelerometer.c: 92: sensorData.z = readbuffer[4];
   889  000796  C021  F064         	movff	read_xyzvalues@readbuffer+4,read_xyzvalues@sensorData+4	;volatile
   890  00079A  6B65               	clrf	(read_xyzvalues@sensorData+5)& (0+255),b
   891                           
   892                           ; BSR set to: 0
   893                           ;accelerometer.c: 93: sensorData.z <<= 8;
   894  00079C  5164               	movf	(read_xyzvalues@sensorData+4)& (0+255),w,b
   895  00079E  6F65               	movwf	(read_xyzvalues@sensorData+5)& (0+255),b
   896  0007A0  6B64               	clrf	(read_xyzvalues@sensorData+4)& (0+255),b
   897                           
   898                           ; BSR set to: 0
   899                           ;accelerometer.c: 94: sensorData.z |= readbuffer[5];
   900  0007A2  5022               	movf	read_xyzvalues@readbuffer+5,w,c	;volatile
   901  0007A4  1364               	iorwf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   902                           
   903                           ; BSR set to: 0
   904                           ;accelerometer.c: 95: sensorData.z >>= 2;
   905  0007A6  3565               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   906  0007A8  3365               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   907  0007AA  3364               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   908  0007AC  3565               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   909  0007AE  3365               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   910  0007B0  3364               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   911                           
   912                           ; BSR set to: 0
   913                           ;accelerometer.c: 97: return sensorData;
   914  0007B2  EE20  F060         	lfsr	2,read_xyzvalues@sensorData
   915  0007B6  EE00  F040         	lfsr	0,?_read_xyzvalues
   916  0007BA  0E05               	movlw	5
   917  0007BC                     u1501:
   918  0007BC  CFDB FFEB          	movff	plusw2,plusw0
   919  0007C0  06E8               	decf	wreg,f,c
   920  0007C2  E2FC               	bc	u1501
   921  0007C4  0012               	return	
   922  0007C6                     __end_of_read_xyzvalues:
   923                           	opt stack 0
   924                           tblptru	equ	0xFF8
   925                           tblptrh	equ	0xFF7
   926                           tblptrl	equ	0xFF6
   927                           tablat	equ	0xFF5
   928                           intcon	equ	0xFF2
   929                           postinc0	equ	0xFEE
   930                           plusw0	equ	0xFEB
   931                           wreg	equ	0xFE8
   932                           postdec1	equ	0xFE5
   933                           fsr1l	equ	0xFE1
   934                           plusw2	equ	0xFDB
   935                           
   936 ;; *************** function _printf *****************
   937 ;; Defined at:
   938 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  f               2   22[COMRAM] PTR const unsigned char 
   941 ;;		 -> STR_1(2), 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  tmpval          4    0        struct .
   944 ;;  cp              3    0        PTR const unsigned char 
   945 ;;  ap              2   24[COMRAM] PTR void [1]
   946 ;;		 -> ?_printf(2), 
   947 ;;  len             2    0        unsigned int 
   948 ;;  val             2    0        unsigned int 
   949 ;;  c               1   26[COMRAM] char 
   950 ;;  flag            1    0        unsigned char 
   951 ;;  prec            1    0        char 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  2   22[COMRAM] int 
   954 ;; Registers used:
   955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   961 ;;      Params:         2       0       0       0       0       0       0
   962 ;;      Locals:         3       0       0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0
   964 ;;      Totals:         5       0       0       0       0       0       0
   965 ;;Total ram usage:        5 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    7
   968 ;; This function calls:
   969 ;;		_putch
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text2
   976  000E8A                     __ptext2:
   977                           	opt stack 0
   978  000E8A                     _printf:
   979                           	opt stack 23
   980                           
   981                           ;doprnt.c: 466: va_list ap;
   982                           ;doprnt.c: 499: signed char c;
   983                           ;doprnt.c: 506: signed char prec;
   984                           ;doprnt.c: 508: unsigned char flag;
   985                           ;doprnt.c: 523: union {
   986                           ;doprnt.c: 524: unsigned long vd;
   987                           ;doprnt.c: 525: double integ;
   988                           ;doprnt.c: 526: } tmpval;
   989                           ;doprnt.c: 528: unsigned int val;
   990                           ;doprnt.c: 529: unsigned len;
   991                           ;doprnt.c: 530: const char * cp;
   992                           ;doprnt.c: 533: *ap = __va_start();
   993                           
   994                           ; BSR set to: 0
   995                           ;incstack = 0
   996  000E8A  0E3E               	movlw	low (?_printf+2)
   997  000E8C  6E3E               	movwf	printf@ap,c
   998  000E8E  0E00               	movlw	high (?_printf+2)
   999  000E90  6E3F               	movwf	printf@ap+1,c
  1000                           
  1001                           ;doprnt.c: 536: while(c = *f++) {
  1002  000E92  D003               	goto	l666
  1003  000E94                     
  1004                           ;doprnt.c: 540: {
  1005                           ;doprnt.c: 541: (putch(c) );
  1006  000E94  5040               	movf	printf@c,w,c
  1007  000E96  EC9F  F008         	call	_putch
  1008  000E9A                     l666:
  1009  000E9A  C03C  FFF6         	movff	printf@f,tblptrl
  1010  000E9E  C03D  FFF7         	movff	printf@f+1,tblptrh
  1011  000EA2  4A3C               	infsnz	printf@f,f,c
  1012  000EA4  2A3D               	incf	printf@f+1,f,c
  1013  000EA6                     	if	0	;tblptru may be non-zero
  1014  000EA6                     	endif
  1015  000EA6                     	if	0	;tblptru may be non-zero
  1016  000EA6                     	endif
  1017  000EA6  0008               	tblrd		*
  1018  000EA8  CFF5 F040          	movff	tablat,printf@c
  1019  000EAC  5040               	movf	printf@c,w,c
  1020  000EAE  B4D8               	btfsc	status,2,c
  1021  000EB0  0012               	return	
  1022  000EB2  D7F0               	goto	l667
  1023  000EB4                     __end_of_printf:
  1024                           	opt stack 0
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           intcon	equ	0xFF2
  1030                           postinc0	equ	0xFEE
  1031                           plusw0	equ	0xFEB
  1032                           wreg	equ	0xFE8
  1033                           postdec1	equ	0xFE5
  1034                           fsr1l	equ	0xFE1
  1035                           plusw2	equ	0xFDB
  1036                           status	equ	0xFD8
  1037                           
  1038 ;; *************** function _putch *****************
  1039 ;; Defined at:
  1040 ;;		line 178 in file "mcc_generated_files/eusart1.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  txData          1    wreg     unsigned char 
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;  txData          1   21[COMRAM] unsigned char 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1054 ;;      Params:         0       0       0       0       0       0       0
  1055 ;;      Locals:         1       0       0       0       0       0       0
  1056 ;;      Temps:          0       0       0       0       0       0       0
  1057 ;;      Totals:         1       0       0       0       0       0       0
  1058 ;;Total ram usage:        1 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    6
  1061 ;; This function calls:
  1062 ;;		_EUSART1_Write
  1063 ;; This function is called by:
  1064 ;;		_printf
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text3
  1069  00113E                     __ptext3:
  1070                           	opt stack 0
  1071  00113E                     _putch:
  1072                           	opt stack 23
  1073                           
  1074                           ;incstack = 0
  1075                           ;putch@txData stored from wreg
  1076  00113E  6E3B               	movwf	putch@txData,c
  1077                           
  1078                           ;eusart1.c: 180: EUSART1_Write(txData);
  1079  001140  503B               	movf	putch@txData,w,c
  1080  001142  ECB2  F006         	call	_EUSART1_Write
  1081  001146  0012               	return		;funcret
  1082  001148                     __end_of_putch:
  1083                           	opt stack 0
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           intcon	equ	0xFF2
  1089                           postinc0	equ	0xFEE
  1090                           plusw0	equ	0xFEB
  1091                           wreg	equ	0xFE8
  1092                           postdec1	equ	0xFE5
  1093                           fsr1l	equ	0xFE1
  1094                           plusw2	equ	0xFDB
  1095                           status	equ	0xFD8
  1096                           
  1097 ;; *************** function _printString *****************
  1098 ;; Defined at:
  1099 ;;		line 59 in file "main.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  i               2   50[BANK0 ] int 
  1104 ;;  welcome        50    0[BANK0 ] unsigned char [50]
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1114 ;;      Params:         0       0       0       0       0       0       0
  1115 ;;      Locals:         0      52       0       0       0       0       0
  1116 ;;      Temps:          2       0       0       0       0       0       0
  1117 ;;      Totals:         2      52       0       0       0       0       0
  1118 ;;Total ram usage:       54 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    6
  1121 ;; This function calls:
  1122 ;;		_EUSART1_Write
  1123 ;; This function is called by:
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text4
  1129  000A8E                     __ptext4:
  1130                           	opt stack 0
  1131  000A8E                     _printString:
  1132                           	opt stack 24
  1133                           
  1134                           ;main.c: 60: char welcome[50] = "\n\rGOT HERE. \n\r";
  1135                           
  1136                           ;incstack = 0
  1137  000A8E  EE21  F000         	lfsr	2,printString@F7170
  1138  000A92  EE10  F060         	lfsr	1,printString@welcome
  1139  000A96  0E31               	movlw	49
  1140  000A98                     u1461:
  1141  000A98  CFDB FFE3          	movff	plusw2,plusw1
  1142  000A9C  06E8               	decf	wreg,f,c
  1143  000A9E  E2FC               	bc	u1461
  1144                           
  1145                           ;main.c: 61: for (int i = 0; i < 50; i++ ) {
  1146  000AA0  0E00               	movlw	0
  1147  000AA2  0100               	movlb	0	; () banked
  1148  000AA4  6F93               	movwf	(printString@i+1)& (0+255),b
  1149  000AA6  0E00               	movlw	0
  1150  000AA8  6F92               	movwf	printString@i& (0+255),b
  1151  000AAA                     l3707:
  1152                           
  1153                           ; BSR set to: 0
  1154  000AAA  BF93               	btfsc	(printString@i+1)& (0+255),7,b
  1155  000AAC  D006               	goto	l606
  1156  000AAE  5193               	movf	(printString@i+1)& (0+255),w,b
  1157  000AB0  E11D               	bnz	l608
  1158  000AB2  0E32               	movlw	50
  1159  000AB4  5D92               	subwf	printString@i& (0+255),w,b
  1160  000AB6  B0D8               	btfsc	status,0,c
  1161  000AB8  0012               	return	
  1162  000ABA                     l606:
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;main.c: 62: EUSART1_Write(welcome[i]);
  1166                           
  1167                           ; BSR set to: 0
  1168  000ABA  0E60               	movlw	low printString@welcome
  1169  000ABC  2592               	addwf	printString@i& (0+255),w,b
  1170  000ABE  6ED9               	movwf	fsr2l,c
  1171  000AC0  0E00               	movlw	high printString@welcome
  1172  000AC2  2193               	addwfc	(printString@i+1)& (0+255),w,b
  1173  000AC4  6EDA               	movwf	fsr2h,c
  1174  000AC6  50DF               	movf	indf2,w,c
  1175  000AC8  ECB2  F006         	call	_EUSART1_Write
  1176                           
  1177                           ;main.c: 63: _delay((unsigned long)((100)*(16000000/4000.0)));
  1178  000ACC  0E03               	movlw	3
  1179  000ACE  6E3C               	movwf	(??_printString+1)& (0+255),c
  1180  000AD0  0E08               	movlw	8
  1181  000AD2  6E3B               	movwf	??_printString& (0+255),c
  1182  000AD4  0E77               	movlw	119
  1183  000AD6                     u1717:
  1184  000AD6  2EE8               	decfsz	wreg,f,c
  1185  000AD8  D7FE               	bra	u1717
  1186  000ADA  2E3B               	decfsz	??_printString& (0+255),f,c
  1187  000ADC  D7FC               	bra	u1717
  1188  000ADE  2E3C               	decfsz	(??_printString+1)& (0+255),f,c
  1189  000AE0  D7FA               	bra	u1717
  1190  000AE2  F000               	nop	
  1191  000AE4  0100               	movlb	0	; () banked
  1192  000AE6  4B92               	infsnz	printString@i& (0+255),f,b
  1193  000AE8  2B93               	incf	(printString@i+1)& (0+255),f,b
  1194  000AEA  D7DF               	goto	l3707
  1195  000AEC                     l608:
  1196                           
  1197                           ; BSR set to: 0
  1198  000AEC  0012               	return		;funcret
  1199  000AEE                     __end_of_printString:
  1200                           	opt stack 0
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           intcon	equ	0xFF2
  1206                           postinc0	equ	0xFEE
  1207                           plusw0	equ	0xFEB
  1208                           wreg	equ	0xFE8
  1209                           postdec1	equ	0xFE5
  1210                           plusw1	equ	0xFE3
  1211                           fsr1l	equ	0xFE1
  1212                           indf2	equ	0xFDF
  1213                           plusw2	equ	0xFDB
  1214                           fsr2h	equ	0xFDA
  1215                           fsr2l	equ	0xFD9
  1216                           status	equ	0xFD8
  1217                           
  1218 ;; *************** function _EUSART1_Write *****************
  1219 ;; Defined at:
  1220 ;;		line 150 in file "mcc_generated_files/eusart1.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  txData          1    wreg     unsigned char 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;  txData          1   20[COMRAM] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1234 ;;      Params:         0       0       0       0       0       0       0
  1235 ;;      Locals:         1       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0
  1237 ;;      Totals:         1       0       0       0       0       0       0
  1238 ;;Total ram usage:        1 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    5
  1241 ;; This function calls:
  1242 ;;		Nothing
  1243 ;; This function is called by:
  1244 ;;		_putch
  1245 ;;		_printString
  1246 ;;		_main
  1247 ;;		_Send_UART
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text5
  1252  000D64                     __ptext5:
  1253                           	opt stack 0
  1254  000D64                     _EUSART1_Write:
  1255                           	opt stack 23
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;incstack = 0
  1259                           ;EUSART1_Write@txData stored from wreg
  1260  000D64  6E3A               	movwf	EUSART1_Write@txData,c
  1261  000D66                     
  1262                           ;eusart1.c: 153: {
  1263                           
  1264                           ;eusart1.c: 152: while(0 == eusart1TxBufferRemaining)
  1265  000D66  504A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  1266  000D68  B4D8               	btfsc	status,2,c
  1267  000D6A  D7FD               	goto	l3521
  1268                           
  1269                           ;eusart1.c: 154: }
  1270                           ;eusart1.c: 156: if(0 == PIE1bits.TX1IE)
  1271  000D6C  B89D               	btfsc	3997,4,c	;volatile
  1272  000D6E  D003               	goto	l309
  1273                           
  1274                           ;eusart1.c: 157: {
  1275                           ;eusart1.c: 158: TXREG1 = txData;
  1276  000D70  C03A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1277                           
  1278                           ;eusart1.c: 159: }
  1279  000D74  D012               	goto	l310
  1280  000D76                     l309:
  1281                           
  1282                           ;eusart1.c: 160: else
  1283                           ;eusart1.c: 161: {
  1284                           ;eusart1.c: 162: PIE1bits.TX1IE = 0;
  1285  000D76  989D               	bcf	3997,4,c	;volatile
  1286                           
  1287                           ;eusart1.c: 163: eusart1TxBuffer[eusart1TxHead++] = txData;
  1288  000D78  501C               	movf	_eusart1TxHead,w,c	;volatile
  1289  000D7A  0D01               	mullw	1
  1290  000D7C  0E09               	movlw	low _eusart1TxBuffer
  1291  000D7E  24F3               	addwf	prodl,w,c
  1292  000D80  6ED9               	movwf	fsr2l,c
  1293  000D82  0E00               	movlw	high _eusart1TxBuffer
  1294  000D84  20F4               	addwfc	prodh,w,c
  1295  000D86  6EDA               	movwf	fsr2h,c
  1296  000D88  C03A  FFDF         	movff	EUSART1_Write@txData,indf2
  1297  000D8C  2A1C               	incf	_eusart1TxHead,f,c	;volatile
  1298                           
  1299                           ;eusart1.c: 164: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  1300  000D8E  0E07               	movlw	7
  1301  000D90  641C               	cpfsgt	_eusart1TxHead,c	;volatile
  1302  000D92  D002               	goto	l311
  1303                           
  1304                           ;eusart1.c: 165: {
  1305                           ;eusart1.c: 166: eusart1TxHead = 0;
  1306  000D94  0E00               	movlw	0
  1307  000D96  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1308  000D98                     l311:
  1309                           
  1310                           ;eusart1.c: 167: }
  1311                           ;eusart1.c: 168: eusart1TxBufferRemaining--;
  1312  000D98  064A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1313  000D9A                     l310:
  1314                           
  1315                           ;eusart1.c: 169: }
  1316                           ;eusart1.c: 170: PIE1bits.TX1IE = 1;
  1317  000D9A  889D               	bsf	3997,4,c	;volatile
  1318  000D9C  0012               	return		;funcret
  1319  000D9E                     __end_of_EUSART1_Write:
  1320                           	opt stack 0
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           intcon	equ	0xFF2
  1328                           postinc0	equ	0xFEE
  1329                           plusw0	equ	0xFEB
  1330                           wreg	equ	0xFE8
  1331                           postdec1	equ	0xFE5
  1332                           plusw1	equ	0xFE3
  1333                           fsr1l	equ	0xFE1
  1334                           indf2	equ	0xFDF
  1335                           plusw2	equ	0xFDB
  1336                           fsr2h	equ	0xFDA
  1337                           fsr2l	equ	0xFD9
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _SYSTEM_Initialize *****************
  1341 ;; Defined at:
  1342 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1356 ;;      Params:         0       0       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    7
  1363 ;; This function calls:
  1364 ;;		_EUSART1_Initialize
  1365 ;;		_INTERRUPT_Initialize
  1366 ;;		_OSCILLATOR_Initialize
  1367 ;;		_PIN_MANAGER_Initialize
  1368 ;; This function is called by:
  1369 ;;		_main
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text6
  1374  001002                     __ptext6:
  1375                           	opt stack 0
  1376  001002                     _SYSTEM_Initialize:
  1377                           	opt stack 23
  1378                           
  1379                           ;mcc.c: 114: INTERRUPT_Initialize();
  1380                           
  1381                           ;incstack = 0
  1382  001002  ECF9  F008         	call	_INTERRUPT_Initialize	;wreg free
  1383                           
  1384                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1385  001006  EC5A  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  1386                           
  1387                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1388  00100A  EC4D  F008         	call	_OSCILLATOR_Initialize	;wreg free
  1389                           
  1390                           ;mcc.c: 117: EUSART1_Initialize();
  1391  00100E  EC20  F006         	call	_EUSART1_Initialize	;wreg free
  1392  001012  0012               	return		;funcret
  1393  001014                     __end_of_SYSTEM_Initialize:
  1394                           	opt stack 0
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           prodh	equ	0xFF4
  1400                           prodl	equ	0xFF3
  1401                           intcon	equ	0xFF2
  1402                           postinc0	equ	0xFEE
  1403                           plusw0	equ	0xFEB
  1404                           wreg	equ	0xFE8
  1405                           postdec1	equ	0xFE5
  1406                           plusw1	equ	0xFE3
  1407                           fsr1l	equ	0xFE1
  1408                           indf2	equ	0xFDF
  1409                           plusw2	equ	0xFDB
  1410                           fsr2h	equ	0xFDA
  1411                           fsr2l	equ	0xFD9
  1412                           status	equ	0xFD8
  1413                           
  1414 ;; *************** function _PIN_MANAGER_Initialize *****************
  1415 ;; Defined at:
  1416 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1430 ;;      Params:         0       0       0       0       0       0       0
  1431 ;;      Locals:         0       0       0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0
  1433 ;;      Totals:         0       0       0       0       0       0       0
  1434 ;;Total ram usage:        0 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    5
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_SYSTEM_Initialize
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text7
  1445  000EB4                     __ptext7:
  1446                           	opt stack 0
  1447  000EB4                     _PIN_MANAGER_Initialize:
  1448                           	opt stack 24
  1449                           
  1450                           ;pin_manager.c: 57: LATA = 0x00;
  1451                           
  1452                           ;incstack = 0
  1453  000EB4  0E00               	movlw	0
  1454  000EB6  6E89               	movwf	3977,c	;volatile
  1455                           
  1456                           ;pin_manager.c: 58: LATB = 0x00;
  1457  000EB8  0E00               	movlw	0
  1458  000EBA  6E8A               	movwf	3978,c	;volatile
  1459                           
  1460                           ;pin_manager.c: 59: LATC = 0x00;
  1461  000EBC  0E00               	movlw	0
  1462  000EBE  6E8B               	movwf	3979,c	;volatile
  1463                           
  1464                           ;pin_manager.c: 64: TRISA = 0xFF;
  1465  000EC0  6892               	setf	3986,c	;volatile
  1466                           
  1467                           ;pin_manager.c: 65: TRISB = 0xFF;
  1468  000EC2  6893               	setf	3987,c	;volatile
  1469                           
  1470                           ;pin_manager.c: 66: TRISC = 0xBF;
  1471  000EC4  0EBF               	movlw	191
  1472  000EC6  6E94               	movwf	3988,c	;volatile
  1473                           
  1474                           ;pin_manager.c: 71: ANSELC = 0x24;
  1475  000EC8  0E24               	movlw	36
  1476  000ECA  010F               	movlb	15	; () banked
  1477  000ECC  6F3A               	movwf	58,b	;volatile
  1478                           
  1479                           ;pin_manager.c: 72: ANSELB = 0x3F;
  1480  000ECE  0E3F               	movlw	63
  1481  000ED0  6F39               	movwf	57,b	;volatile
  1482                           
  1483                           ;pin_manager.c: 73: ANSELA = 0x2F;
  1484  000ED2  0E2F               	movlw	47
  1485  000ED4  6F38               	movwf	56,b	;volatile
  1486                           
  1487                           ;pin_manager.c: 78: WPUB = 0x00;
  1488  000ED6  0E00               	movlw	0
  1489  000ED8  6E61               	movwf	3937,c	;volatile
  1490                           
  1491                           ; BSR set to: 15
  1492                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  1493  000EDA  8EF1               	bsf	intcon2,7,c	;volatile
  1494                           
  1495                           ; BSR set to: 15
  1496  000EDC  0012               	return		;funcret
  1497  000EDE                     __end_of_PIN_MANAGER_Initialize:
  1498                           	opt stack 0
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           intcon	equ	0xFF2
  1506                           intcon2	equ	0xFF1
  1507                           postinc0	equ	0xFEE
  1508                           plusw0	equ	0xFEB
  1509                           wreg	equ	0xFE8
  1510                           postdec1	equ	0xFE5
  1511                           plusw1	equ	0xFE3
  1512                           fsr1l	equ	0xFE1
  1513                           indf2	equ	0xFDF
  1514                           plusw2	equ	0xFDB
  1515                           fsr2h	equ	0xFDA
  1516                           fsr2l	equ	0xFD9
  1517                           status	equ	0xFD8
  1518                           
  1519 ;; *************** function _OSCILLATOR_Initialize *****************
  1520 ;; Defined at:
  1521 ;;		line 120 in file "mcc_generated_files/mcc.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;		None
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;		None
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, status,2
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1535 ;;      Params:         0       0       0       0       0       0       0
  1536 ;;      Locals:         0       0       0       0       0       0       0
  1537 ;;      Temps:          0       0       0       0       0       0       0
  1538 ;;      Totals:         0       0       0       0       0       0       0
  1539 ;;Total ram usage:        0 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    5
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_SYSTEM_Initialize
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text8
  1550  00109A                     __ptext8:
  1551                           	opt stack 0
  1552  00109A                     _OSCILLATOR_Initialize:
  1553                           	opt stack 24
  1554                           
  1555                           ;mcc.c: 123: OSCCON = 0x72;
  1556                           
  1557                           ; BSR set to: 15
  1558                           ;incstack = 0
  1559  00109A  0E72               	movlw	114
  1560  00109C  6ED3               	movwf	4051,c	;volatile
  1561                           
  1562                           ;mcc.c: 125: OSCCON2 = 0x04;
  1563  00109E  0E04               	movlw	4
  1564  0010A0  6ED2               	movwf	4050,c	;volatile
  1565                           
  1566                           ;mcc.c: 127: OSCTUNE = 0x40;
  1567  0010A2  0E40               	movlw	64
  1568  0010A4  6E9B               	movwf	3995,c	;volatile
  1569  0010A6  0012               	return		;funcret
  1570  0010A8                     __end_of_OSCILLATOR_Initialize:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           prodh	equ	0xFF4
  1577                           prodl	equ	0xFF3
  1578                           intcon	equ	0xFF2
  1579                           intcon2	equ	0xFF1
  1580                           postinc0	equ	0xFEE
  1581                           plusw0	equ	0xFEB
  1582                           wreg	equ	0xFE8
  1583                           postdec1	equ	0xFE5
  1584                           plusw1	equ	0xFE3
  1585                           fsr1l	equ	0xFE1
  1586                           indf2	equ	0xFDF
  1587                           plusw2	equ	0xFDB
  1588                           fsr2h	equ	0xFDA
  1589                           fsr2l	equ	0xFD9
  1590                           status	equ	0xFD8
  1591                           
  1592 ;; *************** function _INTERRUPT_Initialize *****************
  1593 ;; Defined at:
  1594 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;		None
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;		None
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		None
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1608 ;;      Params:         0       0       0       0       0       0       0
  1609 ;;      Locals:         0       0       0       0       0       0       0
  1610 ;;      Temps:          0       0       0       0       0       0       0
  1611 ;;      Totals:         0       0       0       0       0       0       0
  1612 ;;Total ram usage:        0 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    5
  1615 ;; This function calls:
  1616 ;;		Nothing
  1617 ;; This function is called by:
  1618 ;;		_SYSTEM_Initialize
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text9
  1623  0011F2                     __ptext9:
  1624                           	opt stack 0
  1625  0011F2                     _INTERRUPT_Initialize:
  1626                           	opt stack 24
  1627                           
  1628                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  1629                           
  1630                           ;incstack = 0
  1631  0011F2  9ED0               	bcf	4048,7,c	;volatile
  1632  0011F4  0012               	return		;funcret
  1633  0011F6                     __end_of_INTERRUPT_Initialize:
  1634                           	opt stack 0
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           prodh	equ	0xFF4
  1640                           prodl	equ	0xFF3
  1641                           intcon	equ	0xFF2
  1642                           intcon2	equ	0xFF1
  1643                           postinc0	equ	0xFEE
  1644                           plusw0	equ	0xFEB
  1645                           wreg	equ	0xFE8
  1646                           postdec1	equ	0xFE5
  1647                           plusw1	equ	0xFE3
  1648                           fsr1l	equ	0xFE1
  1649                           indf2	equ	0xFDF
  1650                           plusw2	equ	0xFDB
  1651                           fsr2h	equ	0xFDA
  1652                           fsr2l	equ	0xFD9
  1653                           status	equ	0xFD8
  1654                           
  1655 ;; *************** function _EUSART1_Initialize *****************
  1656 ;; Defined at:
  1657 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;		None
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;		None
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		wreg, status,2, status,0, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1671 ;;      Params:         0       0       0       0       0       0       0
  1672 ;;      Locals:         0       0       0       0       0       0       0
  1673 ;;      Temps:          0       0       0       0       0       0       0
  1674 ;;      Totals:         0       0       0       0       0       0       0
  1675 ;;Total ram usage:        0 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    6
  1678 ;; This function calls:
  1679 ;;		_EUSART1_SetRxInterruptHandler
  1680 ;;		_EUSART1_SetTxInterruptHandler
  1681 ;; This function is called by:
  1682 ;;		_SYSTEM_Initialize
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text10
  1687  000C40                     __ptext10:
  1688                           	opt stack 0
  1689  000C40                     _EUSART1_Initialize:
  1690                           	opt stack 23
  1691                           
  1692                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  1693                           
  1694                           ;incstack = 0
  1695  000C40  9A9D               	bcf	3997,5,c	;volatile
  1696                           
  1697                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  1698  000C42  989D               	bcf	3997,4,c	;volatile
  1699                           
  1700                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  1701  000C44  0E30               	movlw	low _EUSART1_Transmit_ISR
  1702  000C46  6E3A               	movwf	EUSART1_SetTxInterruptHandler@handler,c
  1703  000C48  0E0E               	movlw	high _EUSART1_Transmit_ISR
  1704  000C4A  6E3B               	movwf	EUSART1_SetTxInterruptHandler@handler+1,c
  1705  000C4C  ECA4  F008         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  1706                           
  1707                           ;eusart1.c: 82: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  1708  000C50  0E5E               	movlw	low _EUSART1_Receive_ISR
  1709  000C52  6E3A               	movwf	EUSART1_SetRxInterruptHandler@handler,c
  1710  000C54  0E0E               	movlw	high _EUSART1_Receive_ISR
  1711  000C56  6E3B               	movwf	EUSART1_SetRxInterruptHandler@handler+1,c
  1712  000C58  ECA9  F008         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  1713                           
  1714                           ;eusart1.c: 87: BAUDCON1 = 0x08;
  1715  000C5C  0E08               	movlw	8
  1716  000C5E  6EB8               	movwf	4024,c	;volatile
  1717                           
  1718                           ;eusart1.c: 90: RCSTA1 = 0x90;
  1719  000C60  0E90               	movlw	144
  1720  000C62  6EAB               	movwf	4011,c	;volatile
  1721                           
  1722                           ;eusart1.c: 93: TXSTA1 = 0x24;
  1723  000C64  0E24               	movlw	36
  1724  000C66  6EAC               	movwf	4012,c	;volatile
  1725                           
  1726                           ;eusart1.c: 96: SPBRG1 = 0x22;
  1727  000C68  0E22               	movlw	34
  1728  000C6A  6EAF               	movwf	4015,c	;volatile
  1729                           
  1730                           ;eusart1.c: 99: SPBRGH1 = 0x00;
  1731  000C6C  0E00               	movlw	0
  1732  000C6E  6EB0               	movwf	4016,c	;volatile
  1733                           
  1734                           ;eusart1.c: 103: eusart1TxHead = 0;
  1735  000C70  0E00               	movlw	0
  1736  000C72  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1737                           
  1738                           ;eusart1.c: 104: eusart1TxTail = 0;
  1739  000C74  0E00               	movlw	0
  1740  000C76  6E1B               	movwf	_eusart1TxTail,c	;volatile
  1741                           
  1742                           ;eusart1.c: 105: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1743  000C78  0E08               	movlw	8
  1744  000C7A  6E4A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1745                           
  1746                           ;eusart1.c: 107: eusart1RxHead = 0;
  1747  000C7C  0E00               	movlw	0
  1748  000C7E  6E1A               	movwf	_eusart1RxHead,c	;volatile
  1749                           
  1750                           ;eusart1.c: 108: eusart1RxTail = 0;
  1751  000C80  0E00               	movlw	0
  1752  000C82  6E19               	movwf	_eusart1RxTail,c	;volatile
  1753                           
  1754                           ;eusart1.c: 109: eusart1RxCount = 0;
  1755  000C84  0E00               	movlw	0
  1756  000C86  6E18               	movwf	_eusart1RxCount,c	;volatile
  1757                           
  1758                           ;eusart1.c: 112: PIE1bits.RC1IE = 1;
  1759  000C88  8A9D               	bsf	3997,5,c	;volatile
  1760  000C8A  0012               	return		;funcret
  1761  000C8C                     __end_of_EUSART1_Initialize:
  1762                           	opt stack 0
  1763                           tblptru	equ	0xFF8
  1764                           tblptrh	equ	0xFF7
  1765                           tblptrl	equ	0xFF6
  1766                           tablat	equ	0xFF5
  1767                           prodh	equ	0xFF4
  1768                           prodl	equ	0xFF3
  1769                           intcon	equ	0xFF2
  1770                           intcon2	equ	0xFF1
  1771                           postinc0	equ	0xFEE
  1772                           plusw0	equ	0xFEB
  1773                           wreg	equ	0xFE8
  1774                           postdec1	equ	0xFE5
  1775                           plusw1	equ	0xFE3
  1776                           fsr1l	equ	0xFE1
  1777                           indf2	equ	0xFDF
  1778                           plusw2	equ	0xFDB
  1779                           fsr2h	equ	0xFDA
  1780                           fsr2l	equ	0xFD9
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  1784 ;; Defined at:
  1785 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1788 ;;		 -> EUSART1_Transmit_ISR(1), 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, status,2, status,0
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1800 ;;      Params:         2       0       0       0       0       0       0
  1801 ;;      Locals:         0       0       0       0       0       0       0
  1802 ;;      Temps:          0       0       0       0       0       0       0
  1803 ;;      Totals:         2       0       0       0       0       0       0
  1804 ;;Total ram usage:        2 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    5
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_EUSART1_Initialize
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text11
  1815  001148                     __ptext11:
  1816                           	opt stack 0
  1817  001148                     _EUSART1_SetTxInterruptHandler:
  1818                           	opt stack 23
  1819                           
  1820                           ;eusart1.c: 223: EUSART1_TxDefaultInterruptHandler = handler;
  1821                           
  1822                           ;incstack = 0
  1823  001148  C03A  F048         	movff	EUSART1_SetTxInterruptHandler@handler,_EUSART1_TxDefaultInterruptHandler
  1824  00114C  C03B  F049         	movff	EUSART1_SetTxInterruptHandler@handler+1,_EUSART1_TxDefaultInterruptHandler+1
  1825  001150  0012               	return		;funcret
  1826  001152                     __end_of_EUSART1_SetTxInterruptHandler:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           intcon	equ	0xFF2
  1835                           intcon2	equ	0xFF1
  1836                           postinc0	equ	0xFEE
  1837                           plusw0	equ	0xFEB
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           plusw1	equ	0xFE3
  1841                           fsr1l	equ	0xFE1
  1842                           indf2	equ	0xFDF
  1843                           plusw2	equ	0xFDB
  1844                           fsr2h	equ	0xFDA
  1845                           fsr2l	equ	0xFD9
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  1849 ;; Defined at:
  1850 ;;		line 226 in file "mcc_generated_files/eusart1.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1853 ;;		 -> EUSART1_Receive_ISR(1), 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1865 ;;      Params:         2       0       0       0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0
  1868 ;;      Totals:         2       0       0       0       0       0       0
  1869 ;;Total ram usage:        2 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    5
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_EUSART1_Initialize
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text12
  1880  001152                     __ptext12:
  1881                           	opt stack 0
  1882  001152                     _EUSART1_SetRxInterruptHandler:
  1883                           	opt stack 23
  1884                           
  1885                           ;eusart1.c: 227: EUSART1_RxDefaultInterruptHandler = handler;
  1886                           
  1887                           ;incstack = 0
  1888  001152  C03A  F046         	movff	EUSART1_SetRxInterruptHandler@handler,_EUSART1_RxDefaultInterruptHandler
  1889  001156  C03B  F047         	movff	EUSART1_SetRxInterruptHandler@handler+1,_EUSART1_RxDefaultInterruptHandler+1
  1890  00115A  0012               	return		;funcret
  1891  00115C                     __end_of_EUSART1_SetRxInterruptHandler:
  1892                           	opt stack 0
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           prodh	equ	0xFF4
  1898                           prodl	equ	0xFF3
  1899                           intcon	equ	0xFF2
  1900                           intcon2	equ	0xFF1
  1901                           postinc0	equ	0xFEE
  1902                           plusw0	equ	0xFEB
  1903                           wreg	equ	0xFE8
  1904                           postdec1	equ	0xFE5
  1905                           plusw1	equ	0xFE3
  1906                           fsr1l	equ	0xFE1
  1907                           indf2	equ	0xFDF
  1908                           plusw2	equ	0xFDB
  1909                           fsr2h	equ	0xFDA
  1910                           fsr2l	equ	0xFD9
  1911                           status	equ	0xFD8
  1912                           
  1913 ;; *************** function _ACCELEROMETER_Initialize *****************
  1914 ;; Defined at:
  1915 ;;		line 4 in file "accelerometer.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1929 ;;      Params:         0       0       0       0       0       0       0
  1930 ;;      Locals:         0       0       0       0       0       0       0
  1931 ;;      Temps:          2       0       0       0       0       0       0
  1932 ;;      Totals:         2       0       0       0       0       0       0
  1933 ;;Total ram usage:        2 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:   13
  1936 ;; This function calls:
  1937 ;;		_read_register
  1938 ;;		_write_register
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text13
  1945  0009BC                     __ptext13:
  1946                           	opt stack 0
  1947  0009BC                     _ACCELEROMETER_Initialize:
  1948                           	opt stack 17
  1949                           
  1950                           ;accelerometer.c: 6: write_register(0x2B, 0x40);
  1951                           
  1952                           ;incstack = 0
  1953  0009BC  0E40               	movlw	64
  1954  0009BE  6E3F               	movwf	write_register@data,c
  1955  0009C0  0E2B               	movlw	43
  1956  0009C2  ECE8  F006         	call	_write_register
  1957                           
  1958                           ;accelerometer.c: 8: _delay((unsigned long)((100)*(16000000/4000.0)));
  1959  0009C6  0E03               	movlw	3
  1960  0009C8  6E42               	movwf	(??_ACCELEROMETER_Initialize+1)& (0+255),c
  1961  0009CA  0E08               	movlw	8
  1962  0009CC  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1963  0009CE  0E77               	movlw	119
  1964  0009D0                     u1727:
  1965  0009D0  2EE8               	decfsz	wreg,f,c
  1966  0009D2  D7FE               	bra	u1727
  1967  0009D4  2E41               	decfsz	??_ACCELEROMETER_Initialize& (0+255),f,c
  1968  0009D6  D7FC               	bra	u1727
  1969  0009D8  2E42               	decfsz	(??_ACCELEROMETER_Initialize+1)& (0+255),f,c
  1970  0009DA  D7FA               	bra	u1727
  1971  0009DC  F000               	nop	
  1972  0009DE  0E2B               	movlw	43
  1973  0009E0  EC01  F007         	call	_read_register
  1974  0009E4  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1975  0009E6  BC41               	btfsc	??_ACCELEROMETER_Initialize,6,c
  1976  0009E8  D7FA               	goto	l636
  1977                           
  1978                           ;accelerometer.c: 14: write_register(0x0E, MMA8451_RANGE_4_G);
  1979  0009EA  0E01               	movlw	1
  1980  0009EC  6E3F               	movwf	write_register@data,c
  1981  0009EE  0E0E               	movlw	14
  1982  0009F0  ECE8  F006         	call	_write_register
  1983                           
  1984                           ;accelerometer.c: 16: write_register(0x2B, 0x02);
  1985  0009F4  0E02               	movlw	2
  1986  0009F6  6E3F               	movwf	write_register@data,c
  1987  0009F8  0E2B               	movlw	43
  1988  0009FA  ECE8  F006         	call	_write_register
  1989                           
  1990                           ;accelerometer.c: 18: write_register(0x2D, 0x01);
  1991  0009FE  0E01               	movlw	1
  1992  000A00  6E3F               	movwf	write_register@data,c
  1993  000A02  0E2D               	movlw	45
  1994  000A04  ECE8  F006         	call	_write_register
  1995                           
  1996                           ;accelerometer.c: 19: write_register(0x2E, 0x01);
  1997  000A08  0E01               	movlw	1
  1998  000A0A  6E3F               	movwf	write_register@data,c
  1999  000A0C  0E2E               	movlw	46
  2000  000A0E  ECE8  F006         	call	_write_register
  2001                           
  2002                           ;accelerometer.c: 22: write_register(0x11, 0x40);
  2003  000A12  0E40               	movlw	64
  2004  000A14  6E3F               	movwf	write_register@data,c
  2005  000A16  0E11               	movlw	17
  2006  000A18  ECE8  F006         	call	_write_register
  2007                           
  2008                           ;accelerometer.c: 25: write_register(0x2A, 0x01 | 0x04);
  2009  000A1C  0E05               	movlw	5
  2010  000A1E  6E3F               	movwf	write_register@data,c
  2011  000A20  0E2A               	movlw	42
  2012  000A22  ECE8  F006         	call	_write_register
  2013  000A26  0012               	return		;funcret
  2014  000A28                     __end_of_ACCELEROMETER_Initialize:
  2015                           	opt stack 0
  2016                           tblptru	equ	0xFF8
  2017                           tblptrh	equ	0xFF7
  2018                           tblptrl	equ	0xFF6
  2019                           tablat	equ	0xFF5
  2020                           prodh	equ	0xFF4
  2021                           prodl	equ	0xFF3
  2022                           intcon	equ	0xFF2
  2023                           intcon2	equ	0xFF1
  2024                           postinc0	equ	0xFEE
  2025                           plusw0	equ	0xFEB
  2026                           wreg	equ	0xFE8
  2027                           postdec1	equ	0xFE5
  2028                           plusw1	equ	0xFE3
  2029                           fsr1l	equ	0xFE1
  2030                           indf2	equ	0xFDF
  2031                           plusw2	equ	0xFDB
  2032                           fsr2h	equ	0xFDA
  2033                           fsr2l	equ	0xFD9
  2034                           status	equ	0xFD8
  2035                           
  2036 ;; *************** function _write_register *****************
  2037 ;; Defined at:
  2038 ;;		line 29 in file "accelerometer.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;  reg             1    wreg     unsigned char 
  2041 ;;  data            1   25[COMRAM] unsigned char 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  reg             1   26[COMRAM] unsigned char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2053 ;;      Params:         1       0       0       0       0       0       0
  2054 ;;      Locals:         1       0       0       0       0       0       0
  2055 ;;      Temps:          0       0       0       0       0       0       0
  2056 ;;      Totals:         2       0       0       0       0       0       0
  2057 ;;Total ram usage:        2 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:   12
  2060 ;; This function calls:
  2061 ;;		_i2c_close
  2062 ;;		_i2c_masterWrite
  2063 ;;		_i2c_open
  2064 ;;		_i2c_setBuffer
  2065 ;; This function is called by:
  2066 ;;		_ACCELEROMETER_Initialize
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text14
  2071  000DD0                     __ptext14:
  2072                           	opt stack 0
  2073  000DD0                     _write_register:
  2074                           	opt stack 17
  2075                           
  2076                           ;incstack = 0
  2077                           ;write_register@reg stored from wreg
  2078  000DD0  6E40               	movwf	write_register@reg,c
  2079                           
  2080                           ;accelerometer.c: 30: static i2c_error_t status;
  2081                           ;accelerometer.c: 31: static uint8_t buffer[2];
  2082                           ;accelerometer.c: 34: buffer[0] = reg;
  2083  000DD2  C040  F023         	movff	write_register@reg,write_register@buffer
  2084                           
  2085                           ;accelerometer.c: 35: buffer[1] = data;
  2086  000DD6  C03F  F024         	movff	write_register@data,write_register@buffer+1
  2087                           
  2088                           ;accelerometer.c: 36: i2c_open(0x1D);
  2089  000DDA  0E1D               	movlw	29
  2090  000DDC  EC02  F003         	call	_i2c_open
  2091                           
  2092                           ;accelerometer.c: 37: i2c_setBuffer(buffer, 2);
  2093  000DE0  0E23               	movlw	low write_register@buffer
  2094  000DE2  6E3A               	movwf	i2c_setBuffer@buffer,c
  2095  000DE4  0E00               	movlw	high write_register@buffer
  2096  000DE6  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2097  000DE8  0E00               	movlw	0
  2098  000DEA  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2099  000DEC  0E02               	movlw	2
  2100  000DEE  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2101  000DF0  EC90  F007         	call	_i2c_setBuffer	;wreg free
  2102                           
  2103                           ;accelerometer.c: 40: status = i2c_masterWrite();
  2104  000DF4  ECC2  F008         	call	_i2c_masterWrite	;wreg free
  2105  000DF8  6E17               	movwf	write_register@status,c
  2106                           
  2107                           ;accelerometer.c: 41: status = i2c_close();
  2108  000DFA  EC81  F007         	call	_i2c_close	;wreg free
  2109  000DFE  6E17               	movwf	write_register@status,c
  2110  000E00  0012               	return		;funcret
  2111  000E02                     __end_of_write_register:
  2112                           	opt stack 0
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           prodh	equ	0xFF4
  2118                           prodl	equ	0xFF3
  2119                           intcon	equ	0xFF2
  2120                           intcon2	equ	0xFF1
  2121                           postinc0	equ	0xFEE
  2122                           plusw0	equ	0xFEB
  2123                           wreg	equ	0xFE8
  2124                           postdec1	equ	0xFE5
  2125                           plusw1	equ	0xFE3
  2126                           fsr1l	equ	0xFE1
  2127                           indf2	equ	0xFDF
  2128                           plusw2	equ	0xFDB
  2129                           fsr2h	equ	0xFDA
  2130                           fsr2l	equ	0xFD9
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _i2c_masterWrite *****************
  2134 ;; Defined at:
  2135 ;;		line 264 in file "mcc_generated_files/drivers/i2c_master.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      enum E6837
  2142 ;; Registers used:
  2143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2149 ;;      Params:         0       0       0       0       0       0       0
  2150 ;;      Locals:         0       0       0       0       0       0       0
  2151 ;;      Temps:          0       0       0       0       0       0       0
  2152 ;;      Totals:         0       0       0       0       0       0       0
  2153 ;;Total ram usage:        0 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:   11
  2156 ;; This function calls:
  2157 ;;		_i2c_masterOperation
  2158 ;; This function is called by:
  2159 ;;		_write_register
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text15
  2164  001184                     __ptext15:
  2165                           	opt stack 0
  2166  001184                     _i2c_masterWrite:
  2167                           	opt stack 17
  2168                           
  2169                           ;i2c_master.c: 266: return i2c_masterOperation(OPERATIONWRITE);
  2170                           
  2171                           ;incstack = 0
  2172  001184  0E02               	movlw	2
  2173  001186  EC46  F006         	call	_i2c_masterOperation
  2174  00118A  0012               	return	
  2175  00118C                     __end_of_i2c_masterWrite:
  2176                           	opt stack 0
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           prodh	equ	0xFF4
  2182                           prodl	equ	0xFF3
  2183                           intcon	equ	0xFF2
  2184                           intcon2	equ	0xFF1
  2185                           postinc0	equ	0xFEE
  2186                           plusw0	equ	0xFEB
  2187                           wreg	equ	0xFE8
  2188                           postdec1	equ	0xFE5
  2189                           plusw1	equ	0xFE3
  2190                           fsr1l	equ	0xFE1
  2191                           indf2	equ	0xFDF
  2192                           plusw2	equ	0xFDB
  2193                           fsr2h	equ	0xFDA
  2194                           fsr2l	equ	0xFD9
  2195                           status	equ	0xFD8
  2196                           
  2197 ;; *************** function _read_register *****************
  2198 ;; Defined at:
  2199 ;;		line 46 in file "accelerometer.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  reg             1    wreg     unsigned char 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  reg             1   26[COMRAM] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  1    wreg      unsigned char 
  2206 ;; Registers used:
  2207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2213 ;;      Params:         0       0       0       0       0       0       0
  2214 ;;      Locals:         1       0       0       0       0       0       0
  2215 ;;      Temps:          0       0       0       0       0       0       0
  2216 ;;      Totals:         1       0       0       0       0       0       0
  2217 ;;Total ram usage:        1 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:   12
  2220 ;; This function calls:
  2221 ;;		_i2c_close
  2222 ;;		_i2c_masterAccelRead
  2223 ;;		_i2c_open
  2224 ;;		_i2c_setBuffer
  2225 ;; This function is called by:
  2226 ;;		_ACCELEROMETER_Initialize
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text16
  2231  000E02                     __ptext16:
  2232                           	opt stack 0
  2233  000E02                     _read_register:
  2234                           	opt stack 17
  2235                           
  2236                           ;incstack = 0
  2237                           ;read_register@reg stored from wreg
  2238  000E02  6E40               	movwf	read_register@reg,c
  2239                           
  2240                           ;accelerometer.c: 47: static i2c_error_t status;
  2241                           ;accelerometer.c: 48: static volatile uint8_t receivebuffer[1];
  2242                           ;accelerometer.c: 51: i2c_open(0x1D);
  2243  000E04  0E1D               	movlw	29
  2244  000E06  EC02  F003         	call	_i2c_open
  2245                           
  2246                           ;accelerometer.c: 55: i2c_setBuffer(receivebuffer, 1);
  2247  000E0A  0E25               	movlw	low read_register@receivebuffer
  2248  000E0C  6E3A               	movwf	i2c_setBuffer@buffer,c
  2249  000E0E  0E00               	movlw	high read_register@receivebuffer
  2250  000E10  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2251  000E12  0E00               	movlw	0
  2252  000E14  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2253  000E16  0E01               	movlw	1
  2254  000E18  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2255  000E1A  EC90  F007         	call	_i2c_setBuffer	;wreg free
  2256                           
  2257                           ;accelerometer.c: 58: status = i2c_masterAccelRead(reg);
  2258  000E1E  5040               	movf	read_register@reg,w,c
  2259  000E20  EC54  F008         	call	_i2c_masterAccelRead
  2260  000E24  6E16               	movwf	read_register@status,c
  2261                           
  2262                           ;accelerometer.c: 61: status = i2c_close();
  2263  000E26  EC81  F007         	call	_i2c_close	;wreg free
  2264  000E2A  6E16               	movwf	read_register@status,c
  2265                           
  2266                           ;accelerometer.c: 63: return receivebuffer[0];
  2267  000E2C  5025               	movf	read_register@receivebuffer,w,c	;volatile
  2268  000E2E  0012               	return	
  2269  000E30                     __end_of_read_register:
  2270                           	opt stack 0
  2271                           tblptru	equ	0xFF8
  2272                           tblptrh	equ	0xFF7
  2273                           tblptrl	equ	0xFF6
  2274                           tablat	equ	0xFF5
  2275                           prodh	equ	0xFF4
  2276                           prodl	equ	0xFF3
  2277                           intcon	equ	0xFF2
  2278                           intcon2	equ	0xFF1
  2279                           postinc0	equ	0xFEE
  2280                           plusw0	equ	0xFEB
  2281                           wreg	equ	0xFE8
  2282                           postdec1	equ	0xFE5
  2283                           plusw1	equ	0xFE3
  2284                           fsr1l	equ	0xFE1
  2285                           indf2	equ	0xFDF
  2286                           plusw2	equ	0xFDB
  2287                           fsr2h	equ	0xFDA
  2288                           fsr2l	equ	0xFD9
  2289                           status	equ	0xFD8
  2290                           
  2291 ;; *************** function _i2c_setBuffer *****************
  2292 ;; Defined at:
  2293 ;;		line 192 in file "mcc_generated_files/drivers/i2c_master.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  buffer          2   20[COMRAM] PTR void 
  2296 ;;		 -> read_xyzvalues@readbuffer(6), read_register@receivebuffer(1), write_register@buffer(2), 
  2297 ;;  bufferSize      2   22[COMRAM] unsigned int 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2309 ;;      Params:         4       0       0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0
  2312 ;;      Totals:         4       0       0       0       0       0       0
  2313 ;;Total ram usage:        4 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_write_register
  2320 ;;		_read_register
  2321 ;;		_read_xyzvalues
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text17
  2326  000F20                     __ptext17:
  2327                           	opt stack 0
  2328  000F20                     _i2c_setBuffer:
  2329                           	opt stack 24
  2330                           
  2331                           ;i2c_master.c: 194: if(i2c_status.bufferFree)
  2332                           
  2333                           ;incstack = 0
  2334  000F20  0100               	movlb	0	; () banked
  2335  000F22  A59C               	btfss	_i2c_status& (0+255),2,b
  2336  000F24  0012               	return	
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;i2c_master.c: 195: {
  2340                           ;i2c_master.c: 196: i2c_status.data_ptr = buffer;
  2341  000F26  C03A  F09E         	movff	i2c_setBuffer@buffer,_i2c_status+2
  2342  000F2A  C03B  F09F         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;i2c_master.c: 197: i2c_status.data_length = bufferSize;
  2346  000F2E  C03C  F0A0         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  2347  000F32  C03D  F0A1         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;i2c_master.c: 198: i2c_status.bufferFree = 0;
  2351  000F36  959C               	bcf	_i2c_status& (0+255),2,b
  2352  000F38  0012               	return	
  2353  000F3A                     __end_of_i2c_setBuffer:
  2354                           	opt stack 0
  2355                           tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           prodh	equ	0xFF4
  2360                           prodl	equ	0xFF3
  2361                           intcon	equ	0xFF2
  2362                           intcon2	equ	0xFF1
  2363                           postinc0	equ	0xFEE
  2364                           plusw0	equ	0xFEB
  2365                           wreg	equ	0xFE8
  2366                           postdec1	equ	0xFE5
  2367                           plusw1	equ	0xFE3
  2368                           fsr1l	equ	0xFE1
  2369                           indf2	equ	0xFDF
  2370                           plusw2	equ	0xFDB
  2371                           fsr2h	equ	0xFDA
  2372                           fsr2l	equ	0xFD9
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function _i2c_open *****************
  2376 ;; Defined at:
  2377 ;;		line 124 in file "mcc_generated_files/drivers/i2c_master.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  address         1    wreg     unsigned char 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;  address         1   23[COMRAM] unsigned char 
  2382 ;;  ret             1   22[COMRAM] enum E6837
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      enum E6837
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2392 ;;      Params:         0       0       0       0       0       0       0
  2393 ;;      Locals:         2       0       0       0       0       0       0
  2394 ;;      Temps:          0       0       0       0       0       0       0
  2395 ;;      Totals:         2       0       0       0       0       0       0
  2396 ;;Total ram usage:        2 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    6
  2399 ;; This function calls:
  2400 ;;		_i2c1_driver_open
  2401 ;;		_i2c1_driver_setBusCollisionISR
  2402 ;;		_i2c1_driver_setI2cISR
  2403 ;;		_mssp1_clearIRQ
  2404 ;; This function is called by:
  2405 ;;		_write_register
  2406 ;;		_read_register
  2407 ;;		_read_xyzvalues
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text18
  2412  000604                     __ptext18:
  2413                           	opt stack 0
  2414  000604                     _i2c_open:
  2415                           	opt stack 23
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;incstack = 0
  2419                           ;i2c_open@address stored from wreg
  2420  000604  6E3D               	movwf	i2c_open@address,c
  2421                           
  2422                           ;i2c_master.c: 126: i2c_error_t ret = I2C_BUSY;
  2423  000606  0E01               	movlw	1
  2424  000608  6E3C               	movwf	i2c_open@ret,c
  2425                           
  2426                           ;i2c_master.c: 128: if(!i2c_status.inUse)
  2427  00060A  0100               	movlb	0	; () banked
  2428  00060C  B39C               	btfsc	_i2c_status& (0+255),1,b
  2429  00060E  0012               	return	
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;i2c_master.c: 129: {
  2433                           ;i2c_master.c: 130: i2c_status.address = address;
  2434  000610  C03D  F09D         	movff	i2c_open@address,_i2c_status+1
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;i2c_master.c: 131: i2c_status.busy = 0;
  2438  000614  919C               	bcf	_i2c_status& (0+255),0,b
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;i2c_master.c: 132: i2c_status.inUse = 1;
  2442  000616  839C               	bsf	_i2c_status& (0+255),1,b
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;i2c_master.c: 133: i2c_status.addressNACKCheck = 0;
  2446  000618  979C               	bcf	_i2c_status& (0+255),3,b
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;i2c_master.c: 134: i2c_status.state = I2C_RESET;
  2450  00061A  0E0E               	movlw	14
  2451  00061C  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;i2c_master.c: 135: i2c_status.time_out_value = 500;
  2455  00061E  0E01               	movlw	1
  2456  000620  6FA5               	movwf	(_i2c_status+9)& (0+255),b
  2457  000622  0EF4               	movlw	244
  2458  000624  6FA4               	movwf	(_i2c_status+8)& (0+255),b
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;i2c_master.c: 136: i2c_status.bufferFree = 1;
  2462  000626  859C               	bsf	_i2c_status& (0+255),2,b
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  2466  000628  0E7A               	movlw	low _returnStop
  2467  00062A  6FA8               	movwf	(_i2c_status+12)& (0+255),b
  2468  00062C  0E11               	movlw	high _returnStop
  2469  00062E  6FA9               	movwf	(_i2c_status+13)& (0+255),b
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  2473  000630  0E00               	movlw	0
  2474  000632  6FB4               	movwf	(_i2c_status+24)& (0+255),b
  2475  000634  0E00               	movlw	0
  2476  000636  6FB5               	movwf	(_i2c_status+25)& (0+255),b
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;i2c_master.c: 141: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  2480  000638  0E7A               	movlw	low _returnStop
  2481  00063A  6FAA               	movwf	(_i2c_status+14)& (0+255),b
  2482  00063C  0E11               	movlw	high _returnStop
  2483  00063E  6FAB               	movwf	(_i2c_status+15)& (0+255),b
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;i2c_master.c: 142: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  2487  000640  0E00               	movlw	0
  2488  000642  6FB6               	movwf	(_i2c_status+26)& (0+255),b
  2489  000644  0E00               	movlw	0
  2490  000646  6FB7               	movwf	(_i2c_status+27)& (0+255),b
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;i2c_master.c: 143: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  2494  000648  0E7A               	movlw	low _returnStop
  2495  00064A  6FAC               	movwf	(_i2c_status+16)& (0+255),b
  2496  00064C  0E11               	movlw	high _returnStop
  2497  00064E  6FAD               	movwf	(_i2c_status+17)& (0+255),b
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;i2c_master.c: 144: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  2501  000650  0E00               	movlw	0
  2502  000652  6FB8               	movwf	(_i2c_status+28)& (0+255),b
  2503  000654  0E00               	movlw	0
  2504  000656  6FB9               	movwf	(_i2c_status+29)& (0+255),b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;i2c_master.c: 145: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  2508  000658  0E7A               	movlw	low _returnStop
  2509  00065A  6FAE               	movwf	(_i2c_status+18)& (0+255),b
  2510  00065C  0E11               	movlw	high _returnStop
  2511  00065E  6FAF               	movwf	(_i2c_status+19)& (0+255),b
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;i2c_master.c: 146: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  2515  000660  0E00               	movlw	0
  2516  000662  6FBA               	movwf	(_i2c_status+30)& (0+255),b
  2517  000664  0E00               	movlw	0
  2518  000666  6FBB               	movwf	(_i2c_status+31)& (0+255),b
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;i2c_master.c: 147: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  2522  000668  0E70               	movlw	low _returnReset
  2523  00066A  6FB0               	movwf	(_i2c_status+20)& (0+255),b
  2524  00066C  0E11               	movlw	high _returnReset
  2525  00066E  6FB1               	movwf	(_i2c_status+21)& (0+255),b
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;i2c_master.c: 148: i2c_status.callbackPayload[i2c_timeOut] = (0);
  2529  000670  0E00               	movlw	0
  2530  000672  6FBC               	movwf	(_i2c_status+32)& (0+255),b
  2531  000674  0E00               	movlw	0
  2532  000676  6FBD               	movwf	(_i2c_status+33)& (0+255),b
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;i2c_master.c: 150: i2c1_driver_open();
  2536  000678  ECAA  F007         	call	_i2c1_driver_open	;wreg free
  2537                           
  2538                           ;i2c_master.c: 151: mssp1_clearIRQ();
  2539  00067C  EC09  F009         	call	_mssp1_clearIRQ	;wreg free
  2540                           
  2541                           ;i2c_master.c: 153: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  2542  000680  0EEC               	movlw	low _i2c_busCollisionISR
  2543  000682  6E3A               	movwf	i2c1_driver_setBusCollisionISR@f,c
  2544  000684  0E11               	movlw	high _i2c_busCollisionISR
  2545  000686  6E3B               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  2546  000688  ECB3  F008         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  2547                           
  2548                           ;i2c_master.c: 154: i2c1_driver_setI2cISR(i2c_ISR);
  2549  00068C  0EA4               	movlw	low _i2c_ISR
  2550  00068E  6E3A               	movwf	i2c1_driver_setI2cISR@f,c
  2551  000690  0E0B               	movlw	high _i2c_ISR
  2552  000692  6E3B               	movwf	i2c1_driver_setI2cISR@f+1,c
  2553  000694  ECAE  F008         	call	_i2c1_driver_setI2cISR	;wreg free
  2554                           
  2555                           ;i2c_master.c: 159: ret = I2C_NOERR;
  2556  000698  0E00               	movlw	0
  2557  00069A  6E3C               	movwf	i2c_open@ret,c
  2558  00069C  0012               	return	
  2559  00069E                     __end_of_i2c_open:
  2560                           	opt stack 0
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           prodh	equ	0xFF4
  2566                           prodl	equ	0xFF3
  2567                           intcon	equ	0xFF2
  2568                           intcon2	equ	0xFF1
  2569                           postinc0	equ	0xFEE
  2570                           plusw0	equ	0xFEB
  2571                           wreg	equ	0xFE8
  2572                           postdec1	equ	0xFE5
  2573                           plusw1	equ	0xFE3
  2574                           fsr1l	equ	0xFE1
  2575                           indf2	equ	0xFDF
  2576                           plusw2	equ	0xFDB
  2577                           fsr2h	equ	0xFDA
  2578                           fsr2l	equ	0xFD9
  2579                           status	equ	0xFD8
  2580                           
  2581 ;; *************** function _i2c1_driver_setI2cISR *****************
  2582 ;; Defined at:
  2583 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  f               2   20[COMRAM] PTR FTN()void 
  2586 ;;		 -> i2c_ISR(1), 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;		None
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2598 ;;      Params:         2       0       0       0       0       0       0
  2599 ;;      Locals:         0       0       0       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0
  2601 ;;      Totals:         2       0       0       0       0       0       0
  2602 ;;Total ram usage:        2 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    5
  2605 ;; This function calls:
  2606 ;;		Nothing
  2607 ;; This function is called by:
  2608 ;;		_i2c_open
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text19
  2613  00115C                     __ptext19:
  2614                           	opt stack 0
  2615  00115C                     _i2c1_driver_setI2cISR:
  2616                           	opt stack 23
  2617                           
  2618                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  2619                           
  2620                           ;incstack = 0
  2621  00115C  C03A  F011         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  2622  001160  C03B  F012         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  2623  001164  0012               	return		;funcret
  2624  001166                     __end_of_i2c1_driver_setI2cISR:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodh	equ	0xFF4
  2631                           prodl	equ	0xFF3
  2632                           intcon	equ	0xFF2
  2633                           intcon2	equ	0xFF1
  2634                           postinc0	equ	0xFEE
  2635                           plusw0	equ	0xFEB
  2636                           wreg	equ	0xFE8
  2637                           postdec1	equ	0xFE5
  2638                           plusw1	equ	0xFE3
  2639                           fsr1l	equ	0xFE1
  2640                           indf2	equ	0xFDF
  2641                           plusw2	equ	0xFDB
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  2647 ;; Defined at:
  2648 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  f               2   20[COMRAM] PTR FTN()void 
  2651 ;;		 -> i2c_busCollisionISR(1), 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;		None
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      void 
  2656 ;; Registers used:
  2657 ;;		wreg, status,2, status,0
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2663 ;;      Params:         2       0       0       0       0       0       0
  2664 ;;      Locals:         0       0       0       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0       0
  2666 ;;      Totals:         2       0       0       0       0       0       0
  2667 ;;Total ram usage:        2 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    5
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_i2c_open
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text20
  2678  001166                     __ptext20:
  2679                           	opt stack 0
  2680  001166                     _i2c1_driver_setBusCollisionISR:
  2681                           	opt stack 23
  2682                           
  2683                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  2684                           
  2685                           ;incstack = 0
  2686  001166  C03A  F013         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  2687  00116A  C03B  F014         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  2688  00116E  0012               	return		;funcret
  2689  001170                     __end_of_i2c1_driver_setBusCollisionISR:
  2690                           	opt stack 0
  2691                           tblptru	equ	0xFF8
  2692                           tblptrh	equ	0xFF7
  2693                           tblptrl	equ	0xFF6
  2694                           tablat	equ	0xFF5
  2695                           prodh	equ	0xFF4
  2696                           prodl	equ	0xFF3
  2697                           intcon	equ	0xFF2
  2698                           intcon2	equ	0xFF1
  2699                           postinc0	equ	0xFEE
  2700                           plusw0	equ	0xFEB
  2701                           wreg	equ	0xFE8
  2702                           postdec1	equ	0xFE5
  2703                           plusw1	equ	0xFE3
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           plusw2	equ	0xFDB
  2707                           fsr2h	equ	0xFDA
  2708                           fsr2l	equ	0xFD9
  2709                           status	equ	0xFD8
  2710                           
  2711 ;; *************** function _i2c1_driver_open *****************
  2712 ;; Defined at:
  2713 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;		None
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;		None
  2718 ;; Return value:  Size  Location     Type
  2719 ;;		None               void
  2720 ;; Registers used:
  2721 ;;		wreg, status,2
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2727 ;;      Params:         0       0       0       0       0       0       0
  2728 ;;      Locals:         0       0       0       0       0       0       0
  2729 ;;      Temps:          0       0       0       0       0       0       0
  2730 ;;      Totals:         0       0       0       0       0       0       0
  2731 ;;Total ram usage:        0 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    5
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_i2c_open
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text21
  2742  000F54                     __ptext21:
  2743                           	opt stack 0
  2744  000F54                     _i2c1_driver_open:
  2745                           	opt stack 23
  2746                           
  2747                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  2748                           
  2749                           ;incstack = 0
  2750  000F54  BAC6               	btfsc	4038,5,c	;volatile
  2751  000F56  0012               	return	
  2752                           
  2753                           ;i2c1_driver.c: 86: {
  2754                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  2755  000F58  0E00               	movlw	0
  2756  000F5A  6EC7               	movwf	4039,c	;volatile
  2757                           
  2758                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  2759  000F5C  0E28               	movlw	40
  2760  000F5E  6EC6               	movwf	4038,c	;volatile
  2761                           
  2762                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  2763  000F60  0E00               	movlw	0
  2764  000F62  6EC5               	movwf	4037,c	;volatile
  2765                           
  2766                           ;i2c1_driver.c: 90: SSP1ADD = 0x27;
  2767  000F64  0E27               	movlw	39
  2768  000F66  6EC8               	movwf	4040,c	;volatile
  2769                           
  2770                           ;i2c1_driver.c: 93: else
  2771                           ;i2c1_driver.c: 94: return 0;
  2772                           ;	Return value of _i2c1_driver_open is never used
  2773                           
  2774                           ;i2c1_driver.c: 92: }
  2775                           
  2776                           ;i2c1_driver.c: 91: return 1;
  2777                           ;	Return value of _i2c1_driver_open is never used
  2778  000F68  0012               	return	
  2779  000F6A                     __end_of_i2c1_driver_open:
  2780                           	opt stack 0
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           prodh	equ	0xFF4
  2786                           prodl	equ	0xFF3
  2787                           intcon	equ	0xFF2
  2788                           intcon2	equ	0xFF1
  2789                           postinc0	equ	0xFEE
  2790                           plusw0	equ	0xFEB
  2791                           wreg	equ	0xFE8
  2792                           postdec1	equ	0xFE5
  2793                           plusw1	equ	0xFE3
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           plusw2	equ	0xFDB
  2797                           fsr2h	equ	0xFDA
  2798                           fsr2l	equ	0xFD9
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _i2c_masterAccelRead *****************
  2802 ;; Defined at:
  2803 ;;		line 249 in file "mcc_generated_files/drivers/i2c_master.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;  reg             1    wreg     unsigned char 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  reg             1   25[COMRAM] unsigned char 
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      enum E6837
  2810 ;; Registers used:
  2811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2817 ;;      Params:         0       0       0       0       0       0       0
  2818 ;;      Locals:         1       0       0       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0       0       0
  2820 ;;      Totals:         1       0       0       0       0       0       0
  2821 ;;Total ram usage:        1 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:   11
  2824 ;; This function calls:
  2825 ;;		_i2c_masterOperation
  2826 ;; This function is called by:
  2827 ;;		_read_register
  2828 ;;		_read_xyzvalues
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text22
  2833  0010A8                     __ptext22:
  2834                           	opt stack 0
  2835  0010A8                     _i2c_masterAccelRead:
  2836                           	opt stack 18
  2837                           
  2838                           ;incstack = 0
  2839                           ;i2c_masterAccelRead@reg stored from wreg
  2840  0010A8  6E3F               	movwf	i2c_masterAccelRead@reg,c
  2841                           
  2842                           ;i2c_master.c: 252: i2c_status.register_address = reg;
  2843  0010AA  C03F  F0C0         	movff	i2c_masterAccelRead@reg,_i2c_status+36
  2844                           
  2845                           ;i2c_master.c: 254: return i2c_masterOperation(OPERATIONACCELREAD);
  2846  0010AE  0E01               	movlw	1
  2847  0010B0  EC46  F006         	call	_i2c_masterOperation
  2848  0010B4  0012               	return	
  2849  0010B6                     __end_of_i2c_masterAccelRead:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           prodh	equ	0xFF4
  2856                           prodl	equ	0xFF3
  2857                           intcon	equ	0xFF2
  2858                           intcon2	equ	0xFF1
  2859                           postinc0	equ	0xFEE
  2860                           plusw0	equ	0xFEB
  2861                           wreg	equ	0xFE8
  2862                           postdec1	equ	0xFE5
  2863                           plusw1	equ	0xFE3
  2864                           fsr1l	equ	0xFE1
  2865                           indf2	equ	0xFDF
  2866                           plusw2	equ	0xFDB
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _i2c_masterOperation *****************
  2872 ;; Defined at:
  2873 ;;		line 210 in file "mcc_generated_files/drivers/i2c_master.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  operation       1    wreg     enum E6863
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  operation       1   23[COMRAM] enum E6863
  2878 ;;  ret             1   24[COMRAM] enum E6837
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      enum E6837
  2881 ;; Registers used:
  2882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2888 ;;      Params:         0       0       0       0       0       0       0
  2889 ;;      Locals:         2       0       0       0       0       0       0
  2890 ;;      Temps:          0       0       0       0       0       0       0
  2891 ;;      Totals:         2       0       0       0       0       0       0
  2892 ;;Total ram usage:        2 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:   10
  2895 ;; This function calls:
  2896 ;;		_i2c1_driver_start
  2897 ;;		_i2c_poller
  2898 ;;		_mssp1_IRQisEnabled
  2899 ;; This function is called by:
  2900 ;;		_i2c_masterAccelRead
  2901 ;;		_i2c_masterWrite
  2902 ;;		_i2c_masterRead
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text23
  2907  000C8C                     __ptext23:
  2908                           	opt stack 0
  2909  000C8C                     _i2c_masterOperation:
  2910                           	opt stack 18
  2911                           
  2912                           ;incstack = 0
  2913                           ;i2c_masterOperation@operation stored from wreg
  2914  000C8C  6E3D               	movwf	i2c_masterOperation@operation,c
  2915                           
  2916                           ;i2c_master.c: 212: i2c_error_t ret = I2C_BUSY;
  2917  000C8E  0E01               	movlw	1
  2918  000C90  6E3E               	movwf	i2c_masterOperation@ret,c
  2919                           
  2920                           ;i2c_master.c: 213: if(!i2c_status.busy)
  2921  000C92  0100               	movlb	0	; () banked
  2922  000C94  B19C               	btfsc	_i2c_status& (0+255),0,b
  2923  000C96  D01C               	goto	l100
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;i2c_master.c: 214: {
  2927                           ;i2c_master.c: 215: i2c_status.busy = 1;
  2928  000C98  819C               	bsf	_i2c_status& (0+255),0,b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;i2c_master.c: 216: ret = I2C_NOERR;
  2932  000C9A  0E00               	movlw	0
  2933  000C9C  6E3E               	movwf	i2c_masterOperation@ret,c
  2934                           
  2935                           ;i2c_master.c: 218: switch(operation) {
  2936  000C9E  D007               	goto	l95
  2937  000CA0                     
  2938                           ; BSR set to: 0
  2939                           ;i2c_master.c: 220: i2c_status.state = I2C_SEND_ADR_READ;
  2940                           
  2941                           ; BSR set to: 0
  2942  000CA0  0E01               	movlw	1
  2943  000CA2  D003               	goto	L2
  2944  000CA4                     
  2945                           ; BSR set to: 0
  2946                           ;i2c_master.c: 224: i2c_status.state = I2C_SEND_INITIAL_READ;
  2947                           
  2948                           ; BSR set to: 0
  2949  000CA4  0E10               	movlw	16
  2950  000CA6  D001               	goto	L2
  2951  000CA8                     
  2952                           ; BSR set to: 0
  2953                           ;i2c_master.c: 228: i2c_status.state = I2C_SEND_ADR_WRITE;
  2954                           
  2955                           ; BSR set to: 0
  2956  000CA8  0E02               	movlw	2
  2957  000CAA                     L2:
  2958  000CAA  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;i2c_master.c: 230: }
  2962                           
  2963                           ;i2c_master.c: 229: break;
  2964  000CAC  D00A               	goto	l97
  2965  000CAE                     l95:
  2966                           
  2967                           ; BSR set to: 0
  2968                           
  2969                           ; BSR set to: 0
  2970  000CAE  503D               	movf	i2c_masterOperation@operation,w,c
  2971                           
  2972                           ; Switch size 1, requested type "space"
  2973                           ; Number of cases is 3, Range of values is 0 to 2
  2974                           ; switch strategies available:
  2975                           ; Name         Instructions Cycles
  2976                           ; simple_byte           10     6 (average)
  2977                           ;	Chosen strategy is simple_byte
  2978  000CB0  0A00               	xorlw	0	; case 0
  2979  000CB2  B4D8               	btfsc	status,2,c
  2980  000CB4  D7F5               	goto	l96
  2981  000CB6  0A01               	xorlw	1	; case 1
  2982  000CB8  B4D8               	btfsc	status,2,c
  2983  000CBA  D7F4               	goto	l98
  2984  000CBC  0A03               	xorlw	3	; case 2
  2985  000CBE  B4D8               	btfsc	status,2,c
  2986  000CC0  D7F3               	goto	l99
  2987  000CC2                     l97:
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;i2c_master.c: 241: i2c1_driver_start();
  2991                           
  2992                           ; BSR set to: 0
  2993  000CC2  EC05  F009         	call	_i2c1_driver_start	;wreg free
  2994                           
  2995                           ;i2c_master.c: 243: if(! mssp1_IRQisEnabled())
  2996  000CC6  EC25  F008         	call	_mssp1_IRQisEnabled	;wreg free
  2997  000CCA  A0D8               	btfss	status,0,c
  2998                           
  2999                           ;i2c_master.c: 244: i2c_poller();
  3000  000CCC  EC9D  F007         	call	_i2c_poller	;wreg free
  3001  000CD0                     l100:
  3002                           
  3003                           ;i2c_master.c: 245: }
  3004                           ;i2c_master.c: 246: return ret;
  3005  000CD0  503E               	movf	i2c_masterOperation@ret,w,c
  3006  000CD2  0012               	return	
  3007  000CD4                     __end_of_i2c_masterOperation:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           intcon2	equ	0xFF1
  3017                           postinc0	equ	0xFEE
  3018                           plusw0	equ	0xFEB
  3019                           wreg	equ	0xFE8
  3020                           postdec1	equ	0xFE5
  3021                           plusw1	equ	0xFE3
  3022                           fsr1l	equ	0xFE1
  3023                           indf2	equ	0xFDF
  3024                           plusw2	equ	0xFDB
  3025                           fsr2h	equ	0xFDA
  3026                           fsr2l	equ	0xFD9
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function _mssp1_IRQisEnabled *****************
  3030 ;; Defined at:
  3031 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;		None
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;		None
  3036 ;; Return value:  Size  Location     Type
  3037 ;;		None               void
  3038 ;; Registers used:
  3039 ;;		wreg, status,0
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3045 ;;      Params:         0       0       0       0       0       0       0
  3046 ;;      Locals:         0       0       0       0       0       0       0
  3047 ;;      Temps:          1       0       0       0       0       0       0
  3048 ;;      Totals:         1       0       0       0       0       0       0
  3049 ;;Total ram usage:        1 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    5
  3052 ;; This function calls:
  3053 ;;		Nothing
  3054 ;; This function is called by:
  3055 ;;		_i2c_masterOperation
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text24
  3060  00104A                     __ptext24:
  3061                           	opt stack 0
  3062  00104A                     _mssp1_IRQisEnabled:
  3063                           	opt stack 22
  3064                           
  3065                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
  3066                           
  3067                           ;incstack = 0
  3068  00104A  A69D               	btfss	3997,3,c	;volatile
  3069  00104C  D003               	goto	u1280
  3070  00104E  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  3071  001050  2A3A               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  3072  001052  D001               	goto	u1288
  3073  001054                     u1280:
  3074  001054  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  3075  001056                     u1288:
  3076  001056  303A               	rrcf	??_mssp1_IRQisEnabled,w,c
  3077  001058  0012               	return	
  3078  00105A                     __end_of_mssp1_IRQisEnabled:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           prodh	equ	0xFF4
  3085                           prodl	equ	0xFF3
  3086                           intcon	equ	0xFF2
  3087                           intcon2	equ	0xFF1
  3088                           postinc0	equ	0xFEE
  3089                           plusw0	equ	0xFEB
  3090                           wreg	equ	0xFE8
  3091                           postdec1	equ	0xFE5
  3092                           plusw1	equ	0xFE3
  3093                           fsr1l	equ	0xFE1
  3094                           indf2	equ	0xFDF
  3095                           plusw2	equ	0xFDB
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _i2c_poller *****************
  3101 ;; Defined at:
  3102 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;		None
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      void 
  3109 ;; Registers used:
  3110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3116 ;;      Params:         0       0       0       0       0       0       0
  3117 ;;      Locals:         0       0       0       0       0       0       0
  3118 ;;      Temps:          0       0       0       0       0       0       0
  3119 ;;      Totals:         0       0       0       0       0       0       0
  3120 ;;Total ram usage:        0 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    9
  3123 ;; This function calls:
  3124 ;;		_i2c_ISR
  3125 ;;		_mssp1_waitForEvent
  3126 ;; This function is called by:
  3127 ;;		_i2c_masterOperation
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text25
  3132  000F3A                     __ptext25:
  3133                           	opt stack 0
  3134  000F3A                     _i2c_poller:
  3135                           	opt stack 18
  3136                           
  3137                           ;i2c_master.c: 274: while(i2c_status.busy)
  3138                           
  3139                           ;incstack = 0
  3140  000F3A  D008               	goto	l113
  3141  000F3C                     
  3142                           ;i2c_master.c: 275: {
  3143                           ;i2c_master.c: 276: mssp1_waitForEvent((0));
  3144  000F3C  0E00               	movlw	0
  3145  000F3E  6E3A               	movwf	mssp1_waitForEvent@timeout,c
  3146  000F40  0E00               	movlw	0
  3147  000F42  6E3B               	movwf	mssp1_waitForEvent@timeout+1,c
  3148  000F44  EC0A  F008         	call	_mssp1_waitForEvent	;wreg free
  3149                           
  3150                           ;i2c_master.c: 277: i2c_ISR();
  3151  000F48  ECD2  F005         	call	_i2c_ISR	;wreg free
  3152  000F4C                     l113:
  3153  000F4C  0100               	movlb	0	; () banked
  3154  000F4E  A19C               	btfss	_i2c_status& (0+255),0,b
  3155  000F50  0012               	return	
  3156  000F52  D7F4               	goto	l114
  3157  000F54                     __end_of_i2c_poller:
  3158                           	opt stack 0
  3159                           tblptru	equ	0xFF8
  3160                           tblptrh	equ	0xFF7
  3161                           tblptrl	equ	0xFF6
  3162                           tablat	equ	0xFF5
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           intcon	equ	0xFF2
  3166                           intcon2	equ	0xFF1
  3167                           postinc0	equ	0xFEE
  3168                           plusw0	equ	0xFEB
  3169                           wreg	equ	0xFE8
  3170                           postdec1	equ	0xFE5
  3171                           plusw1	equ	0xFE3
  3172                           fsr1l	equ	0xFE1
  3173                           indf2	equ	0xFDF
  3174                           plusw2	equ	0xFDB
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function _mssp1_waitForEvent *****************
  3180 ;; Defined at:
  3181 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  timeout         2   20[COMRAM] PTR unsigned int 
  3184 ;;		 -> NULL(0), 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3196 ;;      Params:         2       0       0       0       0       0       0
  3197 ;;      Locals:         0       0       0       0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0
  3199 ;;      Totals:         2       0       0       0       0       0       0
  3200 ;;Total ram usage:        2 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    5
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_i2c_poller
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text26
  3211  001014                     __ptext26:
  3212                           	opt stack 0
  3213  001014                     _mssp1_waitForEvent:
  3214                           	opt stack 21
  3215                           
  3216                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;incstack = 0
  3220  001014  B69E               	btfsc	3998,3,c	;volatile
  3221  001016  0012               	return	
  3222  001018                     u1230:
  3223                           
  3224                           ;i2c1_driver.c: 76: {
  3225                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
  3226                           
  3227                           ;i2c1_driver.c: 74: {
  3228                           ;i2c1_driver.c: 75: while(1)
  3229  001018  B69E               	btfsc	3998,3,c	;volatile
  3230  00101A  0012               	return	
  3231                           
  3232                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3233  00101C  0E85               	movlw	133
  3234  00101E                     u1737:
  3235  00101E  2EE8               	decfsz	wreg,f,c
  3236  001020  D7FE               	bra	u1737
  3237  001022  F000               	nop	
  3238  001024  D7F9               	goto	u1230
  3239  001026                     __end_of_mssp1_waitForEvent:
  3240                           	opt stack 0
  3241                           tblptru	equ	0xFF8
  3242                           tblptrh	equ	0xFF7
  3243                           tblptrl	equ	0xFF6
  3244                           tablat	equ	0xFF5
  3245                           prodh	equ	0xFF4
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           intcon2	equ	0xFF1
  3249                           postinc0	equ	0xFEE
  3250                           plusw0	equ	0xFEB
  3251                           wreg	equ	0xFE8
  3252                           postdec1	equ	0xFE5
  3253                           plusw1	equ	0xFE3
  3254                           fsr1l	equ	0xFE1
  3255                           indf2	equ	0xFDF
  3256                           plusw2	equ	0xFDB
  3257                           fsr2h	equ	0xFDA
  3258                           fsr2l	equ	0xFD9
  3259                           status	equ	0xFD8
  3260                           
  3261 ;; *************** function _i2c_ISR *****************
  3262 ;; Defined at:
  3263 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;		None
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;		None
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      void 
  3270 ;; Registers used:
  3271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3277 ;;      Params:         0       0       0       0       0       0       0
  3278 ;;      Locals:         0       0       0       0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0
  3280 ;;      Totals:         0       0       0       0       0       0       0
  3281 ;;Total ram usage:        0 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    8
  3284 ;; This function calls:
  3285 ;;		_do_I2C_DO_ACK
  3286 ;;		_do_I2C_DO_ADDRESS_NACK
  3287 ;;		_do_I2C_DO_NACK_RESTART
  3288 ;;		_do_I2C_DO_NACK_STOP
  3289 ;;		_do_I2C_IDLE
  3290 ;;		_do_I2C_RCEN
  3291 ;;		_do_I2C_RESET
  3292 ;;		_do_I2C_RX
  3293 ;;		_do_I2C_SEND_ADR_READ
  3294 ;;		_do_I2C_SEND_ADR_WRITE
  3295 ;;		_do_I2C_SEND_INITIAL_READ
  3296 ;;		_do_I2C_SEND_RESTART
  3297 ;;		_do_I2C_SEND_RESTART_READ
  3298 ;;		_do_I2C_SEND_RESTART_WRITE
  3299 ;;		_do_I2C_SEND_STOP
  3300 ;;		_do_I2C_TX
  3301 ;;		_do_I2C_TX_EMPTY
  3302 ;;		_do_I2C_TX_REGISTER
  3303 ;;		_i2c1_driver_isNACK
  3304 ;;		_mssp1_clearIRQ
  3305 ;; This function is called by:
  3306 ;;		_i2c_open
  3307 ;;		_i2c_poller
  3308 ;;		_INTERRUPT_InterruptManager
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text27
  3313  000BA4                     __ptext27:
  3314                           	opt stack 0
  3315  000BA4                     _i2c_ISR:
  3316                           	opt stack 0
  3317                           
  3318                           ;Skip over the trampoline to the duplicate function for level 2
  3319  000BA4  B24B               	btfsc	btemp,1,c
  3320  000BA6  EF6A  F006         	goto	i2_i2c_ISR
  3321  000BAA                     _i2c_ISR$intlevel0:
  3322                           	opt stack 18
  3323                           
  3324                           ;i2c_master.c: 486: mssp1_clearIRQ();
  3325                           
  3326                           ;incstack = 0
  3327  000BAA  EC09  F009         	call	_mssp1_clearIRQ	;wreg free
  3328                           
  3329                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  3330  000BAE  0100               	movlb	0	; () banked
  3331  000BB0  A79C               	btfss	_i2c_status& (0+255),3,b
  3332  000BB2  D007               	goto	l209
  3333                           
  3334                           ; BSR set to: 0
  3335  000BB4  ECE1  F007         	call	_i2c1_driver_isNACK	;wreg free
  3336  000BB8  A0D8               	btfss	status,0,c
  3337  000BBA  D003               	goto	l209
  3338                           
  3339                           ;i2c_master.c: 493: {
  3340                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  3341  000BBC  0E0F               	movlw	15
  3342  000BBE  0100               	movlb	0	; () banked
  3343  000BC0  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  3344  000BC2                     l209:
  3345                           
  3346                           ;i2c_master.c: 495: }
  3347                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  3348                           
  3349                           ; BSR set to: 0
  3350  000BC2  0100               	movlb	0	; () banked
  3351  000BC4  51A6               	movf	(_i2c_status+10)& (0+255),w,b
  3352  000BC6  0D02               	mullw	2
  3353  000BC8  0EC1               	movlw	low _fsmStateTable
  3354  000BCA  24F3               	addwf	prodl,w,c
  3355  000BCC  6ED9               	movwf	fsr2l,c
  3356  000BCE  0E00               	movlw	high _fsmStateTable
  3357  000BD0  20F4               	addwfc	prodh,w,c
  3358  000BD2  6EDA               	movwf	fsr2h,c
  3359  000BD4  D801               	call	u1278
  3360  000BD6  D00A               	goto	u1279
  3361  000BD8                     u1278:
  3362  000BD8  0005               	push	
  3363  000BDA  6EFA               	movwf	pclath,c
  3364  000BDC  50DE               	movf	postinc2,w,c
  3365  000BDE  6EFD               	movwf	tosl,c
  3366  000BE0  50DE               	movf	postinc2,w,c
  3367  000BE2  6EFE               	movwf	tosh,c
  3368  000BE4  50F8               	movf	tblptru,w,c
  3369  000BE6  6EFF               	movwf	tosu,c
  3370  000BE8  50FA               	movf	pclath,w,c
  3371  000BEA  0012               	return		;indir
  3372  000BEC                     u1279:
  3373  000BEC  0100               	movlb	0	; () banked
  3374  000BEE  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377  000BF0  0012               	return		;funcret
  3378  000BF2                     __end_of_i2c_ISR:
  3379                           	opt stack 0
  3380                           tosu	equ	0xFFF
  3381                           tosh	equ	0xFFE
  3382                           tosl	equ	0xFFD
  3383                           pclath	equ	0xFFA
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           intcon	equ	0xFF2
  3391                           intcon2	equ	0xFF1
  3392                           postinc0	equ	0xFEE
  3393                           plusw0	equ	0xFEB
  3394                           wreg	equ	0xFE8
  3395                           postdec1	equ	0xFE5
  3396                           plusw1	equ	0xFE3
  3397                           fsr1l	equ	0xFE1
  3398                           indf2	equ	0xFDF
  3399                           postinc2	equ	0xFDE
  3400                           plusw2	equ	0xFDB
  3401                           fsr2h	equ	0xFDA
  3402                           fsr2l	equ	0xFD9
  3403                           status	equ	0xFD8
  3404                           
  3405 ;; *************** function _do_I2C_TX_EMPTY *****************
  3406 ;; Defined at:
  3407 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  1    wreg      enum E7019
  3414 ;; Registers used:
  3415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3421 ;;      Params:         0       0       0       0       0       0       0
  3422 ;;      Locals:         0       0       0       0       0       0       0
  3423 ;;      Temps:          0       0       0       0       0       0       0
  3424 ;;      Totals:         0       0       0       0       0       0       0
  3425 ;;Total ram usage:        0 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    7
  3428 ;; This function calls:
  3429 ;;		_do_I2C_SEND_RESTART
  3430 ;;		_do_I2C_SEND_STOP
  3431 ;;		_mssp1_setIRQ
  3432 ;;		_returnReset
  3433 ;;		_returnStop
  3434 ;; This function is called by:
  3435 ;;		_i2c_ISR
  3436 ;;		i2_i2c_ISR
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text28
  3441  000AEE                     __ptext28:
  3442                           	opt stack 0
  3443  000AEE                     _do_I2C_TX_EMPTY:
  3444                           	opt stack 0
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;Skip over the trampoline to the duplicate function for level 2
  3448  000AEE  B24B               	btfsc	btemp,1,c
  3449  000AF0  EFA6  F005         	goto	i2_do_I2C_TX_EMPTY
  3450  000AF4                     _do_I2C_TX_EMPTY$intlevel0:
  3451                           	opt stack 18
  3452                           
  3453                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  3454                           
  3455                           ;incstack = 0
  3456  000AF4  0100               	movlb	0	; () banked
  3457  000AF6  859C               	bsf	_i2c_status& (0+255),2,b
  3458                           
  3459                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3460  000AF8  D00A               	goto	l197
  3461  000AFA                     
  3462                           ;i2c_master.c: 448: case i2c_restart_write:
  3463                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  3464                           
  3465                           ; BSR set to: 0
  3466                           
  3467                           ; BSR set to: 0
  3468  000AFA  EC77  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3469  000AFE  0012               	return	
  3470  000B00                     
  3471                           ;i2c_master.c: 451: mssp1_setIRQ();
  3472  000B00  ECFB  F008         	call	_mssp1_setIRQ	;wreg free
  3473                           
  3474                           ;i2c_master.c: 452: return I2C_TX;
  3475  000B04  0E03               	movlw	3
  3476  000B06  0012               	return	
  3477  000B08                     
  3478                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  3479                           
  3480                           ;i2c_master.c: 454: case i2c_stop:
  3481  000B08  EC70  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3482                           
  3483                           ;i2c_master.c: 456: }
  3484  000B0C  0012               	return	
  3485  000B0E                     l197:
  3486  000B0E  C0B4  F03A         	movff	_i2c_status+24,returnReset@p
  3487  000B12  C0B5  F03B         	movff	_i2c_status+25,returnReset@p+1
  3488  000B16  EE20  F0A8         	lfsr	2,_i2c_status+12
  3489  000B1A  D801               	call	u1228
  3490  000B1C  D00A               	goto	u1229
  3491  000B1E                     u1228:
  3492  000B1E  0005               	push	
  3493  000B20  6EFA               	movwf	pclath,c
  3494  000B22  50DE               	movf	postinc2,w,c
  3495  000B24  6EFD               	movwf	tosl,c
  3496  000B26  50DE               	movf	postinc2,w,c
  3497  000B28  6EFE               	movwf	tosh,c
  3498  000B2A  50F8               	movf	tblptru,w,c
  3499  000B2C  6EFF               	movwf	tosu,c
  3500  000B2E  50FA               	movf	pclath,w,c
  3501  000B30  0012               	return		;indir
  3502  000B32                     u1229:
  3503                           
  3504                           ; Switch size 1, requested type "space"
  3505                           ; Number of cases is 4, Range of values is 1 to 4
  3506                           ; switch strategies available:
  3507                           ; Name         Instructions Cycles
  3508                           ; simple_byte           13     7 (average)
  3509                           ;	Chosen strategy is simple_byte
  3510  000B32  0A01               	xorlw	1	; case 1
  3511  000B34  B4D8               	btfsc	status,2,c
  3512  000B36  D7E8               	goto	l202
  3513  000B38  0A03               	xorlw	3	; case 2
  3514  000B3A  B4D8               	btfsc	status,2,c
  3515  000B3C  D7DE               	goto	l198
  3516  000B3E  0A01               	xorlw	1	; case 3
  3517  000B40  B4D8               	btfsc	status,2,c
  3518  000B42  D7DB               	goto	l198
  3519  000B44  0A07               	xorlw	7	; case 4
  3520  000B46  B4D8               	btfsc	status,2,c
  3521  000B48  D7DB               	goto	l201
  3522  000B4A  D7DE               	goto	l202
  3523  000B4C                     __end_of_do_I2C_TX_EMPTY:
  3524                           	opt stack 0
  3525                           tosu	equ	0xFFF
  3526                           tosh	equ	0xFFE
  3527                           tosl	equ	0xFFD
  3528                           pclath	equ	0xFFA
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           intcon	equ	0xFF2
  3536                           intcon2	equ	0xFF1
  3537                           postinc0	equ	0xFEE
  3538                           plusw0	equ	0xFEB
  3539                           wreg	equ	0xFE8
  3540                           postdec1	equ	0xFE5
  3541                           plusw1	equ	0xFE3
  3542                           fsr1l	equ	0xFE1
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           plusw2	equ	0xFDB
  3546                           fsr2h	equ	0xFDA
  3547                           fsr2l	equ	0xFD9
  3548                           status	equ	0xFD8
  3549                           
  3550 ;; *************** function _do_I2C_RX *****************
  3551 ;; Defined at:
  3552 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;		None
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;		None
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      enum E7019
  3559 ;; Registers used:
  3560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3566 ;;      Params:         0       0       0       0       0       0       0
  3567 ;;      Locals:         0       0       0       0       0       0       0
  3568 ;;      Temps:          0       0       0       0       0       0       0
  3569 ;;      Totals:         0       0       0       0       0       0       0
  3570 ;;Total ram usage:        0 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    7
  3573 ;; This function calls:
  3574 ;;		_do_I2C_DO_NACK_RESTART
  3575 ;;		_do_I2C_DO_NACK_STOP
  3576 ;;		_i2c1_driver_getRXData
  3577 ;;		_i2c1_driver_sendACK
  3578 ;;		_returnReset
  3579 ;;		_returnStop
  3580 ;; This function is called by:
  3581 ;;		_i2c_ISR
  3582 ;;		i2_i2c_ISR
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text29
  3587  000856                     __ptext29:
  3588                           	opt stack 0
  3589  000856                     _do_I2C_RX:
  3590                           	opt stack 0
  3591                           
  3592                           ;Skip over the trampoline to the duplicate function for level 2
  3593  000856  B24B               	btfsc	btemp,1,c
  3594  000858  EFA4  F004         	goto	i2_do_I2C_RX
  3595  00085C                     _do_I2C_RX$intlevel0:
  3596                           	opt stack 18
  3597                           
  3598                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  3599                           
  3600                           ;incstack = 0
  3601  00085C  ECFD  F008         	call	_i2c1_driver_getRXData	;wreg free
  3602  000860  C09E  FFD9         	movff	_i2c_status+2,fsr2l
  3603  000864  C09F  FFDA         	movff	_i2c_status+3,fsr2h
  3604  000868  6EDF               	movwf	indf2,c
  3605  00086A  0100               	movlb	0	; () banked
  3606  00086C  4B9E               	infsnz	(_i2c_status+2)& (0+255),f,b
  3607  00086E  2B9F               	incf	(_i2c_status+3)& (0+255),f,b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  3611  000870  07A0               	decf	(_i2c_status+4)& (0+255),f,b
  3612  000872  A0D8               	btfss	status,0,c
  3613  000874  07A1               	decf	(_i2c_status+5)& (0+255),f,b
  3614  000876  51A0               	movf	(_i2c_status+4)& (0+255),w,b
  3615  000878  11A1               	iorwf	(_i2c_status+5)& (0+255),w,b
  3616  00087A  B4D8               	btfsc	status,2,c
  3617  00087C  D004               	goto	l185
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;i2c_master.c: 421: {
  3621                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  3622  00087E  ECED  F008         	call	_i2c1_driver_sendACK	;wreg free
  3623                           
  3624                           ;i2c_master.c: 423: return I2C_RCEN;
  3625  000882  0E05               	movlw	5
  3626                           
  3627                           ;i2c_master.c: 424: }
  3628  000884  0012               	return	
  3629  000886                     l185:
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;i2c_master.c: 425: else
  3633                           ;i2c_master.c: 426: {
  3634                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  3635  000886  859C               	bsf	_i2c_status& (0+255),2,b
  3636                           
  3637                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3638  000888  D006               	goto	l188
  3639  00088A                     
  3640                           ;i2c_master.c: 431: case i2c_restart_read:
  3641                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  3642                           
  3643                           ; BSR set to: 0
  3644                           
  3645                           ; BSR set to: 0
  3646  00088A  EC5B  F008         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  3647  00088E  0012               	return	
  3648  000890                     
  3649                           ;i2c_master.c: 435: case i2c_stop:
  3650                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  3651                           
  3652                           ;i2c_master.c: 434: case i2c_continue:
  3653  000890  EC62  F008         	call	_do_I2C_DO_NACK_STOP	;wreg free
  3654                           
  3655                           ;i2c_master.c: 437: }
  3656  000894  0012               	return	
  3657  000896                     l188:
  3658  000896  C0B4  F03A         	movff	_i2c_status+24,returnReset@p
  3659  00089A  C0B5  F03B         	movff	_i2c_status+25,returnReset@p+1
  3660  00089E  EE20  F0A8         	lfsr	2,_i2c_status+12
  3661  0008A2  D801               	call	u1218
  3662  0008A4  D00A               	goto	u1219
  3663  0008A6                     u1218:
  3664  0008A6  0005               	push	
  3665  0008A8  6EFA               	movwf	pclath,c
  3666  0008AA  50DE               	movf	postinc2,w,c
  3667  0008AC  6EFD               	movwf	tosl,c
  3668  0008AE  50DE               	movf	postinc2,w,c
  3669  0008B0  6EFE               	movwf	tosh,c
  3670  0008B2  50F8               	movf	tblptru,w,c
  3671  0008B4  6EFF               	movwf	tosu,c
  3672  0008B6  50FA               	movf	pclath,w,c
  3673  0008B8  0012               	return		;indir
  3674  0008BA                     u1219:
  3675                           
  3676                           ; Switch size 1, requested type "space"
  3677                           ; Number of cases is 4, Range of values is 1 to 4
  3678                           ; switch strategies available:
  3679                           ; Name         Instructions Cycles
  3680                           ; simple_byte           13     7 (average)
  3681                           ;	Chosen strategy is simple_byte
  3682  0008BA  0A01               	xorlw	1	; case 1
  3683  0008BC  B4D8               	btfsc	status,2,c
  3684  0008BE  D7E8               	goto	l191
  3685  0008C0  0A03               	xorlw	3	; case 2
  3686  0008C2  B4D8               	btfsc	status,2,c
  3687  0008C4  D7E2               	goto	l189
  3688  0008C6  0A01               	xorlw	1	; case 3
  3689  0008C8  B4D8               	btfsc	status,2,c
  3690  0008CA  D7DF               	goto	l189
  3691  0008CC  0A07               	xorlw	7	; case 4
  3692  0008CE  D7E0               	goto	l191
  3693  0008D0                     __end_of_do_I2C_RX:
  3694                           	opt stack 0
  3695                           tosu	equ	0xFFF
  3696                           tosh	equ	0xFFE
  3697                           tosl	equ	0xFFD
  3698                           pclath	equ	0xFFA
  3699                           tblptru	equ	0xFF8
  3700                           tblptrh	equ	0xFF7
  3701                           tblptrl	equ	0xFF6
  3702                           tablat	equ	0xFF5
  3703                           prodh	equ	0xFF4
  3704                           prodl	equ	0xFF3
  3705                           intcon	equ	0xFF2
  3706                           intcon2	equ	0xFF1
  3707                           postinc0	equ	0xFEE
  3708                           plusw0	equ	0xFEB
  3709                           wreg	equ	0xFE8
  3710                           postdec1	equ	0xFE5
  3711                           plusw1	equ	0xFE3
  3712                           fsr1l	equ	0xFE1
  3713                           indf2	equ	0xFDF
  3714                           postinc2	equ	0xFDE
  3715                           plusw2	equ	0xFDB
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _do_I2C_TX *****************
  3721 ;; Defined at:
  3722 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      enum E7019
  3729 ;; Registers used:
  3730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3736 ;;      Params:         0       0       0       0       0       0       0
  3737 ;;      Locals:         2       0       0       0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0
  3739 ;;      Totals:         2       0       0       0       0       0       0
  3740 ;;Total ram usage:        2 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    7
  3743 ;; This function calls:
  3744 ;;		_do_I2C_SEND_RESTART_READ
  3745 ;;		_do_I2C_SEND_RESTART_WRITE
  3746 ;;		_do_I2C_SEND_STOP
  3747 ;;		_i2c1_driver_TXData
  3748 ;;		_i2c1_driver_isNACK
  3749 ;;		_returnReset
  3750 ;;		_returnStop
  3751 ;; This function is called by:
  3752 ;;		_i2c_ISR
  3753 ;;		i2_i2c_ISR
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           	psect	text30
  3758  00069E                     __ptext30:
  3759                           	opt stack 0
  3760  00069E                     _do_I2C_TX:
  3761                           	opt stack 0
  3762                           
  3763                           ;Skip over the trampoline to the duplicate function for level 2
  3764  00069E  B24B               	btfsc	btemp,1,c
  3765  0006A0  EFE3  F003         	goto	i2_do_I2C_TX
  3766  0006A4                     _do_I2C_TX$intlevel0:
  3767                           	opt stack 18
  3768                           
  3769                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  3770                           
  3771                           ;incstack = 0
  3772  0006A4  ECE1  F007         	call	_i2c1_driver_isNACK	;wreg free
  3773  0006A8  B0D8               	btfsc	status,0,c
  3774  0006AA  D00A               	goto	l170
  3775  0006AC  D026               	goto	l169
  3776  0006AE                     
  3777                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  3778  0006AE  EC85  F008         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  3779  0006B2  0012               	return	
  3780  0006B4                     
  3781                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  3782  0006B4  EC7E  F008         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  3783  0006B8  0012               	return	
  3784  0006BA                     
  3785                           ;i2c_master.c: 405: case i2c_stop:
  3786                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  3787                           
  3788                           ;i2c_master.c: 404: case i2c_continue:
  3789  0006BA  EC70  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3790                           
  3791                           ;i2c_master.c: 407: }
  3792  0006BE  0012               	return	
  3793  0006C0                     l170:
  3794  0006C0  C0BA  F03A         	movff	_i2c_status+30,returnReset@p
  3795  0006C4  C0BB  F03B         	movff	_i2c_status+31,returnReset@p+1
  3796  0006C8  EE20  F0AE         	lfsr	2,_i2c_status+18
  3797  0006CC  D801               	call	u1188
  3798  0006CE  D00A               	goto	u1189
  3799  0006D0                     u1188:
  3800  0006D0  0005               	push	
  3801  0006D2  6EFA               	movwf	pclath,c
  3802  0006D4  50DE               	movf	postinc2,w,c
  3803  0006D6  6EFD               	movwf	tosl,c
  3804  0006D8  50DE               	movf	postinc2,w,c
  3805  0006DA  6EFE               	movwf	tosh,c
  3806  0006DC  50F8               	movf	tblptru,w,c
  3807  0006DE  6EFF               	movwf	tosu,c
  3808  0006E0  50FA               	movf	pclath,w,c
  3809  0006E2  0012               	return		;indir
  3810  0006E4                     u1189:
  3811                           
  3812                           ; Switch size 1, requested type "space"
  3813                           ; Number of cases is 4, Range of values is 1 to 4
  3814                           ; switch strategies available:
  3815                           ; Name         Instructions Cycles
  3816                           ; simple_byte           13     7 (average)
  3817                           ;	Chosen strategy is simple_byte
  3818  0006E4  0A01               	xorlw	1	; case 1
  3819  0006E6  B4D8               	btfsc	status,2,c
  3820  0006E8  D7E8               	goto	l174
  3821  0006EA  0A03               	xorlw	3	; case 2
  3822  0006EC  B4D8               	btfsc	status,2,c
  3823  0006EE  D7DF               	goto	l171
  3824  0006F0  0A01               	xorlw	1	; case 3
  3825  0006F2  B4D8               	btfsc	status,2,c
  3826  0006F4  D7DF               	goto	l173
  3827  0006F6  0A07               	xorlw	7	; case 4
  3828  0006F8  D7E0               	goto	l174
  3829  0006FA                     l169:
  3830                           
  3831                           ;i2c_master.c: 409: else
  3832                           ;i2c_master.c: 410: {
  3833                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  3834  0006FA  0100               	movlb	0	; () banked
  3835  0006FC  979C               	bcf	_i2c_status& (0+255),3,b
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  3839  0006FE  C09E  FFD9         	movff	_i2c_status+2,fsr2l
  3840  000702  C09F  FFDA         	movff	_i2c_status+3,fsr2h
  3841  000706  4B9E               	infsnz	(_i2c_status+2)& (0+255),f,b
  3842  000708  2B9F               	incf	(_i2c_status+3)& (0+255),f,b
  3843  00070A  50DF               	movf	indf2,w,c
  3844  00070C  ECC6  F008         	call	_i2c1_driver_TXData
  3845                           
  3846                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  3847  000710  0100               	movlb	0	; () banked
  3848  000712  07A0               	decf	(_i2c_status+4)& (0+255),f,b
  3849  000714  A0D8               	btfss	status,0,c
  3850  000716  07A1               	decf	(_i2c_status+5)& (0+255),f,b
  3851  000718  51A0               	movf	(_i2c_status+4)& (0+255),w,b
  3852  00071A  11A1               	iorwf	(_i2c_status+5)& (0+255),w,b
  3853  00071C  A4D8               	btfss	status,2,c
  3854  00071E  D004               	goto	l180
  3855                           
  3856                           ; BSR set to: 0
  3857  000720  0E00               	movlw	0
  3858  000722  6E3C               	movwf	_do_I2C_TX$315+1,c
  3859  000724  0E06               	movlw	6
  3860  000726  D003               	goto	L3
  3861  000728                     l180:
  3862                           
  3863                           ; BSR set to: 0
  3864                           
  3865                           ; BSR set to: 0
  3866  000728  0E00               	movlw	0
  3867  00072A  6E3C               	movwf	_do_I2C_TX$315+1,c
  3868  00072C  0E03               	movlw	3
  3869  00072E                     L3:
  3870  00072E  6E3B               	movwf	_do_I2C_TX$315,c
  3871                           
  3872                           ; BSR set to: 0
  3873  000730  503B               	movf	_do_I2C_TX$315,w,c
  3874                           
  3875                           ; BSR set to: 0
  3876  000732  0012               	return	
  3877  000734                     __end_of_do_I2C_TX:
  3878                           	opt stack 0
  3879                           tosu	equ	0xFFF
  3880                           tosh	equ	0xFFE
  3881                           tosl	equ	0xFFD
  3882                           pclath	equ	0xFFA
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           intcon	equ	0xFF2
  3890                           intcon2	equ	0xFF1
  3891                           postinc0	equ	0xFEE
  3892                           plusw0	equ	0xFEB
  3893                           wreg	equ	0xFE8
  3894                           postdec1	equ	0xFE5
  3895                           plusw1	equ	0xFE3
  3896                           fsr1l	equ	0xFE1
  3897                           indf2	equ	0xFDF
  3898                           postinc2	equ	0xFDE
  3899                           plusw2	equ	0xFDB
  3900                           fsr2h	equ	0xFDA
  3901                           fsr2l	equ	0xFD9
  3902                           status	equ	0xFD8
  3903                           
  3904 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  3905 ;; Defined at:
  3906 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;		None
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      enum E7019
  3913 ;; Registers used:
  3914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3920 ;;      Params:         0       0       0       0       0       0       0
  3921 ;;      Locals:         0       0       0       0       0       0       0
  3922 ;;      Temps:          0       0       0       0       0       0       0
  3923 ;;      Totals:         0       0       0       0       0       0       0
  3924 ;;Total ram usage:        0 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    7
  3927 ;; This function calls:
  3928 ;;		_do_I2C_SEND_RESTART
  3929 ;;		_do_I2C_SEND_STOP
  3930 ;;		_returnReset
  3931 ;;		_returnStop
  3932 ;; This function is called by:
  3933 ;;		_i2c_ISR
  3934 ;;		i2_i2c_ISR
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           	psect	text31
  3939  000BF2                     __ptext31:
  3940                           	opt stack 0
  3941  000BF2                     _do_I2C_DO_ADDRESS_NACK:
  3942                           	opt stack 0
  3943                           
  3944                           ;Skip over the trampoline to the duplicate function for level 2
  3945  000BF2  B24B               	btfsc	btemp,1,c
  3946  000BF4  EF8E  F006         	goto	i2_do_I2C_DO_ADDRESS_NACK
  3947  000BF8                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  3948                           	opt stack 18
  3949                           
  3950                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  3951                           
  3952                           ;incstack = 0
  3953  000BF8  0100               	movlb	0	; () banked
  3954  000BFA  979C               	bcf	_i2c_status& (0+255),3,b
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  3958  000BFC  0E02               	movlw	2
  3959  000BFE  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  3960                           
  3961                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  3962  000C00  D006               	goto	l161
  3963  000C02                     
  3964                           ;i2c_master.c: 386: case i2c_restart_write:
  3965                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  3966                           
  3967                           ; BSR set to: 0
  3968                           
  3969                           ; BSR set to: 0
  3970  000C02  EC77  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3971  000C06  0012               	return	
  3972  000C08                     
  3973                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  3974  000C08  EC70  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3975                           
  3976                           ;i2c_master.c: 390: }
  3977  000C0C  0012               	return	
  3978  000C0E                     l161:
  3979  000C0E  C0B8  F03A         	movff	_i2c_status+28,returnReset@p
  3980  000C12  C0B9  F03B         	movff	_i2c_status+29,returnReset@p+1
  3981  000C16  EE20  F0AC         	lfsr	2,_i2c_status+16
  3982  000C1A  D801               	call	u1168
  3983  000C1C  D00A               	goto	u1169
  3984  000C1E                     u1168:
  3985  000C1E  0005               	push	
  3986  000C20  6EFA               	movwf	pclath,c
  3987  000C22  50DE               	movf	postinc2,w,c
  3988  000C24  6EFD               	movwf	tosl,c
  3989  000C26  50DE               	movf	postinc2,w,c
  3990  000C28  6EFE               	movwf	tosh,c
  3991  000C2A  50F8               	movf	tblptru,w,c
  3992  000C2C  6EFF               	movwf	tosu,c
  3993  000C2E  50FA               	movf	pclath,w,c
  3994  000C30  0012               	return		;indir
  3995  000C32                     u1169:
  3996                           
  3997                           ; Switch size 1, requested type "space"
  3998                           ; Number of cases is 2, Range of values is 2 to 3
  3999                           ; switch strategies available:
  4000                           ; Name         Instructions Cycles
  4001                           ; simple_byte            7     4 (average)
  4002                           ;	Chosen strategy is simple_byte
  4003  000C32  0A02               	xorlw	2	; case 2
  4004  000C34  B4D8               	btfsc	status,2,c
  4005  000C36  D7E5               	goto	l162
  4006  000C38  0A01               	xorlw	1	; case 3
  4007  000C3A  B4D8               	btfsc	status,2,c
  4008  000C3C  D7E2               	goto	l162
  4009  000C3E  D7E4               	goto	l165
  4010  000C40                     __end_of_do_I2C_DO_ADDRESS_NACK:
  4011                           	opt stack 0
  4012                           tosu	equ	0xFFF
  4013                           tosh	equ	0xFFE
  4014                           tosl	equ	0xFFD
  4015                           pclath	equ	0xFFA
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           intcon	equ	0xFF2
  4023                           intcon2	equ	0xFF1
  4024                           postinc0	equ	0xFEE
  4025                           plusw0	equ	0xFEB
  4026                           wreg	equ	0xFE8
  4027                           postdec1	equ	0xFE5
  4028                           plusw1	equ	0xFE3
  4029                           fsr1l	equ	0xFE1
  4030                           indf2	equ	0xFDF
  4031                           postinc2	equ	0xFDE
  4032                           plusw2	equ	0xFDB
  4033                           fsr2h	equ	0xFDA
  4034                           fsr2l	equ	0xFD9
  4035                           status	equ	0xFD8
  4036                           
  4037 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  4038 ;; Defined at:
  4039 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;		None
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;		None
  4044 ;; Return value:  Size  Location     Type
  4045 ;;                  1    wreg      enum E7019
  4046 ;; Registers used:
  4047 ;;		wreg, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4053 ;;      Params:         0       0       0       0       0       0       0
  4054 ;;      Locals:         0       0       0       0       0       0       0
  4055 ;;      Temps:          0       0       0       0       0       0       0
  4056 ;;      Totals:         0       0       0       0       0       0       0
  4057 ;;Total ram usage:        0 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    6
  4060 ;; This function calls:
  4061 ;;		_i2c1_driver_sendNACK
  4062 ;; This function is called by:
  4063 ;;		_do_I2C_RX
  4064 ;;		_i2c_ISR
  4065 ;;		i2_i2c_ISR
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text32
  4070  0010B6                     __ptext32:
  4071                           	opt stack 0
  4072  0010B6                     _do_I2C_DO_NACK_RESTART:
  4073                           	opt stack 0
  4074                           
  4075                           ;Skip over the trampoline to the duplicate function for level 2
  4076  0010B6  B24B               	btfsc	btemp,1,c
  4077  0010B8  EFCA  F008         	goto	i2_do_I2C_DO_NACK_RESTART
  4078  0010BC                     _do_I2C_DO_NACK_RESTART$intlevel0:
  4079                           	opt stack 18
  4080                           
  4081                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  4082                           
  4083                           ;incstack = 0
  4084  0010BC  ECEA  F008         	call	_i2c1_driver_sendNACK	;wreg free
  4085                           
  4086                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  4087  0010C0  0E09               	movlw	9
  4088  0010C2  0012               	return	
  4089  0010C4                     __end_of_do_I2C_DO_NACK_RESTART:
  4090                           	opt stack 0
  4091                           tosu	equ	0xFFF
  4092                           tosh	equ	0xFFE
  4093                           tosl	equ	0xFFD
  4094                           pclath	equ	0xFFA
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           prodh	equ	0xFF4
  4100                           prodl	equ	0xFF3
  4101                           intcon	equ	0xFF2
  4102                           intcon2	equ	0xFF1
  4103                           postinc0	equ	0xFEE
  4104                           plusw0	equ	0xFEB
  4105                           wreg	equ	0xFE8
  4106                           postdec1	equ	0xFE5
  4107                           plusw1	equ	0xFE3
  4108                           fsr1l	equ	0xFE1
  4109                           indf2	equ	0xFDF
  4110                           postinc2	equ	0xFDE
  4111                           plusw2	equ	0xFDB
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  4117 ;; Defined at:
  4118 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;		None
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      enum E7019
  4125 ;; Registers used:
  4126 ;;		wreg, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4132 ;;      Params:         0       0       0       0       0       0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0
  4135 ;;      Totals:         0       0       0       0       0       0       0
  4136 ;;Total ram usage:        0 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    6
  4139 ;; This function calls:
  4140 ;;		_i2c1_driver_sendNACK
  4141 ;; This function is called by:
  4142 ;;		_do_I2C_RX
  4143 ;;		_i2c_ISR
  4144 ;;		i2_i2c_ISR
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text33
  4149  0010C4                     __ptext33:
  4150                           	opt stack 0
  4151  0010C4                     _do_I2C_DO_NACK_STOP:
  4152                           	opt stack 0
  4153                           
  4154                           ;Skip over the trampoline to the duplicate function for level 2
  4155  0010C4  B24B               	btfsc	btemp,1,c
  4156  0010C6  EFCE  F008         	goto	i2_do_I2C_DO_NACK_STOP
  4157  0010CA                     _do_I2C_DO_NACK_STOP$intlevel0:
  4158                           	opt stack 18
  4159                           
  4160                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  4161                           
  4162                           ;incstack = 0
  4163  0010CA  ECEA  F008         	call	_i2c1_driver_sendNACK	;wreg free
  4164                           
  4165                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  4166  0010CE  0E0A               	movlw	10
  4167  0010D0  0012               	return	
  4168  0010D2                     __end_of_do_I2C_DO_NACK_STOP:
  4169                           	opt stack 0
  4170                           tosu	equ	0xFFF
  4171                           tosh	equ	0xFFE
  4172                           tosl	equ	0xFFD
  4173                           pclath	equ	0xFFA
  4174                           tblptru	equ	0xFF8
  4175                           tblptrh	equ	0xFF7
  4176                           tblptrl	equ	0xFF6
  4177                           tablat	equ	0xFF5
  4178                           prodh	equ	0xFF4
  4179                           prodl	equ	0xFF3
  4180                           intcon	equ	0xFF2
  4181                           intcon2	equ	0xFF1
  4182                           postinc0	equ	0xFEE
  4183                           plusw0	equ	0xFEB
  4184                           wreg	equ	0xFE8
  4185                           postdec1	equ	0xFE5
  4186                           plusw1	equ	0xFE3
  4187                           fsr1l	equ	0xFE1
  4188                           indf2	equ	0xFDF
  4189                           postinc2	equ	0xFDE
  4190                           plusw2	equ	0xFDB
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function _do_I2C_DO_ACK *****************
  4196 ;; Defined at:
  4197 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      enum E7019
  4204 ;; Registers used:
  4205 ;;		wreg, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4211 ;;      Params:         0       0       0       0       0       0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0
  4213 ;;      Temps:          0       0       0       0       0       0       0
  4214 ;;      Totals:         0       0       0       0       0       0       0
  4215 ;;Total ram usage:        0 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    6
  4218 ;; This function calls:
  4219 ;;		_i2c1_driver_sendACK
  4220 ;; This function is called by:
  4221 ;;		_i2c_ISR
  4222 ;;		i2_i2c_ISR
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           	psect	text34
  4227  0010D2                     __ptext34:
  4228                           	opt stack 0
  4229  0010D2                     _do_I2C_DO_ACK:
  4230                           	opt stack 0
  4231                           
  4232                           ;Skip over the trampoline to the duplicate function for level 2
  4233  0010D2  B24B               	btfsc	btemp,1,c
  4234  0010D4  EFD2  F008         	goto	i2_do_I2C_DO_ACK
  4235  0010D8                     _do_I2C_DO_ACK$intlevel0:
  4236                           	opt stack 19
  4237                           
  4238                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  4239                           
  4240                           ;incstack = 0
  4241  0010D8  ECED  F008         	call	_i2c1_driver_sendACK	;wreg free
  4242                           
  4243                           ;i2c_master.c: 362: return I2C_RCEN;
  4244  0010DC  0E05               	movlw	5
  4245  0010DE  0012               	return	
  4246  0010E0                     __end_of_do_I2C_DO_ACK:
  4247                           	opt stack 0
  4248                           tosu	equ	0xFFF
  4249                           tosh	equ	0xFFE
  4250                           tosl	equ	0xFFD
  4251                           pclath	equ	0xFFA
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           prodh	equ	0xFF4
  4257                           prodl	equ	0xFF3
  4258                           intcon	equ	0xFF2
  4259                           intcon2	equ	0xFF1
  4260                           postinc0	equ	0xFEE
  4261                           plusw0	equ	0xFEB
  4262                           wreg	equ	0xFE8
  4263                           postdec1	equ	0xFE5
  4264                           plusw1	equ	0xFE3
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           plusw2	equ	0xFDB
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _do_I2C_RCEN *****************
  4274 ;; Defined at:
  4275 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      enum E7019
  4282 ;; Registers used:
  4283 ;;		wreg, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4289 ;;      Params:         0       0       0       0       0       0       0
  4290 ;;      Locals:         0       0       0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0
  4292 ;;      Totals:         0       0       0       0       0       0       0
  4293 ;;Total ram usage:        0 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    6
  4296 ;; This function calls:
  4297 ;;		_i2c1_driver_startRX
  4298 ;; This function is called by:
  4299 ;;		_i2c_ISR
  4300 ;;		i2_i2c_ISR
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text35
  4305  001026                     __ptext35:
  4306                           	opt stack 0
  4307  001026                     _do_I2C_RCEN:
  4308                           	opt stack 0
  4309                           
  4310                           ;Skip over the trampoline to the duplicate function for level 2
  4311  001026  B24B               	btfsc	btemp,1,c
  4312  001028  EF93  F008         	goto	i2_do_I2C_RCEN
  4313  00102C                     _do_I2C_RCEN$intlevel0:
  4314                           	opt stack 19
  4315                           
  4316                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  4317                           
  4318                           ;incstack = 0
  4319  00102C  0100               	movlb	0	; () banked
  4320  00102E  979C               	bcf	_i2c_status& (0+255),3,b
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;i2c_master.c: 355: i2c1_driver_startRX();
  4324  001030  ECFF  F008         	call	_i2c1_driver_startRX	;wreg free
  4325                           
  4326                           ;i2c_master.c: 356: return I2C_RX;
  4327  001034  0E04               	movlw	4
  4328  001036  0012               	return	
  4329  001038                     __end_of_do_I2C_RCEN:
  4330                           	opt stack 0
  4331                           tosu	equ	0xFFF
  4332                           tosh	equ	0xFFE
  4333                           tosl	equ	0xFFD
  4334                           pclath	equ	0xFFA
  4335                           tblptru	equ	0xFF8
  4336                           tblptrh	equ	0xFF7
  4337                           tblptrl	equ	0xFF6
  4338                           tablat	equ	0xFF5
  4339                           prodh	equ	0xFF4
  4340                           prodl	equ	0xFF3
  4341                           intcon	equ	0xFF2
  4342                           intcon2	equ	0xFF1
  4343                           postinc0	equ	0xFEE
  4344                           plusw0	equ	0xFEB
  4345                           wreg	equ	0xFE8
  4346                           postdec1	equ	0xFE5
  4347                           plusw1	equ	0xFE3
  4348                           fsr1l	equ	0xFE1
  4349                           indf2	equ	0xFDF
  4350                           postinc2	equ	0xFDE
  4351                           plusw2	equ	0xFDB
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  4357 ;; Defined at:
  4358 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      enum E7019
  4365 ;; Registers used:
  4366 ;;		wreg, status,2, status,0, cstack
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4372 ;;      Params:         0       0       0       0       0       0       0
  4373 ;;      Locals:         0       0       0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0
  4375 ;;      Totals:         0       0       0       0       0       0       0
  4376 ;;Total ram usage:        0 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    6
  4379 ;; This function calls:
  4380 ;;		_i2c1_driver_TXData
  4381 ;; This function is called by:
  4382 ;;		_i2c_ISR
  4383 ;;		i2_i2c_ISR
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           	psect	text36
  4388  000F6A                     __ptext36:
  4389                           	opt stack 0
  4390  000F6A                     _do_I2C_SEND_ADR_WRITE:
  4391                           	opt stack 0
  4392                           
  4393                           ;Skip over the trampoline to the duplicate function for level 2
  4394  000F6A  B24B               	btfsc	btemp,1,c
  4395  000F6C  EF2D  F008         	goto	i2_do_I2C_SEND_ADR_WRITE
  4396  000F70                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  4397                           	opt stack 19
  4398                           
  4399                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  4400                           
  4401                           ;incstack = 0
  4402  000F70  0100               	movlb	0	; () banked
  4403  000F72  879C               	bsf	_i2c_status& (0+255),3,b
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  4407  000F74  519D               	movf	(_i2c_status+1)& (0+255),w,b
  4408  000F76  259D               	addwf	(_i2c_status+1)& (0+255),w,b
  4409  000F78  ECC6  F008         	call	_i2c1_driver_TXData
  4410                           
  4411                           ;i2c_master.c: 349: return I2C_TX;
  4412  000F7C  0E03               	movlw	3
  4413  000F7E  0012               	return	
  4414  000F80                     __end_of_do_I2C_SEND_ADR_WRITE:
  4415                           	opt stack 0
  4416                           tosu	equ	0xFFF
  4417                           tosh	equ	0xFFE
  4418                           tosl	equ	0xFFD
  4419                           pclath	equ	0xFFA
  4420                           tblptru	equ	0xFF8
  4421                           tblptrh	equ	0xFF7
  4422                           tblptrl	equ	0xFF6
  4423                           tablat	equ	0xFF5
  4424                           prodh	equ	0xFF4
  4425                           prodl	equ	0xFF3
  4426                           intcon	equ	0xFF2
  4427                           intcon2	equ	0xFF1
  4428                           postinc0	equ	0xFEE
  4429                           plusw0	equ	0xFEB
  4430                           wreg	equ	0xFE8
  4431                           postdec1	equ	0xFE5
  4432                           plusw1	equ	0xFE3
  4433                           fsr1l	equ	0xFE1
  4434                           indf2	equ	0xFDF
  4435                           postinc2	equ	0xFDE
  4436                           plusw2	equ	0xFDB
  4437                           fsr2h	equ	0xFDA
  4438                           fsr2l	equ	0xFD9
  4439                           status	equ	0xFD8
  4440                           
  4441 ;; *************** function _do_I2C_SEND_INITIAL_READ *****************
  4442 ;; Defined at:
  4443 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  1    wreg      enum E7019
  4450 ;; Registers used:
  4451 ;;		wreg, status,2, status,0, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4457 ;;      Params:         0       0       0       0       0       0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0
  4460 ;;      Totals:         0       0       0       0       0       0       0
  4461 ;;Total ram usage:        0 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    6
  4464 ;; This function calls:
  4465 ;;		_i2c1_driver_TXData
  4466 ;; This function is called by:
  4467 ;;		_i2c_ISR
  4468 ;;		i2_i2c_ISR
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text37
  4473  000F80                     __ptext37:
  4474                           	opt stack 0
  4475  000F80                     _do_I2C_SEND_INITIAL_READ:
  4476                           	opt stack 0
  4477                           
  4478                           ;Skip over the trampoline to the duplicate function for level 2
  4479  000F80  B24B               	btfsc	btemp,1,c
  4480  000F82  EF35  F008         	goto	i2_do_I2C_SEND_INITIAL_READ
  4481  000F86                     _do_I2C_SEND_INITIAL_READ$intlevel0:
  4482                           	opt stack 19
  4483                           
  4484                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  4485                           
  4486                           ;incstack = 0
  4487  000F86  0100               	movlb	0	; () banked
  4488  000F88  879C               	bsf	_i2c_status& (0+255),3,b
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  4492  000F8A  519D               	movf	(_i2c_status+1)& (0+255),w,b
  4493  000F8C  259D               	addwf	(_i2c_status+1)& (0+255),w,b
  4494  000F8E  ECC6  F008         	call	_i2c1_driver_TXData
  4495                           
  4496                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  4497  000F92  0E11               	movlw	17
  4498  000F94  0012               	return	
  4499  000F96                     __end_of_do_I2C_SEND_INITIAL_READ:
  4500                           	opt stack 0
  4501                           tosu	equ	0xFFF
  4502                           tosh	equ	0xFFE
  4503                           tosl	equ	0xFFD
  4504                           pclath	equ	0xFFA
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           intcon2	equ	0xFF1
  4513                           postinc0	equ	0xFEE
  4514                           plusw0	equ	0xFEB
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           plusw1	equ	0xFE3
  4518                           fsr1l	equ	0xFE1
  4519                           indf2	equ	0xFDF
  4520                           postinc2	equ	0xFDE
  4521                           plusw2	equ	0xFDB
  4522                           fsr2h	equ	0xFDA
  4523                           fsr2l	equ	0xFD9
  4524                           status	equ	0xFD8
  4525                           
  4526 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  4527 ;; Defined at:
  4528 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      enum E7019
  4535 ;; Registers used:
  4536 ;;		wreg, status,0, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4542 ;;      Params:         0       0       0       0       0       0       0
  4543 ;;      Locals:         0       0       0       0       0       0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0
  4545 ;;      Totals:         0       0       0       0       0       0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    6
  4549 ;; This function calls:
  4550 ;;		_i2c1_driver_TXData
  4551 ;; This function is called by:
  4552 ;;		_i2c_ISR
  4553 ;;		i2_i2c_ISR
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text38
  4558  000F96                     __ptext38:
  4559                           	opt stack 0
  4560  000F96                     _do_I2C_SEND_ADR_READ:
  4561                           	opt stack 0
  4562                           
  4563                           ;Skip over the trampoline to the duplicate function for level 2
  4564  000F96  B24B               	btfsc	btemp,1,c
  4565  000F98  EF3D  F008         	goto	i2_do_I2C_SEND_ADR_READ
  4566  000F9C                     _do_I2C_SEND_ADR_READ$intlevel0:
  4567                           	opt stack 19
  4568                           
  4569                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  4570                           
  4571                           ;incstack = 0
  4572  000F9C  0100               	movlb	0	; () banked
  4573  000F9E  879C               	bsf	_i2c_status& (0+255),3,b
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  4577  000FA0  80D8               	bsf	status,0,c
  4578  000FA2  359D               	rlcf	(_i2c_status+1)& (0+255),w,b
  4579  000FA4  ECC6  F008         	call	_i2c1_driver_TXData
  4580                           
  4581                           ;i2c_master.c: 325: return I2C_RCEN;
  4582  000FA8  0E05               	movlw	5
  4583  000FAA  0012               	return	
  4584  000FAC                     __end_of_do_I2C_SEND_ADR_READ:
  4585                           	opt stack 0
  4586                           tosu	equ	0xFFF
  4587                           tosh	equ	0xFFE
  4588                           tosl	equ	0xFFD
  4589                           pclath	equ	0xFFA
  4590                           tblptru	equ	0xFF8
  4591                           tblptrh	equ	0xFF7
  4592                           tblptrl	equ	0xFF6
  4593                           tablat	equ	0xFF5
  4594                           prodh	equ	0xFF4
  4595                           prodl	equ	0xFF3
  4596                           intcon	equ	0xFF2
  4597                           intcon2	equ	0xFF1
  4598                           postinc0	equ	0xFEE
  4599                           plusw0	equ	0xFEB
  4600                           wreg	equ	0xFE8
  4601                           postdec1	equ	0xFE5
  4602                           plusw1	equ	0xFE3
  4603                           fsr1l	equ	0xFE1
  4604                           indf2	equ	0xFDF
  4605                           postinc2	equ	0xFDE
  4606                           plusw2	equ	0xFDB
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function _do_I2C_SEND_STOP *****************
  4612 ;; Defined at:
  4613 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      enum E7019
  4620 ;; Registers used:
  4621 ;;		wreg, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4627 ;;      Params:         0       0       0       0       0       0       0
  4628 ;;      Locals:         0       0       0       0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0
  4630 ;;      Totals:         0       0       0       0       0       0       0
  4631 ;;Total ram usage:        0 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    6
  4634 ;; This function calls:
  4635 ;;		_i2c1_driver_stop
  4636 ;; This function is called by:
  4637 ;;		_do_I2C_DO_ADDRESS_NACK
  4638 ;;		_do_I2C_TX
  4639 ;;		_do_I2C_TX_EMPTY
  4640 ;;		_i2c_ISR
  4641 ;;		i2_i2c_ISR
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text39
  4646  0010E0                     __ptext39:
  4647                           	opt stack 0
  4648  0010E0                     _do_I2C_SEND_STOP:
  4649                           	opt stack 0
  4650                           
  4651                           ;Skip over the trampoline to the duplicate function for level 2
  4652  0010E0  B24B               	btfsc	btemp,1,c
  4653  0010E2  EFD6  F008         	goto	i2_do_I2C_SEND_STOP
  4654  0010E6                     _do_I2C_SEND_STOP$intlevel0:
  4655                           	opt stack 18
  4656                           
  4657                           ;i2c_master.c: 316: i2c1_driver_stop();
  4658                           
  4659                           ;incstack = 0
  4660  0010E6  EC01  F009         	call	_i2c1_driver_stop	;wreg free
  4661                           
  4662                           ;i2c_master.c: 317: return I2C_IDLE;
  4663  0010EA  0E00               	movlw	0
  4664  0010EC  0012               	return	
  4665  0010EE                     __end_of_do_I2C_SEND_STOP:
  4666                           	opt stack 0
  4667                           tosu	equ	0xFFF
  4668                           tosh	equ	0xFFE
  4669                           tosl	equ	0xFFD
  4670                           pclath	equ	0xFFA
  4671                           tblptru	equ	0xFF8
  4672                           tblptrh	equ	0xFF7
  4673                           tblptrl	equ	0xFF6
  4674                           tablat	equ	0xFF5
  4675                           prodh	equ	0xFF4
  4676                           prodl	equ	0xFF3
  4677                           intcon	equ	0xFF2
  4678                           intcon2	equ	0xFF1
  4679                           postinc0	equ	0xFEE
  4680                           plusw0	equ	0xFEB
  4681                           wreg	equ	0xFE8
  4682                           postdec1	equ	0xFE5
  4683                           plusw1	equ	0xFE3
  4684                           fsr1l	equ	0xFE1
  4685                           indf2	equ	0xFDF
  4686                           postinc2	equ	0xFDE
  4687                           plusw2	equ	0xFDB
  4688                           fsr2h	equ	0xFDA
  4689                           fsr2l	equ	0xFD9
  4690                           status	equ	0xFD8
  4691                           
  4692 ;; *************** function _do_I2C_SEND_RESTART *****************
  4693 ;; Defined at:
  4694 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;		None
  4697 ;; Auto vars:     Size  Location     Type
  4698 ;;		None
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  1    wreg      enum E7019
  4701 ;; Registers used:
  4702 ;;		wreg, cstack
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4708 ;;      Params:         0       0       0       0       0       0       0
  4709 ;;      Locals:         0       0       0       0       0       0       0
  4710 ;;      Temps:          0       0       0       0       0       0       0
  4711 ;;      Totals:         0       0       0       0       0       0       0
  4712 ;;Total ram usage:        0 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; Hardware stack levels required when called:    6
  4715 ;; This function calls:
  4716 ;;		_i2c1_driver_restart
  4717 ;; This function is called by:
  4718 ;;		_do_I2C_DO_ADDRESS_NACK
  4719 ;;		_do_I2C_TX_EMPTY
  4720 ;;		_i2c_ISR
  4721 ;;		i2_i2c_ISR
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           	psect	text40
  4726  0010EE                     __ptext40:
  4727                           	opt stack 0
  4728  0010EE                     _do_I2C_SEND_RESTART:
  4729                           	opt stack 0
  4730                           
  4731                           ;Skip over the trampoline to the duplicate function for level 2
  4732  0010EE  B24B               	btfsc	btemp,1,c
  4733  0010F0  EFDA  F008         	goto	i2_do_I2C_SEND_RESTART
  4734  0010F4                     _do_I2C_SEND_RESTART$intlevel0:
  4735                           	opt stack 18
  4736                           
  4737                           ;i2c_master.c: 310: i2c1_driver_restart();
  4738                           
  4739                           ;incstack = 0
  4740  0010F4  EC03  F009         	call	_i2c1_driver_restart	;wreg free
  4741                           
  4742                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  4743  0010F8  0E01               	movlw	1
  4744  0010FA  0012               	return	
  4745  0010FC                     __end_of_do_I2C_SEND_RESTART:
  4746                           	opt stack 0
  4747                           tosu	equ	0xFFF
  4748                           tosh	equ	0xFFE
  4749                           tosl	equ	0xFFD
  4750                           pclath	equ	0xFFA
  4751                           tblptru	equ	0xFF8
  4752                           tblptrh	equ	0xFF7
  4753                           tblptrl	equ	0xFF6
  4754                           tablat	equ	0xFF5
  4755                           prodh	equ	0xFF4
  4756                           prodl	equ	0xFF3
  4757                           intcon	equ	0xFF2
  4758                           intcon2	equ	0xFF1
  4759                           postinc0	equ	0xFEE
  4760                           plusw0	equ	0xFEB
  4761                           wreg	equ	0xFE8
  4762                           postdec1	equ	0xFE5
  4763                           plusw1	equ	0xFE3
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           plusw2	equ	0xFDB
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  4773 ;; Defined at:
  4774 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      enum E7019
  4781 ;; Registers used:
  4782 ;;		wreg, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4788 ;;      Params:         0       0       0       0       0       0       0
  4789 ;;      Locals:         0       0       0       0       0       0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0
  4791 ;;      Totals:         0       0       0       0       0       0       0
  4792 ;;Total ram usage:        0 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    6
  4795 ;; This function calls:
  4796 ;;		_i2c1_driver_restart
  4797 ;; This function is called by:
  4798 ;;		_do_I2C_TX
  4799 ;;		_i2c_ISR
  4800 ;;		i2_i2c_ISR
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           	psect	text41
  4805  0010FC                     __ptext41:
  4806                           	opt stack 0
  4807  0010FC                     _do_I2C_SEND_RESTART_WRITE:
  4808                           	opt stack 0
  4809                           
  4810                           ;Skip over the trampoline to the duplicate function for level 2
  4811  0010FC  B24B               	btfsc	btemp,1,c
  4812  0010FE  EFDE  F008         	goto	i2_do_I2C_SEND_RESTART_WRITE
  4813  001102                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  4814                           	opt stack 18
  4815                           
  4816                           ;i2c_master.c: 304: i2c1_driver_restart();
  4817                           
  4818                           ;incstack = 0
  4819  001102  EC03  F009         	call	_i2c1_driver_restart	;wreg free
  4820                           
  4821                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  4822  001106  0E02               	movlw	2
  4823  001108  0012               	return	
  4824  00110A                     __end_of_do_I2C_SEND_RESTART_WRITE:
  4825                           	opt stack 0
  4826                           tosu	equ	0xFFF
  4827                           tosh	equ	0xFFE
  4828                           tosl	equ	0xFFD
  4829                           pclath	equ	0xFFA
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           prodh	equ	0xFF4
  4835                           prodl	equ	0xFF3
  4836                           intcon	equ	0xFF2
  4837                           intcon2	equ	0xFF1
  4838                           postinc0	equ	0xFEE
  4839                           plusw0	equ	0xFEB
  4840                           wreg	equ	0xFE8
  4841                           postdec1	equ	0xFE5
  4842                           plusw1	equ	0xFE3
  4843                           fsr1l	equ	0xFE1
  4844                           indf2	equ	0xFDF
  4845                           postinc2	equ	0xFDE
  4846                           plusw2	equ	0xFDB
  4847                           fsr2h	equ	0xFDA
  4848                           fsr2l	equ	0xFD9
  4849                           status	equ	0xFD8
  4850                           
  4851 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  4852 ;; Defined at:
  4853 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      enum E7019
  4860 ;; Registers used:
  4861 ;;		wreg, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4867 ;;      Params:         0       0       0       0       0       0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0
  4870 ;;      Totals:         0       0       0       0       0       0       0
  4871 ;;Total ram usage:        0 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    6
  4874 ;; This function calls:
  4875 ;;		_i2c1_driver_restart
  4876 ;; This function is called by:
  4877 ;;		_do_I2C_TX
  4878 ;;		_i2c_ISR
  4879 ;;		i2_i2c_ISR
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text42
  4884  00110A                     __ptext42:
  4885                           	opt stack 0
  4886  00110A                     _do_I2C_SEND_RESTART_READ:
  4887                           	opt stack 0
  4888                           
  4889                           ;Skip over the trampoline to the duplicate function for level 2
  4890  00110A  B24B               	btfsc	btemp,1,c
  4891  00110C  EFE2  F008         	goto	i2_do_I2C_SEND_RESTART_READ
  4892  001110                     _do_I2C_SEND_RESTART_READ$intlevel0:
  4893                           	opt stack 18
  4894                           
  4895                           ;i2c_master.c: 298: i2c1_driver_restart();
  4896                           
  4897                           ;incstack = 0
  4898  001110  EC03  F009         	call	_i2c1_driver_restart	;wreg free
  4899                           
  4900                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  4901  001114  0E01               	movlw	1
  4902  001116  0012               	return	
  4903  001118                     __end_of_do_I2C_SEND_RESTART_READ:
  4904                           	opt stack 0
  4905                           tosu	equ	0xFFF
  4906                           tosh	equ	0xFFE
  4907                           tosl	equ	0xFFD
  4908                           pclath	equ	0xFFA
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           intcon	equ	0xFF2
  4916                           intcon2	equ	0xFF1
  4917                           postinc0	equ	0xFEE
  4918                           plusw0	equ	0xFEB
  4919                           wreg	equ	0xFE8
  4920                           postdec1	equ	0xFE5
  4921                           plusw1	equ	0xFE3
  4922                           fsr1l	equ	0xFE1
  4923                           indf2	equ	0xFDF
  4924                           postinc2	equ	0xFDE
  4925                           plusw2	equ	0xFDB
  4926                           fsr2h	equ	0xFDA
  4927                           fsr2l	equ	0xFD9
  4928                           status	equ	0xFD8
  4929                           
  4930 ;; *************** function _do_I2C_IDLE *****************
  4931 ;; Defined at:
  4932 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;		None
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      enum E7019
  4939 ;; Registers used:
  4940 ;;		wreg, status,2
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4946 ;;      Params:         0       0       0       0       0       0       0
  4947 ;;      Locals:         0       0       0       0       0       0       0
  4948 ;;      Temps:          0       0       0       0       0       0       0
  4949 ;;      Totals:         0       0       0       0       0       0       0
  4950 ;;Total ram usage:        0 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    5
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_i2c_ISR
  4957 ;;		i2_i2c_ISR
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text43
  4962  001038                     __ptext43:
  4963                           	opt stack 0
  4964  001038                     _do_I2C_IDLE:
  4965                           	opt stack 0
  4966                           
  4967                           ;Skip over the trampoline to the duplicate function for level 2
  4968  001038  B24B               	btfsc	btemp,1,c
  4969  00103A  EF99  F008         	goto	i2_do_I2C_IDLE
  4970  00103E                     _do_I2C_IDLE$intlevel0:
  4971                           	opt stack 20
  4972                           
  4973                           ;i2c_master.c: 291: i2c_status.busy = 0;
  4974                           
  4975                           ;incstack = 0
  4976  00103E  0100               	movlb	0	; () banked
  4977  001040  919C               	bcf	_i2c_status& (0+255),0,b
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  4981  001042  0E00               	movlw	0
  4982  001044  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;i2c_master.c: 293: return I2C_RESET;
  4986  001046  0E0E               	movlw	14
  4987  001048  0012               	return	
  4988  00104A                     __end_of_do_I2C_IDLE:
  4989                           	opt stack 0
  4990                           tosu	equ	0xFFF
  4991                           tosh	equ	0xFFE
  4992                           tosl	equ	0xFFD
  4993                           pclath	equ	0xFFA
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           intcon	equ	0xFF2
  5001                           intcon2	equ	0xFF1
  5002                           postinc0	equ	0xFEE
  5003                           plusw0	equ	0xFEB
  5004                           wreg	equ	0xFE8
  5005                           postdec1	equ	0xFE5
  5006                           plusw1	equ	0xFE3
  5007                           fsr1l	equ	0xFE1
  5008                           indf2	equ	0xFDF
  5009                           postinc2	equ	0xFDE
  5010                           plusw2	equ	0xFDB
  5011                           fsr2h	equ	0xFDA
  5012                           fsr2l	equ	0xFD9
  5013                           status	equ	0xFD8
  5014                           
  5015 ;; *************** function _do_I2C_RESET *****************
  5016 ;; Defined at:
  5017 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      enum E7019
  5024 ;; Registers used:
  5025 ;;		wreg, status,2, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5031 ;;      Params:         0       0       0       0       0       0       0
  5032 ;;      Locals:         0       0       0       0       0       0       0
  5033 ;;      Temps:          0       0       0       0       0       0       0
  5034 ;;      Totals:         0       0       0       0       0       0       0
  5035 ;;Total ram usage:        0 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    6
  5038 ;; This function calls:
  5039 ;;		_i2c1_driver_resetBus
  5040 ;; This function is called by:
  5041 ;;		_i2c_ISR
  5042 ;;		i2_i2c_ISR
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text44
  5047  000FAC                     __ptext44:
  5048                           	opt stack 0
  5049  000FAC                     _do_I2C_RESET:
  5050                           	opt stack 0
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;Skip over the trampoline to the duplicate function for level 2
  5054  000FAC  B24B               	btfsc	btemp,1,c
  5055  000FAE  EF45  F008         	goto	i2_do_I2C_RESET
  5056  000FB2                     _do_I2C_RESET$intlevel0:
  5057                           	opt stack 19
  5058                           
  5059                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  5060                           
  5061                           ;incstack = 0
  5062  000FB2  EC1D  F009         	call	_i2c1_driver_resetBus	;wreg free
  5063                           
  5064                           ;i2c_master.c: 284: i2c_status.busy = 0;
  5065  000FB6  0100               	movlb	0	; () banked
  5066  000FB8  919C               	bcf	_i2c_status& (0+255),0,b
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  5070  000FBA  0E00               	movlw	0
  5071  000FBC  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;i2c_master.c: 286: return I2C_RESET;
  5075  000FBE  0E0E               	movlw	14
  5076  000FC0  0012               	return	
  5077  000FC2                     __end_of_do_I2C_RESET:
  5078                           	opt stack 0
  5079                           tosu	equ	0xFFF
  5080                           tosh	equ	0xFFE
  5081                           tosl	equ	0xFFD
  5082                           pclath	equ	0xFFA
  5083                           tblptru	equ	0xFF8
  5084                           tblptrh	equ	0xFF7
  5085                           tblptrl	equ	0xFF6
  5086                           tablat	equ	0xFF5
  5087                           prodh	equ	0xFF4
  5088                           prodl	equ	0xFF3
  5089                           intcon	equ	0xFF2
  5090                           intcon2	equ	0xFF1
  5091                           postinc0	equ	0xFEE
  5092                           plusw0	equ	0xFEB
  5093                           wreg	equ	0xFE8
  5094                           postdec1	equ	0xFE5
  5095                           plusw1	equ	0xFE3
  5096                           fsr1l	equ	0xFE1
  5097                           indf2	equ	0xFDF
  5098                           postinc2	equ	0xFDE
  5099                           plusw2	equ	0xFDB
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _do_I2C_TX_REGISTER *****************
  5105 ;; Defined at:
  5106 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  1    wreg      enum E7019
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, cstack
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5120 ;;      Params:         0       0       0       0       0       0       0
  5121 ;;      Locals:         0       0       0       0       0       0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0
  5123 ;;      Totals:         0       0       0       0       0       0       0
  5124 ;;Total ram usage:        0 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    6
  5127 ;; This function calls:
  5128 ;;		_i2c1_driver_TXData
  5129 ;; This function is called by:
  5130 ;;		_i2c_ISR
  5131 ;;		i2_i2c_ISR
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text45
  5136  000FEE                     __ptext45:
  5137                           	opt stack 0
  5138  000FEE                     _do_I2C_TX_REGISTER:
  5139                           	opt stack 0
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;Skip over the trampoline to the duplicate function for level 2
  5143  000FEE  B24B               	btfsc	btemp,1,c
  5144  000FF0  EF8C  F008         	goto	i2_do_I2C_TX_REGISTER
  5145  000FF4                     _do_I2C_TX_REGISTER$intlevel0:
  5146                           	opt stack 19
  5147                           
  5148                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  5149                           
  5150                           ;incstack = 0
  5151  000FF4  0100               	movlb	0	; () banked
  5152  000FF6  879C               	bsf	_i2c_status& (0+255),3,b
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  5156  000FF8  51C0               	movf	(_i2c_status+36)& (0+255),w,b
  5157  000FFA  ECC6  F008         	call	_i2c1_driver_TXData
  5158                           
  5159                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  5160  000FFE  0E07               	movlw	7
  5161  001000  0012               	return	
  5162  001002                     __end_of_do_I2C_TX_REGISTER:
  5163                           	opt stack 0
  5164                           tosu	equ	0xFFF
  5165                           tosh	equ	0xFFE
  5166                           tosl	equ	0xFFD
  5167                           pclath	equ	0xFFA
  5168                           tblptru	equ	0xFF8
  5169                           tblptrh	equ	0xFF7
  5170                           tblptrl	equ	0xFF6
  5171                           tablat	equ	0xFF5
  5172                           prodh	equ	0xFF4
  5173                           prodl	equ	0xFF3
  5174                           intcon	equ	0xFF2
  5175                           intcon2	equ	0xFF1
  5176                           postinc0	equ	0xFEE
  5177                           plusw0	equ	0xFEB
  5178                           wreg	equ	0xFE8
  5179                           postdec1	equ	0xFE5
  5180                           plusw1	equ	0xFE3
  5181                           fsr1l	equ	0xFE1
  5182                           indf2	equ	0xFDF
  5183                           postinc2	equ	0xFDE
  5184                           plusw2	equ	0xFDB
  5185                           fsr2h	equ	0xFDA
  5186                           fsr2l	equ	0xFD9
  5187                           status	equ	0xFD8
  5188                           
  5189 ;; *************** function _mssp1_setIRQ *****************
  5190 ;; Defined at:
  5191 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;		None
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;		None
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      void 
  5198 ;; Registers used:
  5199 ;;		None
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5205 ;;      Params:         0       0       0       0       0       0       0
  5206 ;;      Locals:         0       0       0       0       0       0       0
  5207 ;;      Temps:          0       0       0       0       0       0       0
  5208 ;;      Totals:         0       0       0       0       0       0       0
  5209 ;;Total ram usage:        0 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    5
  5212 ;; This function calls:
  5213 ;;		Nothing
  5214 ;; This function is called by:
  5215 ;;		_do_I2C_TX_EMPTY
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text46
  5220  0011F6                     __ptext46:
  5221                           	opt stack 0
  5222  0011F6                     _mssp1_setIRQ:
  5223                           	opt stack 19
  5224                           
  5225                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  5226                           
  5227                           ;incstack = 0
  5228  0011F6  869E               	bsf	3998,3,c	;volatile
  5229  0011F8  0012               	return		;funcret
  5230  0011FA                     __end_of_mssp1_setIRQ:
  5231                           	opt stack 0
  5232                           tosu	equ	0xFFF
  5233                           tosh	equ	0xFFE
  5234                           tosl	equ	0xFFD
  5235                           pclath	equ	0xFFA
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           intcon	equ	0xFF2
  5243                           intcon2	equ	0xFF1
  5244                           postinc0	equ	0xFEE
  5245                           plusw0	equ	0xFEB
  5246                           wreg	equ	0xFE8
  5247                           postdec1	equ	0xFE5
  5248                           plusw1	equ	0xFE3
  5249                           fsr1l	equ	0xFE1
  5250                           indf2	equ	0xFDF
  5251                           postinc2	equ	0xFDE
  5252                           plusw2	equ	0xFDB
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257 ;; *************** function _i2c1_driver_isNACK *****************
  5258 ;; Defined at:
  5259 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;		None
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;		None               void
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5273 ;;      Params:         0       0       0       0       0       0       0
  5274 ;;      Locals:         0       0       0       0       0       0       0
  5275 ;;      Temps:          1       0       0       0       0       0       0
  5276 ;;      Totals:         1       0       0       0       0       0       0
  5277 ;;Total ram usage:        1 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    5
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_do_I2C_TX
  5284 ;;		_i2c_ISR
  5285 ;; This function uses a non-reentrant model
  5286 ;;
  5287                           
  5288                           	psect	text47
  5289  000FC2                     __ptext47:
  5290                           	opt stack 0
  5291  000FC2                     _i2c1_driver_isNACK:
  5292                           	opt stack 20
  5293                           
  5294                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  5295                           
  5296                           ;incstack = 0
  5297  000FC2  50C5               	movf	4037,w,c	;volatile
  5298  000FC4  0BBF               	andlw	-65
  5299  000FC6  0940               	iorlw	64
  5300  000FC8  6EC5               	movwf	4037,c	;volatile
  5301  000FCA  38C5               	swapf	4037,w,c	;volatile
  5302  000FCC  32E8               	rrcf	wreg,f,c
  5303  000FCE  32E8               	rrcf	wreg,f,c
  5304  000FD0  0B01               	andlw	1
  5305  000FD2  6E3A               	movwf	??_i2c1_driver_isNACK& (0+255),c
  5306  000FD4  303A               	rrcf	??_i2c1_driver_isNACK,w,c
  5307  000FD6  0012               	return	
  5308  000FD8                     __end_of_i2c1_driver_isNACK:
  5309                           	opt stack 0
  5310                           tosu	equ	0xFFF
  5311                           tosh	equ	0xFFE
  5312                           tosl	equ	0xFFD
  5313                           pclath	equ	0xFFA
  5314                           tblptru	equ	0xFF8
  5315                           tblptrh	equ	0xFF7
  5316                           tblptrl	equ	0xFF6
  5317                           tablat	equ	0xFF5
  5318                           prodh	equ	0xFF4
  5319                           prodl	equ	0xFF3
  5320                           intcon	equ	0xFF2
  5321                           intcon2	equ	0xFF1
  5322                           postinc0	equ	0xFEE
  5323                           plusw0	equ	0xFEB
  5324                           wreg	equ	0xFE8
  5325                           postdec1	equ	0xFE5
  5326                           plusw1	equ	0xFE3
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           plusw2	equ	0xFDB
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _i2c1_driver_TXData *****************
  5336 ;; Defined at:
  5337 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  d               1    wreg     unsigned char 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  d               1   20[COMRAM] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		wreg
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5351 ;;      Params:         0       0       0       0       0       0       0
  5352 ;;      Locals:         1       0       0       0       0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0
  5354 ;;      Totals:         1       0       0       0       0       0       0
  5355 ;;Total ram usage:        1 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    5
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_do_I2C_SEND_ADR_READ
  5362 ;;		_do_I2C_SEND_INITIAL_READ
  5363 ;;		_do_I2C_TX_REGISTER
  5364 ;;		_do_I2C_SEND_ADR_WRITE
  5365 ;;		_do_I2C_TX
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text48
  5370  00118C                     __ptext48:
  5371                           	opt stack 0
  5372  00118C                     _i2c1_driver_TXData:
  5373                           	opt stack 19
  5374                           
  5375                           ;incstack = 0
  5376                           ;i2c1_driver_TXData@d stored from wreg
  5377  00118C  6E3A               	movwf	i2c1_driver_TXData@d,c
  5378                           
  5379                           ;i2c1_driver.c: 188: SSP1BUF = d;
  5380  00118E  C03A  FFC9         	movff	i2c1_driver_TXData@d,4041	;volatile
  5381  001192  0012               	return		;funcret
  5382  001194                     __end_of_i2c1_driver_TXData:
  5383                           	opt stack 0
  5384                           tosu	equ	0xFFF
  5385                           tosh	equ	0xFFE
  5386                           tosl	equ	0xFFD
  5387                           pclath	equ	0xFFA
  5388                           tblptru	equ	0xFF8
  5389                           tblptrh	equ	0xFF7
  5390                           tblptrl	equ	0xFF6
  5391                           tablat	equ	0xFF5
  5392                           prodh	equ	0xFF4
  5393                           prodl	equ	0xFF3
  5394                           intcon	equ	0xFF2
  5395                           intcon2	equ	0xFF1
  5396                           postinc0	equ	0xFEE
  5397                           plusw0	equ	0xFEB
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           plusw1	equ	0xFE3
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           plusw2	equ	0xFDB
  5405                           fsr2h	equ	0xFDA
  5406                           fsr2l	equ	0xFD9
  5407                           status	equ	0xFD8
  5408                           
  5409 ;; *************** function _i2c1_driver_getRXData *****************
  5410 ;; Defined at:
  5411 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;		None
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;		None
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      unsigned char 
  5418 ;; Registers used:
  5419 ;;		wreg, status,2
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5425 ;;      Params:         0       0       0       0       0       0       0
  5426 ;;      Locals:         0       0       0       0       0       0       0
  5427 ;;      Temps:          0       0       0       0       0       0       0
  5428 ;;      Totals:         0       0       0       0       0       0       0
  5429 ;;Total ram usage:        0 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:    5
  5432 ;; This function calls:
  5433 ;;		Nothing
  5434 ;; This function is called by:
  5435 ;;		_do_I2C_RX
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text49
  5440  0011FA                     __ptext49:
  5441                           	opt stack 0
  5442  0011FA                     _i2c1_driver_getRXData:
  5443                           	opt stack 19
  5444                           
  5445                           ;i2c1_driver.c: 173: return SSP1BUF;
  5446                           
  5447                           ;incstack = 0
  5448  0011FA  50C9               	movf	4041,w,c	;volatile
  5449  0011FC  0012               	return	
  5450  0011FE                     __end_of_i2c1_driver_getRXData:
  5451                           	opt stack 0
  5452                           tosu	equ	0xFFF
  5453                           tosh	equ	0xFFE
  5454                           tosl	equ	0xFFD
  5455                           pclath	equ	0xFFA
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           intcon2	equ	0xFF1
  5464                           postinc0	equ	0xFEE
  5465                           plusw0	equ	0xFEB
  5466                           wreg	equ	0xFE8
  5467                           postdec1	equ	0xFE5
  5468                           plusw1	equ	0xFE3
  5469                           fsr1l	equ	0xFE1
  5470                           indf2	equ	0xFDF
  5471                           postinc2	equ	0xFDE
  5472                           plusw2	equ	0xFDB
  5473                           fsr2h	equ	0xFDA
  5474                           fsr2l	equ	0xFD9
  5475                           status	equ	0xFD8
  5476                           
  5477 ;; *************** function _i2c1_driver_sendNACK *****************
  5478 ;; Defined at:
  5479 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;		None
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      void 
  5486 ;; Registers used:
  5487 ;;		None
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5493 ;;      Params:         0       0       0       0       0       0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0
  5496 ;;      Totals:         0       0       0       0       0       0       0
  5497 ;;Total ram usage:        0 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    5
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_do_I2C_DO_NACK_STOP
  5504 ;;		_do_I2C_DO_NACK_RESTART
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text50
  5509  0011D4                     __ptext50:
  5510                           	opt stack 0
  5511  0011D4                     _i2c1_driver_sendNACK:
  5512                           	opt stack 18
  5513                           
  5514                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  5515                           
  5516                           ;incstack = 0
  5517  0011D4  8AC5               	bsf	4037,5,c	;volatile
  5518                           
  5519                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  5520  0011D6  88C5               	bsf	4037,4,c	;volatile
  5521  0011D8  0012               	return		;funcret
  5522  0011DA                     __end_of_i2c1_driver_sendNACK:
  5523                           	opt stack 0
  5524                           tosu	equ	0xFFF
  5525                           tosh	equ	0xFFE
  5526                           tosl	equ	0xFFD
  5527                           pclath	equ	0xFFA
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           intcon	equ	0xFF2
  5535                           intcon2	equ	0xFF1
  5536                           postinc0	equ	0xFEE
  5537                           plusw0	equ	0xFEB
  5538                           wreg	equ	0xFE8
  5539                           postdec1	equ	0xFE5
  5540                           plusw1	equ	0xFE3
  5541                           fsr1l	equ	0xFE1
  5542                           indf2	equ	0xFDF
  5543                           postinc2	equ	0xFDE
  5544                           plusw2	equ	0xFDB
  5545                           fsr2h	equ	0xFDA
  5546                           fsr2l	equ	0xFD9
  5547                           status	equ	0xFD8
  5548                           
  5549 ;; *************** function _i2c1_driver_resetBus *****************
  5550 ;; Defined at:
  5551 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;		None
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		None
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5565 ;;      Params:         0       0       0       0       0       0       0
  5566 ;;      Locals:         0       0       0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0
  5568 ;;      Totals:         0       0       0       0       0       0       0
  5569 ;;Total ram usage:        0 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    5
  5572 ;; This function calls:
  5573 ;;		Nothing
  5574 ;; This function is called by:
  5575 ;;		_do_I2C_RESET
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           	psect	text51
  5580  00123A                     __ptext51:
  5581                           	opt stack 0
  5582  00123A                     _i2c1_driver_resetBus:
  5583                           	opt stack 19
  5584                           
  5585                           ;incstack = 0
  5586  00123A  0012               	return		;funcret
  5587  00123C                     __end_of_i2c1_driver_resetBus:
  5588                           	opt stack 0
  5589                           tosu	equ	0xFFF
  5590                           tosh	equ	0xFFE
  5591                           tosl	equ	0xFFD
  5592                           pclath	equ	0xFFA
  5593                           tblptru	equ	0xFF8
  5594                           tblptrh	equ	0xFF7
  5595                           tblptrl	equ	0xFF6
  5596                           tablat	equ	0xFF5
  5597                           prodh	equ	0xFF4
  5598                           prodl	equ	0xFF3
  5599                           intcon	equ	0xFF2
  5600                           intcon2	equ	0xFF1
  5601                           postinc0	equ	0xFEE
  5602                           plusw0	equ	0xFEB
  5603                           wreg	equ	0xFE8
  5604                           postdec1	equ	0xFE5
  5605                           plusw1	equ	0xFE3
  5606                           fsr1l	equ	0xFE1
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           plusw2	equ	0xFDB
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function _i2c1_driver_startRX *****************
  5615 ;; Defined at:
  5616 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;		None
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		None
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5630 ;;      Params:         0       0       0       0       0       0       0
  5631 ;;      Locals:         0       0       0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0
  5633 ;;      Totals:         0       0       0       0       0       0       0
  5634 ;;Total ram usage:        0 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    5
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_do_I2C_RCEN
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text52
  5645  0011FE                     __ptext52:
  5646                           	opt stack 0
  5647  0011FE                     _i2c1_driver_startRX:
  5648                           	opt stack 19
  5649                           
  5650                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  5651                           
  5652                           ;incstack = 0
  5653  0011FE  86C5               	bsf	4037,3,c	;volatile
  5654  001200  0012               	return		;funcret
  5655  001202                     __end_of_i2c1_driver_startRX:
  5656                           	opt stack 0
  5657                           tosu	equ	0xFFF
  5658                           tosh	equ	0xFFE
  5659                           tosl	equ	0xFFD
  5660                           pclath	equ	0xFFA
  5661                           tblptru	equ	0xFF8
  5662                           tblptrh	equ	0xFF7
  5663                           tblptrl	equ	0xFF6
  5664                           tablat	equ	0xFF5
  5665                           prodh	equ	0xFF4
  5666                           prodl	equ	0xFF3
  5667                           intcon	equ	0xFF2
  5668                           intcon2	equ	0xFF1
  5669                           postinc0	equ	0xFEE
  5670                           plusw0	equ	0xFEB
  5671                           wreg	equ	0xFE8
  5672                           postdec1	equ	0xFE5
  5673                           plusw1	equ	0xFE3
  5674                           fsr1l	equ	0xFE1
  5675                           indf2	equ	0xFDF
  5676                           postinc2	equ	0xFDE
  5677                           plusw2	equ	0xFDB
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _returnReset *****************
  5683 ;; Defined at:
  5684 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  p               2   20[COMRAM] PTR void 
  5687 ;;		 -> NULL(0), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      enum E6842
  5692 ;; Registers used:
  5693 ;;		wreg
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5699 ;;      Params:         2       0       0       0       0       0       0
  5700 ;;      Locals:         0       0       0       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0
  5702 ;;      Totals:         2       0       0       0       0       0       0
  5703 ;;Total ram usage:        2 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    5
  5706 ;; This function calls:
  5707 ;;		Nothing
  5708 ;; This function is called by:
  5709 ;;		_i2c_open
  5710 ;;		_do_I2C_DO_ADDRESS_NACK
  5711 ;;		_do_I2C_TX
  5712 ;;		_do_I2C_RX
  5713 ;;		_do_I2C_TX_EMPTY
  5714 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5715 ;;		i2_do_I2C_TX
  5716 ;;		i2_do_I2C_RX
  5717 ;;		i2_do_I2C_TX_EMPTY
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text53
  5722  001170                     __ptext53:
  5723                           	opt stack 0
  5724  001170                     _returnReset:
  5725                           	opt stack 0
  5726                           
  5727                           ;Skip over the trampoline to the duplicate function for level 2
  5728  001170  B24B               	btfsc	btemp,1,c
  5729  001172  EF13  F009         	goto	i2_returnReset
  5730  001176                     _returnReset$intlevel0:
  5731                           	opt stack 19
  5732                           
  5733                           ;i2c_master.c: 515: return i2c_reset_link;
  5734                           
  5735                           ;incstack = 0
  5736  001176  0E05               	movlw	5
  5737  001178  0012               	return	
  5738  00117A                     __end_of_returnReset:
  5739                           	opt stack 0
  5740                           tosu	equ	0xFFF
  5741                           tosh	equ	0xFFE
  5742                           tosl	equ	0xFFD
  5743                           pclath	equ	0xFFA
  5744                           tblptru	equ	0xFF8
  5745                           tblptrh	equ	0xFF7
  5746                           tblptrl	equ	0xFF6
  5747                           tablat	equ	0xFF5
  5748                           prodh	equ	0xFF4
  5749                           prodl	equ	0xFF3
  5750                           intcon	equ	0xFF2
  5751                           intcon2	equ	0xFF1
  5752                           postinc0	equ	0xFEE
  5753                           plusw0	equ	0xFEB
  5754                           wreg	equ	0xFE8
  5755                           postdec1	equ	0xFE5
  5756                           plusw1	equ	0xFE3
  5757                           fsr1l	equ	0xFE1
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           plusw2	equ	0xFDB
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _returnStop *****************
  5766 ;; Defined at:
  5767 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  p               2   20[COMRAM] PTR void 
  5770 ;;		 -> NULL(0), 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      enum E6842
  5775 ;; Registers used:
  5776 ;;		wreg
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5782 ;;      Params:         2       0       0       0       0       0       0
  5783 ;;      Locals:         0       0       0       0       0       0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0
  5785 ;;      Totals:         2       0       0       0       0       0       0
  5786 ;;Total ram usage:        2 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    5
  5789 ;; This function calls:
  5790 ;;		Nothing
  5791 ;; This function is called by:
  5792 ;;		_i2c_open
  5793 ;;		_setCallBack
  5794 ;;		_do_I2C_DO_ADDRESS_NACK
  5795 ;;		_do_I2C_TX
  5796 ;;		_do_I2C_RX
  5797 ;;		_do_I2C_TX_EMPTY
  5798 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5799 ;;		i2_do_I2C_TX
  5800 ;;		i2_do_I2C_RX
  5801 ;;		i2_do_I2C_TX_EMPTY
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           	psect	text54
  5806  00117A                     __ptext54:
  5807                           	opt stack 0
  5808  00117A                     _returnStop:
  5809                           	opt stack 0
  5810                           
  5811                           ;Skip over the trampoline to the duplicate function for level 2
  5812  00117A  B24B               	btfsc	btemp,1,c
  5813  00117C  EF15  F009         	goto	i2_returnStop
  5814  001180                     _returnStop$intlevel0:
  5815                           	opt stack 19
  5816                           
  5817                           ;i2c_master.c: 510: return i2c_stop;
  5818                           
  5819                           ;incstack = 0
  5820  001180  0E01               	movlw	1
  5821  001182  0012               	return	
  5822  001184                     __end_of_returnStop:
  5823                           	opt stack 0
  5824                           tosu	equ	0xFFF
  5825                           tosh	equ	0xFFE
  5826                           tosl	equ	0xFFD
  5827                           pclath	equ	0xFFA
  5828                           tblptru	equ	0xFF8
  5829                           tblptrh	equ	0xFF7
  5830                           tblptrl	equ	0xFF6
  5831                           tablat	equ	0xFF5
  5832                           prodh	equ	0xFF4
  5833                           prodl	equ	0xFF3
  5834                           intcon	equ	0xFF2
  5835                           intcon2	equ	0xFF1
  5836                           postinc0	equ	0xFEE
  5837                           plusw0	equ	0xFEB
  5838                           wreg	equ	0xFE8
  5839                           postdec1	equ	0xFE5
  5840                           plusw1	equ	0xFE3
  5841                           fsr1l	equ	0xFE1
  5842                           indf2	equ	0xFDF
  5843                           postinc2	equ	0xFDE
  5844                           plusw2	equ	0xFDB
  5845                           fsr2h	equ	0xFDA
  5846                           fsr2l	equ	0xFD9
  5847                           status	equ	0xFD8
  5848                           
  5849 ;; *************** function _i2c1_driver_stop *****************
  5850 ;; Defined at:
  5851 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;		None
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;		None
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      void 
  5858 ;; Registers used:
  5859 ;;		None
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5865 ;;      Params:         0       0       0       0       0       0       0
  5866 ;;      Locals:         0       0       0       0       0       0       0
  5867 ;;      Temps:          0       0       0       0       0       0       0
  5868 ;;      Totals:         0       0       0       0       0       0       0
  5869 ;;Total ram usage:        0 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    5
  5872 ;; This function calls:
  5873 ;;		Nothing
  5874 ;; This function is called by:
  5875 ;;		_do_I2C_SEND_STOP
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	text55
  5880  001202                     __ptext55:
  5881                           	opt stack 0
  5882  001202                     _i2c1_driver_stop:
  5883                           	opt stack 18
  5884                           
  5885                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  5886                           
  5887                           ;incstack = 0
  5888  001202  84C5               	bsf	4037,2,c	;volatile
  5889  001204  0012               	return		;funcret
  5890  001206                     __end_of_i2c1_driver_stop:
  5891                           	opt stack 0
  5892                           tosu	equ	0xFFF
  5893                           tosh	equ	0xFFE
  5894                           tosl	equ	0xFFD
  5895                           pclath	equ	0xFFA
  5896                           tblptru	equ	0xFF8
  5897                           tblptrh	equ	0xFF7
  5898                           tblptrl	equ	0xFF6
  5899                           tablat	equ	0xFF5
  5900                           prodh	equ	0xFF4
  5901                           prodl	equ	0xFF3
  5902                           intcon	equ	0xFF2
  5903                           intcon2	equ	0xFF1
  5904                           postinc0	equ	0xFEE
  5905                           plusw0	equ	0xFEB
  5906                           wreg	equ	0xFE8
  5907                           postdec1	equ	0xFE5
  5908                           plusw1	equ	0xFE3
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           plusw2	equ	0xFDB
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _i2c1_driver_restart *****************
  5918 ;; Defined at:
  5919 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;		None
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;		None
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      void 
  5926 ;; Registers used:
  5927 ;;		None
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5933 ;;      Params:         0       0       0       0       0       0       0
  5934 ;;      Locals:         0       0       0       0       0       0       0
  5935 ;;      Temps:          0       0       0       0       0       0       0
  5936 ;;      Totals:         0       0       0       0       0       0       0
  5937 ;;Total ram usage:        0 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:    5
  5940 ;; This function calls:
  5941 ;;		Nothing
  5942 ;; This function is called by:
  5943 ;;		_do_I2C_SEND_RESTART_READ
  5944 ;;		_do_I2C_SEND_RESTART_WRITE
  5945 ;;		_do_I2C_SEND_RESTART
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           	psect	text56
  5950  001206                     __ptext56:
  5951                           	opt stack 0
  5952  001206                     _i2c1_driver_restart:
  5953                           	opt stack 18
  5954                           
  5955                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  5956                           
  5957                           ;incstack = 0
  5958  001206  82C5               	bsf	4037,1,c	;volatile
  5959  001208  0012               	return		;funcret
  5960  00120A                     __end_of_i2c1_driver_restart:
  5961                           	opt stack 0
  5962                           tosu	equ	0xFFF
  5963                           tosh	equ	0xFFE
  5964                           tosl	equ	0xFFD
  5965                           pclath	equ	0xFFA
  5966                           tblptru	equ	0xFF8
  5967                           tblptrh	equ	0xFF7
  5968                           tblptrl	equ	0xFF6
  5969                           tablat	equ	0xFF5
  5970                           prodh	equ	0xFF4
  5971                           prodl	equ	0xFF3
  5972                           intcon	equ	0xFF2
  5973                           intcon2	equ	0xFF1
  5974                           postinc0	equ	0xFEE
  5975                           plusw0	equ	0xFEB
  5976                           wreg	equ	0xFE8
  5977                           postdec1	equ	0xFE5
  5978                           plusw1	equ	0xFE3
  5979                           fsr1l	equ	0xFE1
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           plusw2	equ	0xFDB
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function _i2c1_driver_sendACK *****************
  5988 ;; Defined at:
  5989 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;		None
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;		None
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		None
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6003 ;;      Params:         0       0       0       0       0       0       0
  6004 ;;      Locals:         0       0       0       0       0       0       0
  6005 ;;      Temps:          0       0       0       0       0       0       0
  6006 ;;      Totals:         0       0       0       0       0       0       0
  6007 ;;Total ram usage:        0 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    5
  6010 ;; This function calls:
  6011 ;;		Nothing
  6012 ;; This function is called by:
  6013 ;;		_do_I2C_DO_ACK
  6014 ;;		_do_I2C_RX
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text57
  6019  0011DA                     __ptext57:
  6020                           	opt stack 0
  6021  0011DA                     _i2c1_driver_sendACK:
  6022                           	opt stack 19
  6023                           
  6024                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  6025                           
  6026                           ;incstack = 0
  6027  0011DA  9AC5               	bcf	4037,5,c	;volatile
  6028                           
  6029                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  6030  0011DC  88C5               	bsf	4037,4,c	;volatile
  6031  0011DE  0012               	return		;funcret
  6032  0011E0                     __end_of_i2c1_driver_sendACK:
  6033                           	opt stack 0
  6034                           tosu	equ	0xFFF
  6035                           tosh	equ	0xFFE
  6036                           tosl	equ	0xFFD
  6037                           pclath	equ	0xFFA
  6038                           tblptru	equ	0xFF8
  6039                           tblptrh	equ	0xFF7
  6040                           tblptrl	equ	0xFF6
  6041                           tablat	equ	0xFF5
  6042                           prodh	equ	0xFF4
  6043                           prodl	equ	0xFF3
  6044                           intcon	equ	0xFF2
  6045                           intcon2	equ	0xFF1
  6046                           postinc0	equ	0xFEE
  6047                           plusw0	equ	0xFEB
  6048                           wreg	equ	0xFE8
  6049                           postdec1	equ	0xFE5
  6050                           plusw1	equ	0xFE3
  6051                           fsr1l	equ	0xFE1
  6052                           indf2	equ	0xFDF
  6053                           postinc2	equ	0xFDE
  6054                           plusw2	equ	0xFDB
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _i2c1_driver_start *****************
  6060 ;; Defined at:
  6061 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;		None
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;		None
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  1    wreg      void 
  6068 ;; Registers used:
  6069 ;;		None
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6075 ;;      Params:         0       0       0       0       0       0       0
  6076 ;;      Locals:         0       0       0       0       0       0       0
  6077 ;;      Temps:          0       0       0       0       0       0       0
  6078 ;;      Totals:         0       0       0       0       0       0       0
  6079 ;;Total ram usage:        0 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    5
  6082 ;; This function calls:
  6083 ;;		Nothing
  6084 ;; This function is called by:
  6085 ;;		_i2c_masterOperation
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           	psect	text58
  6090  00120A                     __ptext58:
  6091                           	opt stack 0
  6092  00120A                     _i2c1_driver_start:
  6093                           	opt stack 22
  6094                           
  6095                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  6096                           
  6097                           ;incstack = 0
  6098  00120A  80C5               	bsf	4037,0,c	;volatile
  6099  00120C  0012               	return		;funcret
  6100  00120E                     __end_of_i2c1_driver_start:
  6101                           	opt stack 0
  6102                           tosu	equ	0xFFF
  6103                           tosh	equ	0xFFE
  6104                           tosl	equ	0xFFD
  6105                           pclath	equ	0xFFA
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           intcon	equ	0xFF2
  6113                           intcon2	equ	0xFF1
  6114                           postinc0	equ	0xFEE
  6115                           plusw0	equ	0xFEB
  6116                           wreg	equ	0xFE8
  6117                           postdec1	equ	0xFE5
  6118                           plusw1	equ	0xFE3
  6119                           fsr1l	equ	0xFE1
  6120                           indf2	equ	0xFDF
  6121                           postinc2	equ	0xFDE
  6122                           plusw2	equ	0xFDB
  6123                           fsr2h	equ	0xFDA
  6124                           fsr2l	equ	0xFD9
  6125                           status	equ	0xFD8
  6126                           
  6127 ;; *************** function _i2c_close *****************
  6128 ;; Defined at:
  6129 ;;		line 170 in file "mcc_generated_files/drivers/i2c_master.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;		None
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;  ret             1   20[COMRAM] enum E6837
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  1    wreg      enum E6837
  6136 ;; Registers used:
  6137 ;;		wreg, status,2, cstack
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6143 ;;      Params:         0       0       0       0       0       0       0
  6144 ;;      Locals:         1       0       0       0       0       0       0
  6145 ;;      Temps:          0       0       0       0       0       0       0
  6146 ;;      Totals:         1       0       0       0       0       0       0
  6147 ;;Total ram usage:        1 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:    6
  6150 ;; This function calls:
  6151 ;;		_mssp1_clearIRQ
  6152 ;;		_mssp1_disableIRQ
  6153 ;; This function is called by:
  6154 ;;		_write_register
  6155 ;;		_read_register
  6156 ;;		_read_xyzvalues
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           	psect	text59
  6161  000F02                     __ptext59:
  6162                           	opt stack 0
  6163  000F02                     _i2c_close:
  6164                           	opt stack 23
  6165                           
  6166                           ;i2c_master.c: 172: i2c_error_t ret = I2C_BUSY;
  6167                           
  6168                           ;incstack = 0
  6169  000F02  0E01               	movlw	1
  6170  000F04  6E3A               	movwf	i2c_close@ret,c
  6171                           
  6172                           ;i2c_master.c: 173: if(!i2c_status.busy)
  6173  000F06  0100               	movlb	0	; () banked
  6174  000F08  B19C               	btfsc	_i2c_status& (0+255),0,b
  6175  000F0A  D008               	goto	l83
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;i2c_master.c: 174: {
  6179                           ;i2c_master.c: 175: i2c_status.inUse = 0;
  6180  000F0C  939C               	bcf	_i2c_status& (0+255),1,b
  6181                           
  6182                           ;i2c_master.c: 177: i2c_status.address = 0xff;
  6183  000F0E  699D               	setf	(_i2c_status+1)& (0+255),b
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;i2c_master.c: 178: mssp1_clearIRQ();
  6187  000F10  EC09  F009         	call	_mssp1_clearIRQ	;wreg free
  6188                           
  6189                           ;i2c_master.c: 179: mssp1_disableIRQ();
  6190  000F14  EC07  F009         	call	_mssp1_disableIRQ	;wreg free
  6191                           
  6192                           ;i2c_master.c: 180: ret = i2c_status.error;
  6193  000F18  C0A7  F03A         	movff	_i2c_status+11,i2c_close@ret
  6194  000F1C                     l83:
  6195                           
  6196                           ;i2c_master.c: 181: }
  6197                           ;i2c_master.c: 182: return ret;
  6198  000F1C  503A               	movf	i2c_close@ret,w,c
  6199  000F1E  0012               	return	
  6200  000F20                     __end_of_i2c_close:
  6201                           	opt stack 0
  6202                           tosu	equ	0xFFF
  6203                           tosh	equ	0xFFE
  6204                           tosl	equ	0xFFD
  6205                           pclath	equ	0xFFA
  6206                           tblptru	equ	0xFF8
  6207                           tblptrh	equ	0xFF7
  6208                           tblptrl	equ	0xFF6
  6209                           tablat	equ	0xFF5
  6210                           prodh	equ	0xFF4
  6211                           prodl	equ	0xFF3
  6212                           intcon	equ	0xFF2
  6213                           intcon2	equ	0xFF1
  6214                           postinc0	equ	0xFEE
  6215                           plusw0	equ	0xFEB
  6216                           wreg	equ	0xFE8
  6217                           postdec1	equ	0xFE5
  6218                           plusw1	equ	0xFE3
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           plusw2	equ	0xFDB
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227 ;; *************** function _mssp1_disableIRQ *****************
  6228 ;; Defined at:
  6229 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;		None
  6234 ;; Return value:  Size  Location     Type
  6235 ;;                  1    wreg      void 
  6236 ;; Registers used:
  6237 ;;		None
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6243 ;;      Params:         0       0       0       0       0       0       0
  6244 ;;      Locals:         0       0       0       0       0       0       0
  6245 ;;      Temps:          0       0       0       0       0       0       0
  6246 ;;      Totals:         0       0       0       0       0       0       0
  6247 ;;Total ram usage:        0 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    5
  6250 ;; This function calls:
  6251 ;;		Nothing
  6252 ;; This function is called by:
  6253 ;;		_i2c_close
  6254 ;;		_i2c_setTimeOut
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           	psect	text60
  6259  00120E                     __ptext60:
  6260                           	opt stack 0
  6261  00120E                     _mssp1_disableIRQ:
  6262                           	opt stack 23
  6263                           
  6264                           ;i2c1_driver.c: 50: PIE1bits.SSP1IE = 0;
  6265                           
  6266                           ;incstack = 0
  6267  00120E  969D               	bcf	3997,3,c	;volatile
  6268  001210  0012               	return		;funcret
  6269  001212                     __end_of_mssp1_disableIRQ:
  6270                           	opt stack 0
  6271                           tosu	equ	0xFFF
  6272                           tosh	equ	0xFFE
  6273                           tosl	equ	0xFFD
  6274                           pclath	equ	0xFFA
  6275                           tblptru	equ	0xFF8
  6276                           tblptrh	equ	0xFF7
  6277                           tblptrl	equ	0xFF6
  6278                           tablat	equ	0xFF5
  6279                           prodh	equ	0xFF4
  6280                           prodl	equ	0xFF3
  6281                           intcon	equ	0xFF2
  6282                           intcon2	equ	0xFF1
  6283                           postinc0	equ	0xFEE
  6284                           plusw0	equ	0xFEB
  6285                           wreg	equ	0xFE8
  6286                           postdec1	equ	0xFE5
  6287                           plusw1	equ	0xFE3
  6288                           fsr1l	equ	0xFE1
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           plusw2	equ	0xFDB
  6292                           fsr2h	equ	0xFDA
  6293                           fsr2l	equ	0xFD9
  6294                           status	equ	0xFD8
  6295                           
  6296 ;; *************** function _mssp1_clearIRQ *****************
  6297 ;; Defined at:
  6298 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;		None
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  1    wreg      void 
  6305 ;; Registers used:
  6306 ;;		None
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6312 ;;      Params:         0       0       0       0       0       0       0
  6313 ;;      Locals:         0       0       0       0       0       0       0
  6314 ;;      Temps:          0       0       0       0       0       0       0
  6315 ;;      Totals:         0       0       0       0       0       0       0
  6316 ;;Total ram usage:        0 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    5
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_i2c_open
  6323 ;;		_i2c_close
  6324 ;;		_i2c_ISR
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text61
  6329  001212                     __ptext61:
  6330                           	opt stack 0
  6331  001212                     _mssp1_clearIRQ:
  6332                           	opt stack 23
  6333                           
  6334                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6335                           
  6336                           ;incstack = 0
  6337  001212  969E               	bcf	3998,3,c	;volatile
  6338  001214  0012               	return		;funcret
  6339  001216                     __end_of_mssp1_clearIRQ:
  6340                           	opt stack 0
  6341                           tosu	equ	0xFFF
  6342                           tosh	equ	0xFFE
  6343                           tosl	equ	0xFFD
  6344                           pclath	equ	0xFFA
  6345                           tblptru	equ	0xFF8
  6346                           tblptrh	equ	0xFF7
  6347                           tblptrl	equ	0xFF6
  6348                           tablat	equ	0xFF5
  6349                           prodh	equ	0xFF4
  6350                           prodl	equ	0xFF3
  6351                           intcon	equ	0xFF2
  6352                           intcon2	equ	0xFF1
  6353                           postinc0	equ	0xFEE
  6354                           plusw0	equ	0xFEB
  6355                           wreg	equ	0xFE8
  6356                           postdec1	equ	0xFE5
  6357                           plusw1	equ	0xFE3
  6358                           fsr1l	equ	0xFE1
  6359                           indf2	equ	0xFDF
  6360                           postinc2	equ	0xFDE
  6361                           plusw2	equ	0xFDB
  6362                           fsr2h	equ	0xFDA
  6363                           fsr2l	equ	0xFD9
  6364                           status	equ	0xFD8
  6365                           
  6366 ;; *************** function _INTERRUPT_InterruptManager *****************
  6367 ;; Defined at:
  6368 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6382 ;;      Params:         0       0       0       0       0       0       0
  6383 ;;      Locals:         0       0       0       0       0       0       0
  6384 ;;      Temps:         18       0       0       0       0       0       0
  6385 ;;      Totals:        18       0       0       0       0       0       0
  6386 ;;Total ram usage:       18 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    4
  6389 ;; This function calls:
  6390 ;;		Absolute function
  6391 ;;		_EUSART1_Receive_ISR
  6392 ;;		_EUSART1_Transmit_ISR
  6393 ;;		_i2c_busCollisionISR
  6394 ;;		i2_i2c_ISR
  6395 ;; This function is called by:
  6396 ;;		Interrupt level 2
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	intcode
  6401  000008                     __pintcode:
  6402                           	opt stack 0
  6403  000008                     _INTERRUPT_InterruptManager:
  6404                           	opt stack 17
  6405                           
  6406                           ;incstack = 0
  6407  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6408  00000A  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
  6409  00000E  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6410  000012  CFE9 F02A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6411  000016  CFEA F02B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6412  00001A  CFE1 F02C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6413  00001E  CFE2 F02D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6414  000022  CFD9 F02E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6415  000026  CFDA F02F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6416  00002A  CFF3 F030          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6417  00002E  CFF4 F031          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6418  000032  CFF6 F032          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6419  000036  CFF7 F033          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6420  00003A  CFF8 F034          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6421  00003E  CFF5 F035          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6422  000042  C04B  F036         	movff	btemp,??_INTERRUPT_InterruptManager+14
  6423  000046  C04C  F037         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  6424  00004A  C04D  F038         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  6425  00004E  C04E  F039         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  6426                           
  6427                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  6428  000052  ACF2               	btfss	intcon,6,c	;volatile
  6429  000054  D030               	goto	i2u168_49
  6430                           
  6431                           ;interrupt_manager.c: 61: {
  6432                           ;interrupt_manager.c: 62: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  6433  000056  B6A0               	btfsc	4000,3,c	;volatile
  6434  000058  A6A1               	btfss	4001,3,c	;volatile
  6435  00005A  D008               	goto	i2l567
  6436                           
  6437                           ;interrupt_manager.c: 63: {
  6438                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  6439  00005C  D801               	call	i2u159_48
  6440  00005E  D02B               	goto	i2u168_49
  6441  000060                     i2u159_48:
  6442  000060  0005               	push	
  6443  000062  6EFA               	movwf	pclath,c
  6444  000064  5013               	movf	_i2c1_driver_busCollisionISR,w,c
  6445  000066  6EFD               	movwf	tosl,c
  6446  000068  5014               	movf	_i2c1_driver_busCollisionISR+1,w,c
  6447  00006A  D020               	goto	L6
  6448  00006C                     i2l567:
  6449                           
  6450                           ;interrupt_manager.c: 66: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  6451  00006C  B69D               	btfsc	3997,3,c	;volatile
  6452  00006E  A69E               	btfss	3998,3,c	;volatile
  6453  000070  D008               	goto	i2l569
  6454                           
  6455                           ;interrupt_manager.c: 67: {
  6456                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  6457  000072  D801               	call	i2u162_48
  6458  000074  D020               	goto	i2u168_49
  6459  000076                     i2u162_48:
  6460  000076  0005               	push	
  6461  000078  6EFA               	movwf	pclath,c
  6462  00007A  5011               	movf	_i2c1_driver_i2cISR,w,c
  6463  00007C  6EFD               	movwf	tosl,c
  6464  00007E  5012               	movf	_i2c1_driver_i2cISR+1,w,c
  6465  000080  D015               	goto	L6
  6466  000082                     i2l569:
  6467                           
  6468                           ;interrupt_manager.c: 70: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6469  000082  B89D               	btfsc	3997,4,c	;volatile
  6470  000084  A89E               	btfss	3998,4,c	;volatile
  6471  000086  D008               	goto	i2l571
  6472                           
  6473                           ;interrupt_manager.c: 71: {
  6474                           ;interrupt_manager.c: 72: EUSART1_TxDefaultInterruptHandler();
  6475  000088  D801               	call	i2u165_48
  6476  00008A  D015               	goto	i2u168_49
  6477  00008C                     i2u165_48:
  6478  00008C  0005               	push	
  6479  00008E  6EFA               	movwf	pclath,c
  6480  000090  5048               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  6481  000092  6EFD               	movwf	tosl,c
  6482  000094  5049               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  6483  000096  D00A               	goto	L6
  6484  000098                     i2l571:
  6485                           
  6486                           ;interrupt_manager.c: 74: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6487  000098  BA9D               	btfsc	3997,5,c	;volatile
  6488  00009A  AA9E               	btfss	3998,5,c	;volatile
  6489  00009C  D00C               	goto	i2u168_49
  6490                           
  6491                           ;interrupt_manager.c: 75: {
  6492                           ;interrupt_manager.c: 76: EUSART1_RxDefaultInterruptHandler();
  6493  00009E  D801               	call	i2u168_48
  6494  0000A0  D00A               	goto	i2u168_49
  6495  0000A2                     i2u168_48:
  6496  0000A2  0005               	push	
  6497  0000A4  6EFA               	movwf	pclath,c
  6498  0000A6  5046               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  6499  0000A8  6EFD               	movwf	tosl,c
  6500  0000AA  5047               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  6501  0000AC                     L6:
  6502  0000AC  6EFE               	movwf	tosh,c
  6503  0000AE  50F8               	movf	tblptru,w,c
  6504  0000B0  6EFF               	movwf	tosu,c
  6505  0000B2  50FA               	movf	pclath,w,c
  6506  0000B4  0012               	return		;indir
  6507  0000B6                     i2u168_49:
  6508                           
  6509                           ;interrupt_manager.c: 83: else
  6510                           ;interrupt_manager.c: 84: {
  6511                           
  6512                           ;interrupt_manager.c: 81: }
  6513                           ;interrupt_manager.c: 82: }
  6514                           
  6515                           ;interrupt_manager.c: 78: else
  6516                           ;interrupt_manager.c: 79: {
  6517                           
  6518                           ;interrupt_manager.c: 77: }
  6519  0000B6  C039  F04E         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  6520  0000BA  C038  F04D         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  6521  0000BE  C037  F04C         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  6522  0000C2  C036  F04B         	movff	??_INTERRUPT_InterruptManager+14,btemp
  6523  0000C6  C035  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6524  0000CA  C034  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6525  0000CE  C033  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6526  0000D2  C032  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6527  0000D6  C031  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6528  0000DA  C030  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6529  0000DE  C02F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6530  0000E2  C02E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6531  0000E6  C02D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6532  0000EA  C02C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6533  0000EE  C02B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6534  0000F2  C02A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6535  0000F6  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6536  0000FA  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6537  0000FE  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6538  000100  0011               	retfie		f
  6539  000102                     __end_of_INTERRUPT_InterruptManager:
  6540                           	opt stack 0
  6541                           tosu	equ	0xFFF
  6542                           tosh	equ	0xFFE
  6543                           tosl	equ	0xFFD
  6544                           pclatu	equ	0xFFB
  6545                           pclath	equ	0xFFA
  6546                           tblptru	equ	0xFF8
  6547                           tblptrh	equ	0xFF7
  6548                           tblptrl	equ	0xFF6
  6549                           tablat	equ	0xFF5
  6550                           prodh	equ	0xFF4
  6551                           prodl	equ	0xFF3
  6552                           intcon	equ	0xFF2
  6553                           intcon2	equ	0xFF1
  6554                           postinc0	equ	0xFEE
  6555                           plusw0	equ	0xFEB
  6556                           fsr0h	equ	0xFEA
  6557                           fsr0l	equ	0xFE9
  6558                           wreg	equ	0xFE8
  6559                           postdec1	equ	0xFE5
  6560                           plusw1	equ	0xFE3
  6561                           fsr1h	equ	0xFE2
  6562                           fsr1l	equ	0xFE1
  6563                           indf2	equ	0xFDF
  6564                           postinc2	equ	0xFDE
  6565                           plusw2	equ	0xFDB
  6566                           fsr2h	equ	0xFDA
  6567                           fsr2l	equ	0xFD9
  6568                           status	equ	0xFD8
  6569                           
  6570 ;; *************** function i2_i2c_ISR *****************
  6571 ;; Defined at:
  6572 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;		None
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;		None
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      void 
  6579 ;; Registers used:
  6580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6586 ;;      Params:         0       0       0       0       0       0       0
  6587 ;;      Locals:         0       0       0       0       0       0       0
  6588 ;;      Temps:          0       0       0       0       0       0       0
  6589 ;;      Totals:         0       0       0       0       0       0       0
  6590 ;;Total ram usage:        0 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    3
  6593 ;; This function calls:
  6594 ;;		i2_do_I2C_DO_ACK
  6595 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6596 ;;		i2_do_I2C_DO_NACK_RESTART
  6597 ;;		i2_do_I2C_DO_NACK_STOP
  6598 ;;		i2_do_I2C_IDLE
  6599 ;;		i2_do_I2C_RCEN
  6600 ;;		i2_do_I2C_RESET
  6601 ;;		i2_do_I2C_RX
  6602 ;;		i2_do_I2C_SEND_ADR_READ
  6603 ;;		i2_do_I2C_SEND_ADR_WRITE
  6604 ;;		i2_do_I2C_SEND_INITIAL_READ
  6605 ;;		i2_do_I2C_SEND_RESTART
  6606 ;;		i2_do_I2C_SEND_RESTART_READ
  6607 ;;		i2_do_I2C_SEND_RESTART_WRITE
  6608 ;;		i2_do_I2C_SEND_STOP
  6609 ;;		i2_do_I2C_TX
  6610 ;;		i2_do_I2C_TX_EMPTY
  6611 ;;		i2_do_I2C_TX_REGISTER
  6612 ;;		i2_i2c1_driver_isNACK
  6613 ;;		i2_mssp1_clearIRQ
  6614 ;; This function is called by:
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text63
  6619  000CD4                     __ptext63:
  6620                           	opt stack 0
  6621  000CD4                     i2_i2c_ISR:
  6622                           	opt stack 17
  6623                           
  6624                           ;i2c_master.c: 486: mssp1_clearIRQ();
  6625                           
  6626                           ;incstack = 0
  6627  000CD4  EC0B  F009         	call	i2_mssp1_clearIRQ	;wreg free
  6628                           
  6629                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  6630  000CD8  0100               	movlb	0	; () banked
  6631  000CDA  A79C               	btfss	_i2c_status& (0+255),3,b
  6632  000CDC  D007               	goto	i2l209
  6633                           
  6634                           ; BSR set to: 0
  6635  000CDE  ECEC  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  6636  000CE2  A0D8               	btfss	status,0,c
  6637  000CE4  D003               	goto	i2l209
  6638                           
  6639                           ;i2c_master.c: 493: {
  6640                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  6641  000CE6  0E0F               	movlw	15
  6642  000CE8  0100               	movlb	0	; () banked
  6643  000CEA  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  6644  000CEC                     i2l209:
  6645                           
  6646                           ;i2c_master.c: 495: }
  6647                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  6648                           
  6649                           ; BSR set to: 0
  6650  000CEC  0100               	movlb	0	; () banked
  6651  000CEE  51A6               	movf	(_i2c_status+10)& (0+255),w,b
  6652  000CF0  0D02               	mullw	2
  6653  000CF2  0EC1               	movlw	low _fsmStateTable
  6654  000CF4  24F3               	addwf	prodl,w,c
  6655  000CF6  6ED9               	movwf	fsr2l,c
  6656  000CF8  0E00               	movlw	high _fsmStateTable
  6657  000CFA  20F4               	addwfc	prodh,w,c
  6658  000CFC  6EDA               	movwf	fsr2h,c
  6659  000CFE  D801               	call	i2u154_48
  6660  000D00  D00A               	goto	i2u154_49
  6661  000D02                     i2u154_48:
  6662  000D02  0005               	push	
  6663  000D04  6EFA               	movwf	pclath,c
  6664  000D06  50DE               	movf	postinc2,w,c
  6665  000D08  6EFD               	movwf	tosl,c
  6666  000D0A  50DE               	movf	postinc2,w,c
  6667  000D0C  6EFE               	movwf	tosh,c
  6668  000D0E  50F8               	movf	tblptru,w,c
  6669  000D10  6EFF               	movwf	tosu,c
  6670  000D12  50FA               	movf	pclath,w,c
  6671  000D14  0012               	return		;indir
  6672  000D16                     i2u154_49:
  6673  000D16  0100               	movlb	0	; () banked
  6674  000D18  6FA6               	movwf	(_i2c_status+10)& (0+255),b
  6675                           
  6676                           ; BSR set to: 0
  6677  000D1A  0012               	return		;funcret
  6678  000D1C                     __end_ofi2_i2c_ISR:
  6679                           	opt stack 0
  6680                           tosu	equ	0xFFF
  6681                           tosh	equ	0xFFE
  6682                           tosl	equ	0xFFD
  6683                           pclatu	equ	0xFFB
  6684                           pclath	equ	0xFFA
  6685                           tblptru	equ	0xFF8
  6686                           tblptrh	equ	0xFF7
  6687                           tblptrl	equ	0xFF6
  6688                           tablat	equ	0xFF5
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           intcon	equ	0xFF2
  6692                           intcon2	equ	0xFF1
  6693                           postinc0	equ	0xFEE
  6694                           plusw0	equ	0xFEB
  6695                           fsr0h	equ	0xFEA
  6696                           fsr0l	equ	0xFE9
  6697                           wreg	equ	0xFE8
  6698                           postdec1	equ	0xFE5
  6699                           plusw1	equ	0xFE3
  6700                           fsr1h	equ	0xFE2
  6701                           fsr1l	equ	0xFE1
  6702                           indf2	equ	0xFDF
  6703                           postinc2	equ	0xFDE
  6704                           plusw2	equ	0xFDB
  6705                           fsr2h	equ	0xFDA
  6706                           fsr2l	equ	0xFD9
  6707                           status	equ	0xFD8
  6708                           
  6709 ;; *************** function i2_mssp1_clearIRQ *****************
  6710 ;; Defined at:
  6711 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;		None
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;		None
  6716 ;; Return value:  Size  Location     Type
  6717 ;;                  1    wreg      void 
  6718 ;; Registers used:
  6719 ;;		None
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6725 ;;      Params:         0       0       0       0       0       0       0
  6726 ;;      Locals:         0       0       0       0       0       0       0
  6727 ;;      Temps:          0       0       0       0       0       0       0
  6728 ;;      Totals:         0       0       0       0       0       0       0
  6729 ;;Total ram usage:        0 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; This function calls:
  6732 ;;		Nothing
  6733 ;; This function is called by:
  6734 ;;		i2_i2c_ISR
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text64
  6739  001216                     __ptext64:
  6740                           	opt stack 0
  6741  001216                     i2_mssp1_clearIRQ:
  6742                           	opt stack 19
  6743                           
  6744                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;incstack = 0
  6748  001216  969E               	bcf	3998,3,c	;volatile
  6749  001218  0012               	return		;funcret
  6750  00121A                     __end_ofi2_mssp1_clearIRQ:
  6751                           	opt stack 0
  6752                           tosu	equ	0xFFF
  6753                           tosh	equ	0xFFE
  6754                           tosl	equ	0xFFD
  6755                           pclatu	equ	0xFFB
  6756                           pclath	equ	0xFFA
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           intcon	equ	0xFF2
  6764                           intcon2	equ	0xFF1
  6765                           postinc0	equ	0xFEE
  6766                           plusw0	equ	0xFEB
  6767                           fsr0h	equ	0xFEA
  6768                           fsr0l	equ	0xFE9
  6769                           wreg	equ	0xFE8
  6770                           postdec1	equ	0xFE5
  6771                           plusw1	equ	0xFE3
  6772                           fsr1h	equ	0xFE2
  6773                           fsr1l	equ	0xFE1
  6774                           indf2	equ	0xFDF
  6775                           postinc2	equ	0xFDE
  6776                           plusw2	equ	0xFDB
  6777                           fsr2h	equ	0xFDA
  6778                           fsr2l	equ	0xFD9
  6779                           status	equ	0xFD8
  6780                           
  6781 ;; *************** function i2_do_I2C_TX_EMPTY *****************
  6782 ;; Defined at:
  6783 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      enum E7019
  6790 ;; Registers used:
  6791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6797 ;;      Params:         0       0       0       0       0       0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0
  6799 ;;      Temps:          0       0       0       0       0       0       0
  6800 ;;      Totals:         0       0       0       0       0       0       0
  6801 ;;Total ram usage:        0 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    2
  6804 ;; This function calls:
  6805 ;;		i2_do_I2C_SEND_RESTART
  6806 ;;		i2_do_I2C_SEND_STOP
  6807 ;;		i2_mssp1_setIRQ
  6808 ;;		i2_returnReset
  6809 ;;		i2_returnStop
  6810 ;; This function is called by:
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text65
  6815  000B4C                     __ptext65:
  6816                           	opt stack 0
  6817  000B4C                     i2_do_I2C_TX_EMPTY:
  6818                           	opt stack 17
  6819                           
  6820                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  6821                           
  6822                           ;incstack = 0
  6823  000B4C  0100               	movlb	0	; () banked
  6824  000B4E  859C               	bsf	_i2c_status& (0+255),2,b
  6825                           
  6826                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6827  000B50  D00A               	goto	i2l197
  6828  000B52                     
  6829                           ;i2c_master.c: 448: case i2c_restart_write:
  6830                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  6831                           
  6832                           ; BSR set to: 0
  6833                           
  6834                           ; BSR set to: 0
  6835  000B52  ECDA  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  6836  000B56  0012               	return	
  6837  000B58                     
  6838                           ;i2c_master.c: 451: mssp1_setIRQ();
  6839  000B58  EC0D  F009         	call	i2_mssp1_setIRQ	;wreg free
  6840                           
  6841                           ;i2c_master.c: 452: return I2C_TX;
  6842  000B5C  0E03               	movlw	3
  6843  000B5E  0012               	return	
  6844  000B60                     
  6845                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  6846                           
  6847                           ;i2c_master.c: 454: case i2c_stop:
  6848  000B60  ECD6  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  6849                           
  6850                           ;i2c_master.c: 456: }
  6851  000B64  0012               	return	
  6852  000B66                     i2l197:
  6853  000B66  C0B4  F026         	movff	_i2c_status+24,i2returnReset@p
  6854  000B6A  C0B5  F027         	movff	_i2c_status+25,i2returnReset@p+1
  6855  000B6E  EE20  F0A8         	lfsr	2,_i2c_status+12
  6856  000B72  D801               	call	i2u145_48
  6857  000B74  D00A               	goto	i2u145_49
  6858  000B76                     i2u145_48:
  6859  000B76  0005               	push	
  6860  000B78  6EFA               	movwf	pclath,c
  6861  000B7A  50DE               	movf	postinc2,w,c
  6862  000B7C  6EFD               	movwf	tosl,c
  6863  000B7E  50DE               	movf	postinc2,w,c
  6864  000B80  6EFE               	movwf	tosh,c
  6865  000B82  50F8               	movf	tblptru,w,c
  6866  000B84  6EFF               	movwf	tosu,c
  6867  000B86  50FA               	movf	pclath,w,c
  6868  000B88  0012               	return		;indir
  6869  000B8A                     i2u145_49:
  6870                           
  6871                           ; Switch size 1, requested type "space"
  6872                           ; Number of cases is 4, Range of values is 1 to 4
  6873                           ; switch strategies available:
  6874                           ; Name         Instructions Cycles
  6875                           ; simple_byte           13     7 (average)
  6876                           ;	Chosen strategy is simple_byte
  6877  000B8A  0A01               	xorlw	1	; case 1
  6878  000B8C  B4D8               	btfsc	status,2,c
  6879  000B8E  D7E8               	goto	i2l202
  6880  000B90  0A03               	xorlw	3	; case 2
  6881  000B92  B4D8               	btfsc	status,2,c
  6882  000B94  D7DE               	goto	i2l198
  6883  000B96  0A01               	xorlw	1	; case 3
  6884  000B98  B4D8               	btfsc	status,2,c
  6885  000B9A  D7DB               	goto	i2l198
  6886  000B9C  0A07               	xorlw	7	; case 4
  6887  000B9E  B4D8               	btfsc	status,2,c
  6888  000BA0  D7DB               	goto	i2l201
  6889  000BA2  D7DE               	goto	i2l202
  6890  000BA4                     __end_ofi2_do_I2C_TX_EMPTY:
  6891                           	opt stack 0
  6892                           tosu	equ	0xFFF
  6893                           tosh	equ	0xFFE
  6894                           tosl	equ	0xFFD
  6895                           pclatu	equ	0xFFB
  6896                           pclath	equ	0xFFA
  6897                           tblptru	equ	0xFF8
  6898                           tblptrh	equ	0xFF7
  6899                           tblptrl	equ	0xFF6
  6900                           tablat	equ	0xFF5
  6901                           prodh	equ	0xFF4
  6902                           prodl	equ	0xFF3
  6903                           intcon	equ	0xFF2
  6904                           intcon2	equ	0xFF1
  6905                           postinc0	equ	0xFEE
  6906                           plusw0	equ	0xFEB
  6907                           fsr0h	equ	0xFEA
  6908                           fsr0l	equ	0xFE9
  6909                           wreg	equ	0xFE8
  6910                           postdec1	equ	0xFE5
  6911                           plusw1	equ	0xFE3
  6912                           fsr1h	equ	0xFE2
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           plusw2	equ	0xFDB
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function i2_do_I2C_RX *****************
  6922 ;; Defined at:
  6923 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      enum E7019
  6930 ;; Registers used:
  6931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6937 ;;      Params:         0       0       0       0       0       0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0
  6939 ;;      Temps:          0       0       0       0       0       0       0
  6940 ;;      Totals:         0       0       0       0       0       0       0
  6941 ;;Total ram usage:        0 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    2
  6944 ;; This function calls:
  6945 ;;		i2_do_I2C_DO_NACK_RESTART
  6946 ;;		i2_do_I2C_DO_NACK_STOP
  6947 ;;		i2_i2c1_driver_getRXData
  6948 ;;		i2_i2c1_driver_sendACK
  6949 ;;		i2_returnReset
  6950 ;;		i2_returnStop
  6951 ;; This function is called by:
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           	psect	text66
  6956  000948                     __ptext66:
  6957                           	opt stack 0
  6958  000948                     i2_do_I2C_RX:
  6959                           	opt stack 17
  6960                           
  6961                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  6962                           
  6963                           ;incstack = 0
  6964  000948  EC0F  F009         	call	i2_i2c1_driver_getRXData	;wreg free
  6965  00094C  C09E  FFD9         	movff	_i2c_status+2,fsr2l
  6966  000950  C09F  FFDA         	movff	_i2c_status+3,fsr2h
  6967  000954  6EDF               	movwf	indf2,c
  6968  000956  0100               	movlb	0	; () banked
  6969  000958  4B9E               	infsnz	(_i2c_status+2)& (0+255),f,b
  6970  00095A  2B9F               	incf	(_i2c_status+3)& (0+255),f,b
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  6974  00095C  07A0               	decf	(_i2c_status+4)& (0+255),f,b
  6975  00095E  A0D8               	btfss	status,0,c
  6976  000960  07A1               	decf	(_i2c_status+5)& (0+255),f,b
  6977  000962  51A0               	movf	(_i2c_status+4)& (0+255),w,b
  6978  000964  11A1               	iorwf	(_i2c_status+5)& (0+255),w,b
  6979  000966  B4D8               	btfsc	status,2,c
  6980  000968  D004               	goto	i2l185
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;i2c_master.c: 421: {
  6984                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  6985  00096A  ECF3  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  6986                           
  6987                           ;i2c_master.c: 423: return I2C_RCEN;
  6988  00096E  0E05               	movlw	5
  6989                           
  6990                           ;i2c_master.c: 424: }
  6991  000970  0012               	return	
  6992  000972                     i2l185:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;i2c_master.c: 425: else
  6996                           ;i2c_master.c: 426: {
  6997                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  6998  000972  859C               	bsf	_i2c_status& (0+255),2,b
  6999                           
  7000                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7001  000974  D006               	goto	i2l188
  7002  000976                     
  7003                           ;i2c_master.c: 431: case i2c_restart_read:
  7004                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  7005                           
  7006                           ; BSR set to: 0
  7007                           
  7008                           ; BSR set to: 0
  7009  000976  ECCA  F008         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  7010  00097A  0012               	return	
  7011  00097C                     
  7012                           ;i2c_master.c: 435: case i2c_stop:
  7013                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  7014                           
  7015                           ;i2c_master.c: 434: case i2c_continue:
  7016  00097C  ECCE  F008         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  7017                           
  7018                           ;i2c_master.c: 437: }
  7019  000980  0012               	return	
  7020  000982                     i2l188:
  7021  000982  C0B4  F026         	movff	_i2c_status+24,i2returnReset@p
  7022  000986  C0B5  F027         	movff	_i2c_status+25,i2returnReset@p+1
  7023  00098A  EE20  F0A8         	lfsr	2,_i2c_status+12
  7024  00098E  D801               	call	i2u144_48
  7025  000990  D00A               	goto	i2u144_49
  7026  000992                     i2u144_48:
  7027  000992  0005               	push	
  7028  000994  6EFA               	movwf	pclath,c
  7029  000996  50DE               	movf	postinc2,w,c
  7030  000998  6EFD               	movwf	tosl,c
  7031  00099A  50DE               	movf	postinc2,w,c
  7032  00099C  6EFE               	movwf	tosh,c
  7033  00099E  50F8               	movf	tblptru,w,c
  7034  0009A0  6EFF               	movwf	tosu,c
  7035  0009A2  50FA               	movf	pclath,w,c
  7036  0009A4  0012               	return		;indir
  7037  0009A6                     i2u144_49:
  7038                           
  7039                           ; Switch size 1, requested type "space"
  7040                           ; Number of cases is 4, Range of values is 1 to 4
  7041                           ; switch strategies available:
  7042                           ; Name         Instructions Cycles
  7043                           ; simple_byte           13     7 (average)
  7044                           ;	Chosen strategy is simple_byte
  7045  0009A6  0A01               	xorlw	1	; case 1
  7046  0009A8  B4D8               	btfsc	status,2,c
  7047  0009AA  D7E8               	goto	i2l191
  7048  0009AC  0A03               	xorlw	3	; case 2
  7049  0009AE  B4D8               	btfsc	status,2,c
  7050  0009B0  D7E2               	goto	i2l189
  7051  0009B2  0A01               	xorlw	1	; case 3
  7052  0009B4  B4D8               	btfsc	status,2,c
  7053  0009B6  D7DF               	goto	i2l189
  7054  0009B8  0A07               	xorlw	7	; case 4
  7055  0009BA  D7E0               	goto	i2l191
  7056  0009BC                     __end_ofi2_do_I2C_RX:
  7057                           	opt stack 0
  7058                           tosu	equ	0xFFF
  7059                           tosh	equ	0xFFE
  7060                           tosl	equ	0xFFD
  7061                           pclatu	equ	0xFFB
  7062                           pclath	equ	0xFFA
  7063                           tblptru	equ	0xFF8
  7064                           tblptrh	equ	0xFF7
  7065                           tblptrl	equ	0xFF6
  7066                           tablat	equ	0xFF5
  7067                           prodh	equ	0xFF4
  7068                           prodl	equ	0xFF3
  7069                           intcon	equ	0xFF2
  7070                           intcon2	equ	0xFF1
  7071                           postinc0	equ	0xFEE
  7072                           plusw0	equ	0xFEB
  7073                           fsr0h	equ	0xFEA
  7074                           fsr0l	equ	0xFE9
  7075                           wreg	equ	0xFE8
  7076                           postdec1	equ	0xFE5
  7077                           plusw1	equ	0xFE3
  7078                           fsr1h	equ	0xFE2
  7079                           fsr1l	equ	0xFE1
  7080                           indf2	equ	0xFDF
  7081                           postinc2	equ	0xFDE
  7082                           plusw2	equ	0xFDB
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087 ;; *************** function i2_do_I2C_TX *****************
  7088 ;; Defined at:
  7089 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;		None
  7092 ;; Auto vars:     Size  Location     Type
  7093 ;;		None
  7094 ;; Return value:  Size  Location     Type
  7095 ;;                  1    wreg      enum E7019
  7096 ;; Registers used:
  7097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7098 ;; Tracked objects:
  7099 ;;		On entry : 0/0
  7100 ;;		On exit  : 0/0
  7101 ;;		Unchanged: 0/0
  7102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7103 ;;      Params:         0       0       0       0       0       0       0
  7104 ;;      Locals:         2       0       0       0       0       0       0
  7105 ;;      Temps:          0       0       0       0       0       0       0
  7106 ;;      Totals:         2       0       0       0       0       0       0
  7107 ;;Total ram usage:        2 bytes
  7108 ;; Hardware stack levels used:    1
  7109 ;; Hardware stack levels required when called:    2
  7110 ;; This function calls:
  7111 ;;		i2_do_I2C_SEND_RESTART_READ
  7112 ;;		i2_do_I2C_SEND_RESTART_WRITE
  7113 ;;		i2_do_I2C_SEND_STOP
  7114 ;;		i2_i2c1_driver_TXData
  7115 ;;		i2_i2c1_driver_isNACK
  7116 ;;		i2_returnReset
  7117 ;;		i2_returnStop
  7118 ;; This function is called by:
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	text67
  7123  0007C6                     __ptext67:
  7124                           	opt stack 0
  7125  0007C6                     i2_do_I2C_TX:
  7126                           	opt stack 17
  7127                           
  7128                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  7129                           
  7130                           ;incstack = 0
  7131  0007C6  ECEC  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  7132  0007CA  B0D8               	btfsc	status,0,c
  7133  0007CC  D00A               	goto	i2l170
  7134  0007CE  D026               	goto	i2l169
  7135  0007D0                     
  7136                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  7137  0007D0  ECE2  F008         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  7138  0007D4  0012               	return	
  7139  0007D6                     
  7140                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  7141  0007D6  ECDE  F008         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  7142  0007DA  0012               	return	
  7143  0007DC                     
  7144                           ;i2c_master.c: 405: case i2c_stop:
  7145                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  7146                           
  7147                           ;i2c_master.c: 404: case i2c_continue:
  7148  0007DC  ECD6  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7149                           
  7150                           ;i2c_master.c: 407: }
  7151  0007E0  0012               	return	
  7152  0007E2                     i2l170:
  7153  0007E2  C0BA  F026         	movff	_i2c_status+30,i2returnReset@p
  7154  0007E6  C0BB  F027         	movff	_i2c_status+31,i2returnReset@p+1
  7155  0007EA  EE20  F0AE         	lfsr	2,_i2c_status+18
  7156  0007EE  D801               	call	i2u141_48
  7157  0007F0  D00A               	goto	i2u141_49
  7158  0007F2                     i2u141_48:
  7159  0007F2  0005               	push	
  7160  0007F4  6EFA               	movwf	pclath,c
  7161  0007F6  50DE               	movf	postinc2,w,c
  7162  0007F8  6EFD               	movwf	tosl,c
  7163  0007FA  50DE               	movf	postinc2,w,c
  7164  0007FC  6EFE               	movwf	tosh,c
  7165  0007FE  50F8               	movf	tblptru,w,c
  7166  000800  6EFF               	movwf	tosu,c
  7167  000802  50FA               	movf	pclath,w,c
  7168  000804  0012               	return		;indir
  7169  000806                     i2u141_49:
  7170                           
  7171                           ; Switch size 1, requested type "space"
  7172                           ; Number of cases is 4, Range of values is 1 to 4
  7173                           ; switch strategies available:
  7174                           ; Name         Instructions Cycles
  7175                           ; simple_byte           13     7 (average)
  7176                           ;	Chosen strategy is simple_byte
  7177  000806  0A01               	xorlw	1	; case 1
  7178  000808  B4D8               	btfsc	status,2,c
  7179  00080A  D7E8               	goto	i2l174
  7180  00080C  0A03               	xorlw	3	; case 2
  7181  00080E  B4D8               	btfsc	status,2,c
  7182  000810  D7DF               	goto	i2l171
  7183  000812  0A01               	xorlw	1	; case 3
  7184  000814  B4D8               	btfsc	status,2,c
  7185  000816  D7DF               	goto	i2l173
  7186  000818  0A07               	xorlw	7	; case 4
  7187  00081A  D7E0               	goto	i2l174
  7188  00081C                     i2l169:
  7189                           
  7190                           ;i2c_master.c: 409: else
  7191                           ;i2c_master.c: 410: {
  7192                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  7193  00081C  0100               	movlb	0	; () banked
  7194  00081E  979C               	bcf	_i2c_status& (0+255),3,b
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  7198  000820  C09E  FFD9         	movff	_i2c_status+2,fsr2l
  7199  000824  C09F  FFDA         	movff	_i2c_status+3,fsr2h
  7200  000828  4B9E               	infsnz	(_i2c_status+2)& (0+255),f,b
  7201  00082A  2B9F               	incf	(_i2c_status+3)& (0+255),f,b
  7202  00082C  50DF               	movf	indf2,w,c
  7203  00082E  ECE6  F008         	call	i2_i2c1_driver_TXData
  7204                           
  7205                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7206  000832  0100               	movlb	0	; () banked
  7207  000834  07A0               	decf	(_i2c_status+4)& (0+255),f,b
  7208  000836  A0D8               	btfss	status,0,c
  7209  000838  07A1               	decf	(_i2c_status+5)& (0+255),f,b
  7210  00083A  51A0               	movf	(_i2c_status+4)& (0+255),w,b
  7211  00083C  11A1               	iorwf	(_i2c_status+5)& (0+255),w,b
  7212  00083E  A4D8               	btfss	status,2,c
  7213  000840  D004               	goto	i2l180
  7214                           
  7215                           ; BSR set to: 0
  7216  000842  0E00               	movlw	0
  7217  000844  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7218  000846  0E06               	movlw	6
  7219  000848  D003               	goto	L7
  7220  00084A                     i2l180:
  7221                           
  7222                           ; BSR set to: 0
  7223                           
  7224                           ; BSR set to: 0
  7225  00084A  0E00               	movlw	0
  7226  00084C  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7227  00084E  0E03               	movlw	3
  7228  000850                     L7:
  7229  000850  6E26               	movwf	i2_do_I2C_TX$315,c
  7230                           
  7231                           ; BSR set to: 0
  7232  000852  5026               	movf	i2_do_I2C_TX$315,w,c
  7233                           
  7234                           ; BSR set to: 0
  7235  000854  0012               	return	
  7236  000856                     __end_ofi2_do_I2C_TX:
  7237                           	opt stack 0
  7238                           tosu	equ	0xFFF
  7239                           tosh	equ	0xFFE
  7240                           tosl	equ	0xFFD
  7241                           pclatu	equ	0xFFB
  7242                           pclath	equ	0xFFA
  7243                           tblptru	equ	0xFF8
  7244                           tblptrh	equ	0xFF7
  7245                           tblptrl	equ	0xFF6
  7246                           tablat	equ	0xFF5
  7247                           prodh	equ	0xFF4
  7248                           prodl	equ	0xFF3
  7249                           intcon	equ	0xFF2
  7250                           intcon2	equ	0xFF1
  7251                           postinc0	equ	0xFEE
  7252                           plusw0	equ	0xFEB
  7253                           fsr0h	equ	0xFEA
  7254                           fsr0l	equ	0xFE9
  7255                           wreg	equ	0xFE8
  7256                           postdec1	equ	0xFE5
  7257                           plusw1	equ	0xFE3
  7258                           fsr1h	equ	0xFE2
  7259                           fsr1l	equ	0xFE1
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           plusw2	equ	0xFDB
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  7268 ;; Defined at:
  7269 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      enum E7019
  7276 ;; Registers used:
  7277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7283 ;;      Params:         0       0       0       0       0       0       0
  7284 ;;      Locals:         0       0       0       0       0       0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0
  7286 ;;      Totals:         0       0       0       0       0       0       0
  7287 ;;Total ram usage:        0 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    2
  7290 ;; This function calls:
  7291 ;;		i2_do_I2C_SEND_RESTART
  7292 ;;		i2_do_I2C_SEND_STOP
  7293 ;;		i2_returnReset
  7294 ;;		i2_returnStop
  7295 ;; This function is called by:
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text68
  7300  000D1C                     __ptext68:
  7301                           	opt stack 0
  7302  000D1C                     i2_do_I2C_DO_ADDRESS_NACK:
  7303                           	opt stack 17
  7304                           
  7305                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  7306                           
  7307                           ;incstack = 0
  7308  000D1C  0100               	movlb	0	; () banked
  7309  000D1E  979C               	bcf	_i2c_status& (0+255),3,b
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  7313  000D20  0E02               	movlw	2
  7314  000D22  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  7315                           
  7316                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7317  000D24  D006               	goto	i2l161
  7318  000D26                     
  7319                           ;i2c_master.c: 386: case i2c_restart_write:
  7320                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  7321                           
  7322                           ; BSR set to: 0
  7323                           
  7324                           ; BSR set to: 0
  7325  000D26  ECDA  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7326  000D2A  0012               	return	
  7327  000D2C                     
  7328                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  7329  000D2C  ECD6  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7330                           
  7331                           ;i2c_master.c: 390: }
  7332  000D30  0012               	return	
  7333  000D32                     i2l161:
  7334  000D32  C0B8  F026         	movff	_i2c_status+28,i2returnReset@p
  7335  000D36  C0B9  F027         	movff	_i2c_status+29,i2returnReset@p+1
  7336  000D3A  EE20  F0AC         	lfsr	2,_i2c_status+16
  7337  000D3E  D801               	call	i2u139_48
  7338  000D40  D00A               	goto	i2u139_49
  7339  000D42                     i2u139_48:
  7340  000D42  0005               	push	
  7341  000D44  6EFA               	movwf	pclath,c
  7342  000D46  50DE               	movf	postinc2,w,c
  7343  000D48  6EFD               	movwf	tosl,c
  7344  000D4A  50DE               	movf	postinc2,w,c
  7345  000D4C  6EFE               	movwf	tosh,c
  7346  000D4E  50F8               	movf	tblptru,w,c
  7347  000D50  6EFF               	movwf	tosu,c
  7348  000D52  50FA               	movf	pclath,w,c
  7349  000D54  0012               	return		;indir
  7350  000D56                     i2u139_49:
  7351                           
  7352                           ; Switch size 1, requested type "space"
  7353                           ; Number of cases is 2, Range of values is 2 to 3
  7354                           ; switch strategies available:
  7355                           ; Name         Instructions Cycles
  7356                           ; simple_byte            7     4 (average)
  7357                           ;	Chosen strategy is simple_byte
  7358  000D56  0A02               	xorlw	2	; case 2
  7359  000D58  B4D8               	btfsc	status,2,c
  7360  000D5A  D7E5               	goto	i2l162
  7361  000D5C  0A01               	xorlw	1	; case 3
  7362  000D5E  B4D8               	btfsc	status,2,c
  7363  000D60  D7E2               	goto	i2l162
  7364  000D62  D7E4               	goto	i2l165
  7365  000D64                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  7366                           	opt stack 0
  7367                           tosu	equ	0xFFF
  7368                           tosh	equ	0xFFE
  7369                           tosl	equ	0xFFD
  7370                           pclatu	equ	0xFFB
  7371                           pclath	equ	0xFFA
  7372                           tblptru	equ	0xFF8
  7373                           tblptrh	equ	0xFF7
  7374                           tblptrl	equ	0xFF6
  7375                           tablat	equ	0xFF5
  7376                           prodh	equ	0xFF4
  7377                           prodl	equ	0xFF3
  7378                           intcon	equ	0xFF2
  7379                           intcon2	equ	0xFF1
  7380                           postinc0	equ	0xFEE
  7381                           plusw0	equ	0xFEB
  7382                           fsr0h	equ	0xFEA
  7383                           fsr0l	equ	0xFE9
  7384                           wreg	equ	0xFE8
  7385                           postdec1	equ	0xFE5
  7386                           plusw1	equ	0xFE3
  7387                           fsr1h	equ	0xFE2
  7388                           fsr1l	equ	0xFE1
  7389                           indf2	equ	0xFDF
  7390                           postinc2	equ	0xFDE
  7391                           plusw2	equ	0xFDB
  7392                           fsr2h	equ	0xFDA
  7393                           fsr2l	equ	0xFD9
  7394                           status	equ	0xFD8
  7395                           
  7396 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  7397 ;; Defined at:
  7398 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;		None
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;		None
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      enum E7019
  7405 ;; Registers used:
  7406 ;;		wreg, cstack
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7412 ;;      Params:         0       0       0       0       0       0       0
  7413 ;;      Locals:         0       0       0       0       0       0       0
  7414 ;;      Temps:          0       0       0       0       0       0       0
  7415 ;;      Totals:         0       0       0       0       0       0       0
  7416 ;;Total ram usage:        0 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    1
  7419 ;; This function calls:
  7420 ;;		i2_i2c1_driver_sendNACK
  7421 ;; This function is called by:
  7422 ;;		i2_do_I2C_RX
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           	psect	text69
  7427  001194                     __ptext69:
  7428                           	opt stack 0
  7429  001194                     i2_do_I2C_DO_NACK_RESTART:
  7430                           	opt stack 17
  7431                           
  7432                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  7433                           
  7434                           ;incstack = 0
  7435  001194  ECF0  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7436                           
  7437                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  7438  001198  0E09               	movlw	9
  7439  00119A  0012               	return	
  7440  00119C                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  7441                           	opt stack 0
  7442                           tosu	equ	0xFFF
  7443                           tosh	equ	0xFFE
  7444                           tosl	equ	0xFFD
  7445                           pclatu	equ	0xFFB
  7446                           pclath	equ	0xFFA
  7447                           tblptru	equ	0xFF8
  7448                           tblptrh	equ	0xFF7
  7449                           tblptrl	equ	0xFF6
  7450                           tablat	equ	0xFF5
  7451                           prodh	equ	0xFF4
  7452                           prodl	equ	0xFF3
  7453                           intcon	equ	0xFF2
  7454                           intcon2	equ	0xFF1
  7455                           postinc0	equ	0xFEE
  7456                           plusw0	equ	0xFEB
  7457                           fsr0h	equ	0xFEA
  7458                           fsr0l	equ	0xFE9
  7459                           wreg	equ	0xFE8
  7460                           postdec1	equ	0xFE5
  7461                           plusw1	equ	0xFE3
  7462                           fsr1h	equ	0xFE2
  7463                           fsr1l	equ	0xFE1
  7464                           indf2	equ	0xFDF
  7465                           postinc2	equ	0xFDE
  7466                           plusw2	equ	0xFDB
  7467                           fsr2h	equ	0xFDA
  7468                           fsr2l	equ	0xFD9
  7469                           status	equ	0xFD8
  7470                           
  7471 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  7472 ;; Defined at:
  7473 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;		None
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;		None
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  1    wreg      enum E7019
  7480 ;; Registers used:
  7481 ;;		wreg, cstack
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7487 ;;      Params:         0       0       0       0       0       0       0
  7488 ;;      Locals:         0       0       0       0       0       0       0
  7489 ;;      Temps:          0       0       0       0       0       0       0
  7490 ;;      Totals:         0       0       0       0       0       0       0
  7491 ;;Total ram usage:        0 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    1
  7494 ;; This function calls:
  7495 ;;		i2_i2c1_driver_sendNACK
  7496 ;; This function is called by:
  7497 ;;		i2_do_I2C_RX
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	text70
  7502  00119C                     __ptext70:
  7503                           	opt stack 0
  7504  00119C                     i2_do_I2C_DO_NACK_STOP:
  7505                           	opt stack 17
  7506                           
  7507                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  7508                           
  7509                           ;incstack = 0
  7510  00119C  ECF0  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7511                           
  7512                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  7513  0011A0  0E0A               	movlw	10
  7514  0011A2  0012               	return	
  7515  0011A4                     __end_ofi2_do_I2C_DO_NACK_STOP:
  7516                           	opt stack 0
  7517                           tosu	equ	0xFFF
  7518                           tosh	equ	0xFFE
  7519                           tosl	equ	0xFFD
  7520                           pclatu	equ	0xFFB
  7521                           pclath	equ	0xFFA
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           prodh	equ	0xFF4
  7527                           prodl	equ	0xFF3
  7528                           intcon	equ	0xFF2
  7529                           intcon2	equ	0xFF1
  7530                           postinc0	equ	0xFEE
  7531                           plusw0	equ	0xFEB
  7532                           fsr0h	equ	0xFEA
  7533                           fsr0l	equ	0xFE9
  7534                           wreg	equ	0xFE8
  7535                           postdec1	equ	0xFE5
  7536                           plusw1	equ	0xFE3
  7537                           fsr1h	equ	0xFE2
  7538                           fsr1l	equ	0xFE1
  7539                           indf2	equ	0xFDF
  7540                           postinc2	equ	0xFDE
  7541                           plusw2	equ	0xFDB
  7542                           fsr2h	equ	0xFDA
  7543                           fsr2l	equ	0xFD9
  7544                           status	equ	0xFD8
  7545                           
  7546 ;; *************** function i2_do_I2C_DO_ACK *****************
  7547 ;; Defined at:
  7548 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;		None
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  1    wreg      enum E7019
  7555 ;; Registers used:
  7556 ;;		wreg, cstack
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7562 ;;      Params:         0       0       0       0       0       0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0
  7565 ;;      Totals:         0       0       0       0       0       0       0
  7566 ;;Total ram usage:        0 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    1
  7569 ;; This function calls:
  7570 ;;		i2_i2c1_driver_sendACK
  7571 ;; This function is called by:
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text71
  7576  0011A4                     __ptext71:
  7577                           	opt stack 0
  7578  0011A4                     i2_do_I2C_DO_ACK:
  7579                           	opt stack 18
  7580                           
  7581                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  7582                           
  7583                           ;incstack = 0
  7584  0011A4  ECF3  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  7585                           
  7586                           ;i2c_master.c: 362: return I2C_RCEN;
  7587  0011A8  0E05               	movlw	5
  7588  0011AA  0012               	return	
  7589  0011AC                     __end_ofi2_do_I2C_DO_ACK:
  7590                           	opt stack 0
  7591                           tosu	equ	0xFFF
  7592                           tosh	equ	0xFFE
  7593                           tosl	equ	0xFFD
  7594                           pclatu	equ	0xFFB
  7595                           pclath	equ	0xFFA
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           prodh	equ	0xFF4
  7601                           prodl	equ	0xFF3
  7602                           intcon	equ	0xFF2
  7603                           intcon2	equ	0xFF1
  7604                           postinc0	equ	0xFEE
  7605                           plusw0	equ	0xFEB
  7606                           fsr0h	equ	0xFEA
  7607                           fsr0l	equ	0xFE9
  7608                           wreg	equ	0xFE8
  7609                           postdec1	equ	0xFE5
  7610                           plusw1	equ	0xFE3
  7611                           fsr1h	equ	0xFE2
  7612                           fsr1l	equ	0xFE1
  7613                           indf2	equ	0xFDF
  7614                           postinc2	equ	0xFDE
  7615                           plusw2	equ	0xFDB
  7616                           fsr2h	equ	0xFDA
  7617                           fsr2l	equ	0xFD9
  7618                           status	equ	0xFD8
  7619                           
  7620 ;; *************** function i2_do_I2C_RCEN *****************
  7621 ;; Defined at:
  7622 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;		None
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;		None
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  1    wreg      enum E7019
  7629 ;; Registers used:
  7630 ;;		wreg, cstack
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7636 ;;      Params:         0       0       0       0       0       0       0
  7637 ;;      Locals:         0       0       0       0       0       0       0
  7638 ;;      Temps:          0       0       0       0       0       0       0
  7639 ;;      Totals:         0       0       0       0       0       0       0
  7640 ;;Total ram usage:        0 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; Hardware stack levels required when called:    1
  7643 ;; This function calls:
  7644 ;;		i2_i2c1_driver_startRX
  7645 ;; This function is called by:
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text72
  7650  001126                     __ptext72:
  7651                           	opt stack 0
  7652  001126                     i2_do_I2C_RCEN:
  7653                           	opt stack 18
  7654                           
  7655                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  7656                           
  7657                           ;incstack = 0
  7658  001126  0100               	movlb	0	; () banked
  7659  001128  979C               	bcf	_i2c_status& (0+255),3,b
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;i2c_master.c: 355: i2c1_driver_startRX();
  7663  00112A  EC11  F009         	call	i2_i2c1_driver_startRX	;wreg free
  7664                           
  7665                           ;i2c_master.c: 356: return I2C_RX;
  7666  00112E  0E04               	movlw	4
  7667  001130  0012               	return	
  7668  001132                     __end_ofi2_do_I2C_RCEN:
  7669                           	opt stack 0
  7670                           tosu	equ	0xFFF
  7671                           tosh	equ	0xFFE
  7672                           tosl	equ	0xFFD
  7673                           pclatu	equ	0xFFB
  7674                           pclath	equ	0xFFA
  7675                           tblptru	equ	0xFF8
  7676                           tblptrh	equ	0xFF7
  7677                           tblptrl	equ	0xFF6
  7678                           tablat	equ	0xFF5
  7679                           prodh	equ	0xFF4
  7680                           prodl	equ	0xFF3
  7681                           intcon	equ	0xFF2
  7682                           intcon2	equ	0xFF1
  7683                           postinc0	equ	0xFEE
  7684                           plusw0	equ	0xFEB
  7685                           fsr0h	equ	0xFEA
  7686                           fsr0l	equ	0xFE9
  7687                           wreg	equ	0xFE8
  7688                           postdec1	equ	0xFE5
  7689                           plusw1	equ	0xFE3
  7690                           fsr1h	equ	0xFE2
  7691                           fsr1l	equ	0xFE1
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           plusw2	equ	0xFDB
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  7700 ;; Defined at:
  7701 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      enum E7019
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7715 ;;      Params:         0       0       0       0       0       0       0
  7716 ;;      Locals:         0       0       0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0
  7718 ;;      Totals:         0       0       0       0       0       0       0
  7719 ;;Total ram usage:        0 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    1
  7722 ;; This function calls:
  7723 ;;		i2_i2c1_driver_TXData
  7724 ;; This function is called by:
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text73
  7729  00105A                     __ptext73:
  7730                           	opt stack 0
  7731  00105A                     i2_do_I2C_SEND_ADR_WRITE:
  7732                           	opt stack 18
  7733                           
  7734                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  7735                           
  7736                           ;incstack = 0
  7737  00105A  0100               	movlb	0	; () banked
  7738  00105C  879C               	bsf	_i2c_status& (0+255),3,b
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  7742  00105E  519D               	movf	(_i2c_status+1)& (0+255),w,b
  7743  001060  259D               	addwf	(_i2c_status+1)& (0+255),w,b
  7744  001062  ECE6  F008         	call	i2_i2c1_driver_TXData
  7745                           
  7746                           ;i2c_master.c: 349: return I2C_TX;
  7747  001066  0E03               	movlw	3
  7748  001068  0012               	return	
  7749  00106A                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  7750                           	opt stack 0
  7751                           tosu	equ	0xFFF
  7752                           tosh	equ	0xFFE
  7753                           tosl	equ	0xFFD
  7754                           pclatu	equ	0xFFB
  7755                           pclath	equ	0xFFA
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           intcon	equ	0xFF2
  7763                           intcon2	equ	0xFF1
  7764                           postinc0	equ	0xFEE
  7765                           plusw0	equ	0xFEB
  7766                           fsr0h	equ	0xFEA
  7767                           fsr0l	equ	0xFE9
  7768                           wreg	equ	0xFE8
  7769                           postdec1	equ	0xFE5
  7770                           plusw1	equ	0xFE3
  7771                           fsr1h	equ	0xFE2
  7772                           fsr1l	equ	0xFE1
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           plusw2	equ	0xFDB
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780 ;; *************** function i2_do_I2C_SEND_INITIAL_READ *****************
  7781 ;; Defined at:
  7782 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;		None
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;		None
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  1    wreg      enum E7019
  7789 ;; Registers used:
  7790 ;;		wreg, status,2, status,0, cstack
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7796 ;;      Params:         0       0       0       0       0       0       0
  7797 ;;      Locals:         0       0       0       0       0       0       0
  7798 ;;      Temps:          0       0       0       0       0       0       0
  7799 ;;      Totals:         0       0       0       0       0       0       0
  7800 ;;Total ram usage:        0 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; Hardware stack levels required when called:    1
  7803 ;; This function calls:
  7804 ;;		i2_i2c1_driver_TXData
  7805 ;; This function is called by:
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text74
  7810  00106A                     __ptext74:
  7811                           	opt stack 0
  7812  00106A                     i2_do_I2C_SEND_INITIAL_READ:
  7813                           	opt stack 18
  7814                           
  7815                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  7816                           
  7817                           ;incstack = 0
  7818  00106A  0100               	movlb	0	; () banked
  7819  00106C  879C               	bsf	_i2c_status& (0+255),3,b
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  7823  00106E  519D               	movf	(_i2c_status+1)& (0+255),w,b
  7824  001070  259D               	addwf	(_i2c_status+1)& (0+255),w,b
  7825  001072  ECE6  F008         	call	i2_i2c1_driver_TXData
  7826                           
  7827                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  7828  001076  0E11               	movlw	17
  7829  001078  0012               	return	
  7830  00107A                     __end_ofi2_do_I2C_SEND_INITIAL_READ:
  7831                           	opt stack 0
  7832                           tosu	equ	0xFFF
  7833                           tosh	equ	0xFFE
  7834                           tosl	equ	0xFFD
  7835                           pclatu	equ	0xFFB
  7836                           pclath	equ	0xFFA
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           intcon	equ	0xFF2
  7844                           intcon2	equ	0xFF1
  7845                           postinc0	equ	0xFEE
  7846                           plusw0	equ	0xFEB
  7847                           fsr0h	equ	0xFEA
  7848                           fsr0l	equ	0xFE9
  7849                           wreg	equ	0xFE8
  7850                           postdec1	equ	0xFE5
  7851                           plusw1	equ	0xFE3
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           indf2	equ	0xFDF
  7855                           postinc2	equ	0xFDE
  7856                           plusw2	equ	0xFDB
  7857                           fsr2h	equ	0xFDA
  7858                           fsr2l	equ	0xFD9
  7859                           status	equ	0xFD8
  7860                           
  7861 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  7862 ;; Defined at:
  7863 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;		None
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      enum E7019
  7870 ;; Registers used:
  7871 ;;		wreg, status,0, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7877 ;;      Params:         0       0       0       0       0       0       0
  7878 ;;      Locals:         0       0       0       0       0       0       0
  7879 ;;      Temps:          0       0       0       0       0       0       0
  7880 ;;      Totals:         0       0       0       0       0       0       0
  7881 ;;Total ram usage:        0 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    1
  7884 ;; This function calls:
  7885 ;;		i2_i2c1_driver_TXData
  7886 ;; This function is called by:
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text75
  7891  00107A                     __ptext75:
  7892                           	opt stack 0
  7893  00107A                     i2_do_I2C_SEND_ADR_READ:
  7894                           	opt stack 18
  7895                           
  7896                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  7897                           
  7898                           ;incstack = 0
  7899  00107A  0100               	movlb	0	; () banked
  7900  00107C  879C               	bsf	_i2c_status& (0+255),3,b
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  7904  00107E  80D8               	bsf	status,0,c
  7905  001080  359D               	rlcf	(_i2c_status+1)& (0+255),w,b
  7906  001082  ECE6  F008         	call	i2_i2c1_driver_TXData
  7907                           
  7908                           ;i2c_master.c: 325: return I2C_RCEN;
  7909  001086  0E05               	movlw	5
  7910  001088  0012               	return	
  7911  00108A                     __end_ofi2_do_I2C_SEND_ADR_READ:
  7912                           	opt stack 0
  7913                           tosu	equ	0xFFF
  7914                           tosh	equ	0xFFE
  7915                           tosl	equ	0xFFD
  7916                           pclatu	equ	0xFFB
  7917                           pclath	equ	0xFFA
  7918                           tblptru	equ	0xFF8
  7919                           tblptrh	equ	0xFF7
  7920                           tblptrl	equ	0xFF6
  7921                           tablat	equ	0xFF5
  7922                           prodh	equ	0xFF4
  7923                           prodl	equ	0xFF3
  7924                           intcon	equ	0xFF2
  7925                           intcon2	equ	0xFF1
  7926                           postinc0	equ	0xFEE
  7927                           plusw0	equ	0xFEB
  7928                           fsr0h	equ	0xFEA
  7929                           fsr0l	equ	0xFE9
  7930                           wreg	equ	0xFE8
  7931                           postdec1	equ	0xFE5
  7932                           plusw1	equ	0xFE3
  7933                           fsr1h	equ	0xFE2
  7934                           fsr1l	equ	0xFE1
  7935                           indf2	equ	0xFDF
  7936                           postinc2	equ	0xFDE
  7937                           plusw2	equ	0xFDB
  7938                           fsr2h	equ	0xFDA
  7939                           fsr2l	equ	0xFD9
  7940                           status	equ	0xFD8
  7941                           
  7942 ;; *************** function i2_do_I2C_SEND_STOP *****************
  7943 ;; Defined at:
  7944 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;		None
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;		None
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      enum E7019
  7951 ;; Registers used:
  7952 ;;		wreg, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7958 ;;      Params:         0       0       0       0       0       0       0
  7959 ;;      Locals:         0       0       0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0
  7961 ;;      Totals:         0       0       0       0       0       0       0
  7962 ;;Total ram usage:        0 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    1
  7965 ;; This function calls:
  7966 ;;		i2_i2c1_driver_stop
  7967 ;; This function is called by:
  7968 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7969 ;;		i2_do_I2C_TX
  7970 ;;		i2_do_I2C_TX_EMPTY
  7971 ;; This function uses a non-reentrant model
  7972 ;;
  7973                           
  7974                           	psect	text76
  7975  0011AC                     __ptext76:
  7976                           	opt stack 0
  7977  0011AC                     i2_do_I2C_SEND_STOP:
  7978                           	opt stack 17
  7979                           
  7980                           ;i2c_master.c: 316: i2c1_driver_stop();
  7981                           
  7982                           ;incstack = 0
  7983  0011AC  EC17  F009         	call	i2_i2c1_driver_stop	;wreg free
  7984                           
  7985                           ;i2c_master.c: 317: return I2C_IDLE;
  7986  0011B0  0E00               	movlw	0
  7987  0011B2  0012               	return	
  7988  0011B4                     __end_ofi2_do_I2C_SEND_STOP:
  7989                           	opt stack 0
  7990                           tosu	equ	0xFFF
  7991                           tosh	equ	0xFFE
  7992                           tosl	equ	0xFFD
  7993                           pclatu	equ	0xFFB
  7994                           pclath	equ	0xFFA
  7995                           tblptru	equ	0xFF8
  7996                           tblptrh	equ	0xFF7
  7997                           tblptrl	equ	0xFF6
  7998                           tablat	equ	0xFF5
  7999                           prodh	equ	0xFF4
  8000                           prodl	equ	0xFF3
  8001                           intcon	equ	0xFF2
  8002                           intcon2	equ	0xFF1
  8003                           postinc0	equ	0xFEE
  8004                           plusw0	equ	0xFEB
  8005                           fsr0h	equ	0xFEA
  8006                           fsr0l	equ	0xFE9
  8007                           wreg	equ	0xFE8
  8008                           postdec1	equ	0xFE5
  8009                           plusw1	equ	0xFE3
  8010                           fsr1h	equ	0xFE2
  8011                           fsr1l	equ	0xFE1
  8012                           indf2	equ	0xFDF
  8013                           postinc2	equ	0xFDE
  8014                           plusw2	equ	0xFDB
  8015                           fsr2h	equ	0xFDA
  8016                           fsr2l	equ	0xFD9
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  8020 ;; Defined at:
  8021 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;		None
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;		None
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  1    wreg      enum E7019
  8028 ;; Registers used:
  8029 ;;		wreg, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8035 ;;      Params:         0       0       0       0       0       0       0
  8036 ;;      Locals:         0       0       0       0       0       0       0
  8037 ;;      Temps:          0       0       0       0       0       0       0
  8038 ;;      Totals:         0       0       0       0       0       0       0
  8039 ;;Total ram usage:        0 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    1
  8042 ;; This function calls:
  8043 ;;		i2_i2c1_driver_restart
  8044 ;; This function is called by:
  8045 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8046 ;;		i2_do_I2C_TX_EMPTY
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           	psect	text77
  8051  0011B4                     __ptext77:
  8052                           	opt stack 0
  8053  0011B4                     i2_do_I2C_SEND_RESTART:
  8054                           	opt stack 17
  8055                           
  8056                           ;i2c_master.c: 310: i2c1_driver_restart();
  8057                           
  8058                           ;incstack = 0
  8059  0011B4  EC19  F009         	call	i2_i2c1_driver_restart	;wreg free
  8060                           
  8061                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  8062  0011B8  0E01               	movlw	1
  8063  0011BA  0012               	return	
  8064  0011BC                     __end_ofi2_do_I2C_SEND_RESTART:
  8065                           	opt stack 0
  8066                           tosu	equ	0xFFF
  8067                           tosh	equ	0xFFE
  8068                           tosl	equ	0xFFD
  8069                           pclatu	equ	0xFFB
  8070                           pclath	equ	0xFFA
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           intcon	equ	0xFF2
  8078                           intcon2	equ	0xFF1
  8079                           postinc0	equ	0xFEE
  8080                           plusw0	equ	0xFEB
  8081                           fsr0h	equ	0xFEA
  8082                           fsr0l	equ	0xFE9
  8083                           wreg	equ	0xFE8
  8084                           postdec1	equ	0xFE5
  8085                           plusw1	equ	0xFE3
  8086                           fsr1h	equ	0xFE2
  8087                           fsr1l	equ	0xFE1
  8088                           indf2	equ	0xFDF
  8089                           postinc2	equ	0xFDE
  8090                           plusw2	equ	0xFDB
  8091                           fsr2h	equ	0xFDA
  8092                           fsr2l	equ	0xFD9
  8093                           status	equ	0xFD8
  8094                           
  8095 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  8096 ;; Defined at:
  8097 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;		None
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;		None
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      enum E7019
  8104 ;; Registers used:
  8105 ;;		wreg, cstack
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8111 ;;      Params:         0       0       0       0       0       0       0
  8112 ;;      Locals:         0       0       0       0       0       0       0
  8113 ;;      Temps:          0       0       0       0       0       0       0
  8114 ;;      Totals:         0       0       0       0       0       0       0
  8115 ;;Total ram usage:        0 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    1
  8118 ;; This function calls:
  8119 ;;		i2_i2c1_driver_restart
  8120 ;; This function is called by:
  8121 ;;		i2_do_I2C_TX
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           	psect	text78
  8126  0011BC                     __ptext78:
  8127                           	opt stack 0
  8128  0011BC                     i2_do_I2C_SEND_RESTART_WRITE:
  8129                           	opt stack 17
  8130                           
  8131                           ;i2c_master.c: 304: i2c1_driver_restart();
  8132                           
  8133                           ;incstack = 0
  8134  0011BC  EC19  F009         	call	i2_i2c1_driver_restart	;wreg free
  8135                           
  8136                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  8137  0011C0  0E02               	movlw	2
  8138  0011C2  0012               	return	
  8139  0011C4                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  8140                           	opt stack 0
  8141                           tosu	equ	0xFFF
  8142                           tosh	equ	0xFFE
  8143                           tosl	equ	0xFFD
  8144                           pclatu	equ	0xFFB
  8145                           pclath	equ	0xFFA
  8146                           tblptru	equ	0xFF8
  8147                           tblptrh	equ	0xFF7
  8148                           tblptrl	equ	0xFF6
  8149                           tablat	equ	0xFF5
  8150                           prodh	equ	0xFF4
  8151                           prodl	equ	0xFF3
  8152                           intcon	equ	0xFF2
  8153                           intcon2	equ	0xFF1
  8154                           postinc0	equ	0xFEE
  8155                           plusw0	equ	0xFEB
  8156                           fsr0h	equ	0xFEA
  8157                           fsr0l	equ	0xFE9
  8158                           wreg	equ	0xFE8
  8159                           postdec1	equ	0xFE5
  8160                           plusw1	equ	0xFE3
  8161                           fsr1h	equ	0xFE2
  8162                           fsr1l	equ	0xFE1
  8163                           indf2	equ	0xFDF
  8164                           postinc2	equ	0xFDE
  8165                           plusw2	equ	0xFDB
  8166                           fsr2h	equ	0xFDA
  8167                           fsr2l	equ	0xFD9
  8168                           status	equ	0xFD8
  8169                           
  8170 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  8171 ;; Defined at:
  8172 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  8173 ;; Parameters:    Size  Location     Type
  8174 ;;		None
  8175 ;; Auto vars:     Size  Location     Type
  8176 ;;		None
  8177 ;; Return value:  Size  Location     Type
  8178 ;;                  1    wreg      enum E7019
  8179 ;; Registers used:
  8180 ;;		wreg, cstack
  8181 ;; Tracked objects:
  8182 ;;		On entry : 0/0
  8183 ;;		On exit  : 0/0
  8184 ;;		Unchanged: 0/0
  8185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8186 ;;      Params:         0       0       0       0       0       0       0
  8187 ;;      Locals:         0       0       0       0       0       0       0
  8188 ;;      Temps:          0       0       0       0       0       0       0
  8189 ;;      Totals:         0       0       0       0       0       0       0
  8190 ;;Total ram usage:        0 bytes
  8191 ;; Hardware stack levels used:    1
  8192 ;; Hardware stack levels required when called:    1
  8193 ;; This function calls:
  8194 ;;		i2_i2c1_driver_restart
  8195 ;; This function is called by:
  8196 ;;		i2_do_I2C_TX
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           	psect	text79
  8201  0011C4                     __ptext79:
  8202                           	opt stack 0
  8203  0011C4                     i2_do_I2C_SEND_RESTART_READ:
  8204                           	opt stack 17
  8205                           
  8206                           ;i2c_master.c: 298: i2c1_driver_restart();
  8207                           
  8208                           ;incstack = 0
  8209  0011C4  EC19  F009         	call	i2_i2c1_driver_restart	;wreg free
  8210                           
  8211                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  8212  0011C8  0E01               	movlw	1
  8213  0011CA  0012               	return	
  8214  0011CC                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  8215                           	opt stack 0
  8216                           tosu	equ	0xFFF
  8217                           tosh	equ	0xFFE
  8218                           tosl	equ	0xFFD
  8219                           pclatu	equ	0xFFB
  8220                           pclath	equ	0xFFA
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           prodh	equ	0xFF4
  8226                           prodl	equ	0xFF3
  8227                           intcon	equ	0xFF2
  8228                           intcon2	equ	0xFF1
  8229                           postinc0	equ	0xFEE
  8230                           plusw0	equ	0xFEB
  8231                           fsr0h	equ	0xFEA
  8232                           fsr0l	equ	0xFE9
  8233                           wreg	equ	0xFE8
  8234                           postdec1	equ	0xFE5
  8235                           plusw1	equ	0xFE3
  8236                           fsr1h	equ	0xFE2
  8237                           fsr1l	equ	0xFE1
  8238                           indf2	equ	0xFDF
  8239                           postinc2	equ	0xFDE
  8240                           plusw2	equ	0xFDB
  8241                           fsr2h	equ	0xFDA
  8242                           fsr2l	equ	0xFD9
  8243                           status	equ	0xFD8
  8244                           
  8245 ;; *************** function i2_do_I2C_IDLE *****************
  8246 ;; Defined at:
  8247 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;		None
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;		None
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      enum E7019
  8254 ;; Registers used:
  8255 ;;		wreg, status,2
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8261 ;;      Params:         0       0       0       0       0       0       0
  8262 ;;      Locals:         0       0       0       0       0       0       0
  8263 ;;      Temps:          0       0       0       0       0       0       0
  8264 ;;      Totals:         0       0       0       0       0       0       0
  8265 ;;Total ram usage:        0 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text80
  8274  001132                     __ptext80:
  8275                           	opt stack 0
  8276  001132                     i2_do_I2C_IDLE:
  8277                           	opt stack 19
  8278                           
  8279                           ;i2c_master.c: 291: i2c_status.busy = 0;
  8280                           
  8281                           ;incstack = 0
  8282  001132  0100               	movlb	0	; () banked
  8283  001134  919C               	bcf	_i2c_status& (0+255),0,b
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  8287  001136  0E00               	movlw	0
  8288  001138  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;i2c_master.c: 293: return I2C_RESET;
  8292  00113A  0E0E               	movlw	14
  8293  00113C  0012               	return	
  8294  00113E                     __end_ofi2_do_I2C_IDLE:
  8295                           	opt stack 0
  8296                           tosu	equ	0xFFF
  8297                           tosh	equ	0xFFE
  8298                           tosl	equ	0xFFD
  8299                           pclatu	equ	0xFFB
  8300                           pclath	equ	0xFFA
  8301                           tblptru	equ	0xFF8
  8302                           tblptrh	equ	0xFF7
  8303                           tblptrl	equ	0xFF6
  8304                           tablat	equ	0xFF5
  8305                           prodh	equ	0xFF4
  8306                           prodl	equ	0xFF3
  8307                           intcon	equ	0xFF2
  8308                           intcon2	equ	0xFF1
  8309                           postinc0	equ	0xFEE
  8310                           plusw0	equ	0xFEB
  8311                           fsr0h	equ	0xFEA
  8312                           fsr0l	equ	0xFE9
  8313                           wreg	equ	0xFE8
  8314                           postdec1	equ	0xFE5
  8315                           plusw1	equ	0xFE3
  8316                           fsr1h	equ	0xFE2
  8317                           fsr1l	equ	0xFE1
  8318                           indf2	equ	0xFDF
  8319                           postinc2	equ	0xFDE
  8320                           plusw2	equ	0xFDB
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function i2_do_I2C_RESET *****************
  8326 ;; Defined at:
  8327 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      enum E7019
  8334 ;; Registers used:
  8335 ;;		wreg, status,2, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8341 ;;      Params:         0       0       0       0       0       0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0
  8343 ;;      Temps:          0       0       0       0       0       0       0
  8344 ;;      Totals:         0       0       0       0       0       0       0
  8345 ;;Total ram usage:        0 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    1
  8348 ;; This function calls:
  8349 ;;		i2_i2c1_driver_resetBus
  8350 ;; This function is called by:
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text81
  8355  00108A                     __ptext81:
  8356                           	opt stack 0
  8357  00108A                     i2_do_I2C_RESET:
  8358                           	opt stack 18
  8359                           
  8360                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;incstack = 0
  8364  00108A  EC1E  F009         	call	i2_i2c1_driver_resetBus	;wreg free
  8365                           
  8366                           ;i2c_master.c: 284: i2c_status.busy = 0;
  8367  00108E  0100               	movlb	0	; () banked
  8368  001090  919C               	bcf	_i2c_status& (0+255),0,b
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  8372  001092  0E00               	movlw	0
  8373  001094  6FA7               	movwf	(_i2c_status+11)& (0+255),b
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;i2c_master.c: 286: return I2C_RESET;
  8377  001096  0E0E               	movlw	14
  8378  001098  0012               	return	
  8379  00109A                     __end_ofi2_do_I2C_RESET:
  8380                           	opt stack 0
  8381                           tosu	equ	0xFFF
  8382                           tosh	equ	0xFFE
  8383                           tosl	equ	0xFFD
  8384                           pclatu	equ	0xFFB
  8385                           pclath	equ	0xFFA
  8386                           tblptru	equ	0xFF8
  8387                           tblptrh	equ	0xFF7
  8388                           tblptrl	equ	0xFF6
  8389                           tablat	equ	0xFF5
  8390                           prodh	equ	0xFF4
  8391                           prodl	equ	0xFF3
  8392                           intcon	equ	0xFF2
  8393                           intcon2	equ	0xFF1
  8394                           postinc0	equ	0xFEE
  8395                           plusw0	equ	0xFEB
  8396                           fsr0h	equ	0xFEA
  8397                           fsr0l	equ	0xFE9
  8398                           wreg	equ	0xFE8
  8399                           postdec1	equ	0xFE5
  8400                           plusw1	equ	0xFE3
  8401                           fsr1h	equ	0xFE2
  8402                           fsr1l	equ	0xFE1
  8403                           indf2	equ	0xFDF
  8404                           postinc2	equ	0xFDE
  8405                           plusw2	equ	0xFDB
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function i2_do_I2C_TX_REGISTER *****************
  8411 ;; Defined at:
  8412 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;		None
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;		None
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  1    wreg      enum E7019
  8419 ;; Registers used:
  8420 ;;		wreg, status,2, cstack
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8426 ;;      Params:         0       0       0       0       0       0       0
  8427 ;;      Locals:         0       0       0       0       0       0       0
  8428 ;;      Temps:          0       0       0       0       0       0       0
  8429 ;;      Totals:         0       0       0       0       0       0       0
  8430 ;;Total ram usage:        0 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:    1
  8433 ;; This function calls:
  8434 ;;		i2_i2c1_driver_TXData
  8435 ;; This function is called by:
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           	psect	text82
  8440  001118                     __ptext82:
  8441                           	opt stack 0
  8442  001118                     i2_do_I2C_TX_REGISTER:
  8443                           	opt stack 18
  8444                           
  8445                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;incstack = 0
  8449  001118  0100               	movlb	0	; () banked
  8450  00111A  879C               	bsf	_i2c_status& (0+255),3,b
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  8454  00111C  51C0               	movf	(_i2c_status+36)& (0+255),w,b
  8455  00111E  ECE6  F008         	call	i2_i2c1_driver_TXData
  8456                           
  8457                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  8458  001122  0E07               	movlw	7
  8459  001124  0012               	return	
  8460  001126                     __end_ofi2_do_I2C_TX_REGISTER:
  8461                           	opt stack 0
  8462                           tosu	equ	0xFFF
  8463                           tosh	equ	0xFFE
  8464                           tosl	equ	0xFFD
  8465                           pclatu	equ	0xFFB
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           intcon2	equ	0xFF1
  8475                           postinc0	equ	0xFEE
  8476                           plusw0	equ	0xFEB
  8477                           fsr0h	equ	0xFEA
  8478                           fsr0l	equ	0xFE9
  8479                           wreg	equ	0xFE8
  8480                           postdec1	equ	0xFE5
  8481                           plusw1	equ	0xFE3
  8482                           fsr1h	equ	0xFE2
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           plusw2	equ	0xFDB
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function i2_mssp1_setIRQ *****************
  8492 ;; Defined at:
  8493 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;		None
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		None
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8507 ;;      Params:         0       0       0       0       0       0       0
  8508 ;;      Locals:         0       0       0       0       0       0       0
  8509 ;;      Temps:          0       0       0       0       0       0       0
  8510 ;;      Totals:         0       0       0       0       0       0       0
  8511 ;;Total ram usage:        0 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; This function calls:
  8514 ;;		Nothing
  8515 ;; This function is called by:
  8516 ;;		i2_do_I2C_TX_EMPTY
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	text83
  8521  00121A                     __ptext83:
  8522                           	opt stack 0
  8523  00121A                     i2_mssp1_setIRQ:
  8524                           	opt stack 18
  8525                           
  8526                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  8527                           
  8528                           ;incstack = 0
  8529  00121A  869E               	bsf	3998,3,c	;volatile
  8530  00121C  0012               	return		;funcret
  8531  00121E                     __end_ofi2_mssp1_setIRQ:
  8532                           	opt stack 0
  8533                           tosu	equ	0xFFF
  8534                           tosh	equ	0xFFE
  8535                           tosl	equ	0xFFD
  8536                           pclatu	equ	0xFFB
  8537                           pclath	equ	0xFFA
  8538                           tblptru	equ	0xFF8
  8539                           tblptrh	equ	0xFF7
  8540                           tblptrl	equ	0xFF6
  8541                           tablat	equ	0xFF5
  8542                           prodh	equ	0xFF4
  8543                           prodl	equ	0xFF3
  8544                           intcon	equ	0xFF2
  8545                           intcon2	equ	0xFF1
  8546                           postinc0	equ	0xFEE
  8547                           plusw0	equ	0xFEB
  8548                           fsr0h	equ	0xFEA
  8549                           fsr0l	equ	0xFE9
  8550                           wreg	equ	0xFE8
  8551                           postdec1	equ	0xFE5
  8552                           plusw1	equ	0xFE3
  8553                           fsr1h	equ	0xFE2
  8554                           fsr1l	equ	0xFE1
  8555                           indf2	equ	0xFDF
  8556                           postinc2	equ	0xFDE
  8557                           plusw2	equ	0xFDB
  8558                           fsr2h	equ	0xFDA
  8559                           fsr2l	equ	0xFD9
  8560                           status	equ	0xFD8
  8561                           
  8562 ;; *************** function i2_i2c1_driver_isNACK *****************
  8563 ;; Defined at:
  8564 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;		None
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;		None
  8569 ;; Return value:  Size  Location     Type
  8570 ;;		None               void
  8571 ;; Registers used:
  8572 ;;		wreg, status,2, status,0
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8578 ;;      Params:         0       0       0       0       0       0       0
  8579 ;;      Locals:         0       0       0       0       0       0       0
  8580 ;;      Temps:          1       0       0       0       0       0       0
  8581 ;;      Totals:         1       0       0       0       0       0       0
  8582 ;;Total ram usage:        1 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; This function calls:
  8585 ;;		Nothing
  8586 ;; This function is called by:
  8587 ;;		i2_do_I2C_TX
  8588 ;;		i2_i2c_ISR
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text84
  8593  000FD8                     __ptext84:
  8594                           	opt stack 0
  8595  000FD8                     i2_i2c1_driver_isNACK:
  8596                           	opt stack 19
  8597                           
  8598                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  8599                           
  8600                           ;incstack = 0
  8601  000FD8  50C5               	movf	4037,w,c	;volatile
  8602  000FDA  0BBF               	andlw	-65
  8603  000FDC  0940               	iorlw	64
  8604  000FDE  6EC5               	movwf	4037,c	;volatile
  8605  000FE0  38C5               	swapf	4037,w,c	;volatile
  8606  000FE2  32E8               	rrcf	wreg,f,c
  8607  000FE4  32E8               	rrcf	wreg,f,c
  8608  000FE6  0B01               	andlw	1
  8609  000FE8  6E26               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
  8610  000FEA  3026               	rrcf	??i2_i2c1_driver_isNACK,w,c
  8611  000FEC  0012               	return	
  8612  000FEE                     __end_ofi2_i2c1_driver_isNACK:
  8613                           	opt stack 0
  8614                           tosu	equ	0xFFF
  8615                           tosh	equ	0xFFE
  8616                           tosl	equ	0xFFD
  8617                           pclatu	equ	0xFFB
  8618                           pclath	equ	0xFFA
  8619                           tblptru	equ	0xFF8
  8620                           tblptrh	equ	0xFF7
  8621                           tblptrl	equ	0xFF6
  8622                           tablat	equ	0xFF5
  8623                           prodh	equ	0xFF4
  8624                           prodl	equ	0xFF3
  8625                           intcon	equ	0xFF2
  8626                           intcon2	equ	0xFF1
  8627                           postinc0	equ	0xFEE
  8628                           plusw0	equ	0xFEB
  8629                           fsr0h	equ	0xFEA
  8630                           fsr0l	equ	0xFE9
  8631                           wreg	equ	0xFE8
  8632                           postdec1	equ	0xFE5
  8633                           plusw1	equ	0xFE3
  8634                           fsr1h	equ	0xFE2
  8635                           fsr1l	equ	0xFE1
  8636                           indf2	equ	0xFDF
  8637                           postinc2	equ	0xFDE
  8638                           plusw2	equ	0xFDB
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643 ;; *************** function i2_i2c1_driver_TXData *****************
  8644 ;; Defined at:
  8645 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  d               1    wreg     unsigned char 
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;  d               1    0[COMRAM] unsigned char 
  8650 ;; Return value:  Size  Location     Type
  8651 ;;                  1    wreg      void 
  8652 ;; Registers used:
  8653 ;;		wreg
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8659 ;;      Params:         0       0       0       0       0       0       0
  8660 ;;      Locals:         1       0       0       0       0       0       0
  8661 ;;      Temps:          0       0       0       0       0       0       0
  8662 ;;      Totals:         1       0       0       0       0       0       0
  8663 ;;Total ram usage:        1 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; This function calls:
  8666 ;;		Nothing
  8667 ;; This function is called by:
  8668 ;;		i2_do_I2C_SEND_ADR_READ
  8669 ;;		i2_do_I2C_SEND_INITIAL_READ
  8670 ;;		i2_do_I2C_TX_REGISTER
  8671 ;;		i2_do_I2C_SEND_ADR_WRITE
  8672 ;;		i2_do_I2C_TX
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           	psect	text85
  8677  0011CC                     __ptext85:
  8678                           	opt stack 0
  8679  0011CC                     i2_i2c1_driver_TXData:
  8680                           	opt stack 18
  8681                           
  8682                           ;incstack = 0
  8683                           ;i2i2c1_driver_TXData@d stored from wreg
  8684  0011CC  6E26               	movwf	i2i2c1_driver_TXData@d,c
  8685                           
  8686                           ;i2c1_driver.c: 188: SSP1BUF = d;
  8687  0011CE  C026  FFC9         	movff	i2i2c1_driver_TXData@d,4041	;volatile
  8688  0011D2  0012               	return		;funcret
  8689  0011D4                     __end_ofi2_i2c1_driver_TXData:
  8690                           	opt stack 0
  8691                           tosu	equ	0xFFF
  8692                           tosh	equ	0xFFE
  8693                           tosl	equ	0xFFD
  8694                           pclatu	equ	0xFFB
  8695                           pclath	equ	0xFFA
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           intcon2	equ	0xFF1
  8704                           postinc0	equ	0xFEE
  8705                           plusw0	equ	0xFEB
  8706                           fsr0h	equ	0xFEA
  8707                           fsr0l	equ	0xFE9
  8708                           wreg	equ	0xFE8
  8709                           postdec1	equ	0xFE5
  8710                           plusw1	equ	0xFE3
  8711                           fsr1h	equ	0xFE2
  8712                           fsr1l	equ	0xFE1
  8713                           indf2	equ	0xFDF
  8714                           postinc2	equ	0xFDE
  8715                           plusw2	equ	0xFDB
  8716                           fsr2h	equ	0xFDA
  8717                           fsr2l	equ	0xFD9
  8718                           status	equ	0xFD8
  8719                           
  8720 ;; *************** function i2_i2c1_driver_getRXData *****************
  8721 ;; Defined at:
  8722 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;		None
  8725 ;; Auto vars:     Size  Location     Type
  8726 ;;		None
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  1    wreg      unsigned char 
  8729 ;; Registers used:
  8730 ;;		wreg, status,2
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8736 ;;      Params:         0       0       0       0       0       0       0
  8737 ;;      Locals:         0       0       0       0       0       0       0
  8738 ;;      Temps:          0       0       0       0       0       0       0
  8739 ;;      Totals:         0       0       0       0       0       0       0
  8740 ;;Total ram usage:        0 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; This function calls:
  8743 ;;		Nothing
  8744 ;; This function is called by:
  8745 ;;		i2_do_I2C_RX
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text86
  8750  00121E                     __ptext86:
  8751                           	opt stack 0
  8752  00121E                     i2_i2c1_driver_getRXData:
  8753                           	opt stack 18
  8754                           
  8755                           ;i2c1_driver.c: 173: return SSP1BUF;
  8756                           
  8757                           ;incstack = 0
  8758  00121E  50C9               	movf	4041,w,c	;volatile
  8759  001220  0012               	return	
  8760  001222                     __end_ofi2_i2c1_driver_getRXData:
  8761                           	opt stack 0
  8762                           tosu	equ	0xFFF
  8763                           tosh	equ	0xFFE
  8764                           tosl	equ	0xFFD
  8765                           pclatu	equ	0xFFB
  8766                           pclath	equ	0xFFA
  8767                           tblptru	equ	0xFF8
  8768                           tblptrh	equ	0xFF7
  8769                           tblptrl	equ	0xFF6
  8770                           tablat	equ	0xFF5
  8771                           prodh	equ	0xFF4
  8772                           prodl	equ	0xFF3
  8773                           intcon	equ	0xFF2
  8774                           intcon2	equ	0xFF1
  8775                           postinc0	equ	0xFEE
  8776                           plusw0	equ	0xFEB
  8777                           fsr0h	equ	0xFEA
  8778                           fsr0l	equ	0xFE9
  8779                           wreg	equ	0xFE8
  8780                           postdec1	equ	0xFE5
  8781                           plusw1	equ	0xFE3
  8782                           fsr1h	equ	0xFE2
  8783                           fsr1l	equ	0xFE1
  8784                           indf2	equ	0xFDF
  8785                           postinc2	equ	0xFDE
  8786                           plusw2	equ	0xFDB
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function i2_i2c1_driver_sendNACK *****************
  8792 ;; Defined at:
  8793 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		None
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8807 ;;      Params:         0       0       0       0       0       0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0
  8810 ;;      Totals:         0       0       0       0       0       0       0
  8811 ;;Total ram usage:        0 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; This function calls:
  8814 ;;		Nothing
  8815 ;; This function is called by:
  8816 ;;		i2_do_I2C_DO_NACK_STOP
  8817 ;;		i2_do_I2C_DO_NACK_RESTART
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           	psect	text87
  8822  0011E0                     __ptext87:
  8823                           	opt stack 0
  8824  0011E0                     i2_i2c1_driver_sendNACK:
  8825                           	opt stack 17
  8826                           
  8827                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  8828                           
  8829                           ;incstack = 0
  8830  0011E0  8AC5               	bsf	4037,5,c	;volatile
  8831                           
  8832                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  8833  0011E2  88C5               	bsf	4037,4,c	;volatile
  8834  0011E4  0012               	return		;funcret
  8835  0011E6                     __end_ofi2_i2c1_driver_sendNACK:
  8836                           	opt stack 0
  8837                           tosu	equ	0xFFF
  8838                           tosh	equ	0xFFE
  8839                           tosl	equ	0xFFD
  8840                           pclatu	equ	0xFFB
  8841                           pclath	equ	0xFFA
  8842                           tblptru	equ	0xFF8
  8843                           tblptrh	equ	0xFF7
  8844                           tblptrl	equ	0xFF6
  8845                           tablat	equ	0xFF5
  8846                           prodh	equ	0xFF4
  8847                           prodl	equ	0xFF3
  8848                           intcon	equ	0xFF2
  8849                           intcon2	equ	0xFF1
  8850                           postinc0	equ	0xFEE
  8851                           plusw0	equ	0xFEB
  8852                           fsr0h	equ	0xFEA
  8853                           fsr0l	equ	0xFE9
  8854                           wreg	equ	0xFE8
  8855                           postdec1	equ	0xFE5
  8856                           plusw1	equ	0xFE3
  8857                           fsr1h	equ	0xFE2
  8858                           fsr1l	equ	0xFE1
  8859                           indf2	equ	0xFDF
  8860                           postinc2	equ	0xFDE
  8861                           plusw2	equ	0xFDB
  8862                           fsr2h	equ	0xFDA
  8863                           fsr2l	equ	0xFD9
  8864                           status	equ	0xFD8
  8865                           
  8866 ;; *************** function i2_i2c1_driver_resetBus *****************
  8867 ;; Defined at:
  8868 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  8869 ;; Parameters:    Size  Location     Type
  8870 ;;		None
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;		None
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      void 
  8875 ;; Registers used:
  8876 ;;		None
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8882 ;;      Params:         0       0       0       0       0       0       0
  8883 ;;      Locals:         0       0       0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0
  8885 ;;      Totals:         0       0       0       0       0       0       0
  8886 ;;Total ram usage:        0 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; This function calls:
  8889 ;;		Nothing
  8890 ;; This function is called by:
  8891 ;;		i2_do_I2C_RESET
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           	psect	text88
  8896  00123C                     __ptext88:
  8897                           	opt stack 0
  8898  00123C                     i2_i2c1_driver_resetBus:
  8899                           	opt stack 18
  8900                           
  8901                           ;incstack = 0
  8902  00123C  0012               	return		;funcret
  8903  00123E                     __end_ofi2_i2c1_driver_resetBus:
  8904                           	opt stack 0
  8905                           tosu	equ	0xFFF
  8906                           tosh	equ	0xFFE
  8907                           tosl	equ	0xFFD
  8908                           pclatu	equ	0xFFB
  8909                           pclath	equ	0xFFA
  8910                           tblptru	equ	0xFF8
  8911                           tblptrh	equ	0xFF7
  8912                           tblptrl	equ	0xFF6
  8913                           tablat	equ	0xFF5
  8914                           prodh	equ	0xFF4
  8915                           prodl	equ	0xFF3
  8916                           intcon	equ	0xFF2
  8917                           intcon2	equ	0xFF1
  8918                           postinc0	equ	0xFEE
  8919                           plusw0	equ	0xFEB
  8920                           fsr0h	equ	0xFEA
  8921                           fsr0l	equ	0xFE9
  8922                           wreg	equ	0xFE8
  8923                           postdec1	equ	0xFE5
  8924                           plusw1	equ	0xFE3
  8925                           fsr1h	equ	0xFE2
  8926                           fsr1l	equ	0xFE1
  8927                           indf2	equ	0xFDF
  8928                           postinc2	equ	0xFDE
  8929                           plusw2	equ	0xFDB
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           
  8934 ;; *************** function i2_i2c1_driver_startRX *****************
  8935 ;; Defined at:
  8936 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;		None
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;		None
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  1    wreg      void 
  8943 ;; Registers used:
  8944 ;;		None
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8950 ;;      Params:         0       0       0       0       0       0       0
  8951 ;;      Locals:         0       0       0       0       0       0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0
  8953 ;;      Totals:         0       0       0       0       0       0       0
  8954 ;;Total ram usage:        0 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; This function calls:
  8957 ;;		Nothing
  8958 ;; This function is called by:
  8959 ;;		i2_do_I2C_RCEN
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           	psect	text89
  8964  001222                     __ptext89:
  8965                           	opt stack 0
  8966  001222                     i2_i2c1_driver_startRX:
  8967                           	opt stack 18
  8968                           
  8969                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  8970                           
  8971                           ;incstack = 0
  8972  001222  86C5               	bsf	4037,3,c	;volatile
  8973  001224  0012               	return		;funcret
  8974  001226                     __end_ofi2_i2c1_driver_startRX:
  8975                           	opt stack 0
  8976                           tosu	equ	0xFFF
  8977                           tosh	equ	0xFFE
  8978                           tosl	equ	0xFFD
  8979                           pclatu	equ	0xFFB
  8980                           pclath	equ	0xFFA
  8981                           tblptru	equ	0xFF8
  8982                           tblptrh	equ	0xFF7
  8983                           tblptrl	equ	0xFF6
  8984                           tablat	equ	0xFF5
  8985                           prodh	equ	0xFF4
  8986                           prodl	equ	0xFF3
  8987                           intcon	equ	0xFF2
  8988                           intcon2	equ	0xFF1
  8989                           postinc0	equ	0xFEE
  8990                           plusw0	equ	0xFEB
  8991                           fsr0h	equ	0xFEA
  8992                           fsr0l	equ	0xFE9
  8993                           wreg	equ	0xFE8
  8994                           postdec1	equ	0xFE5
  8995                           plusw1	equ	0xFE3
  8996                           fsr1h	equ	0xFE2
  8997                           fsr1l	equ	0xFE1
  8998                           indf2	equ	0xFDF
  8999                           postinc2	equ	0xFDE
  9000                           plusw2	equ	0xFDB
  9001                           fsr2h	equ	0xFDA
  9002                           fsr2l	equ	0xFD9
  9003                           status	equ	0xFD8
  9004                           
  9005 ;; *************** function i2_returnReset *****************
  9006 ;; Defined at:
  9007 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;  p               2    0[COMRAM] PTR void 
  9010 ;;		 -> NULL(0), 
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;		None
  9013 ;; Return value:  Size  Location     Type
  9014 ;;                  1    wreg      enum E6842
  9015 ;; Registers used:
  9016 ;;		wreg
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9022 ;;      Params:         2       0       0       0       0       0       0
  9023 ;;      Locals:         0       0       0       0       0       0       0
  9024 ;;      Temps:          0       0       0       0       0       0       0
  9025 ;;      Totals:         2       0       0       0       0       0       0
  9026 ;;Total ram usage:        2 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; This function calls:
  9029 ;;		Nothing
  9030 ;; This function is called by:
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           	psect	text90
  9035  001226                     __ptext90:
  9036                           	opt stack 0
  9037  001226                     i2_returnReset:
  9038                           	opt stack 18
  9039                           
  9040                           ;i2c_master.c: 515: return i2c_reset_link;
  9041                           
  9042                           ;incstack = 0
  9043  001226  0E05               	movlw	5
  9044  001228  0012               	return	
  9045  00122A                     __end_ofi2_returnReset:
  9046                           	opt stack 0
  9047                           tosu	equ	0xFFF
  9048                           tosh	equ	0xFFE
  9049                           tosl	equ	0xFFD
  9050                           pclatu	equ	0xFFB
  9051                           pclath	equ	0xFFA
  9052                           tblptru	equ	0xFF8
  9053                           tblptrh	equ	0xFF7
  9054                           tblptrl	equ	0xFF6
  9055                           tablat	equ	0xFF5
  9056                           prodh	equ	0xFF4
  9057                           prodl	equ	0xFF3
  9058                           intcon	equ	0xFF2
  9059                           intcon2	equ	0xFF1
  9060                           postinc0	equ	0xFEE
  9061                           plusw0	equ	0xFEB
  9062                           fsr0h	equ	0xFEA
  9063                           fsr0l	equ	0xFE9
  9064                           wreg	equ	0xFE8
  9065                           postdec1	equ	0xFE5
  9066                           plusw1	equ	0xFE3
  9067                           fsr1h	equ	0xFE2
  9068                           fsr1l	equ	0xFE1
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           plusw2	equ	0xFDB
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function i2_returnStop *****************
  9077 ;; Defined at:
  9078 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  p               2    0[COMRAM] PTR void 
  9081 ;;		 -> NULL(0), 
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;		None
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  1    wreg      enum E6842
  9086 ;; Registers used:
  9087 ;;		wreg
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9093 ;;      Params:         2       0       0       0       0       0       0
  9094 ;;      Locals:         0       0       0       0       0       0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0
  9096 ;;      Totals:         2       0       0       0       0       0       0
  9097 ;;Total ram usage:        2 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; This function calls:
  9100 ;;		Nothing
  9101 ;; This function is called by:
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105                           	psect	text91
  9106  00122A                     __ptext91:
  9107                           	opt stack 0
  9108  00122A                     i2_returnStop:
  9109                           	opt stack 18
  9110                           
  9111                           ;i2c_master.c: 510: return i2c_stop;
  9112                           
  9113                           ;incstack = 0
  9114  00122A  0E01               	movlw	1
  9115  00122C  0012               	return	
  9116  00122E                     __end_ofi2_returnStop:
  9117                           	opt stack 0
  9118                           tosu	equ	0xFFF
  9119                           tosh	equ	0xFFE
  9120                           tosl	equ	0xFFD
  9121                           pclatu	equ	0xFFB
  9122                           pclath	equ	0xFFA
  9123                           tblptru	equ	0xFF8
  9124                           tblptrh	equ	0xFF7
  9125                           tblptrl	equ	0xFF6
  9126                           tablat	equ	0xFF5
  9127                           prodh	equ	0xFF4
  9128                           prodl	equ	0xFF3
  9129                           intcon	equ	0xFF2
  9130                           intcon2	equ	0xFF1
  9131                           postinc0	equ	0xFEE
  9132                           plusw0	equ	0xFEB
  9133                           fsr0h	equ	0xFEA
  9134                           fsr0l	equ	0xFE9
  9135                           wreg	equ	0xFE8
  9136                           postdec1	equ	0xFE5
  9137                           plusw1	equ	0xFE3
  9138                           fsr1h	equ	0xFE2
  9139                           fsr1l	equ	0xFE1
  9140                           indf2	equ	0xFDF
  9141                           postinc2	equ	0xFDE
  9142                           plusw2	equ	0xFDB
  9143                           fsr2h	equ	0xFDA
  9144                           fsr2l	equ	0xFD9
  9145                           status	equ	0xFD8
  9146                           
  9147 ;; *************** function i2_i2c1_driver_stop *****************
  9148 ;; Defined at:
  9149 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;		None
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;		None
  9154 ;; Return value:  Size  Location     Type
  9155 ;;                  1    wreg      void 
  9156 ;; Registers used:
  9157 ;;		None
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9163 ;;      Params:         0       0       0       0       0       0       0
  9164 ;;      Locals:         0       0       0       0       0       0       0
  9165 ;;      Temps:          0       0       0       0       0       0       0
  9166 ;;      Totals:         0       0       0       0       0       0       0
  9167 ;;Total ram usage:        0 bytes
  9168 ;; Hardware stack levels used:    1
  9169 ;; This function calls:
  9170 ;;		Nothing
  9171 ;; This function is called by:
  9172 ;;		i2_do_I2C_SEND_STOP
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           	psect	text92
  9177  00122E                     __ptext92:
  9178                           	opt stack 0
  9179  00122E                     i2_i2c1_driver_stop:
  9180                           	opt stack 17
  9181                           
  9182                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  9183                           
  9184                           ;incstack = 0
  9185  00122E  84C5               	bsf	4037,2,c	;volatile
  9186  001230  0012               	return		;funcret
  9187  001232                     __end_ofi2_i2c1_driver_stop:
  9188                           	opt stack 0
  9189                           tosu	equ	0xFFF
  9190                           tosh	equ	0xFFE
  9191                           tosl	equ	0xFFD
  9192                           pclatu	equ	0xFFB
  9193                           pclath	equ	0xFFA
  9194                           tblptru	equ	0xFF8
  9195                           tblptrh	equ	0xFF7
  9196                           tblptrl	equ	0xFF6
  9197                           tablat	equ	0xFF5
  9198                           prodh	equ	0xFF4
  9199                           prodl	equ	0xFF3
  9200                           intcon	equ	0xFF2
  9201                           intcon2	equ	0xFF1
  9202                           postinc0	equ	0xFEE
  9203                           plusw0	equ	0xFEB
  9204                           fsr0h	equ	0xFEA
  9205                           fsr0l	equ	0xFE9
  9206                           wreg	equ	0xFE8
  9207                           postdec1	equ	0xFE5
  9208                           plusw1	equ	0xFE3
  9209                           fsr1h	equ	0xFE2
  9210                           fsr1l	equ	0xFE1
  9211                           indf2	equ	0xFDF
  9212                           postinc2	equ	0xFDE
  9213                           plusw2	equ	0xFDB
  9214                           fsr2h	equ	0xFDA
  9215                           fsr2l	equ	0xFD9
  9216                           status	equ	0xFD8
  9217                           
  9218 ;; *************** function i2_i2c1_driver_restart *****************
  9219 ;; Defined at:
  9220 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;		None
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;		None
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  1    wreg      void 
  9227 ;; Registers used:
  9228 ;;		None
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9234 ;;      Params:         0       0       0       0       0       0       0
  9235 ;;      Locals:         0       0       0       0       0       0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0
  9237 ;;      Totals:         0       0       0       0       0       0       0
  9238 ;;Total ram usage:        0 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; This function calls:
  9241 ;;		Nothing
  9242 ;; This function is called by:
  9243 ;;		i2_do_I2C_SEND_RESTART_READ
  9244 ;;		i2_do_I2C_SEND_RESTART_WRITE
  9245 ;;		i2_do_I2C_SEND_RESTART
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text93
  9250  001232                     __ptext93:
  9251                           	opt stack 0
  9252  001232                     i2_i2c1_driver_restart:
  9253                           	opt stack 17
  9254                           
  9255                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  9256                           
  9257                           ;incstack = 0
  9258  001232  82C5               	bsf	4037,1,c	;volatile
  9259  001234  0012               	return		;funcret
  9260  001236                     __end_ofi2_i2c1_driver_restart:
  9261                           	opt stack 0
  9262                           tosu	equ	0xFFF
  9263                           tosh	equ	0xFFE
  9264                           tosl	equ	0xFFD
  9265                           pclatu	equ	0xFFB
  9266                           pclath	equ	0xFFA
  9267                           tblptru	equ	0xFF8
  9268                           tblptrh	equ	0xFF7
  9269                           tblptrl	equ	0xFF6
  9270                           tablat	equ	0xFF5
  9271                           prodh	equ	0xFF4
  9272                           prodl	equ	0xFF3
  9273                           intcon	equ	0xFF2
  9274                           intcon2	equ	0xFF1
  9275                           postinc0	equ	0xFEE
  9276                           plusw0	equ	0xFEB
  9277                           fsr0h	equ	0xFEA
  9278                           fsr0l	equ	0xFE9
  9279                           wreg	equ	0xFE8
  9280                           postdec1	equ	0xFE5
  9281                           plusw1	equ	0xFE3
  9282                           fsr1h	equ	0xFE2
  9283                           fsr1l	equ	0xFE1
  9284                           indf2	equ	0xFDF
  9285                           postinc2	equ	0xFDE
  9286                           plusw2	equ	0xFDB
  9287                           fsr2h	equ	0xFDA
  9288                           fsr2l	equ	0xFD9
  9289                           status	equ	0xFD8
  9290                           
  9291 ;; *************** function i2_i2c1_driver_sendACK *****************
  9292 ;; Defined at:
  9293 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      void 
  9300 ;; Registers used:
  9301 ;;		None
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9307 ;;      Params:         0       0       0       0       0       0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; This function calls:
  9314 ;;		Nothing
  9315 ;; This function is called by:
  9316 ;;		i2_do_I2C_DO_ACK
  9317 ;;		i2_do_I2C_RX
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           	psect	text94
  9322  0011E6                     __ptext94:
  9323                           	opt stack 0
  9324  0011E6                     i2_i2c1_driver_sendACK:
  9325                           	opt stack 18
  9326                           
  9327                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  9328                           
  9329                           ;incstack = 0
  9330  0011E6  9AC5               	bcf	4037,5,c	;volatile
  9331                           
  9332                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  9333  0011E8  88C5               	bsf	4037,4,c	;volatile
  9334  0011EA  0012               	return		;funcret
  9335  0011EC                     __end_ofi2_i2c1_driver_sendACK:
  9336                           	opt stack 0
  9337                           tosu	equ	0xFFF
  9338                           tosh	equ	0xFFE
  9339                           tosl	equ	0xFFD
  9340                           pclatu	equ	0xFFB
  9341                           pclath	equ	0xFFA
  9342                           tblptru	equ	0xFF8
  9343                           tblptrh	equ	0xFF7
  9344                           tblptrl	equ	0xFF6
  9345                           tablat	equ	0xFF5
  9346                           prodh	equ	0xFF4
  9347                           prodl	equ	0xFF3
  9348                           intcon	equ	0xFF2
  9349                           intcon2	equ	0xFF1
  9350                           postinc0	equ	0xFEE
  9351                           plusw0	equ	0xFEB
  9352                           fsr0h	equ	0xFEA
  9353                           fsr0l	equ	0xFE9
  9354                           wreg	equ	0xFE8
  9355                           postdec1	equ	0xFE5
  9356                           plusw1	equ	0xFE3
  9357                           fsr1h	equ	0xFE2
  9358                           fsr1l	equ	0xFE1
  9359                           indf2	equ	0xFDF
  9360                           postinc2	equ	0xFDE
  9361                           plusw2	equ	0xFDB
  9362                           fsr2h	equ	0xFDA
  9363                           fsr2l	equ	0xFD9
  9364                           status	equ	0xFD8
  9365                           
  9366 ;; *************** function _i2c_busCollisionISR *****************
  9367 ;; Defined at:
  9368 ;;		line 500 in file "mcc_generated_files/drivers/i2c_master.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;		None
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;		None
  9373 ;; Return value:  Size  Location     Type
  9374 ;;                  1    wreg      void 
  9375 ;; Registers used:
  9376 ;;		cstack
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9382 ;;      Params:         0       0       0       0       0       0       0
  9383 ;;      Locals:         0       0       0       0       0       0       0
  9384 ;;      Temps:          0       0       0       0       0       0       0
  9385 ;;      Totals:         0       0       0       0       0       0       0
  9386 ;;Total ram usage:        0 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:    1
  9389 ;; This function calls:
  9390 ;;		_i2c1_driver_clearBusCollision
  9391 ;; This function is called by:
  9392 ;;		_i2c_open
  9393 ;;		_INTERRUPT_InterruptManager
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           	psect	text95
  9398  0011EC                     __ptext95:
  9399                           	opt stack 0
  9400  0011EC                     _i2c_busCollisionISR:
  9401                           	opt stack 19
  9402                           
  9403                           ;i2c_master.c: 502: i2c1_driver_clearBusCollision();
  9404                           
  9405                           ;incstack = 0
  9406  0011EC  EC1B  F009         	call	_i2c1_driver_clearBusCollision	;wreg free
  9407  0011F0  0012               	return		;funcret
  9408  0011F2                     __end_of_i2c_busCollisionISR:
  9409                           	opt stack 0
  9410                           tosu	equ	0xFFF
  9411                           tosh	equ	0xFFE
  9412                           tosl	equ	0xFFD
  9413                           pclatu	equ	0xFFB
  9414                           pclath	equ	0xFFA
  9415                           tblptru	equ	0xFF8
  9416                           tblptrh	equ	0xFF7
  9417                           tblptrl	equ	0xFF6
  9418                           tablat	equ	0xFF5
  9419                           prodh	equ	0xFF4
  9420                           prodl	equ	0xFF3
  9421                           intcon	equ	0xFF2
  9422                           intcon2	equ	0xFF1
  9423                           postinc0	equ	0xFEE
  9424                           plusw0	equ	0xFEB
  9425                           fsr0h	equ	0xFEA
  9426                           fsr0l	equ	0xFE9
  9427                           wreg	equ	0xFE8
  9428                           postdec1	equ	0xFE5
  9429                           plusw1	equ	0xFE3
  9430                           fsr1h	equ	0xFE2
  9431                           fsr1l	equ	0xFE1
  9432                           indf2	equ	0xFDF
  9433                           postinc2	equ	0xFDE
  9434                           plusw2	equ	0xFDB
  9435                           fsr2h	equ	0xFDA
  9436                           fsr2l	equ	0xFD9
  9437                           status	equ	0xFD8
  9438                           
  9439 ;; *************** function _i2c1_driver_clearBusCollision *****************
  9440 ;; Defined at:
  9441 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
  9442 ;; Parameters:    Size  Location     Type
  9443 ;;		None
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;		None
  9446 ;; Return value:  Size  Location     Type
  9447 ;;                  1    wreg      void 
  9448 ;; Registers used:
  9449 ;;		None
  9450 ;; Tracked objects:
  9451 ;;		On entry : 0/0
  9452 ;;		On exit  : 0/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9455 ;;      Params:         0       0       0       0       0       0       0
  9456 ;;      Locals:         0       0       0       0       0       0       0
  9457 ;;      Temps:          0       0       0       0       0       0       0
  9458 ;;      Totals:         0       0       0       0       0       0       0
  9459 ;;Total ram usage:        0 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; This function calls:
  9462 ;;		Nothing
  9463 ;; This function is called by:
  9464 ;;		_i2c_busCollisionISR
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           	psect	text96
  9469  001236                     __ptext96:
  9470                           	opt stack 0
  9471  001236                     _i2c1_driver_clearBusCollision:
  9472                           	opt stack 19
  9473                           
  9474                           ;i2c1_driver.c: 255: PIR2bits.BCL1IF = 0;
  9475                           
  9476                           ;incstack = 0
  9477  001236  96A1               	bcf	4001,3,c	;volatile
  9478  001238  0012               	return		;funcret
  9479  00123A                     __end_of_i2c1_driver_clearBusCollision:
  9480                           	opt stack 0
  9481                           tosu	equ	0xFFF
  9482                           tosh	equ	0xFFE
  9483                           tosl	equ	0xFFD
  9484                           pclatu	equ	0xFFB
  9485                           pclath	equ	0xFFA
  9486                           tblptru	equ	0xFF8
  9487                           tblptrh	equ	0xFF7
  9488                           tblptrl	equ	0xFF6
  9489                           tablat	equ	0xFF5
  9490                           prodh	equ	0xFF4
  9491                           prodl	equ	0xFF3
  9492                           intcon	equ	0xFF2
  9493                           intcon2	equ	0xFF1
  9494                           postinc0	equ	0xFEE
  9495                           plusw0	equ	0xFEB
  9496                           fsr0h	equ	0xFEA
  9497                           fsr0l	equ	0xFE9
  9498                           wreg	equ	0xFE8
  9499                           postdec1	equ	0xFE5
  9500                           plusw1	equ	0xFE3
  9501                           fsr1h	equ	0xFE2
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           plusw2	equ	0xFDB
  9506                           fsr2h	equ	0xFDA
  9507                           fsr2l	equ	0xFD9
  9508                           status	equ	0xFD8
  9509                           
  9510 ;; *************** function _EUSART1_Transmit_ISR *****************
  9511 ;; Defined at:
  9512 ;;		line 183 in file "mcc_generated_files/eusart1.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;		None
  9517 ;; Return value:  Size  Location     Type
  9518 ;;                  1    wreg      void 
  9519 ;; Registers used:
  9520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9526 ;;      Params:         0       0       0       0       0       0       0
  9527 ;;      Locals:         0       0       0       0       0       0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0
  9529 ;;      Totals:         0       0       0       0       0       0       0
  9530 ;;Total ram usage:        0 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; This function calls:
  9533 ;;		Nothing
  9534 ;; This function is called by:
  9535 ;;		_EUSART1_Initialize
  9536 ;;		_INTERRUPT_InterruptManager
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           	psect	text97
  9541  000E30                     __ptext97:
  9542                           	opt stack 0
  9543  000E30                     _EUSART1_Transmit_ISR:
  9544                           	opt stack 20
  9545                           
  9546                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  9547                           
  9548                           ;incstack = 0
  9549  000E30  0E08               	movlw	8
  9550  000E32  604A               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  9551  000E34  D012               	goto	i2l321
  9552                           
  9553                           ;eusart1.c: 188: {
  9554                           ;eusart1.c: 189: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  9555  000E36  501B               	movf	_eusart1TxTail,w,c	;volatile
  9556  000E38  0D01               	mullw	1
  9557  000E3A  0E09               	movlw	low _eusart1TxBuffer
  9558  000E3C  24F3               	addwf	prodl,w,c
  9559  000E3E  6ED9               	movwf	fsr2l,c
  9560  000E40  0E00               	movlw	high _eusart1TxBuffer
  9561  000E42  20F4               	addwfc	prodh,w,c
  9562  000E44  6EDA               	movwf	fsr2h,c
  9563  000E46  50DF               	movf	indf2,w,c
  9564  000E48  6EAD               	movwf	4013,c	;volatile
  9565  000E4A  2A1B               	incf	_eusart1TxTail,f,c	;volatile
  9566                           
  9567                           ;eusart1.c: 190: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  9568  000E4C  0E07               	movlw	7
  9569  000E4E  641B               	cpfsgt	_eusart1TxTail,c	;volatile
  9570  000E50  D002               	goto	i2l322
  9571                           
  9572                           ;eusart1.c: 191: {
  9573                           ;eusart1.c: 192: eusart1TxTail = 0;
  9574  000E52  0E00               	movlw	0
  9575  000E54  6E1B               	movwf	_eusart1TxTail,c	;volatile
  9576  000E56                     i2l322:
  9577                           
  9578                           ;eusart1.c: 193: }
  9579                           ;eusart1.c: 194: eusart1TxBufferRemaining++;
  9580  000E56  2A4A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9581                           
  9582                           ;eusart1.c: 195: }
  9583  000E58  0012               	return	
  9584  000E5A                     i2l321:
  9585                           
  9586                           ;eusart1.c: 196: else
  9587                           ;eusart1.c: 197: {
  9588                           ;eusart1.c: 198: PIE1bits.TX1IE = 0;
  9589  000E5A  989D               	bcf	3997,4,c	;volatile
  9590  000E5C  0012               	return	
  9591  000E5E                     __end_of_EUSART1_Transmit_ISR:
  9592                           	opt stack 0
  9593                           tosu	equ	0xFFF
  9594                           tosh	equ	0xFFE
  9595                           tosl	equ	0xFFD
  9596                           pclatu	equ	0xFFB
  9597                           pclath	equ	0xFFA
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           intcon	equ	0xFF2
  9605                           intcon2	equ	0xFF1
  9606                           postinc0	equ	0xFEE
  9607                           plusw0	equ	0xFEB
  9608                           fsr0h	equ	0xFEA
  9609                           fsr0l	equ	0xFE9
  9610                           wreg	equ	0xFE8
  9611                           postdec1	equ	0xFE5
  9612                           plusw1	equ	0xFE3
  9613                           fsr1h	equ	0xFE2
  9614                           fsr1l	equ	0xFE1
  9615                           indf2	equ	0xFDF
  9616                           postinc2	equ	0xFDE
  9617                           plusw2	equ	0xFDB
  9618                           fsr2h	equ	0xFDA
  9619                           fsr2l	equ	0xFD9
  9620                           status	equ	0xFD8
  9621                           
  9622 ;; *************** function _EUSART1_Receive_ISR *****************
  9623 ;; Defined at:
  9624 ;;		line 202 in file "mcc_generated_files/eusart1.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;		None
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;                  1    wreg      void 
  9631 ;; Registers used:
  9632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9638 ;;      Params:         0       0       0       0       0       0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0
  9640 ;;      Temps:          0       0       0       0       0       0       0
  9641 ;;      Totals:         0       0       0       0       0       0       0
  9642 ;;Total ram usage:        0 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; This function calls:
  9645 ;;		Nothing
  9646 ;; This function is called by:
  9647 ;;		_EUSART1_Initialize
  9648 ;;		_INTERRUPT_InterruptManager
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           	psect	text98
  9653  000E5E                     __ptext98:
  9654                           	opt stack 0
  9655  000E5E                     _EUSART1_Receive_ISR:
  9656                           	opt stack 20
  9657                           
  9658                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
  9659                           
  9660                           ;incstack = 0
  9661  000E5E  A2AB               	btfss	4011,1,c	;volatile
  9662  000E60  D002               	goto	i2l327
  9663                           
  9664                           ;eusart1.c: 206: {
  9665                           ;eusart1.c: 209: RCSTA1bits.CREN = 0;
  9666  000E62  98AB               	bcf	4011,4,c	;volatile
  9667                           
  9668                           ;eusart1.c: 210: RCSTA1bits.CREN = 1;
  9669  000E64  88AB               	bsf	4011,4,c	;volatile
  9670  000E66                     i2l327:
  9671                           
  9672                           ;eusart1.c: 211: }
  9673                           ;eusart1.c: 214: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  9674  000E66  501A               	movf	_eusart1RxHead,w,c	;volatile
  9675  000E68  0D01               	mullw	1
  9676  000E6A  0E01               	movlw	low _eusart1RxBuffer
  9677  000E6C  24F3               	addwf	prodl,w,c
  9678  000E6E  6ED9               	movwf	fsr2l,c
  9679  000E70  0E00               	movlw	high _eusart1RxBuffer
  9680  000E72  20F4               	addwfc	prodh,w,c
  9681  000E74  6EDA               	movwf	fsr2h,c
  9682  000E76  CFAE FFDF          	movff	4014,indf2	;volatile
  9683  000E7A  2A1A               	incf	_eusart1RxHead,f,c	;volatile
  9684                           
  9685                           ;eusart1.c: 215: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  9686  000E7C  0E07               	movlw	7
  9687  000E7E  641A               	cpfsgt	_eusart1RxHead,c	;volatile
  9688  000E80  D002               	goto	i2l328
  9689                           
  9690                           ;eusart1.c: 216: {
  9691                           ;eusart1.c: 217: eusart1RxHead = 0;
  9692  000E82  0E00               	movlw	0
  9693  000E84  6E1A               	movwf	_eusart1RxHead,c	;volatile
  9694  000E86                     i2l328:
  9695                           
  9696                           ;eusart1.c: 218: }
  9697                           ;eusart1.c: 219: eusart1RxCount++;
  9698  000E86  2A18               	incf	_eusart1RxCount,f,c	;volatile
  9699  000E88  0012               	return		;funcret
  9700  000E8A                     __end_of_EUSART1_Receive_ISR:
  9701                           	opt stack 0
  9702                           tosu	equ	0xFFF
  9703                           tosh	equ	0xFFE
  9704                           tosl	equ	0xFFD
  9705                           pclatu	equ	0xFFB
  9706                           pclath	equ	0xFFA
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           intcon2	equ	0xFF1
  9715                           postinc0	equ	0xFEE
  9716                           plusw0	equ	0xFEB
  9717                           fsr0h	equ	0xFEA
  9718                           fsr0l	equ	0xFE9
  9719                           wreg	equ	0xFE8
  9720                           postdec1	equ	0xFE5
  9721                           plusw1	equ	0xFE3
  9722                           fsr1h	equ	0xFE2
  9723                           fsr1l	equ	0xFE1
  9724                           indf2	equ	0xFDF
  9725                           postinc2	equ	0xFDE
  9726                           plusw2	equ	0xFDB
  9727                           fsr2h	equ	0xFDA
  9728                           fsr2l	equ	0xFD9
  9729                           status	equ	0xFD8
  9730                           tosu	equ	0xFFF
  9731                           tosh	equ	0xFFE
  9732                           tosl	equ	0xFFD
  9733                           pclatu	equ	0xFFB
  9734                           pclath	equ	0xFFA
  9735                           tblptru	equ	0xFF8
  9736                           tblptrh	equ	0xFF7
  9737                           tblptrl	equ	0xFF6
  9738                           tablat	equ	0xFF5
  9739                           prodh	equ	0xFF4
  9740                           prodl	equ	0xFF3
  9741                           intcon	equ	0xFF2
  9742                           intcon2	equ	0xFF1
  9743                           postinc0	equ	0xFEE
  9744                           plusw0	equ	0xFEB
  9745                           fsr0h	equ	0xFEA
  9746                           fsr0l	equ	0xFE9
  9747                           wreg	equ	0xFE8
  9748                           postdec1	equ	0xFE5
  9749                           plusw1	equ	0xFE3
  9750                           fsr1h	equ	0xFE2
  9751                           fsr1l	equ	0xFE1
  9752                           indf2	equ	0xFDF
  9753                           postinc2	equ	0xFDE
  9754                           plusw2	equ	0xFDB
  9755                           fsr2h	equ	0xFDA
  9756                           fsr2l	equ	0xFD9
  9757                           status	equ	0xFD8
  9758                           
  9759                           	psect	text99
  9760  000000                     __ptext99:
  9761                           	opt stack 0
  9762                           tosu	equ	0xFFF
  9763                           tosh	equ	0xFFE
  9764                           tosl	equ	0xFFD
  9765                           pclatu	equ	0xFFB
  9766                           pclath	equ	0xFFA
  9767                           tblptru	equ	0xFF8
  9768                           tblptrh	equ	0xFF7
  9769                           tblptrl	equ	0xFF6
  9770                           tablat	equ	0xFF5
  9771                           prodh	equ	0xFF4
  9772                           prodl	equ	0xFF3
  9773                           intcon	equ	0xFF2
  9774                           intcon2	equ	0xFF1
  9775                           postinc0	equ	0xFEE
  9776                           plusw0	equ	0xFEB
  9777                           fsr0h	equ	0xFEA
  9778                           fsr0l	equ	0xFE9
  9779                           wreg	equ	0xFE8
  9780                           postdec1	equ	0xFE5
  9781                           plusw1	equ	0xFE3
  9782                           fsr1h	equ	0xFE2
  9783                           fsr1l	equ	0xFE1
  9784                           indf2	equ	0xFDF
  9785                           postinc2	equ	0xFDE
  9786                           plusw2	equ	0xFDB
  9787                           fsr2h	equ	0xFDA
  9788                           fsr2l	equ	0xFD9
  9789                           status	equ	0xFD8
  9790                           
  9791                           	psect	rparam
  9792  0000                     tosu	equ	0xFFF
  9793                           tosh	equ	0xFFE
  9794                           tosl	equ	0xFFD
  9795                           pclatu	equ	0xFFB
  9796                           pclath	equ	0xFFA
  9797                           tblptru	equ	0xFF8
  9798                           tblptrh	equ	0xFF7
  9799                           tblptrl	equ	0xFF6
  9800                           tablat	equ	0xFF5
  9801                           prodh	equ	0xFF4
  9802                           prodl	equ	0xFF3
  9803                           intcon	equ	0xFF2
  9804                           intcon2	equ	0xFF1
  9805                           postinc0	equ	0xFEE
  9806                           plusw0	equ	0xFEB
  9807                           fsr0h	equ	0xFEA
  9808                           fsr0l	equ	0xFE9
  9809                           wreg	equ	0xFE8
  9810                           postdec1	equ	0xFE5
  9811                           plusw1	equ	0xFE3
  9812                           fsr1h	equ	0xFE2
  9813                           fsr1l	equ	0xFE1
  9814                           indf2	equ	0xFDF
  9815                           postinc2	equ	0xFDE
  9816                           plusw2	equ	0xFDB
  9817                           fsr2h	equ	0xFDA
  9818                           fsr2l	equ	0xFD9
  9819                           status	equ	0xFD8
  9820                           
  9821                           	psect	temp
  9822  00004B                     btemp:
  9823                           	opt stack 0
  9824  00004B                     	ds	1
  9825  0000                     int$flags	set	btemp
  9826  0000                     wtemp6	set	btemp+1
  9827                           tosu	equ	0xFFF
  9828                           tosh	equ	0xFFE
  9829                           tosl	equ	0xFFD
  9830                           pclatu	equ	0xFFB
  9831                           pclath	equ	0xFFA
  9832                           tblptru	equ	0xFF8
  9833                           tblptrh	equ	0xFF7
  9834                           tblptrl	equ	0xFF6
  9835                           tablat	equ	0xFF5
  9836                           prodh	equ	0xFF4
  9837                           prodl	equ	0xFF3
  9838                           intcon	equ	0xFF2
  9839                           intcon2	equ	0xFF1
  9840                           postinc0	equ	0xFEE
  9841                           plusw0	equ	0xFEB
  9842                           fsr0h	equ	0xFEA
  9843                           fsr0l	equ	0xFE9
  9844                           wreg	equ	0xFE8
  9845                           postdec1	equ	0xFE5
  9846                           plusw1	equ	0xFE3
  9847                           fsr1h	equ	0xFE2
  9848                           fsr1l	equ	0xFE1
  9849                           indf2	equ	0xFDF
  9850                           postinc2	equ	0xFDE
  9851                           plusw2	equ	0xFDB
  9852                           fsr2h	equ	0xFDA
  9853                           fsr2l	equ	0xFD9
  9854                           status	equ	0xFD8


Data Sizes:
    Strings     2
    Constant    0
    Data        86
    BSS         74
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      74
    BANK0           160     60     133
    BANK1           256      0      50
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_ISR$2283	PTR const FTN()enum E7019 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$11$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    i2c1_driver_setI2cISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART1_SetRxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_SetTxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E7019[18] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    S53$callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S53$data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_read_xyzvalues
    _read_xyzvalues->_i2c_masterAccelRead
    _printf->_putch
    _putch->_EUSART1_Write
    _printString->_EUSART1_Write
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ACCELEROMETER_Initialize->_read_register
    _ACCELEROMETER_Initialize->_write_register
    _i2c_masterWrite->_i2c_masterOperation
    _read_register->_i2c_masterAccelRead
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterAccelRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_REGISTER->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_INITIAL_READ->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX

Critical Paths under _main in BANK0

    _main->_printString

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    9023
                                             52 BANK0      8     8      0
           _ACCELEROMETER_Initialize
                      _EUSART1_Write
                  _SYSTEM_Initialize
                        _printString
                             _printf
                     _read_xyzvalues
 ---------------------------------------------------------------------------------
 (1) _read_xyzvalues                                      12     6      6    2685
                                             26 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     251
                                             22 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (1) _printString                                         54    54      0     198
                                             21 COMRAM     2     2      0
                                              0 BANK0     52    52      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ACCELEROMETER_Initialize                             2     2      0    5384
                                             27 COMRAM     2     2      0
                      _read_register
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _write_register                                       2     1      1    3007
                                             25 COMRAM     2     1      1
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0    1390
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (2) _read_register                                        1     1      0    2377
                                             26 COMRAM     1     1      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4     602
                                             20 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     286
                                             22 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterAccelRead                                  1     1      0    1421
                                             25 COMRAM     1     1      0
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0    1390
                                             23 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0    1322
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0    1232
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
           _do_I2C_SEND_INITIAL_READ *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _do_I2C_TX_REGISTER *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_REGISTER                                   0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0     328
                                             21 COMRAM     2     2      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_INITIAL_READ                             0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0     260
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2     260
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            1     1      0      37
                                             20 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     563
                                              2 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (11) i2_i2c_ISR                                           0     0      0     563
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
         i2_do_I2C_SEND_INITIAL_READ *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_do_I2C_TX_REGISTER *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (12) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_REGISTER                                0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_EMPTY                                   0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                     i2_mssp1_setIRQ
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX                                         2     2      0     163
                                              0 COMRAM     2     2      0
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_INITIAL_READ                          0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RX                                         0     0      0     104
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_returnStop                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_returnReset                                       2     0      2     104
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (12) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACCELEROMETER_Initialize
     _read_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterAccelRead
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
     _write_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printString
     _EUSART1_Write
   _printf
     _putch
       _EUSART1_Write
   _read_xyzvalues
     _i2c_close
       _mssp1_clearIRQ
       _mssp1_disableIRQ
     _i2c_masterAccelRead
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _returnReset *
               _returnStop *
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               _do_I2C_DO_NACK_RESTART
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData
               _i2c1_driver_sendACK
               _returnReset *
               _returnStop *
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_INITIAL_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               _do_I2C_SEND_RESTART_READ
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _i2c1_driver_TXData
               _i2c1_driver_isNACK
               _returnReset *
               _returnStop *
             _do_I2C_TX_EMPTY *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _mssp1_setIRQ
               _returnReset *
               _returnStop *
             _do_I2C_TX_REGISTER *
               _i2c1_driver_TXData
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       i2_do_I2C_DO_NACK_RESTART
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData
       i2_i2c1_driver_sendACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_INITIAL_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       i2_do_I2C_SEND_RESTART_READ
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData
       i2_i2c1_driver_isNACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_EMPTY *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_mssp1_setIRQ
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_REGISTER *
       i2_i2c1_driver_TXData
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      32       6       19.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3C      85       4       83.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      4A       1       78.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     101       9        0.0%
DATA                 0      0     101      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 26 14:11:38 2018

                ??i2_i2c1_driver_startRX 0026             _do_I2C_TX_REGISTER$intlevel0 0FF4  
                           returnReset@p 003A                 _eusart1TxBufferRemaining 004A  
          _do_I2C_SEND_RESTART$intlevel0 10F4                                       l83 0F1C  
                                     l95 0CAE                                       l96 0CA0  
                                     l97 0CC2                                       l98 0CA4  
                                     l99 0CA8                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 10EE                     __size_of_do_I2C_RCEN 0012  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                            __CFG_LVP$ON 000000                                      l100 0CD0  
                                    l201 0B00                                      l113 0F4C  
                                    l202 0B08                                      l114 0F3C  
                                    l310 0D9A                                      l311 0D98  
                                    l161 0C0E                                      l209 0BC2  
                                    l162 0C02                                      l170 06C0  
                                    l171 06AE                                      l180 0728  
                                    l165 0C08                                      l173 06B4  
                                    l309 0D76                                      l174 06BA  
                                    l191 0890                                      l169 06FA  
                                    l185 0886                                      l188 0896  
                                    l189 088A                                      l197 0B0E  
                                    l613 08E0                                      l198 0AFA  
                                    l606 0ABA                                      l608 0AEC  
                                    l636 09DE                                      l666 0E9A  
                                    l667 0E94                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000          __end_ofi2_i2c1_driver_getRXData 1222  
           __size_of_i2c_masterOperation 0048                     _returnStop$intlevel0 1180  
                  __size_of_do_I2C_RESET 0016                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                             _TXSTA1bits 000FAC          i2c1_driver_setBusCollisionISR@f 003A  
                            i2_do_I2C_RX 0948                              i2_do_I2C_TX 07C6  
                                   l3521 0D66                                     l3707 0AAA  
                         i2_mssp1_setIRQ 121A                   __size_ofi2_do_I2C_IDLE 000C  
                                   STR_1 0601                                     u1230 1018  
                 __size_ofi2_do_I2C_RCEN 000C                                     u1218 08A6  
                                   u1219 08BA                                     u1228 0B1E  
                                   u1229 0B32                                     u1501 07BC  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u1168 0C1E  
                                   u1280 1054                                     u1169 0C32  
                                   u1188 06D0                                     u1189 06E4  
                                   u1461 0A98                                     u1278 0BD8  
                                   u1279 0BEC                                     u1288 1056  
                                   u1707 08FE                                     u1717 0AD6  
                                   u1727 09D0                                     u1737 101E  
                                   u1691 08EA                     ?_do_I2C_SEND_RESTART 0026  
                                   _WPUB 000F61                            _EUSART1_Write 0D64  
      __size_of_do_I2C_SEND_RESTART_READ 000E                     __end_ofi2_returnStop 122E  
              ?_do_I2C_SEND_RESTART_READ 0026                                     _main 08D0  
              __size_of_do_I2C_SEND_STOP 000E                   __size_of_do_I2C_DO_ACK 000E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 004B  
                          __CFG_BORV$190 000000                             printString@i 0092  
                  ?_do_I2C_SEND_ADR_READ 0026                                     prodh 000FF4  
                                   prodl 000FF3          ??_i2c1_driver_clearBusCollision 0026  
                                   start 0102                            __CFG_IESO$OFF 000000  
                          _i2c_setBuffer 0F20                          __end_of_i2c_ISR 0BF2  
                           ___param_bank 000000                 ??_do_I2C_DO_NACK_RESTART 003A  
              __size_of_mssp1_disableIRQ 0004                             _do_I2C_RESET 0FAC  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 10A8  
               __end_of_i2c1_driver_open 0F6A                                    ?_main 0026  
               __end_of_i2c1_driver_stop 1206               __end_of_i2c1_driver_TXData 1194  
                         __CFG_DEBUG$OFF 000000                                    i2l201 0B58  
                                  i2l202 0B60                  __size_ofi2_do_I2C_RESET 0010  
                                  i2l321 0E5A                                    i2l161 0D32  
                                  i2l209 0CEC                                    i2l322 0E56  
                                  i2l162 0D26                                    i2l170 07E2  
                                  i2l171 07D0                                    i2l180 084A  
                                  i2l165 0D2C                                    i2l173 07D6  
                                  i2l174 07DC                                    i2l327 0E66  
                                  i2l191 097C                                    i2l328 0E86  
                                  i2l169 081C                                    i2l185 0972  
                                  i2l188 0982                                    i2l189 0976  
                                  i2l197 0B66                                    i2l198 0B52  
                                  i2l571 0098                                    i2l567 006C  
                                  i2l569 0082                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 0E30                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                            i2c_open@ret 003C                            __CFG_WRTB$OFF 000000  
                  __end_ofi2_returnReset 122A                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                   __end_ofi2_mssp1_setIRQ 121E  
                         __CFG_EBTRB$OFF 000000               __end_of_i2c1_driver_isNACK 0FD8  
                      write_register@reg 0040                       __size_ofi2_i2c_ISR 0048  
             ?_do_I2C_SEND_RESTART_WRITE 0026                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 113E                    ??_do_I2C_SEND_RESTART 003A  
                          i2returnStop@p 0026   __end_of_i2c1_driver_setBusCollisionISR 1170  
__size_of_i2c1_driver_setBusCollisionISR 000A           _i2c1_driver_setBusCollisionISR 1166  
                         ?_EUSART1_Write 0026                                    pclath 000FFA  
                                  tablat 000FF5                  __size_of_mssp1_clearIRQ 0004  
                                  plusw0 000FEB                                    plusw1 000FE3  
                                  plusw2 000FDB                   ?_do_I2C_SEND_ADR_WRITE 0026  
                                  status 000FD8                                    wtemp6 004C  
                         __CFG_HFOFST$ON 000000          __size_ofi2_i2c1_driver_sendNACK 0006  
                         ?_i2c_setBuffer 003A                           __CFG_PBADEN$ON 000000  
        __size_ofi2_i2c1_driver_resetBus 0002                            _fsmStateTable 00C1  
                        __initialization 0A28                               _i2c_poller 0F3A  
                             _i2c_status 009C               __end_of_EUSART1_Initialize 0C8C  
                           __end_of_main 0948                            i2_do_I2C_IDLE 1132  
                          i2_do_I2C_RCEN 1126                         __end_of_i2c_open 069E  
            ?_INTERRUPT_InterruptManager 0026                         i2_mssp1_clearIRQ 1216  
       __end_ofi2_do_I2C_DO_ADDRESS_NACK 0D64                            _do_I2C_DO_ACK 10D2  
                                 ??_main 0094                            _do_I2C_TX$315 003B  
          __size_of_i2c1_driver_sendNACK 0006                            __activetblptr 000002  
                           i2c_close@ret 003A                      _i2c_masterAccelRead 10A8  
                  ?_EUSART1_Transmit_ISR 0026            __size_of_i2c1_driver_resetBus 0002  
                ?_do_I2C_DO_ADDRESS_NACK 0026                          ?i2_mssp1_setIRQ 0026  
     __end_ofi2_do_I2C_SEND_RESTART_READ 11CC               i2_do_I2C_SEND_RESTART_READ 11C4  
                       ??_read_xyzvalues 0046                                   _ANSELA 000F38  
                                 ?_putch 0026                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                 __size_ofi2_do_I2C_DO_ACK 0008  
                       ??_write_register 0040                           __CFG_WDTEN$OFF 000000  
                                 _RCREG1 000FAE                                   _RCSTA1 000FAB  
                     __size_of_i2c_close 001E                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                  i2_do_I2C_SEND_ADR_WRITE 105A  
                 ??_do_I2C_SEND_ADR_READ 003A            __size_ofi2_do_I2C_TX_REGISTER 000E  
                              ??_i2c_ISR 003D                                   _TXREG1 000FAD  
                                 _TXSTA1 000FAC                     ?_i2c_masterAccelRead 0026  
           i2c_masterOperation@operation 003D                  ??i2_do_I2C_SEND_RESTART 0026  
            ?i2_do_I2C_SEND_INITIAL_READ 0026                 _do_I2C_SEND_INITIAL_READ 0F80  
                         __CFG_XINST$OFF 000000         __size_ofi2_i2c1_driver_getRXData 0004  
                  _i2c1_driver_getRXData 11FA                       i2_i2c1_driver_stop 122E  
                    _do_I2C_RX$intlevel0 085C        __size_of_ACCELEROMETER_Initialize 006C  
            __end_of_do_I2C_DO_NACK_STOP 10D2                ?_ACCELEROMETER_Initialize 0026  
                         ?i2_do_I2C_IDLE 0026                          _i2c_masterWrite 1184  
                         ?i2_do_I2C_RCEN 0026    __end_of_i2c1_driver_clearBusCollision 123A  
 __size_of_i2c1_driver_clearBusCollision 0004            _i2c1_driver_clearBusCollision 1236  
                         __CFG_STVREN$ON 000000                        __end_ofi2_i2c_ISR 0D1C  
        __size_of_do_I2C_DO_NACK_RESTART 000E                       write_register@data 003F  
                         i2returnReset@p 0026                                   clear_0 0A6E  
                                 clear_1 0A7A                           ?_do_I2C_DO_ACK 0026  
                                 _printf 0E8A                      ?i2_i2c1_driver_stop 0026  
                 i2_i2c1_driver_sendNACK 11E0                   i2c1_driver_setI2cISR@f 003A  
            __end_of_i2c1_driver_sendACK 11E0           __end_of_do_I2C_DO_ADDRESS_NACK 0C40  
                 i2_i2c1_driver_resetBus 123C                             __mediumconst 0000  
   __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008              __end_of_i2c1_driver_restart 120A  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_returnReset 003A  
          _do_I2C_DO_NACK_STOP$intlevel0 10CA                    _i2c1_driver_setI2cISR 115C  
            __end_of_i2c1_driver_startRX 1202                          ??_EUSART1_Write 003A  
                  __size_ofi2_returnStop 0004                          _eusart1RxBuffer 0001  
   EUSART1_SetTxInterruptHandler@handler 003A           __size_ofi2_do_I2C_DO_NACK_STOP 0008  
          __size_of_INTERRUPT_Initialize 0004            __end_ofi2_do_I2C_DO_NACK_STOP 11A4  
                           ?_printString 0026                          _eusart1TxBuffer 0009  
                      _SYSTEM_Initialize 1002                               __accesstop 0060  
                   ??i2_i2c1_driver_stop 0026                  __end_of__initialization 0A80  
                        ??_i2c_setBuffer 003E           _do_I2C_SEND_ADR_READ$intlevel0 0F9C  
                       _do_I2C_SEND_STOP 10E0                       __size_of_do_I2C_RX 007A  
                     _do_I2C_TX_REGISTER 0FEE                       __size_of_do_I2C_TX 0096  
                 __size_of_read_register 002E                       ?_SYSTEM_Initialize 0026  
                  ??_i2c_masterAccelRead 003F                            ___rparam_used 000001  
             __end_of_mssp1_IRQisEnabled 105A                      _i2c_masterOperation 0C8C  
               __size_of_do_I2C_TX_EMPTY 005E           __size_ofi2_i2c1_driver_sendACK 0006  
             __end_of_mssp1_waitForEvent 1026            __end_ofi2_i2c1_driver_sendACK 11EC  
                            ?_i2c_poller 0026                           __pcstackCOMRAM 0026  
                    ?_do_I2C_TX_REGISTER 0026                      _do_I2C_TX$intlevel0 06A4  
                           __pidataBANK0 0EDE                             __pidataBANK1 0D9E  
                    ??_SYSTEM_Initialize 003C           __size_ofi2_i2c1_driver_restart 0004  
          __end_ofi2_i2c1_driver_restart 1236                         _mssp1_disableIRQ 120E  
         __size_ofi2_i2c1_driver_startRX 0004            __end_ofi2_i2c1_driver_startRX 1226  
                          __end_of_putch 1148                        __end_of_i2c_close 0F20  
                           i2_returnStop 122A                           i2_do_I2C_RESET 108A  
                 ??_EUSART1_Transmit_ISR 0026                     ?_i2c_masterOperation 0026  
               i2_do_I2C_DO_ADDRESS_NACK 0D1C              __end_of_EUSART1_Receive_ISR 0E8A  
                   ??_do_I2C_TX_REGISTER 003B                             ?i2_do_I2C_RX 0026  
                           ?i2_do_I2C_TX 0026        __size_ofi2_do_I2C_DO_NACK_RESTART 0008  
              ?i2_do_I2C_DO_NACK_RESTART 0026                   _do_I2C_DO_NACK_RESTART 10B6  
              __end_of_SYSTEM_Initialize 1014                ??i2_do_I2C_SEND_ADR_WRITE 0026  
                                ??_putch 003B                            _eusart1RxHead 001A  
             __end_ofi2_do_I2C_SEND_STOP 11B4                            _eusart1TxHead 001C  
                          _eusart1RxTail 0019                           _mssp1_clearIRQ 1212  
                             __pbssBANK0 009C                            _eusart1TxTail 001B  
      _EUSART1_TxDefaultInterruptHandler 0048          ??_EUSART1_SetRxInterruptHandler 003C  
          __size_ofi2_i2c1_driver_TXData 0008                          __CFG_PLLCFG$OFF 000000  
                              ?_i2c_open 0026                               __pnvCOMRAM 0046  
                __end_of_i2c_masterWrite 118C                   ?_i2c1_driver_getRXData 0026  
                      ??i2_do_I2C_DO_ACK 0026            __size_ofi2_i2c1_driver_isNACK 0016  
                  _do_I2C_IDLE$intlevel0 103E                        i2_do_I2C_TX_EMPTY 0B4C  
                        ??i2_do_I2C_IDLE 0026             __size_of_i2c_busCollisionISR 0006  
                        ??i2_do_I2C_RCEN 0026                       __CFG_CCP2MX$PORTC1 000000  
                          ??_do_I2C_IDLE 003A                            ??_do_I2C_RCEN 003A  
                     ?i2_do_I2C_TX_EMPTY 0026                       __CFG_CCP3MX$PORTB5 000000  
                        ??_do_I2C_DO_ACK 003A                   __end_ofi2_do_I2C_RESET 109A  
                    i2c_setBuffer@buffer 003A                                  ?_printf 003C  
                          _read_register 0E02           ?_i2c1_driver_clearBusCollision 0026  
                    ??i2_do_I2C_TX_EMPTY 0026                    ??_i2c_masterOperation 003D  
                      ?_i2c1_driver_open 0026                        __end_of_do_I2C_RX 08D0  
                      __end_of_do_I2C_TX 0734                 ??i2_do_I2C_SEND_ADR_READ 0026  
                      ?_i2c1_driver_stop 0026                   ?_i2c1_driver_setI2cISR 003A  
                     ??_i2c1_driver_open 003A                       ??_i2c1_driver_stop 003A  
                                _OSCCON2 000FD2                            ?_mssp1_setIRQ 0026  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                                _SSP1ADD 000FC8                                  _SSP1BUF 000FC9  
                 __end_of_mssp1_clearIRQ 1216                                  _SSP1MSK 000FCA  
    __size_ofi2_do_I2C_SEND_INITIAL_READ 0010                      __size_of_i2c_poller 001A  
                ??_do_I2C_SEND_ADR_WRITE 003B      _do_I2C_SEND_RESTART_WRITE$intlevel0 1102  
            ??_do_I2C_SEND_RESTART_WRITE 003A                       _i2c1_driver_TXData 118C  
                             ??_i2c_open 003C                 __end_ofi2_mssp1_clearIRQ 121A  
                     _i2c1_driver_i2cISR 0011                                  _i2c_ISR 0BA4  
              __end_ofi2_do_I2C_TX_EMPTY 0BA4                  i2_i2c1_driver_getRXData 121E  
                        __CFG_PWRTEN$OFF 000000                                  __Hparam 0000  
                  _returnReset$intlevel0 1176                    _do_I2C_RCEN$intlevel0 102C  
                     _i2c1_driver_isNACK 0FC2                      ?_i2c1_driver_TXData 0026  
                                __Lparam 0000         _do_I2C_DO_ADDRESS_NACK$intlevel0 0BF8  
                           __psmallconst 0600                        ??_do_I2C_TX_EMPTY 003A  
                    ?_i2c1_driver_isNACK 0026                          ?i2_do_I2C_RESET 0026  
                                __pcinit 0A28                                  __ramtop 0600  
                         ?_read_register 0026                                  __ptext0 08D0  
                                __ptext1 0734                                  __ptext2 0E8A  
                                __ptext3 113E                                  __ptext4 0A8E  
                                __ptext5 0D64                                  __ptext6 1002  
                                __ptext7 0EB4                                  __ptext8 109A  
                                __ptext9 11F2                      __end_of_do_I2C_IDLE 104A  
                        __size_of_printf 002A                      __end_of_do_I2C_RCEN 1038  
                       ??i2_mssp1_setIRQ 0026                    _OSCILLATOR_Initialize 109A  
            __end_of_do_I2C_SEND_RESTART 10FC                           ??_mssp1_setIRQ 003A  
                   ??_i2c1_driver_TXData 003A                       _EUSART1_Initialize 0C40  
               ??_PIN_MANAGER_Initialize 003A                   i2c_masterOperation@ret 003E  
                        ?_mssp1_clearIRQ 0026               _do_I2C_SEND_STOP$intlevel0 10E6  
            ?i2_do_I2C_SEND_RESTART_READ 0026                 _do_I2C_SEND_RESTART_READ 110A  
             __size_of_SYSTEM_Initialize 0012                     __size_of_returnReset 000A  
                   end_of_initialization 0A80               ??_do_I2C_SEND_INITIAL_READ 003B  
       __end_of_ACCELEROMETER_Initialize 0A28                     ??_i2c1_driver_isNACK 003A  
                    ?_EUSART1_Initialize 0026             __end_of_i2c1_driver_sendNACK 11DA  
                          __Lmediumconst 0000                     __size_of_printString 0060  
                       ?_i2c_masterWrite 0026             __end_of_i2c1_driver_resetBus 123C  
  __end_of_EUSART1_SetRxInterruptHandler 115C   __size_of_EUSART1_SetRxInterruptHandler 000A  
          _EUSART1_SetRxInterruptHandler 1152           __size_ofi2_do_I2C_SEND_RESTART 0008  
                                printf@c 0040                                  printf@f 003C  
          __end_ofi2_do_I2C_SEND_RESTART 11BC                                  postdec1 000FE5  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __size_ofi2_returnReset 0004             ?i2_do_I2C_SEND_RESTART_WRITE 0026  
              _do_I2C_SEND_RESTART_WRITE 10FC                  ?i2_i2c1_driver_sendNACK 0026  
                   ??_EUSART1_Initialize 003C             __end_ofi2_do_I2C_TX_REGISTER 1126  
                ?i2_i2c1_driver_resetBus 0026                               _returnStop 117A  
               __end_of_do_I2C_SEND_STOP 10EE                                i2_i2c_ISR 0CD4  
        __size_ofi2_do_I2C_SEND_ADR_READ 0010                 read_xyzvalues@readbuffer 001D  
                            returnStop@p 003A                      EUSART1_Write@txData 003A  
               __end_of_mssp1_disableIRQ 1212                     __size_ofi2_do_I2C_RX 0074  
                   __size_ofi2_do_I2C_TX 0090                ??i2_i2c1_driver_getRXData 0026  
             __size_ofi2_do_I2C_TX_EMPTY 0058            __size_of_do_I2C_SEND_ADR_READ 0016  
                           ??_i2c_poller 003D           __end_ofi2_i2c1_driver_sendNACK 11E6  
                            _do_I2C_IDLE 1038                              _do_I2C_RCEN 1026  
           __end_of_INTERRUPT_Initialize 11F6                          ??_read_register 0040  
         __end_ofi2_i2c1_driver_resetBus 123E                      read_register@status 0016  
             ??i2_do_I2C_DO_ADDRESS_NACK 0026         __end_ofi2_do_I2C_DO_NACK_RESTART 119C  
          ??i2_do_I2C_SEND_RESTART_WRITE 0026                       _mssp1_IRQisEnabled 104A  
                 ?_OSCILLATOR_Initialize 0026                               ?i2_i2c_ISR 0026  
           __size_of_do_I2C_DO_NACK_STOP 000E                 read_xyzvalues@sensorData 0060  
                         __end_of_printf 0EB4                       _mssp1_waitForEvent 1014  
                ?_do_I2C_DO_NACK_RESTART 0026                      start_initialization 0A28  
                              _i2c_close 0F02                      _i2c_busCollisionISR 11EC  
        __size_of_PIN_MANAGER_Initialize 002A                      ?_mssp1_IRQisEnabled 0026  
                        i2_do_I2C_DO_ACK 11A4                            i2_returnReset 1226  
                        i2_do_I2C_TX$315 0026                      ?_mssp1_waitForEvent 003A  
            __end_of_i2c_masterAccelRead 10B6                              putch@txData 003B  
                     __end_of_i2c_poller 0F54             __size_of_i2c1_driver_sendACK 0006  
                  __end_of_EUSART1_Write 0D9E                          i2c_open@address 003D  
                     printString@welcome 0060                  i2c_setBuffer@bufferSize 003C  
                ??_i2c1_driver_getRXData 003A             __size_of_i2c1_driver_restart 0004  
            __size_ofi2_i2c1_driver_stop 0004             __size_of_i2c1_driver_startRX 0004  
                  i2_do_I2C_DO_NACK_STOP 119C                   i2_do_I2C_SEND_ADR_READ 107A  
                  __end_of_i2c_setBuffer 0F3A                 _ACCELEROMETER_Initialize 09BC  
                      __size_of_i2c_open 009A                     ?_i2c_busCollisionISR 0026  
                   __end_of_mssp1_setIRQ 11FA                     ??_mssp1_IRQisEnabled 003A  
                __size_of_read_xyzvalues 0092                     read_xyzvalues@status 0015  
                __size_of_write_register 0032                       i2_do_I2C_SEND_STOP 11AC  
                   ??_mssp1_waitForEvent 003C           ?_EUSART1_SetRxInterruptHandler 003A  
                  i2_i2c1_driver_sendACK 11E6                            ?_do_I2C_RESET 0026  
           __end_ofi2_i2c1_driver_TXData 11D4                              __pdataBANK0 00C1  
                            __pdataBANK1 0100                    i2i2c1_driver_TXData@d 0026  
              _do_I2C_TX_EMPTY$intlevel0 0AF4      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 1232                              ?_returnStop 003A  
                               ??_printf 003E                      ?i2_do_I2C_SEND_STOP 0026  
                ??_i2c1_driver_setI2cISR 003C                    i2_i2c1_driver_startRX 1222  
         __end_of_do_I2C_DO_NACK_RESTART 10C4                           _eusart1RxCount 0018  
                   _i2c1_driver_sendNACK 11D4             __end_ofi2_i2c1_driver_isNACK 0FEE  
                            __pbssCOMRAM 0001        _EUSART1_RxDefaultInterruptHandler 0046  
                             ?_i2c_close 0026                     _i2c1_driver_resetBus 123A  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 0060  
                         ?i2_returnReset 0026                                _do_I2C_RX 0856  
                              _do_I2C_TX 069E              __size_of_do_I2C_TX_REGISTER 0014  
       __end_of_do_I2C_SEND_INITIAL_READ 0F96           __size_of_do_I2C_SEND_ADR_WRITE 0016  
        ??_EUSART1_SetTxInterruptHandler 003C            __end_of_do_I2C_SEND_ADR_WRITE 0F80  
           __size_of_EUSART1_Receive_ISR 002C                     ??i2_do_I2C_SEND_STOP 0026  
              __size_of_i2c1_driver_open 0016                        ?i2_mssp1_clearIRQ 0026  
                   i2_do_I2C_TX_REGISTER 1118                __size_of_i2c1_driver_stop 0004  
                               ?_i2c_ISR 0026          _do_I2C_SEND_ADR_WRITE$intlevel0 0F70  
                        _do_I2C_TX_EMPTY 0AEE                       ??i2_mssp1_clearIRQ 0026  
                  ??_i2c_busCollisionISR 0026                   _PIN_MANAGER_Initialize 0EB4  
                       ??i2_do_I2C_RESET 0026                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 113E                    __end_ofi2_do_I2C_RCEN 1132  
                         ??_do_I2C_RESET 003A              __end_of_i2c_masterOperation 0CD4  
               ??_do_I2C_DO_ADDRESS_NACK 003A              _i2c1_driver_busCollisionISR 0013  
                  __end_of_do_I2C_DO_ACK 10E0             ??_INTERRUPT_InterruptManager 0028  
                       __CFG_PRICLKEN$ON 000000               ??_do_I2C_SEND_RESTART_READ 003A  
                  ?_i2c1_driver_sendNACK 0026                              ??i2_i2c_ISR 0028  
                __end_ofi2_do_I2C_DO_ACK 11AC                         ??_mssp1_clearIRQ 003A  
                            __smallconst 0600                                 _BAUDCON1 000FB8  
               i2_do_I2C_DO_NACK_RESTART 1194                    ?_i2c1_driver_resetBus 0026  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0026  
                             ?_do_I2C_RX 0026                               ?_do_I2C_TX 0026  
                      _i2c1_driver_start 120A               read_register@receivebuffer 0025  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 11F2  
                      _i2c_ISR$intlevel0 0BAA                       ?_i2c1_driver_start 0026  
                 ?i2_do_I2C_DO_NACK_STOP 0026                    ?i2_do_I2C_TX_REGISTER 0026  
                    __size_of_returnStop 000A                                 _PIE1bits 000F9D  
                               _PIE2bits 000FA0       _do_I2C_SEND_INITIAL_READ$intlevel0 0F86  
                    ??_i2c1_driver_start 003A                                 i2u141_48 07F2  
                               i2u141_49 0806      __size_of_INTERRUPT_InterruptManager 00FA  
                               i2u144_48 0992                                 i2u144_49 09A6  
                               i2u145_48 0B76                                 i2u145_49 0B8A  
                               i2u154_48 0D02                                 i2u162_48 0076  
                               i2u154_49 0D16                                 i2u139_48 0D42  
                               i2u139_49 0D56                                 i2u165_48 008C  
                               i2u159_48 0060                                 i2u168_48 00A2  
                               i2u168_49 00B6                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1             ??i2_do_I2C_SEND_INITIAL_READ 0026  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                 ?i2_i2c1_driver_sendACK 0026                                 _SSP1CON1 000FC6  
                               _SSP1CON2 000FC5                                 _SSP1STAT 000FC7  
                 ?i2_i2c1_driver_restart 0026                   ?i2_i2c1_driver_startRX 0026  
                      ?_do_I2C_SEND_STOP 0026                          ??i2_returnReset 0028  
                            ??_i2c_close 003A                __end_of_i2c1_driver_start 120E  
                          ??_returnReset 003C                       ??_do_I2C_SEND_STOP 003A  
            __size_of_i2c1_driver_TXData 0008        __end_of_do_I2C_SEND_RESTART_WRITE 110A  
                __end_of_do_I2C_TX_EMPTY 0B4C                              _INTCON2bits 000FF1  
                              copy_data0 0A3C                                copy_data1 0A5C  
                  ?_INTERRUPT_Initialize 0026                            ??_printString 003B  
                      ?_mssp1_disableIRQ 0026             __size_of_do_I2C_SEND_RESTART 000E  
            __size_of_i2c1_driver_isNACK 0016                     i2_i2c1_driver_TXData 11CC  
                _do_I2C_DO_ACK$intlevel0 10D8                                 _i2c_open 0604  
                  __size_of_mssp1_setIRQ 0004                       ??_mssp1_disableIRQ 003A  
                    _do_I2C_DO_NACK_STOP 10C4                         __size_of_i2c_ISR 004E  
  __end_of_EUSART1_SetTxInterruptHandler 1152   __size_of_EUSART1_SetTxInterruptHandler 000A  
          _EUSART1_SetTxInterruptHandler 1148                                 __Hrparam 0000  
                   i2_i2c1_driver_isNACK 0FD8                           _read_xyzvalues 0734  
                         _write_register 0DD0                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                             ?_do_I2C_IDLE 0026  
                           ?_do_I2C_RCEN 0026                        __CFG_P2BMX$PORTB5 000000  
      __size_of_do_I2C_SEND_INITIAL_READ 0016                  ??_OSCILLATOR_Initialize 003A  
              ?_do_I2C_SEND_INITIAL_READ 0026                      _i2c1_driver_sendACK 11DA  
               __size_of_i2c_masterWrite 0008                    i2_do_I2C_SEND_RESTART 11B4  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                      i2c1_driver_TXData@d 003A  
            __size_of_EUSART1_Initialize 004C                   ??_i2c1_driver_sendNACK 003A  
        __end_ofi2_do_I2C_SEND_ADR_WRITE 106A         ??_i2c1_driver_setBusCollisionISR 003C  
        ?_i2c1_driver_setBusCollisionISR 003A                         read_register@reg 0040  
     _do_I2C_SEND_RESTART_READ$intlevel0 1110                      _i2c1_driver_restart 1206  
                          ?i2_returnStop 0026                     ?_do_I2C_DO_NACK_STOP 0026  
                    _i2c1_driver_startRX 11FE             __end_of_do_I2C_SEND_ADR_READ 0FAC  
                 ??_i2c1_driver_resetBus 003A                         ?i2_do_I2C_DO_ACK 0026  
                          ??i2_do_I2C_RX 0026                            ??i2_do_I2C_TX 0026  
                           _mssp1_setIRQ 11F6                              ??_do_I2C_RX 003A  
                            ??_do_I2C_TX 003B                                 __ptext10 0C40  
                               __ptext11 1148                                 __ptext20 1166  
                               __ptext12 1152                                 __ptext21 0F54  
                               __ptext13 09BC                                 __ptext30 069E  
                               __ptext22 10A8                                 __ptext14 0DD0  
                               __ptext31 0BF2                                 __ptext23 0C8C  
                               __ptext15 1184                                 __ptext40 10EE  
                               __ptext32 10B6                                 __ptext24 104A  
                               __ptext16 0E02                                 __ptext41 10FC  
                               __ptext33 10C4                                 __ptext25 0F3A  
                               __ptext17 0F20                                 __ptext50 11D4  
                               __ptext42 110A                                 __ptext34 10D2  
                               __ptext26 1014                                 __ptext18 0604  
                               __ptext51 123A                                 __ptext43 1038  
                               __ptext35 1026                                 __ptext27 0BA4  
                               __ptext19 115C                                 __ptext60 120E  
                               __ptext52 11FE                                 __ptext44 0FAC  
                               __ptext36 0F6A                                 __ptext28 0AEE  
                               __ptext61 1212                                 __ptext53 1170  
                               __ptext45 0FEE                                 __ptext37 0F80  
                               __ptext29 0856                                 __ptext70 119C  
                               __ptext54 117A                                 __ptext46 11F6  
                               __ptext38 0F96                                 __ptext71 11A4  
                               __ptext63 0CD4                                 __ptext55 1202  
                               __ptext47 0FC2                                 __ptext39 10E0  
                               __ptext80 1132                                 __ptext72 1126  
                               __ptext64 1216                                 __ptext56 1206  
                               __ptext48 118C                                 __ptext81 108A  
                               __ptext73 105A                                 __ptext65 0B4C  
                               __ptext57 11DA                                 __ptext49 11FA  
                               __ptext90 1226                                 __ptext82 1118  
                               __ptext74 106A                                 __ptext66 0948  
                               __ptext58 120A                                 __ptext91 122A  
                               __ptext83 121A                                 __ptext75 107A  
                               __ptext67 07C6                                 __ptext59 0F02  
                               __ptext92 122E                                 __ptext84 0FD8  
                               __ptext76 11AC                                 __ptext68 0D1C  
                               __ptext93 1232                                 __ptext85 11CC  
                               __ptext77 11B4                                 __ptext69 1194  
                               __ptext94 11E6                                 __ptext86 121E  
                               __ptext78 11BC                                 __ptext95 11EC  
                               __ptext87 11E0                                 __ptext79 11C4  
                               __ptext96 1236                                 __ptext88 123C  
                               __ptext97 0E30                                 __ptext89 1222  
                               __ptext98 0E5E                                 __ptext99 0000  
                           _SSP1CON1bits 000FC6               ??_ACCELEROMETER_Initialize 0041  
                           _SSP1CON2bits 000FC5                     ?_i2c1_driver_sendACK 0026  
                   __end_of_do_I2C_RESET 0FC2                   ??i2_do_I2C_TX_REGISTER 0026  
                  ?i2_i2c1_driver_TXData 0026                  ?i2_do_I2C_SEND_ADR_READ 0026  
                __size_ofi2_mssp1_setIRQ 0004                     write_register@buffer 0023  
                   ?_i2c1_driver_restart 0026                      __end_of_returnReset 117A  
                       _i2c1_driver_open 0F54                         _i2c1_driver_stop 1202  
                          __size_of_main 0078                     ?_i2c1_driver_startRX 0026  
         __size_of_i2c1_driver_getRXData 0004                   __end_of_read_xyzvalues 07C6  
                   write_register@status 0017            __end_of_i2c1_driver_getRXData 11FE  
                 __end_of_write_register 0E02                   i2c_masterAccelRead@reg 003F  
                  ?i2_i2c1_driver_isNACK 0026                      __end_of_printString 0AEE  
                       printString@F7170 0100                                 int$flags 004B  
   EUSART1_SetRxInterruptHandler@handler 003A       __end_of_INTERRUPT_InterruptManager 0102  
             _INTERRUPT_InterruptManager 0008                                 main@data 0096  
                           _SSP1STATbits 000FC7                           ??i2_returnStop 0028  
       __end_of_do_I2C_SEND_RESTART_READ 1118                    __end_of_read_register 0E30  
                           ??_returnStop 003C                      _EUSART1_Receive_ISR 0E5E  
                  ??_do_I2C_DO_NACK_STOP 003A                mssp1_waitForEvent@timeout 003A  
         __size_of_i2c1_driver_setI2cISR 000A            __end_of_i2c1_driver_setI2cISR 1166  
                             _INTCONbits 000FF2               __size_of_i2c1_driver_start 0004  
                 ??_INTERRUPT_Initialize 003A                 ?i2_i2c1_driver_getRXData 0026  
         __end_ofi2_do_I2C_SEND_ADR_READ 108A                    ??_i2c1_driver_sendACK 003A  
                       ?_do_I2C_TX_EMPTY 0026        __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048  
             __end_ofi2_i2c1_driver_stop 1232                ?i2_do_I2C_DO_ADDRESS_NACK 0026  
                 _do_I2C_DO_ADDRESS_NACK 0BF2                                 intlevel2 0000  
                 _do_I2C_RESET$intlevel0 0FB2                    ??_i2c1_driver_restart 003A  
                   ?_EUSART1_Receive_ISR 0026                    ??_i2c1_driver_startRX 003A  
                    __end_ofi2_do_I2C_RX 09BC                      __end_ofi2_do_I2C_TX 0856  
                ?_PIN_MANAGER_Initialize 0026                          ?_read_xyzvalues 0040  
                             _RCSTA1bits 000FAB                          ?_write_register 003F  
                     __end_of_returnStop 1184             __end_of_EUSART1_Transmit_ISR 0E5E  
           __size_of_i2c_masterAccelRead 000E       __end_ofi2_do_I2C_SEND_INITIAL_READ 107A  
             i2_do_I2C_SEND_INITIAL_READ 106A              __size_of_mssp1_IRQisEnabled 0010  
    __end_ofi2_do_I2C_SEND_RESTART_WRITE 11C4              i2_do_I2C_SEND_RESTART_WRITE 11BC  
                               printf@ap 003E                   ?i2_do_I2C_SEND_RESTART 0026  
             ??i2_do_I2C_DO_NACK_RESTART 0026              __size_of_mssp1_waitForEvent 0012  
         ?_EUSART1_SetTxInterruptHandler 003A                __size_ofi2_mssp1_clearIRQ 0004  
                 __size_of_EUSART1_Write 003A               __end_of_do_I2C_TX_REGISTER 1002  
                      ??_i2c_masterWrite 003F                   __size_of_i2c_setBuffer 001A  
                      __CFG_T3CMX$PORTC0 000000                              _returnReset 1170  
       _do_I2C_DO_NACK_RESTART$intlevel0 10BC                  ??i2_do_I2C_DO_NACK_STOP 0026  
                 ??i2_i2c1_driver_TXData 0026             ??i2_do_I2C_SEND_RESTART_READ 0026  
                  ??_EUSART1_Receive_ISR 0026           __end_of_PIN_MANAGER_Initialize 0EDE  
            __end_of_i2c_busCollisionISR 11F2                              _printString 0A8E  
            __size_ofi2_do_I2C_SEND_STOP 0008                 ??i2_i2c1_driver_sendNACK 0026  
                      __CFG_FOSC$INTIO67 000000                   ??i2_i2c1_driver_isNACK 0026  
       __size_ofi2_do_I2C_SEND_ADR_WRITE 0010                    _do_I2C_SEND_ADR_WRITE 0F6A  
                ??i2_i2c1_driver_sendACK 0026                     _do_I2C_SEND_ADR_READ 0F96  
               ??i2_i2c1_driver_resetBus 0026                  ??i2_i2c1_driver_restart 0026  
