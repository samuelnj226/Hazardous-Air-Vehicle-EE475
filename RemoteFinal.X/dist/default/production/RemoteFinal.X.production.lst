

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 28 11:14:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,inline
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1,inline
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1,inline
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1,inline
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1,inline
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1,inline
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   115                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   116  0000                     
   117                           ; Version 1.45
   118                           ; Generated 16/11/2017 GMT
   119                           ; 
   120                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   121                           ; All rights reserved.
   122                           ; 
   123                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   124                           ; 
   125                           ; Redistribution and use in source and binary forms, with or without modification, are
   126                           ; permitted provided that the following conditions are met:
   127                           ; 
   128                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   129                           ;        conditions and the following disclaimer.
   130                           ; 
   131                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   132                           ;        of conditions and the following disclaimer in the documentation and/or other
   133                           ;        materials provided with the distribution.
   134                           ; 
   135                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   136                           ;        software without specific prior written permission.
   137                           ; 
   138                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   139                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   140                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   141                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   142                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   143                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   144                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   145                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   146                           ; 
   147                           ; 
   148                           ; Code-generator required, PIC18F25K22 Definitions
   149                           ; 
   150                           ; SFR Addresses
   151  0000                     
   152                           	psect	idataBANK0
   153  000B48                     __pidataBANK0:
   154                           	opt stack 0
   155                           
   156                           ;initializer for printString@F7170
   157  000B48  0A                 	db	10
   158  000B49  0D                 	db	13
   159  000B4A  47                 	db	71
   160  000B4B  4F                 	db	79
   161  000B4C  54                 	db	84
   162  000B4D  20                 	db	32
   163  000B4E  48                 	db	72
   164  000B4F  45                 	db	69
   165  000B50  52                 	db	82
   166  000B51  45                 	db	69
   167  000B52  2E                 	db	46
   168  000B53  20                 	db	32
   169  000B54  0A                 	db	10
   170  000B55  0D                 	db	13
   171  000B56  00                 	db	0
   172  000B57  00                 	db	0
   173  000B58  00                 	db	0
   174  000B59  00                 	db	0
   175  000B5A  00                 	db	0
   176  000B5B  00                 	db	0
   177  000B5C  00                 	db	0
   178  000B5D  00                 	db	0
   179  000B5E  00                 	db	0
   180  000B5F  00                 	db	0
   181  000B60  00                 	db	0
   182  000B61  00                 	db	0
   183  000B62  00                 	db	0
   184  000B63  00                 	db	0
   185  000B64  00                 	db	0
   186  000B65  00                 	db	0
   187  000B66  00                 	db	0
   188  000B67  00                 	db	0
   189  000B68  00                 	db	0
   190  000B69  00                 	db	0
   191  000B6A  00                 	db	0
   192  000B6B  00                 	db	0
   193  000B6C  00                 	db	0
   194  000B6D  00                 	db	0
   195  000B6E  00                 	db	0
   196  000B6F  00                 	db	0
   197  000B70  00                 	db	0
   198  000B71  00                 	db	0
   199  000B72  00                 	db	0
   200  000B73  00                 	db	0
   201  000B74  00                 	db	0
   202  000B75  00                 	db	0
   203  000B76  00                 	db	0
   204  000B77  00                 	db	0
   205  000B78  00                 	db	0
   206  000B79  00                 	db	0
   207                           
   208                           ;initializer for _fsmStateTable
   209  000B7A  22                 	db	low _do_I2C_IDLE
   210  000B7B  10                 	db	high _do_I2C_IDLE
   211  000B7C  80                 	db	low _do_I2C_SEND_ADR_READ
   212  000B7D  0F                 	db	high _do_I2C_SEND_ADR_READ
   213  000B7E  54                 	db	low _do_I2C_SEND_ADR_WRITE
   214  000B7F  0F                 	db	high _do_I2C_SEND_ADR_WRITE
   215  000B80  80                 	db	low _do_I2C_TX
   216  000B81  07                 	db	high _do_I2C_TX
   217  000B82  38                 	db	low _do_I2C_RX
   218  000B83  09                 	db	high _do_I2C_RX
   219  000B84  10                 	db	low _do_I2C_RCEN
   220  000B85  10                 	db	high _do_I2C_RCEN
   221  000B86  92                 	db	low _do_I2C_TX_EMPTY
   222  000B87  0A                 	db	high _do_I2C_TX_EMPTY
   223  000B88  F4                 	db	low _do_I2C_SEND_RESTART_READ
   224  000B89  10                 	db	high _do_I2C_SEND_RESTART_READ
   225  000B8A  E6                 	db	low _do_I2C_SEND_RESTART_WRITE
   226  000B8B  10                 	db	high _do_I2C_SEND_RESTART_WRITE
   227  000B8C  D8                 	db	low _do_I2C_SEND_RESTART
   228  000B8D  10                 	db	high _do_I2C_SEND_RESTART
   229  000B8E  CA                 	db	low _do_I2C_SEND_STOP
   230  000B8F  10                 	db	high _do_I2C_SEND_STOP
   231  000B90  BC                 	db	low _do_I2C_DO_ACK
   232  000B91  10                 	db	high _do_I2C_DO_ACK
   233  000B92  AE                 	db	low _do_I2C_DO_NACK_STOP
   234  000B93  10                 	db	high _do_I2C_DO_NACK_STOP
   235  000B94  A0                 	db	low _do_I2C_DO_NACK_RESTART
   236  000B95  10                 	db	high _do_I2C_DO_NACK_RESTART
   237  000B96  96                 	db	low _do_I2C_RESET
   238  000B97  0F                 	db	high _do_I2C_RESET
   239  000B98  EC                 	db	low _do_I2C_DO_ADDRESS_NACK
   240  000B99  0B                 	db	high _do_I2C_DO_ADDRESS_NACK
   241  000B9A  6A                 	db	low _do_I2C_SEND_INITIAL_READ
   242  000B9B  0F                 	db	high _do_I2C_SEND_INITIAL_READ
   243  000B9C  D8                 	db	low _do_I2C_TX_REGISTER
   244  000B9D  0F                 	db	high _do_I2C_TX_REGISTER
   245                           
   246                           	psect	nvCOMRAM
   247  000046                     __pnvCOMRAM:
   248                           	opt stack 0
   249  000046                     _EUSART1_RxDefaultInterruptHandler:
   250                           	opt stack 0
   251  000046                     	ds	2
   252  000048                     _EUSART1_TxDefaultInterruptHandler:
   253                           	opt stack 0
   254  000048                     	ds	2
   255  00004A                     _eusart1TxBufferRemaining:
   256                           	opt stack 0
   257  00004A                     	ds	1
   258  0000                     _ANSELA	set	3896
   259  0000                     _ANSELB	set	3897
   260  0000                     _ANSELC	set	3898
   261  0000                     _PIE2bits	set	4000
   262  0000                     _INTCONbits	set	4082
   263  0000                     _RCONbits	set	4048
   264  0000                     _INTCON2bits	set	4081
   265  0000                     _WPUB	set	3937
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISB	set	3987
   268  0000                     _TRISA	set	3986
   269  0000                     _LATC	set	3979
   270  0000                     _LATB	set	3978
   271  0000                     _LATA	set	3977
   272  0000                     _PIR2bits	set	4001
   273  0000                     _SSP1STATbits	set	4039
   274  0000                     _SSP1MSK	set	4042
   275  0000                     _SSP1BUF	set	4041
   276  0000                     _SSP1CON2bits	set	4037
   277  0000                     _SSP1ADD	set	4040
   278  0000                     _SSP1CON2	set	4037
   279  0000                     _SSP1CON1	set	4038
   280  0000                     _SSP1STAT	set	4039
   281  0000                     _PIR1bits	set	3998
   282  0000                     _SSP1CON1bits	set	4038
   283  0000                     _OSCTUNE	set	3995
   284  0000                     _OSCCON2	set	4050
   285  0000                     _OSCCON	set	4051
   286  0000                     _RCREG1	set	4014
   287  0000                     _RCSTA1bits	set	4011
   288  0000                     _TXREG1	set	4013
   289  0000                     _TXSTA1bits	set	4012
   290  0000                     _SPBRGH1	set	4016
   291  0000                     _SPBRG1	set	4015
   292  0000                     _TXSTA1	set	4012
   293  0000                     _RCSTA1	set	4011
   294  0000                     _BAUDCON1	set	4024
   295  0000                     _PIE1bits	set	3997
   296                           
   297                           	psect	smallconst
   298  000600                     __psmallconst:
   299                           	opt stack 0
   300  000600  00                 	db	0
   301  000601                     STR_1:
   302  000601  0D                 	db	13
   303  000602  0A                 	db	10
   304  000603  00                 	db	0
   305                           
   306                           ; #config settings
   307  000604  00                 	db	0	; dummy byte at the end
   308  0000                     
   309                           	psect	cinit
   310  000D5E                     __pcinit:
   311                           	opt stack 0
   312  000D5E                     start_initialization:
   313                           	opt stack 0
   314  000D5E                     __initialization:
   315                           	opt stack 0
   316                           
   317                           ; Initialize objects allocated to BANK0 (86 bytes)
   318                           ; load TBLPTR registers with __pidataBANK0
   319  000D5E  0E48               	movlw	low __pidataBANK0
   320  000D60  6EF6               	movwf	tblptrl,c
   321  000D62  0E0B               	movlw	high __pidataBANK0
   322  000D64  6EF7               	movwf	tblptrh,c
   323  000D66  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   324  000D68  6EF8               	movwf	tblptru,c
   325  000D6A  EE00  F060         	lfsr	0,__pdataBANK0
   326  000D6E  EE10 F056          	lfsr	1,86
   327  000D72                     copy_data0:
   328  000D72  0009               	tblrd		*+
   329  000D74  CFF5 FFEE          	movff	tablat,postinc0
   330  000D78  50E5               	movf	postdec1,w,c
   331  000D7A  50E1               	movf	fsr1l,w,c
   332  000D7C  E1FA               	bnz	copy_data0
   333                           
   334                           ; Clear objects allocated to BANK0 (37 bytes)
   335  000D7E  EE00  F0B6         	lfsr	0,__pbssBANK0
   336  000D82  0E25               	movlw	37
   337  000D84                     clear_0:
   338  000D84  6AEE               	clrf	postinc0,c
   339  000D86  06E8               	decf	wreg,f,c
   340  000D88  E1FD               	bnz	clear_0
   341                           
   342                           ; Clear objects allocated to COMRAM (37 bytes)
   343  000D8A  EE00  F001         	lfsr	0,__pbssCOMRAM
   344  000D8E  0E25               	movlw	37
   345  000D90                     clear_1:
   346  000D90  6AEE               	clrf	postinc0,c
   347  000D92  06E8               	decf	wreg,f,c
   348  000D94  E1FD               	bnz	clear_1
   349  000D96                     end_of_initialization:
   350                           	opt stack 0
   351  000D96                     __end_of__initialization:
   352                           	opt stack 0
   353  000D96  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   354  000D98  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   355  000D9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   356  000D9C  6EF8               	movwf	tblptru,c
   357  000D9E  0100               	movlb	0
   358  000DA0  EF03  F003         	goto	_main	;jump to C main() function
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           postdec1	equ	0xFE5
   366                           fsr1l	equ	0xFE1
   367                           
   368                           	psect	bssCOMRAM
   369  000001                     __pbssCOMRAM:
   370                           	opt stack 0
   371  000001                     _eusart1RxBuffer:
   372                           	opt stack 0
   373  000001                     	ds	8
   374  000009                     _eusart1TxBuffer:
   375                           	opt stack 0
   376  000009                     	ds	8
   377  000011                     _i2c1_driver_i2cISR:
   378                           	opt stack 0
   379  000011                     	ds	2
   380  000013                     _i2c1_driver_busCollisionISR:
   381                           	opt stack 0
   382  000013                     	ds	2
   383  000015                     read_xyzvalues@status:
   384                           	opt stack 0
   385  000015                     	ds	1
   386  000016                     read_register@status:
   387                           	opt stack 0
   388  000016                     	ds	1
   389  000017                     write_register@status:
   390                           	opt stack 0
   391  000017                     	ds	1
   392  000018                     _eusart1RxCount:
   393                           	opt stack 0
   394  000018                     	ds	1
   395  000019                     _eusart1RxTail:
   396                           	opt stack 0
   397  000019                     	ds	1
   398  00001A                     _eusart1RxHead:
   399                           	opt stack 0
   400  00001A                     	ds	1
   401  00001B                     _eusart1TxTail:
   402                           	opt stack 0
   403  00001B                     	ds	1
   404  00001C                     _eusart1TxHead:
   405                           	opt stack 0
   406  00001C                     	ds	1
   407  00001D                     read_xyzvalues@readbuffer:
   408                           	opt stack 0
   409  00001D                     	ds	6
   410  000023                     write_register@buffer:
   411                           	opt stack 0
   412  000023                     	ds	2
   413  000025                     read_register@receivebuffer:
   414                           	opt stack 0
   415  000025                     	ds	1
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           postdec1	equ	0xFE5
   423                           fsr1l	equ	0xFE1
   424                           
   425                           	psect	bssBANK0
   426  0000B6                     __pbssBANK0:
   427                           	opt stack 0
   428  0000B6                     _i2c_status:
   429                           	opt stack 0
   430  0000B6                     	ds	37
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	dataBANK0
   441  000060                     __pdataBANK0:
   442                           	opt stack 0
   443  000060                     printString@F7170:
   444                           	opt stack 0
   445  000060                     	ds	50
   446  000092                     _fsmStateTable:
   447                           	opt stack 0
   448  000092                     	ds	36
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1l	equ	0xFE1
   457                           
   458                           	psect	cstackBANK0
   459  0000DB                     __pcstackBANK0:
   460                           	opt stack 0
   461  0000DB                     read_xyzvalues@sensorData:
   462                           	opt stack 0
   463                           
   464                           ; 6 bytes @ 0x0
   465  0000DB                     	ds	6
   466  0000E1                     ??_main:
   467                           
   468                           ; 1 bytes @ 0x6
   469  0000E1                     	ds	2
   470  0000E3                     main@data:
   471                           	opt stack 0
   472                           
   473                           ; 6 bytes @ 0x8
   474  0000E3                     	ds	6
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	cstackCOMRAM
   485  000026                     __pcstackCOMRAM:
   486                           	opt stack 0
   487  000026                     ??i2_i2c1_driver_isNACK:
   488  000026                     i2i2c1_driver_TXData@d:
   489                           	opt stack 0
   490  000026                     i2_do_I2C_TX$315:
   491                           	opt stack 0
   492  000026                     i2returnReset@p:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x0
   496  000026                     	ds	2
   497  000028                     ??_INTERRUPT_InterruptManager:
   498  000028                     
   499                           ; 1 bytes @ 0x2
   500  000028                     	ds	18
   501  00003A                     ??_mssp1_IRQisEnabled:
   502  00003A                     ??_i2c1_driver_isNACK:
   503  00003A                     i2c_close@ret:
   504                           	opt stack 0
   505  00003A                     EUSART1_Write@txData:
   506                           	opt stack 0
   507  00003A                     i2c1_driver_TXData@d:
   508                           	opt stack 0
   509  00003A                     i2c_setBuffer@buffer:
   510                           	opt stack 0
   511  00003A                     returnReset@p:
   512                           	opt stack 0
   513  00003A                     EUSART1_SetTxInterruptHandler@handler:
   514                           	opt stack 0
   515  00003A                     EUSART1_SetRxInterruptHandler@handler:
   516                           	opt stack 0
   517  00003A                     mssp1_waitForEvent@timeout:
   518                           	opt stack 0
   519  00003A                     i2c1_driver_setBusCollisionISR@f:
   520                           	opt stack 0
   521  00003A                     i2c1_driver_setI2cISR@f:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x14
   525  00003A                     	ds	1
   526  00003B                     putch@txData:
   527                           	opt stack 0
   528  00003B                     _do_I2C_TX$315:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x15
   532  00003B                     	ds	1
   533  00003C                     ?_printf:
   534                           	opt stack 0
   535  00003C                     i2c_open@ret:
   536                           	opt stack 0
   537  00003C                     i2c_setBuffer@bufferSize:
   538                           	opt stack 0
   539  00003C                     printf@f:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x16
   543  00003C                     	ds	1
   544  00003D                     i2c_open@address:
   545                           	opt stack 0
   546  00003D                     i2c_masterOperation@operation:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x17
   550  00003D                     	ds	1
   551  00003E                     i2c_masterOperation@ret:
   552                           	opt stack 0
   553  00003E                     printf@ap:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x18
   557  00003E                     	ds	1
   558  00003F                     i2c_masterAccelRead@reg:
   559                           	opt stack 0
   560  00003F                     write_register@data:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x19
   564  00003F                     	ds	1
   565  000040                     ?_read_xyzvalues:
   566                           	opt stack 0
   567  000040                     write_register@reg:
   568                           	opt stack 0
   569  000040                     read_register@reg:
   570                           	opt stack 0
   571  000040                     printf@c:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x1A
   575  000040                     	ds	1
   576  000041                     ??_ACCELEROMETER_Initialize:
   577                           
   578                           ; 1 bytes @ 0x1B
   579  000041                     	ds	5
   580  000046                     tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           tblptrl	equ	0xFF6
   583                           tablat	equ	0xFF5
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           postdec1	equ	0xFE5
   587                           fsr1l	equ	0xFE1
   588                           
   589                           ; 1 bytes @ 0x20
   590 ;;
   591 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   592 ;;
   593 ;; *************** function _main *****************
   594 ;; Defined at:
   595 ;;		line 70 in file "main.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;		None
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  data            6    8[BANK0 ] struct .
   600 ;; Return value:  Size  Location     Type
   601 ;;                  1    wreg      void 
   602 ;; Registers used:
   603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   609 ;;      Params:         0       0       0       0       0       0       0
   610 ;;      Locals:         0       6       0       0       0       0       0
   611 ;;      Temps:          0       2       0       0       0       0       0
   612 ;;      Totals:         0       8       0       0       0       0       0
   613 ;;Total ram usage:        8 bytes
   614 ;; Hardware stack levels required when called:   14
   615 ;; This function calls:
   616 ;;		_ACCELEROMETER_Initialize
   617 ;;		_EUSART1_Write
   618 ;;		_SYSTEM_Initialize
   619 ;;		_printf
   620 ;;		_read_xyzvalues
   621 ;; This function is called by:
   622 ;;		Startup code after reset
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text0
   627  000606                     __ptext0:
   628                           	opt stack 0
   629  000606                     _main:
   630                           	opt stack 17
   631                           
   632                           ;main.c: 71: accelerometer_data_t data;
   633                           ;main.c: 74: SYSTEM_Initialize();
   634                           
   635                           ;incstack = 0
   636  000606  ECF6  F007         	call	_SYSTEM_Initialize	;wreg free
   637                           
   638                           ;main.c: 77: (INTCONbits.GIE = 1);
   639  00060A  8EF2               	bsf	intcon,7,c	;volatile
   640                           
   641                           ;main.c: 80: (INTCONbits.PEIE = 1);
   642  00060C  8CF2               	bsf	intcon,6,c	;volatile
   643                           
   644                           ;main.c: 82: ACCELEROMETER_Initialize();
   645  00060E  EC13  F005         	call	_ACCELEROMETER_Initialize	;wreg free
   646  000612                     
   647                           ;main.c: 88: data = read_xyzvalues();
   648  000612  EC0B  F004         	call	_read_xyzvalues	;wreg free
   649  000616  EE20  F0E3         	lfsr	2,main@data
   650  00061A  0E05               	movlw	5
   651  00061C                     u1691:
   652  00061C  CFEB FFDB          	movff	plusw0,plusw2
   653  000620  06E8               	decf	wreg,f,c
   654  000622  E2FC               	bc	u1691
   655                           
   656                           ;main.c: 89: _delay((unsigned long)((100)*(16000000/4000.0)));
   657  000624  0E03               	movlw	3
   658  000626  0100               	movlb	0	; () banked
   659  000628  6FE2               	movwf	(??_main+1)& (0+255),b
   660  00062A  0E08               	movlw	8
   661  00062C  6FE1               	movwf	??_main& (0+255),b
   662  00062E  0E77               	movlw	119
   663  000630                     u1707:
   664  000630  2EE8               	decfsz	wreg,f,c
   665  000632  D7FE               	bra	u1707
   666  000634  2FE1               	decfsz	??_main& (0+255),f,b
   667  000636  D7FC               	bra	u1707
   668  000638  2FE2               	decfsz	(??_main+1)& (0+255),f,b
   669  00063A  D7FA               	bra	u1707
   670                           
   671                           ;main.c: 92: EUSART1_Write(data.x & 0xff);
   672  00063C  0100               	movlb	0	; () banked
   673  00063E  51E3               	movf	main@data& (0+255),w,b
   674  000640  ECD2  F006         	call	_EUSART1_Write
   675                           
   676                           ;main.c: 93: _delay((unsigned long)((5)*(16000000/4000.0)));
   677  000644  0E1A               	movlw	26
   678  000646  0100               	movlb	0	; () banked
   679  000648  6FE1               	movwf	??_main& (0+255),b
   680  00064A  0EF8               	movlw	248
   681  00064C                     u1717:
   682  00064C  2EE8               	decfsz	wreg,f,c
   683  00064E  D7FE               	bra	u1717
   684  000650  2FE1               	decfsz	??_main& (0+255),f,b
   685  000652  D7FC               	bra	u1717
   686  000654  F000               	nop	
   687                           
   688                           ;main.c: 94: EUSART1_Write((data.x>>8) & 0xff);
   689  000656  0100               	movlb	0	; () banked
   690  000658  51E4               	movf	(main@data+1)& (0+255),w,b
   691  00065A  ECD2  F006         	call	_EUSART1_Write
   692                           
   693                           ;main.c: 95: _delay((unsigned long)((5)*(16000000/4000.0)));
   694  00065E  0E1A               	movlw	26
   695  000660  0100               	movlb	0	; () banked
   696  000662  6FE1               	movwf	??_main& (0+255),b
   697  000664  0EF8               	movlw	248
   698  000666                     u1727:
   699  000666  2EE8               	decfsz	wreg,f,c
   700  000668  D7FE               	bra	u1727
   701  00066A  2FE1               	decfsz	??_main& (0+255),f,b
   702  00066C  D7FC               	bra	u1727
   703  00066E  F000               	nop	
   704                           
   705                           ;main.c: 96: EUSART1_Write(data.y & 0xff);
   706  000670  0100               	movlb	0	; () banked
   707  000672  51E5               	movf	(main@data+2)& (0+255),w,b
   708  000674  ECD2  F006         	call	_EUSART1_Write
   709                           
   710                           ;main.c: 97: _delay((unsigned long)((5)*(16000000/4000.0)));
   711  000678  0E1A               	movlw	26
   712  00067A  0100               	movlb	0	; () banked
   713  00067C  6FE1               	movwf	??_main& (0+255),b
   714  00067E  0EF8               	movlw	248
   715  000680                     u1737:
   716  000680  2EE8               	decfsz	wreg,f,c
   717  000682  D7FE               	bra	u1737
   718  000684  2FE1               	decfsz	??_main& (0+255),f,b
   719  000686  D7FC               	bra	u1737
   720  000688  F000               	nop	
   721                           
   722                           ;main.c: 98: EUSART1_Write((data.y>>8) & 0xff);
   723  00068A  0100               	movlb	0	; () banked
   724  00068C  51E6               	movf	(main@data+3)& (0+255),w,b
   725  00068E  ECD2  F006         	call	_EUSART1_Write
   726                           
   727                           ;main.c: 99: _delay((unsigned long)((5)*(16000000/4000.0)));
   728  000692  0E1A               	movlw	26
   729  000694  0100               	movlb	0	; () banked
   730  000696  6FE1               	movwf	??_main& (0+255),b
   731  000698  0EF8               	movlw	248
   732  00069A                     u1747:
   733  00069A  2EE8               	decfsz	wreg,f,c
   734  00069C  D7FE               	bra	u1747
   735  00069E  2FE1               	decfsz	??_main& (0+255),f,b
   736  0006A0  D7FC               	bra	u1747
   737  0006A2  F000               	nop	
   738                           
   739                           ;main.c: 100: EUSART1_Write(data.z & 0xff);
   740  0006A4  0100               	movlb	0	; () banked
   741  0006A6  51E7               	movf	(main@data+4)& (0+255),w,b
   742  0006A8  ECD2  F006         	call	_EUSART1_Write
   743                           
   744                           ;main.c: 101: _delay((unsigned long)((5)*(16000000/4000.0)));
   745  0006AC  0E1A               	movlw	26
   746  0006AE  0100               	movlb	0	; () banked
   747  0006B0  6FE1               	movwf	??_main& (0+255),b
   748  0006B2  0EF8               	movlw	248
   749  0006B4                     u1757:
   750  0006B4  2EE8               	decfsz	wreg,f,c
   751  0006B6  D7FE               	bra	u1757
   752  0006B8  2FE1               	decfsz	??_main& (0+255),f,b
   753  0006BA  D7FC               	bra	u1757
   754  0006BC  F000               	nop	
   755                           
   756                           ;main.c: 102: EUSART1_Write((data.z>>8) & 0xff);
   757  0006BE  0100               	movlb	0	; () banked
   758  0006C0  51E8               	movf	(main@data+5)& (0+255),w,b
   759  0006C2  ECD2  F006         	call	_EUSART1_Write
   760                           
   761                           ;main.c: 103: _delay((unsigned long)((5)*(16000000/4000.0)));
   762  0006C6  0E1A               	movlw	26
   763  0006C8  0100               	movlb	0	; () banked
   764  0006CA  6FE1               	movwf	??_main& (0+255),b
   765  0006CC  0EF8               	movlw	248
   766  0006CE                     u1767:
   767  0006CE  2EE8               	decfsz	wreg,f,c
   768  0006D0  D7FE               	bra	u1767
   769  0006D2  2FE1               	decfsz	??_main& (0+255),f,b
   770  0006D4  D7FC               	bra	u1767
   771  0006D6  F000               	nop	
   772                           
   773                           ;main.c: 104: printf("\r\n");
   774  0006D8  0E01               	movlw	low STR_1
   775  0006DA  6E3C               	movwf	printf@f,c
   776  0006DC  0E06               	movlw	high STR_1
   777  0006DE  6E3D               	movwf	printf@f+1,c
   778  0006E0  EC4C  F007         	call	_printf	;wreg free
   779  0006E4  D796               	goto	l613
   780  0006E6                     __end_of_main:
   781                           	opt stack 0
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           intcon	equ	0xFF2
   787                           postinc0	equ	0xFEE
   788                           plusw0	equ	0xFEB
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1l	equ	0xFE1
   792                           plusw2	equ	0xFDB
   793                           
   794 ;; *************** function _read_xyzvalues *****************
   795 ;; Defined at:
   796 ;;		line 67 in file "accelerometer.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  sensorData      6    0[BANK0 ] struct .
   801 ;; Return value:  Size  Location     Type
   802 ;;                  6   26[COMRAM] struct .
   803 ;; Registers used:
   804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   810 ;;      Params:         6       0       0       0       0       0       0
   811 ;;      Locals:         0       6       0       0       0       0       0
   812 ;;      Temps:          0       0       0       0       0       0       0
   813 ;;      Totals:         6       6       0       0       0       0       0
   814 ;;Total ram usage:       12 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:   12
   817 ;; This function calls:
   818 ;;		_i2c_close
   819 ;;		_i2c_masterAccelRead
   820 ;;		_i2c_open
   821 ;;		_i2c_setBuffer
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text1
   828  000816                     __ptext1:
   829                           	opt stack 0
   830  000816                     _read_xyzvalues:
   831                           	opt stack 18
   832                           
   833                           ;accelerometer.c: 68: static i2c_error_t status;
   834                           ;accelerometer.c: 69: static volatile uint8_t readbuffer[6];
   835                           ;accelerometer.c: 70: accelerometer_data_t sensorData;
   836                           ;accelerometer.c: 73: i2c_open(0x1D);
   837                           
   838                           ;incstack = 0
   839  000816  0E1D               	movlw	29
   840  000818  EC73  F003         	call	_i2c_open
   841                           
   842                           ;accelerometer.c: 74: i2c_setBuffer(readbuffer, 6);
   843  00081C  0E1D               	movlw	low read_xyzvalues@readbuffer
   844  00081E  6E3A               	movwf	i2c_setBuffer@buffer,c
   845  000820  0E00               	movlw	high read_xyzvalues@readbuffer
   846  000822  6E3B               	movwf	i2c_setBuffer@buffer+1,c
   847  000824  0E00               	movlw	0
   848  000826  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
   849  000828  0E06               	movlw	6
   850  00082A  6E3C               	movwf	i2c_setBuffer@bufferSize,c
   851  00082C  EC85  F007         	call	_i2c_setBuffer	;wreg free
   852                           
   853                           ;accelerometer.c: 77: status = i2c_masterAccelRead(0x01);
   854  000830  0E01               	movlw	1
   855  000832  EC49  F008         	call	_i2c_masterAccelRead
   856  000836  6E15               	movwf	read_xyzvalues@status,c
   857                           
   858                           ;accelerometer.c: 80: status = i2c_close();
   859  000838  EC76  F007         	call	_i2c_close	;wreg free
   860  00083C  6E15               	movwf	read_xyzvalues@status,c
   861                           
   862                           ;accelerometer.c: 82: sensorData.x = readbuffer[0];
   863  00083E  C01D  F0DB         	movff	read_xyzvalues@readbuffer,read_xyzvalues@sensorData	;volatile
   864  000842  0100               	movlb	0	; () banked
   865  000844  6BDC               	clrf	(read_xyzvalues@sensorData+1)& (0+255),b
   866                           
   867                           ; BSR set to: 0
   868                           ;accelerometer.c: 83: sensorData.x <<= 8;
   869  000846  51DB               	movf	read_xyzvalues@sensorData& (0+255),w,b
   870  000848  6FDC               	movwf	(read_xyzvalues@sensorData+1)& (0+255),b
   871  00084A  6BDB               	clrf	read_xyzvalues@sensorData& (0+255),b
   872                           
   873                           ; BSR set to: 0
   874                           ;accelerometer.c: 84: sensorData.x |= readbuffer[1];
   875  00084C  501E               	movf	read_xyzvalues@readbuffer+1,w,c	;volatile
   876  00084E  13DB               	iorwf	read_xyzvalues@sensorData& (0+255),f,b
   877                           
   878                           ; BSR set to: 0
   879                           ;accelerometer.c: 85: sensorData.x >>= 2;
   880  000850  35DC               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   881  000852  33DC               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   882  000854  33DB               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   883  000856  35DC               	rlcf	(read_xyzvalues@sensorData+1)& (0+255),w,b
   884  000858  33DC               	rrcf	(read_xyzvalues@sensorData+1)& (0+255),f,b
   885  00085A  33DB               	rrcf	read_xyzvalues@sensorData& (0+255),f,b
   886                           
   887                           ; BSR set to: 0
   888                           ;accelerometer.c: 87: sensorData.y = readbuffer[2];
   889  00085C  C01F  F0DD         	movff	read_xyzvalues@readbuffer+2,read_xyzvalues@sensorData+2	;volatile
   890  000860  6BDE               	clrf	(read_xyzvalues@sensorData+3)& (0+255),b
   891                           
   892                           ; BSR set to: 0
   893                           ;accelerometer.c: 88: sensorData.y <<= 8;
   894  000862  51DD               	movf	(read_xyzvalues@sensorData+2)& (0+255),w,b
   895  000864  6FDE               	movwf	(read_xyzvalues@sensorData+3)& (0+255),b
   896  000866  6BDD               	clrf	(read_xyzvalues@sensorData+2)& (0+255),b
   897                           
   898                           ; BSR set to: 0
   899                           ;accelerometer.c: 89: sensorData.y |= readbuffer[3];
   900  000868  5020               	movf	read_xyzvalues@readbuffer+3,w,c	;volatile
   901  00086A  13DD               	iorwf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   902                           
   903                           ; BSR set to: 0
   904                           ;accelerometer.c: 90: sensorData.y >>= 2;
   905  00086C  35DE               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   906  00086E  33DE               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   907  000870  33DD               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   908  000872  35DE               	rlcf	(read_xyzvalues@sensorData+3)& (0+255),w,b
   909  000874  33DE               	rrcf	(read_xyzvalues@sensorData+3)& (0+255),f,b
   910  000876  33DD               	rrcf	(read_xyzvalues@sensorData+2)& (0+255),f,b
   911                           
   912                           ; BSR set to: 0
   913                           ;accelerometer.c: 92: sensorData.z = readbuffer[4];
   914  000878  C021  F0DF         	movff	read_xyzvalues@readbuffer+4,read_xyzvalues@sensorData+4	;volatile
   915  00087C  6BE0               	clrf	(read_xyzvalues@sensorData+5)& (0+255),b
   916                           
   917                           ; BSR set to: 0
   918                           ;accelerometer.c: 93: sensorData.z <<= 8;
   919  00087E  51DF               	movf	(read_xyzvalues@sensorData+4)& (0+255),w,b
   920  000880  6FE0               	movwf	(read_xyzvalues@sensorData+5)& (0+255),b
   921  000882  6BDF               	clrf	(read_xyzvalues@sensorData+4)& (0+255),b
   922                           
   923                           ; BSR set to: 0
   924                           ;accelerometer.c: 94: sensorData.z |= readbuffer[5];
   925  000884  5022               	movf	read_xyzvalues@readbuffer+5,w,c	;volatile
   926  000886  13DF               	iorwf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   927                           
   928                           ; BSR set to: 0
   929                           ;accelerometer.c: 95: sensorData.z >>= 2;
   930  000888  35E0               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   931  00088A  33E0               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   932  00088C  33DF               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   933  00088E  35E0               	rlcf	(read_xyzvalues@sensorData+5)& (0+255),w,b
   934  000890  33E0               	rrcf	(read_xyzvalues@sensorData+5)& (0+255),f,b
   935  000892  33DF               	rrcf	(read_xyzvalues@sensorData+4)& (0+255),f,b
   936                           
   937                           ; BSR set to: 0
   938                           ;accelerometer.c: 97: return sensorData;
   939  000894  EE20  F0DB         	lfsr	2,read_xyzvalues@sensorData
   940  000898  EE00  F040         	lfsr	0,?_read_xyzvalues
   941  00089C  0E05               	movlw	5
   942  00089E                     u1471:
   943  00089E  CFDB FFEB          	movff	plusw2,plusw0
   944  0008A2  06E8               	decf	wreg,f,c
   945  0008A4  E2FC               	bc	u1471
   946  0008A6  0012               	return	
   947  0008A8                     __end_of_read_xyzvalues:
   948                           	opt stack 0
   949                           tblptru	equ	0xFF8
   950                           tblptrh	equ	0xFF7
   951                           tblptrl	equ	0xFF6
   952                           tablat	equ	0xFF5
   953                           intcon	equ	0xFF2
   954                           postinc0	equ	0xFEE
   955                           plusw0	equ	0xFEB
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1l	equ	0xFE1
   959                           plusw2	equ	0xFDB
   960                           
   961 ;; *************** function _printf *****************
   962 ;; Defined at:
   963 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  f               2   22[COMRAM] PTR const unsigned char 
   966 ;;		 -> STR_1(3), 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  tmpval          4    0        struct .
   969 ;;  cp              3    0        PTR const unsigned char 
   970 ;;  ap              2   24[COMRAM] PTR void [1]
   971 ;;		 -> ?_printf(2), 
   972 ;;  len             2    0        unsigned int 
   973 ;;  val             2    0        unsigned int 
   974 ;;  c               1   26[COMRAM] char 
   975 ;;  flag            1    0        unsigned char 
   976 ;;  prec            1    0        char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  2   22[COMRAM] int 
   979 ;; Registers used:
   980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   986 ;;      Params:         2       0       0       0       0       0       0
   987 ;;      Locals:         3       0       0       0       0       0       0
   988 ;;      Temps:          0       0       0       0       0       0       0
   989 ;;      Totals:         5       0       0       0       0       0       0
   990 ;;Total ram usage:        5 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:    7
   993 ;; This function calls:
   994 ;;		_putch
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text2
  1001  000E98                     __ptext2:
  1002                           	opt stack 0
  1003  000E98                     _printf:
  1004                           	opt stack 23
  1005                           
  1006                           ;doprnt.c: 466: va_list ap;
  1007                           ;doprnt.c: 499: signed char c;
  1008                           ;doprnt.c: 506: signed char prec;
  1009                           ;doprnt.c: 508: unsigned char flag;
  1010                           ;doprnt.c: 523: union {
  1011                           ;doprnt.c: 524: unsigned long vd;
  1012                           ;doprnt.c: 525: double integ;
  1013                           ;doprnt.c: 526: } tmpval;
  1014                           ;doprnt.c: 528: unsigned int val;
  1015                           ;doprnt.c: 529: unsigned len;
  1016                           ;doprnt.c: 530: const char * cp;
  1017                           ;doprnt.c: 533: *ap = __va_start();
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;incstack = 0
  1021  000E98  0E3E               	movlw	low (?_printf+2)
  1022  000E9A  6E3E               	movwf	printf@ap,c
  1023  000E9C  0E00               	movlw	high (?_printf+2)
  1024  000E9E  6E3F               	movwf	printf@ap+1,c
  1025                           
  1026                           ;doprnt.c: 536: while(c = *f++) {
  1027  000EA0  D003               	goto	l666
  1028  000EA2                     
  1029                           ;doprnt.c: 540: {
  1030                           ;doprnt.c: 541: (putch(c) );
  1031  000EA2  5040               	movf	printf@c,w,c
  1032  000EA4  EC94  F008         	call	_putch
  1033  000EA8                     l666:
  1034  000EA8  C03C  FFF6         	movff	printf@f,tblptrl
  1035  000EAC  C03D  FFF7         	movff	printf@f+1,tblptrh
  1036  000EB0  4A3C               	infsnz	printf@f,f,c
  1037  000EB2  2A3D               	incf	printf@f+1,f,c
  1038  000EB4                     	if	0	;tblptru may be non-zero
  1039  000EB4                     	endif
  1040  000EB4                     	if	0	;tblptru may be non-zero
  1041  000EB4                     	endif
  1042  000EB4  0008               	tblrd		*
  1043  000EB6  CFF5 F040          	movff	tablat,printf@c
  1044  000EBA  5040               	movf	printf@c,w,c
  1045  000EBC  B4D8               	btfsc	status,2,c
  1046  000EBE  0012               	return	
  1047  000EC0  D7F0               	goto	l667
  1048  000EC2                     __end_of_printf:
  1049                           	opt stack 0
  1050                           tblptru	equ	0xFF8
  1051                           tblptrh	equ	0xFF7
  1052                           tblptrl	equ	0xFF6
  1053                           tablat	equ	0xFF5
  1054                           intcon	equ	0xFF2
  1055                           postinc0	equ	0xFEE
  1056                           plusw0	equ	0xFEB
  1057                           wreg	equ	0xFE8
  1058                           postdec1	equ	0xFE5
  1059                           fsr1l	equ	0xFE1
  1060                           plusw2	equ	0xFDB
  1061                           status	equ	0xFD8
  1062                           
  1063 ;; *************** function _putch *****************
  1064 ;; Defined at:
  1065 ;;		line 178 in file "mcc_generated_files/eusart1.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;  txData          1    wreg     unsigned char 
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;  txData          1   21[COMRAM] unsigned char 
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  1    wreg      void 
  1072 ;; Registers used:
  1073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1079 ;;      Params:         0       0       0       0       0       0       0
  1080 ;;      Locals:         1       0       0       0       0       0       0
  1081 ;;      Temps:          0       0       0       0       0       0       0
  1082 ;;      Totals:         1       0       0       0       0       0       0
  1083 ;;Total ram usage:        1 bytes
  1084 ;; Hardware stack levels used:    1
  1085 ;; Hardware stack levels required when called:    6
  1086 ;; This function calls:
  1087 ;;		_EUSART1_Write
  1088 ;; This function is called by:
  1089 ;;		_printf
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text3
  1094  001128                     __ptext3:
  1095                           	opt stack 0
  1096  001128                     _putch:
  1097                           	opt stack 23
  1098                           
  1099                           ;incstack = 0
  1100                           ;putch@txData stored from wreg
  1101  001128  6E3B               	movwf	putch@txData,c
  1102                           
  1103                           ;eusart1.c: 180: EUSART1_Write(txData);
  1104  00112A  503B               	movf	putch@txData,w,c
  1105  00112C  ECD2  F006         	call	_EUSART1_Write
  1106  001130  0012               	return		;funcret
  1107  001132                     __end_of_putch:
  1108                           	opt stack 0
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           intcon	equ	0xFF2
  1114                           postinc0	equ	0xFEE
  1115                           plusw0	equ	0xFEB
  1116                           wreg	equ	0xFE8
  1117                           postdec1	equ	0xFE5
  1118                           fsr1l	equ	0xFE1
  1119                           plusw2	equ	0xFDB
  1120                           status	equ	0xFD8
  1121                           
  1122 ;; *************** function _EUSART1_Write *****************
  1123 ;; Defined at:
  1124 ;;		line 150 in file "mcc_generated_files/eusart1.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  txData          1    wreg     unsigned char 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  txData          1   20[COMRAM] unsigned char 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1138 ;;      Params:         0       0       0       0       0       0       0
  1139 ;;      Locals:         1       0       0       0       0       0       0
  1140 ;;      Temps:          0       0       0       0       0       0       0
  1141 ;;      Totals:         1       0       0       0       0       0       0
  1142 ;;Total ram usage:        1 bytes
  1143 ;; Hardware stack levels used:    1
  1144 ;; Hardware stack levels required when called:    5
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_putch
  1149 ;;		_main
  1150 ;;		_Send_UART
  1151 ;;		_printString
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text4
  1156  000DA4                     __ptext4:
  1157                           	opt stack 0
  1158  000DA4                     _EUSART1_Write:
  1159                           	opt stack 23
  1160                           
  1161                           ;incstack = 0
  1162                           ;EUSART1_Write@txData stored from wreg
  1163  000DA4  6E3A               	movwf	EUSART1_Write@txData,c
  1164  000DA6                     
  1165                           ;eusart1.c: 153: {
  1166                           
  1167                           ;eusart1.c: 152: while(0 == eusart1TxBufferRemaining)
  1168  000DA6  504A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  1169  000DA8  B4D8               	btfsc	status,2,c
  1170  000DAA  D7FD               	goto	l3541
  1171                           
  1172                           ;eusart1.c: 154: }
  1173                           ;eusart1.c: 156: if(0 == PIE1bits.TX1IE)
  1174  000DAC  B89D               	btfsc	3997,4,c	;volatile
  1175  000DAE  D003               	goto	l309
  1176                           
  1177                           ;eusart1.c: 157: {
  1178                           ;eusart1.c: 158: TXREG1 = txData;
  1179  000DB0  C03A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1180                           
  1181                           ;eusart1.c: 159: }
  1182  000DB4  D012               	goto	l310
  1183  000DB6                     l309:
  1184                           
  1185                           ;eusart1.c: 160: else
  1186                           ;eusart1.c: 161: {
  1187                           ;eusart1.c: 162: PIE1bits.TX1IE = 0;
  1188  000DB6  989D               	bcf	3997,4,c	;volatile
  1189                           
  1190                           ;eusart1.c: 163: eusart1TxBuffer[eusart1TxHead++] = txData;
  1191  000DB8  501C               	movf	_eusart1TxHead,w,c	;volatile
  1192  000DBA  0D01               	mullw	1
  1193  000DBC  0E09               	movlw	low _eusart1TxBuffer
  1194  000DBE  24F3               	addwf	prodl,w,c
  1195  000DC0  6ED9               	movwf	fsr2l,c
  1196  000DC2  0E00               	movlw	high _eusart1TxBuffer
  1197  000DC4  20F4               	addwfc	prodh,w,c
  1198  000DC6  6EDA               	movwf	fsr2h,c
  1199  000DC8  C03A  FFDF         	movff	EUSART1_Write@txData,indf2
  1200  000DCC  2A1C               	incf	_eusart1TxHead,f,c	;volatile
  1201                           
  1202                           ;eusart1.c: 164: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  1203  000DCE  0E07               	movlw	7
  1204  000DD0  641C               	cpfsgt	_eusart1TxHead,c	;volatile
  1205  000DD2  D002               	goto	l311
  1206                           
  1207                           ;eusart1.c: 165: {
  1208                           ;eusart1.c: 166: eusart1TxHead = 0;
  1209  000DD4  0E00               	movlw	0
  1210  000DD6  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1211  000DD8                     l311:
  1212                           
  1213                           ;eusart1.c: 167: }
  1214                           ;eusart1.c: 168: eusart1TxBufferRemaining--;
  1215  000DD8  064A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1216  000DDA                     l310:
  1217                           
  1218                           ;eusart1.c: 169: }
  1219                           ;eusart1.c: 170: PIE1bits.TX1IE = 1;
  1220  000DDA  889D               	bsf	3997,4,c	;volatile
  1221  000DDC  0012               	return		;funcret
  1222  000DDE                     __end_of_EUSART1_Write:
  1223                           	opt stack 0
  1224                           tblptru	equ	0xFF8
  1225                           tblptrh	equ	0xFF7
  1226                           tblptrl	equ	0xFF6
  1227                           tablat	equ	0xFF5
  1228                           prodh	equ	0xFF4
  1229                           prodl	equ	0xFF3
  1230                           intcon	equ	0xFF2
  1231                           postinc0	equ	0xFEE
  1232                           plusw0	equ	0xFEB
  1233                           wreg	equ	0xFE8
  1234                           postdec1	equ	0xFE5
  1235                           fsr1l	equ	0xFE1
  1236                           indf2	equ	0xFDF
  1237                           plusw2	equ	0xFDB
  1238                           fsr2h	equ	0xFDA
  1239                           fsr2l	equ	0xFD9
  1240                           status	equ	0xFD8
  1241                           
  1242 ;; *************** function _SYSTEM_Initialize *****************
  1243 ;; Defined at:
  1244 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;		None
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  1    wreg      void 
  1251 ;; Registers used:
  1252 ;;		wreg, status,2, status,0, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1258 ;;      Params:         0       0       0       0       0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0       0
  1261 ;;      Totals:         0       0       0       0       0       0       0
  1262 ;;Total ram usage:        0 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    7
  1265 ;; This function calls:
  1266 ;;		_EUSART1_Initialize
  1267 ;;		_INTERRUPT_Initialize
  1268 ;;		_OSCILLATOR_Initialize
  1269 ;;		_PIN_MANAGER_Initialize
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text5
  1276  000FEC                     __ptext5:
  1277                           	opt stack 0
  1278  000FEC                     _SYSTEM_Initialize:
  1279                           	opt stack 23
  1280                           
  1281                           ;mcc.c: 114: INTERRUPT_Initialize();
  1282                           
  1283                           ;incstack = 0
  1284  000FEC  ECEE  F008         	call	_INTERRUPT_Initialize	;wreg free
  1285                           
  1286                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1287  000FF0  EC61  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  1288                           
  1289                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1290  000FF4  EC42  F008         	call	_OSCILLATOR_Initialize	;wreg free
  1291                           
  1292                           ;mcc.c: 117: EUSART1_Initialize();
  1293  000FF8  EC1D  F006         	call	_EUSART1_Initialize	;wreg free
  1294  000FFC  0012               	return		;funcret
  1295  000FFE                     __end_of_SYSTEM_Initialize:
  1296                           	opt stack 0
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           tblptrl	equ	0xFF6
  1300                           tablat	equ	0xFF5
  1301                           prodh	equ	0xFF4
  1302                           prodl	equ	0xFF3
  1303                           intcon	equ	0xFF2
  1304                           postinc0	equ	0xFEE
  1305                           plusw0	equ	0xFEB
  1306                           wreg	equ	0xFE8
  1307                           postdec1	equ	0xFE5
  1308                           fsr1l	equ	0xFE1
  1309                           indf2	equ	0xFDF
  1310                           plusw2	equ	0xFDB
  1311                           fsr2h	equ	0xFDA
  1312                           fsr2l	equ	0xFD9
  1313                           status	equ	0xFD8
  1314                           
  1315 ;; *************** function _PIN_MANAGER_Initialize *****************
  1316 ;; Defined at:
  1317 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;		None
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, status,2
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1331 ;;      Params:         0       0       0       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0
  1333 ;;      Temps:          0       0       0       0       0       0       0
  1334 ;;      Totals:         0       0       0       0       0       0       0
  1335 ;;Total ram usage:        0 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    5
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_SYSTEM_Initialize
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text6
  1346  000EC2                     __ptext6:
  1347                           	opt stack 0
  1348  000EC2                     _PIN_MANAGER_Initialize:
  1349                           	opt stack 24
  1350                           
  1351                           ;pin_manager.c: 57: LATA = 0x00;
  1352                           
  1353                           ;incstack = 0
  1354  000EC2  0E00               	movlw	0
  1355  000EC4  6E89               	movwf	3977,c	;volatile
  1356                           
  1357                           ;pin_manager.c: 58: LATB = 0x00;
  1358  000EC6  0E00               	movlw	0
  1359  000EC8  6E8A               	movwf	3978,c	;volatile
  1360                           
  1361                           ;pin_manager.c: 59: LATC = 0x00;
  1362  000ECA  0E00               	movlw	0
  1363  000ECC  6E8B               	movwf	3979,c	;volatile
  1364                           
  1365                           ;pin_manager.c: 64: TRISA = 0xFF;
  1366  000ECE  6892               	setf	3986,c	;volatile
  1367                           
  1368                           ;pin_manager.c: 65: TRISB = 0xFF;
  1369  000ED0  6893               	setf	3987,c	;volatile
  1370                           
  1371                           ;pin_manager.c: 66: TRISC = 0xBF;
  1372  000ED2  0EBF               	movlw	191
  1373  000ED4  6E94               	movwf	3988,c	;volatile
  1374                           
  1375                           ;pin_manager.c: 71: ANSELC = 0x24;
  1376  000ED6  0E24               	movlw	36
  1377  000ED8  010F               	movlb	15	; () banked
  1378  000EDA  6F3A               	movwf	58,b	;volatile
  1379                           
  1380                           ;pin_manager.c: 72: ANSELB = 0x3F;
  1381  000EDC  0E3F               	movlw	63
  1382  000EDE  6F39               	movwf	57,b	;volatile
  1383                           
  1384                           ;pin_manager.c: 73: ANSELA = 0x2F;
  1385  000EE0  0E2F               	movlw	47
  1386  000EE2  6F38               	movwf	56,b	;volatile
  1387                           
  1388                           ;pin_manager.c: 78: WPUB = 0x00;
  1389  000EE4  0E00               	movlw	0
  1390  000EE6  6E61               	movwf	3937,c	;volatile
  1391                           
  1392                           ; BSR set to: 15
  1393                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 1;
  1394  000EE8  8EF1               	bsf	intcon2,7,c	;volatile
  1395                           
  1396                           ; BSR set to: 15
  1397  000EEA  0012               	return		;funcret
  1398  000EEC                     __end_of_PIN_MANAGER_Initialize:
  1399                           	opt stack 0
  1400                           tblptru	equ	0xFF8
  1401                           tblptrh	equ	0xFF7
  1402                           tblptrl	equ	0xFF6
  1403                           tablat	equ	0xFF5
  1404                           prodh	equ	0xFF4
  1405                           prodl	equ	0xFF3
  1406                           intcon	equ	0xFF2
  1407                           intcon2	equ	0xFF1
  1408                           postinc0	equ	0xFEE
  1409                           plusw0	equ	0xFEB
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1l	equ	0xFE1
  1413                           indf2	equ	0xFDF
  1414                           plusw2	equ	0xFDB
  1415                           fsr2h	equ	0xFDA
  1416                           fsr2l	equ	0xFD9
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _OSCILLATOR_Initialize *****************
  1420 ;; Defined at:
  1421 ;;		line 120 in file "mcc_generated_files/mcc.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1435 ;;      Params:         0       0       0       0       0       0       0
  1436 ;;      Locals:         0       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0
  1438 ;;      Totals:         0       0       0       0       0       0       0
  1439 ;;Total ram usage:        0 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    5
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_SYSTEM_Initialize
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text7
  1450  001084                     __ptext7:
  1451                           	opt stack 0
  1452  001084                     _OSCILLATOR_Initialize:
  1453                           	opt stack 24
  1454                           
  1455                           ;mcc.c: 123: OSCCON = 0x72;
  1456                           
  1457                           ; BSR set to: 15
  1458                           ;incstack = 0
  1459  001084  0E72               	movlw	114
  1460  001086  6ED3               	movwf	4051,c	;volatile
  1461                           
  1462                           ;mcc.c: 125: OSCCON2 = 0x04;
  1463  001088  0E04               	movlw	4
  1464  00108A  6ED2               	movwf	4050,c	;volatile
  1465                           
  1466                           ;mcc.c: 127: OSCTUNE = 0x40;
  1467  00108C  0E40               	movlw	64
  1468  00108E  6E9B               	movwf	3995,c	;volatile
  1469  001090  0012               	return		;funcret
  1470  001092                     __end_of_OSCILLATOR_Initialize:
  1471                           	opt stack 0
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           prodh	equ	0xFF4
  1477                           prodl	equ	0xFF3
  1478                           intcon	equ	0xFF2
  1479                           intcon2	equ	0xFF1
  1480                           postinc0	equ	0xFEE
  1481                           plusw0	equ	0xFEB
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1l	equ	0xFE1
  1485                           indf2	equ	0xFDF
  1486                           plusw2	equ	0xFDB
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _INTERRUPT_Initialize *****************
  1492 ;; Defined at:
  1493 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		None
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1507 ;;      Params:         0       0       0       0       0       0       0
  1508 ;;      Locals:         0       0       0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0
  1510 ;;      Totals:         0       0       0       0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    5
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_SYSTEM_Initialize
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text8
  1522  0011DC                     __ptext8:
  1523                           	opt stack 0
  1524  0011DC                     _INTERRUPT_Initialize:
  1525                           	opt stack 24
  1526                           
  1527                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  1528                           
  1529                           ;incstack = 0
  1530  0011DC  9ED0               	bcf	4048,7,c	;volatile
  1531  0011DE  0012               	return		;funcret
  1532  0011E0                     __end_of_INTERRUPT_Initialize:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           prodh	equ	0xFF4
  1539                           prodl	equ	0xFF3
  1540                           intcon	equ	0xFF2
  1541                           intcon2	equ	0xFF1
  1542                           postinc0	equ	0xFEE
  1543                           plusw0	equ	0xFEB
  1544                           wreg	equ	0xFE8
  1545                           postdec1	equ	0xFE5
  1546                           fsr1l	equ	0xFE1
  1547                           indf2	equ	0xFDF
  1548                           plusw2	equ	0xFDB
  1549                           fsr2h	equ	0xFDA
  1550                           fsr2l	equ	0xFD9
  1551                           status	equ	0xFD8
  1552                           
  1553 ;; *************** function _EUSART1_Initialize *****************
  1554 ;; Defined at:
  1555 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;		None
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;		None
  1560 ;; Return value:  Size  Location     Type
  1561 ;;                  1    wreg      void 
  1562 ;; Registers used:
  1563 ;;		wreg, status,2, status,0, cstack
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1569 ;;      Params:         0       0       0       0       0       0       0
  1570 ;;      Locals:         0       0       0       0       0       0       0
  1571 ;;      Temps:          0       0       0       0       0       0       0
  1572 ;;      Totals:         0       0       0       0       0       0       0
  1573 ;;Total ram usage:        0 bytes
  1574 ;; Hardware stack levels used:    1
  1575 ;; Hardware stack levels required when called:    6
  1576 ;; This function calls:
  1577 ;;		_EUSART1_SetRxInterruptHandler
  1578 ;;		_EUSART1_SetTxInterruptHandler
  1579 ;; This function is called by:
  1580 ;;		_SYSTEM_Initialize
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text9
  1585  000C3A                     __ptext9:
  1586                           	opt stack 0
  1587  000C3A                     _EUSART1_Initialize:
  1588                           	opt stack 23
  1589                           
  1590                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  1591                           
  1592                           ;incstack = 0
  1593  000C3A  9A9D               	bcf	3997,5,c	;volatile
  1594                           
  1595                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  1596  000C3C  989D               	bcf	3997,4,c	;volatile
  1597                           
  1598                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  1599  000C3E  0E3E               	movlw	low _EUSART1_Transmit_ISR
  1600  000C40  6E3A               	movwf	EUSART1_SetTxInterruptHandler@handler,c
  1601  000C42  0E0E               	movlw	high _EUSART1_Transmit_ISR
  1602  000C44  6E3B               	movwf	EUSART1_SetTxInterruptHandler@handler+1,c
  1603  000C46  EC99  F008         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  1604                           
  1605                           ;eusart1.c: 82: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  1606  000C4A  0E6C               	movlw	low _EUSART1_Receive_ISR
  1607  000C4C  6E3A               	movwf	EUSART1_SetRxInterruptHandler@handler,c
  1608  000C4E  0E0E               	movlw	high _EUSART1_Receive_ISR
  1609  000C50  6E3B               	movwf	EUSART1_SetRxInterruptHandler@handler+1,c
  1610  000C52  EC9E  F008         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  1611                           
  1612                           ;eusart1.c: 87: BAUDCON1 = 0x08;
  1613  000C56  0E08               	movlw	8
  1614  000C58  6EB8               	movwf	4024,c	;volatile
  1615                           
  1616                           ;eusart1.c: 90: RCSTA1 = 0x90;
  1617  000C5A  0E90               	movlw	144
  1618  000C5C  6EAB               	movwf	4011,c	;volatile
  1619                           
  1620                           ;eusart1.c: 93: TXSTA1 = 0x24;
  1621  000C5E  0E24               	movlw	36
  1622  000C60  6EAC               	movwf	4012,c	;volatile
  1623                           
  1624                           ;eusart1.c: 96: SPBRG1 = 0x22;
  1625  000C62  0E22               	movlw	34
  1626  000C64  6EAF               	movwf	4015,c	;volatile
  1627                           
  1628                           ;eusart1.c: 99: SPBRGH1 = 0x00;
  1629  000C66  0E00               	movlw	0
  1630  000C68  6EB0               	movwf	4016,c	;volatile
  1631                           
  1632                           ;eusart1.c: 103: eusart1TxHead = 0;
  1633  000C6A  0E00               	movlw	0
  1634  000C6C  6E1C               	movwf	_eusart1TxHead,c	;volatile
  1635                           
  1636                           ;eusart1.c: 104: eusart1TxTail = 0;
  1637  000C6E  0E00               	movlw	0
  1638  000C70  6E1B               	movwf	_eusart1TxTail,c	;volatile
  1639                           
  1640                           ;eusart1.c: 105: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1641  000C72  0E08               	movlw	8
  1642  000C74  6E4A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1643                           
  1644                           ;eusart1.c: 107: eusart1RxHead = 0;
  1645  000C76  0E00               	movlw	0
  1646  000C78  6E1A               	movwf	_eusart1RxHead,c	;volatile
  1647                           
  1648                           ;eusart1.c: 108: eusart1RxTail = 0;
  1649  000C7A  0E00               	movlw	0
  1650  000C7C  6E19               	movwf	_eusart1RxTail,c	;volatile
  1651                           
  1652                           ;eusart1.c: 109: eusart1RxCount = 0;
  1653  000C7E  0E00               	movlw	0
  1654  000C80  6E18               	movwf	_eusart1RxCount,c	;volatile
  1655                           
  1656                           ;eusart1.c: 112: PIE1bits.RC1IE = 1;
  1657  000C82  8A9D               	bsf	3997,5,c	;volatile
  1658  000C84  0012               	return		;funcret
  1659  000C86                     __end_of_EUSART1_Initialize:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           prodh	equ	0xFF4
  1666                           prodl	equ	0xFF3
  1667                           intcon	equ	0xFF2
  1668                           intcon2	equ	0xFF1
  1669                           postinc0	equ	0xFEE
  1670                           plusw0	equ	0xFEB
  1671                           wreg	equ	0xFE8
  1672                           postdec1	equ	0xFE5
  1673                           fsr1l	equ	0xFE1
  1674                           indf2	equ	0xFDF
  1675                           plusw2	equ	0xFDB
  1676                           fsr2h	equ	0xFDA
  1677                           fsr2l	equ	0xFD9
  1678                           status	equ	0xFD8
  1679                           
  1680 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  1681 ;; Defined at:
  1682 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1685 ;;		 -> EUSART1_Transmit_ISR(1), 
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, status,0
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1697 ;;      Params:         2       0       0       0       0       0       0
  1698 ;;      Locals:         0       0       0       0       0       0       0
  1699 ;;      Temps:          0       0       0       0       0       0       0
  1700 ;;      Totals:         2       0       0       0       0       0       0
  1701 ;;Total ram usage:        2 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    5
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_EUSART1_Initialize
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text10
  1712  001132                     __ptext10:
  1713                           	opt stack 0
  1714  001132                     _EUSART1_SetTxInterruptHandler:
  1715                           	opt stack 23
  1716                           
  1717                           ;eusart1.c: 223: EUSART1_TxDefaultInterruptHandler = handler;
  1718                           
  1719                           ;incstack = 0
  1720  001132  C03A  F048         	movff	EUSART1_SetTxInterruptHandler@handler,_EUSART1_TxDefaultInterruptHandler
  1721  001136  C03B  F049         	movff	EUSART1_SetTxInterruptHandler@handler+1,_EUSART1_TxDefaultInterruptHandler+1
  1722  00113A  0012               	return		;funcret
  1723  00113C                     __end_of_EUSART1_SetTxInterruptHandler:
  1724                           	opt stack 0
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           prodh	equ	0xFF4
  1730                           prodl	equ	0xFF3
  1731                           intcon	equ	0xFF2
  1732                           intcon2	equ	0xFF1
  1733                           postinc0	equ	0xFEE
  1734                           plusw0	equ	0xFEB
  1735                           wreg	equ	0xFE8
  1736                           postdec1	equ	0xFE5
  1737                           fsr1l	equ	0xFE1
  1738                           indf2	equ	0xFDF
  1739                           plusw2	equ	0xFDB
  1740                           fsr2h	equ	0xFDA
  1741                           fsr2l	equ	0xFD9
  1742                           status	equ	0xFD8
  1743                           
  1744 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  1745 ;; Defined at:
  1746 ;;		line 226 in file "mcc_generated_files/eusart1.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  handler         2   20[COMRAM] PTR FTN()void 
  1749 ;;		 -> EUSART1_Receive_ISR(1), 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2, status,0
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1761 ;;      Params:         2       0       0       0       0       0       0
  1762 ;;      Locals:         0       0       0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0
  1764 ;;      Totals:         2       0       0       0       0       0       0
  1765 ;;Total ram usage:        2 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    5
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_EUSART1_Initialize
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text11
  1776  00113C                     __ptext11:
  1777                           	opt stack 0
  1778  00113C                     _EUSART1_SetRxInterruptHandler:
  1779                           	opt stack 23
  1780                           
  1781                           ;eusart1.c: 227: EUSART1_RxDefaultInterruptHandler = handler;
  1782                           
  1783                           ;incstack = 0
  1784  00113C  C03A  F046         	movff	EUSART1_SetRxInterruptHandler@handler,_EUSART1_RxDefaultInterruptHandler
  1785  001140  C03B  F047         	movff	EUSART1_SetRxInterruptHandler@handler+1,_EUSART1_RxDefaultInterruptHandler+1
  1786  001144  0012               	return		;funcret
  1787  001146                     __end_of_EUSART1_SetRxInterruptHandler:
  1788                           	opt stack 0
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           prodh	equ	0xFF4
  1794                           prodl	equ	0xFF3
  1795                           intcon	equ	0xFF2
  1796                           intcon2	equ	0xFF1
  1797                           postinc0	equ	0xFEE
  1798                           plusw0	equ	0xFEB
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           indf2	equ	0xFDF
  1803                           plusw2	equ	0xFDB
  1804                           fsr2h	equ	0xFDA
  1805                           fsr2l	equ	0xFD9
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _ACCELEROMETER_Initialize *****************
  1809 ;; Defined at:
  1810 ;;		line 4 in file "accelerometer.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1824 ;;      Params:         0       0       0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0
  1826 ;;      Temps:          2       0       0       0       0       0       0
  1827 ;;      Totals:         2       0       0       0       0       0       0
  1828 ;;Total ram usage:        2 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:   13
  1831 ;; This function calls:
  1832 ;;		_read_register
  1833 ;;		_write_register
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text12
  1840  000A26                     __ptext12:
  1841                           	opt stack 0
  1842  000A26                     _ACCELEROMETER_Initialize:
  1843                           	opt stack 17
  1844                           
  1845                           ;accelerometer.c: 6: write_register(0x2B, 0x40);
  1846                           
  1847                           ;incstack = 0
  1848  000A26  0E40               	movlw	64
  1849  000A28  6E3F               	movwf	write_register@data,c
  1850  000A2A  0E2B               	movlw	43
  1851  000A2C  ECEF  F006         	call	_write_register
  1852                           
  1853                           ;accelerometer.c: 8: _delay((unsigned long)((100)*(16000000/4000.0)));
  1854  000A30  0E03               	movlw	3
  1855  000A32  6E42               	movwf	(??_ACCELEROMETER_Initialize+1)& (0+255),c
  1856  000A34  0E08               	movlw	8
  1857  000A36  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1858  000A38  0E77               	movlw	119
  1859  000A3A                     u1777:
  1860  000A3A  2EE8               	decfsz	wreg,f,c
  1861  000A3C  D7FE               	bra	u1777
  1862  000A3E  2E41               	decfsz	??_ACCELEROMETER_Initialize& (0+255),f,c
  1863  000A40  D7FC               	bra	u1777
  1864  000A42  2E42               	decfsz	(??_ACCELEROMETER_Initialize+1)& (0+255),f,c
  1865  000A44  D7FA               	bra	u1777
  1866  000A46  F000               	nop	
  1867  000A48  0E2B               	movlw	43
  1868  000A4A  EC08  F007         	call	_read_register
  1869  000A4E  6E41               	movwf	??_ACCELEROMETER_Initialize& (0+255),c
  1870  000A50  BC41               	btfsc	??_ACCELEROMETER_Initialize,6,c
  1871  000A52  D7FA               	goto	l636
  1872                           
  1873                           ;accelerometer.c: 14: write_register(0x0E, MMA8451_RANGE_4_G);
  1874  000A54  0E01               	movlw	1
  1875  000A56  6E3F               	movwf	write_register@data,c
  1876  000A58  0E0E               	movlw	14
  1877  000A5A  ECEF  F006         	call	_write_register
  1878                           
  1879                           ;accelerometer.c: 16: write_register(0x2B, 0x02);
  1880  000A5E  0E02               	movlw	2
  1881  000A60  6E3F               	movwf	write_register@data,c
  1882  000A62  0E2B               	movlw	43
  1883  000A64  ECEF  F006         	call	_write_register
  1884                           
  1885                           ;accelerometer.c: 18: write_register(0x2D, 0x01);
  1886  000A68  0E01               	movlw	1
  1887  000A6A  6E3F               	movwf	write_register@data,c
  1888  000A6C  0E2D               	movlw	45
  1889  000A6E  ECEF  F006         	call	_write_register
  1890                           
  1891                           ;accelerometer.c: 19: write_register(0x2E, 0x01);
  1892  000A72  0E01               	movlw	1
  1893  000A74  6E3F               	movwf	write_register@data,c
  1894  000A76  0E2E               	movlw	46
  1895  000A78  ECEF  F006         	call	_write_register
  1896                           
  1897                           ;accelerometer.c: 22: write_register(0x11, 0x40);
  1898  000A7C  0E40               	movlw	64
  1899  000A7E  6E3F               	movwf	write_register@data,c
  1900  000A80  0E11               	movlw	17
  1901  000A82  ECEF  F006         	call	_write_register
  1902                           
  1903                           ;accelerometer.c: 25: write_register(0x2A, 0x01 | 0x04);
  1904  000A86  0E05               	movlw	5
  1905  000A88  6E3F               	movwf	write_register@data,c
  1906  000A8A  0E2A               	movlw	42
  1907  000A8C  ECEF  F006         	call	_write_register
  1908  000A90  0012               	return		;funcret
  1909  000A92                     __end_of_ACCELEROMETER_Initialize:
  1910                           	opt stack 0
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           prodh	equ	0xFF4
  1916                           prodl	equ	0xFF3
  1917                           intcon	equ	0xFF2
  1918                           intcon2	equ	0xFF1
  1919                           postinc0	equ	0xFEE
  1920                           plusw0	equ	0xFEB
  1921                           wreg	equ	0xFE8
  1922                           postdec1	equ	0xFE5
  1923                           fsr1l	equ	0xFE1
  1924                           indf2	equ	0xFDF
  1925                           plusw2	equ	0xFDB
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _write_register *****************
  1931 ;; Defined at:
  1932 ;;		line 29 in file "accelerometer.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  reg             1    wreg     unsigned char 
  1935 ;;  data            1   25[COMRAM] unsigned char 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  reg             1   26[COMRAM] unsigned char 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1947 ;;      Params:         1       0       0       0       0       0       0
  1948 ;;      Locals:         1       0       0       0       0       0       0
  1949 ;;      Temps:          0       0       0       0       0       0       0
  1950 ;;      Totals:         2       0       0       0       0       0       0
  1951 ;;Total ram usage:        2 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:   12
  1954 ;; This function calls:
  1955 ;;		_i2c_close
  1956 ;;		_i2c_masterWrite
  1957 ;;		_i2c_open
  1958 ;;		_i2c_setBuffer
  1959 ;; This function is called by:
  1960 ;;		_ACCELEROMETER_Initialize
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text13
  1965  000DDE                     __ptext13:
  1966                           	opt stack 0
  1967  000DDE                     _write_register:
  1968                           	opt stack 17
  1969                           
  1970                           ;incstack = 0
  1971                           ;write_register@reg stored from wreg
  1972  000DDE  6E40               	movwf	write_register@reg,c
  1973                           
  1974                           ;accelerometer.c: 30: static i2c_error_t status;
  1975                           ;accelerometer.c: 31: static uint8_t buffer[2];
  1976                           ;accelerometer.c: 34: buffer[0] = reg;
  1977  000DE0  C040  F023         	movff	write_register@reg,write_register@buffer
  1978                           
  1979                           ;accelerometer.c: 35: buffer[1] = data;
  1980  000DE4  C03F  F024         	movff	write_register@data,write_register@buffer+1
  1981                           
  1982                           ;accelerometer.c: 36: i2c_open(0x1D);
  1983  000DE8  0E1D               	movlw	29
  1984  000DEA  EC73  F003         	call	_i2c_open
  1985                           
  1986                           ;accelerometer.c: 37: i2c_setBuffer(buffer, 2);
  1987  000DEE  0E23               	movlw	low write_register@buffer
  1988  000DF0  6E3A               	movwf	i2c_setBuffer@buffer,c
  1989  000DF2  0E00               	movlw	high write_register@buffer
  1990  000DF4  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  1991  000DF6  0E00               	movlw	0
  1992  000DF8  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  1993  000DFA  0E02               	movlw	2
  1994  000DFC  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  1995  000DFE  EC85  F007         	call	_i2c_setBuffer	;wreg free
  1996                           
  1997                           ;accelerometer.c: 40: status = i2c_masterWrite();
  1998  000E02  ECB7  F008         	call	_i2c_masterWrite	;wreg free
  1999  000E06  6E17               	movwf	write_register@status,c
  2000                           
  2001                           ;accelerometer.c: 41: status = i2c_close();
  2002  000E08  EC76  F007         	call	_i2c_close	;wreg free
  2003  000E0C  6E17               	movwf	write_register@status,c
  2004  000E0E  0012               	return		;funcret
  2005  000E10                     __end_of_write_register:
  2006                           	opt stack 0
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           prodh	equ	0xFF4
  2012                           prodl	equ	0xFF3
  2013                           intcon	equ	0xFF2
  2014                           intcon2	equ	0xFF1
  2015                           postinc0	equ	0xFEE
  2016                           plusw0	equ	0xFEB
  2017                           wreg	equ	0xFE8
  2018                           postdec1	equ	0xFE5
  2019                           fsr1l	equ	0xFE1
  2020                           indf2	equ	0xFDF
  2021                           plusw2	equ	0xFDB
  2022                           fsr2h	equ	0xFDA
  2023                           fsr2l	equ	0xFD9
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _i2c_masterWrite *****************
  2027 ;; Defined at:
  2028 ;;		line 264 in file "mcc_generated_files/drivers/i2c_master.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      enum E6837
  2035 ;; Registers used:
  2036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2042 ;;      Params:         0       0       0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0       0       0
  2044 ;;      Temps:          0       0       0       0       0       0       0
  2045 ;;      Totals:         0       0       0       0       0       0       0
  2046 ;;Total ram usage:        0 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:   11
  2049 ;; This function calls:
  2050 ;;		_i2c_masterOperation
  2051 ;; This function is called by:
  2052 ;;		_write_register
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text14
  2057  00116E                     __ptext14:
  2058                           	opt stack 0
  2059  00116E                     _i2c_masterWrite:
  2060                           	opt stack 17
  2061                           
  2062                           ;i2c_master.c: 266: return i2c_masterOperation(OPERATIONWRITE);
  2063                           
  2064                           ;incstack = 0
  2065  00116E  0E02               	movlw	2
  2066  001170  EC43  F006         	call	_i2c_masterOperation
  2067  001174  0012               	return	
  2068  001176                     __end_of_i2c_masterWrite:
  2069                           	opt stack 0
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           tblptrl	equ	0xFF6
  2073                           tablat	equ	0xFF5
  2074                           prodh	equ	0xFF4
  2075                           prodl	equ	0xFF3
  2076                           intcon	equ	0xFF2
  2077                           intcon2	equ	0xFF1
  2078                           postinc0	equ	0xFEE
  2079                           plusw0	equ	0xFEB
  2080                           wreg	equ	0xFE8
  2081                           postdec1	equ	0xFE5
  2082                           fsr1l	equ	0xFE1
  2083                           indf2	equ	0xFDF
  2084                           plusw2	equ	0xFDB
  2085                           fsr2h	equ	0xFDA
  2086                           fsr2l	equ	0xFD9
  2087                           status	equ	0xFD8
  2088                           
  2089 ;; *************** function _read_register *****************
  2090 ;; Defined at:
  2091 ;;		line 46 in file "accelerometer.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;  reg             1    wreg     unsigned char 
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;  reg             1   26[COMRAM] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      unsigned char 
  2098 ;; Registers used:
  2099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2105 ;;      Params:         0       0       0       0       0       0       0
  2106 ;;      Locals:         1       0       0       0       0       0       0
  2107 ;;      Temps:          0       0       0       0       0       0       0
  2108 ;;      Totals:         1       0       0       0       0       0       0
  2109 ;;Total ram usage:        1 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:   12
  2112 ;; This function calls:
  2113 ;;		_i2c_close
  2114 ;;		_i2c_masterAccelRead
  2115 ;;		_i2c_open
  2116 ;;		_i2c_setBuffer
  2117 ;; This function is called by:
  2118 ;;		_ACCELEROMETER_Initialize
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text15
  2123  000E10                     __ptext15:
  2124                           	opt stack 0
  2125  000E10                     _read_register:
  2126                           	opt stack 17
  2127                           
  2128                           ;incstack = 0
  2129                           ;read_register@reg stored from wreg
  2130  000E10  6E40               	movwf	read_register@reg,c
  2131                           
  2132                           ;accelerometer.c: 47: static i2c_error_t status;
  2133                           ;accelerometer.c: 48: static volatile uint8_t receivebuffer[1];
  2134                           ;accelerometer.c: 51: i2c_open(0x1D);
  2135  000E12  0E1D               	movlw	29
  2136  000E14  EC73  F003         	call	_i2c_open
  2137                           
  2138                           ;accelerometer.c: 55: i2c_setBuffer(receivebuffer, 1);
  2139  000E18  0E25               	movlw	low read_register@receivebuffer
  2140  000E1A  6E3A               	movwf	i2c_setBuffer@buffer,c
  2141  000E1C  0E00               	movlw	high read_register@receivebuffer
  2142  000E1E  6E3B               	movwf	i2c_setBuffer@buffer+1,c
  2143  000E20  0E00               	movlw	0
  2144  000E22  6E3D               	movwf	i2c_setBuffer@bufferSize+1,c
  2145  000E24  0E01               	movlw	1
  2146  000E26  6E3C               	movwf	i2c_setBuffer@bufferSize,c
  2147  000E28  EC85  F007         	call	_i2c_setBuffer	;wreg free
  2148                           
  2149                           ;accelerometer.c: 58: status = i2c_masterAccelRead(reg);
  2150  000E2C  5040               	movf	read_register@reg,w,c
  2151  000E2E  EC49  F008         	call	_i2c_masterAccelRead
  2152  000E32  6E16               	movwf	read_register@status,c
  2153                           
  2154                           ;accelerometer.c: 61: status = i2c_close();
  2155  000E34  EC76  F007         	call	_i2c_close	;wreg free
  2156  000E38  6E16               	movwf	read_register@status,c
  2157                           
  2158                           ;accelerometer.c: 63: return receivebuffer[0];
  2159  000E3A  5025               	movf	read_register@receivebuffer,w,c	;volatile
  2160  000E3C  0012               	return	
  2161  000E3E                     __end_of_read_register:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           intcon	equ	0xFF2
  2170                           intcon2	equ	0xFF1
  2171                           postinc0	equ	0xFEE
  2172                           plusw0	equ	0xFEB
  2173                           wreg	equ	0xFE8
  2174                           postdec1	equ	0xFE5
  2175                           fsr1l	equ	0xFE1
  2176                           indf2	equ	0xFDF
  2177                           plusw2	equ	0xFDB
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _i2c_setBuffer *****************
  2183 ;; Defined at:
  2184 ;;		line 192 in file "mcc_generated_files/drivers/i2c_master.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  buffer          2   20[COMRAM] PTR void 
  2187 ;;		 -> read_xyzvalues@readbuffer(6), read_register@receivebuffer(1), write_register@buffer(2), 
  2188 ;;  bufferSize      2   22[COMRAM] unsigned int 
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;		None
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  1    wreg      void 
  2193 ;; Registers used:
  2194 ;;		wreg, status,2, status,0
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2200 ;;      Params:         4       0       0       0       0       0       0
  2201 ;;      Locals:         0       0       0       0       0       0       0
  2202 ;;      Temps:          0       0       0       0       0       0       0
  2203 ;;      Totals:         4       0       0       0       0       0       0
  2204 ;;Total ram usage:        4 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; Hardware stack levels required when called:    5
  2207 ;; This function calls:
  2208 ;;		Nothing
  2209 ;; This function is called by:
  2210 ;;		_write_register
  2211 ;;		_read_register
  2212 ;;		_read_xyzvalues
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text16
  2217  000F0A                     __ptext16:
  2218                           	opt stack 0
  2219  000F0A                     _i2c_setBuffer:
  2220                           	opt stack 24
  2221                           
  2222                           ;i2c_master.c: 194: if(i2c_status.bufferFree)
  2223                           
  2224                           ;incstack = 0
  2225  000F0A  0100               	movlb	0	; () banked
  2226  000F0C  A5B6               	btfss	_i2c_status& (0+255),2,b
  2227  000F0E  0012               	return	
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;i2c_master.c: 195: {
  2231                           ;i2c_master.c: 196: i2c_status.data_ptr = buffer;
  2232  000F10  C03A  F0B8         	movff	i2c_setBuffer@buffer,_i2c_status+2
  2233  000F14  C03B  F0B9         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;i2c_master.c: 197: i2c_status.data_length = bufferSize;
  2237  000F18  C03C  F0BA         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  2238  000F1C  C03D  F0BB         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;i2c_master.c: 198: i2c_status.bufferFree = 0;
  2242  000F20  95B6               	bcf	_i2c_status& (0+255),2,b
  2243  000F22  0012               	return	
  2244  000F24                     __end_of_i2c_setBuffer:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           prodh	equ	0xFF4
  2251                           prodl	equ	0xFF3
  2252                           intcon	equ	0xFF2
  2253                           intcon2	equ	0xFF1
  2254                           postinc0	equ	0xFEE
  2255                           plusw0	equ	0xFEB
  2256                           wreg	equ	0xFE8
  2257                           postdec1	equ	0xFE5
  2258                           fsr1l	equ	0xFE1
  2259                           indf2	equ	0xFDF
  2260                           plusw2	equ	0xFDB
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _i2c_open *****************
  2266 ;; Defined at:
  2267 ;;		line 124 in file "mcc_generated_files/drivers/i2c_master.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  address         1    wreg     unsigned char 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  address         1   23[COMRAM] unsigned char 
  2272 ;;  ret             1   22[COMRAM] enum E6837
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      enum E6837
  2275 ;; Registers used:
  2276 ;;		wreg, status,2, status,0, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2282 ;;      Params:         0       0       0       0       0       0       0
  2283 ;;      Locals:         2       0       0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0
  2285 ;;      Totals:         2       0       0       0       0       0       0
  2286 ;;Total ram usage:        2 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    6
  2289 ;; This function calls:
  2290 ;;		_i2c1_driver_open
  2291 ;;		_i2c1_driver_setBusCollisionISR
  2292 ;;		_i2c1_driver_setI2cISR
  2293 ;;		_mssp1_clearIRQ
  2294 ;; This function is called by:
  2295 ;;		_write_register
  2296 ;;		_read_register
  2297 ;;		_read_xyzvalues
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text17
  2302  0006E6                     __ptext17:
  2303                           	opt stack 0
  2304  0006E6                     _i2c_open:
  2305                           	opt stack 23
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;incstack = 0
  2309                           ;i2c_open@address stored from wreg
  2310  0006E6  6E3D               	movwf	i2c_open@address,c
  2311                           
  2312                           ;i2c_master.c: 126: i2c_error_t ret = I2C_BUSY;
  2313  0006E8  0E01               	movlw	1
  2314  0006EA  6E3C               	movwf	i2c_open@ret,c
  2315                           
  2316                           ;i2c_master.c: 128: if(!i2c_status.inUse)
  2317  0006EC  0100               	movlb	0	; () banked
  2318  0006EE  B3B6               	btfsc	_i2c_status& (0+255),1,b
  2319  0006F0  0012               	return	
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;i2c_master.c: 129: {
  2323                           ;i2c_master.c: 130: i2c_status.address = address;
  2324  0006F2  C03D  F0B7         	movff	i2c_open@address,_i2c_status+1
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;i2c_master.c: 131: i2c_status.busy = 0;
  2328  0006F6  91B6               	bcf	_i2c_status& (0+255),0,b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;i2c_master.c: 132: i2c_status.inUse = 1;
  2332  0006F8  83B6               	bsf	_i2c_status& (0+255),1,b
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;i2c_master.c: 133: i2c_status.addressNACKCheck = 0;
  2336  0006FA  97B6               	bcf	_i2c_status& (0+255),3,b
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;i2c_master.c: 134: i2c_status.state = I2C_RESET;
  2340  0006FC  0E0E               	movlw	14
  2341  0006FE  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;i2c_master.c: 135: i2c_status.time_out_value = 500;
  2345  000700  0E01               	movlw	1
  2346  000702  6FBF               	movwf	(_i2c_status+9)& (0+255),b
  2347  000704  0EF4               	movlw	244
  2348  000706  6FBE               	movwf	(_i2c_status+8)& (0+255),b
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;i2c_master.c: 136: i2c_status.bufferFree = 1;
  2352  000708  85B6               	bsf	_i2c_status& (0+255),2,b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  2356  00070A  0E64               	movlw	low _returnStop
  2357  00070C  6FC2               	movwf	(_i2c_status+12)& (0+255),b
  2358  00070E  0E11               	movlw	high _returnStop
  2359  000710  6FC3               	movwf	(_i2c_status+13)& (0+255),b
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  2363  000712  0E00               	movlw	0
  2364  000714  6FCE               	movwf	(_i2c_status+24)& (0+255),b
  2365  000716  0E00               	movlw	0
  2366  000718  6FCF               	movwf	(_i2c_status+25)& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;i2c_master.c: 141: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  2370  00071A  0E64               	movlw	low _returnStop
  2371  00071C  6FC4               	movwf	(_i2c_status+14)& (0+255),b
  2372  00071E  0E11               	movlw	high _returnStop
  2373  000720  6FC5               	movwf	(_i2c_status+15)& (0+255),b
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;i2c_master.c: 142: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  2377  000722  0E00               	movlw	0
  2378  000724  6FD0               	movwf	(_i2c_status+26)& (0+255),b
  2379  000726  0E00               	movlw	0
  2380  000728  6FD1               	movwf	(_i2c_status+27)& (0+255),b
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;i2c_master.c: 143: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  2384  00072A  0E64               	movlw	low _returnStop
  2385  00072C  6FC6               	movwf	(_i2c_status+16)& (0+255),b
  2386  00072E  0E11               	movlw	high _returnStop
  2387  000730  6FC7               	movwf	(_i2c_status+17)& (0+255),b
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;i2c_master.c: 144: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  2391  000732  0E00               	movlw	0
  2392  000734  6FD2               	movwf	(_i2c_status+28)& (0+255),b
  2393  000736  0E00               	movlw	0
  2394  000738  6FD3               	movwf	(_i2c_status+29)& (0+255),b
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;i2c_master.c: 145: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  2398  00073A  0E64               	movlw	low _returnStop
  2399  00073C  6FC8               	movwf	(_i2c_status+18)& (0+255),b
  2400  00073E  0E11               	movlw	high _returnStop
  2401  000740  6FC9               	movwf	(_i2c_status+19)& (0+255),b
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;i2c_master.c: 146: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  2405  000742  0E00               	movlw	0
  2406  000744  6FD4               	movwf	(_i2c_status+30)& (0+255),b
  2407  000746  0E00               	movlw	0
  2408  000748  6FD5               	movwf	(_i2c_status+31)& (0+255),b
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;i2c_master.c: 147: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  2412  00074A  0E5A               	movlw	low _returnReset
  2413  00074C  6FCA               	movwf	(_i2c_status+20)& (0+255),b
  2414  00074E  0E11               	movlw	high _returnReset
  2415  000750  6FCB               	movwf	(_i2c_status+21)& (0+255),b
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;i2c_master.c: 148: i2c_status.callbackPayload[i2c_timeOut] = (0);
  2419  000752  0E00               	movlw	0
  2420  000754  6FD6               	movwf	(_i2c_status+32)& (0+255),b
  2421  000756  0E00               	movlw	0
  2422  000758  6FD7               	movwf	(_i2c_status+33)& (0+255),b
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;i2c_master.c: 150: i2c1_driver_open();
  2426  00075A  EC9F  F007         	call	_i2c1_driver_open	;wreg free
  2427                           
  2428                           ;i2c_master.c: 151: mssp1_clearIRQ();
  2429  00075E  ECFE  F008         	call	_mssp1_clearIRQ	;wreg free
  2430                           
  2431                           ;i2c_master.c: 153: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  2432  000762  0ED6               	movlw	low _i2c_busCollisionISR
  2433  000764  6E3A               	movwf	i2c1_driver_setBusCollisionISR@f,c
  2434  000766  0E11               	movlw	high _i2c_busCollisionISR
  2435  000768  6E3B               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  2436  00076A  ECA8  F008         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  2437                           
  2438                           ;i2c_master.c: 154: i2c1_driver_setI2cISR(i2c_ISR);
  2439  00076E  0E9E               	movlw	low _i2c_ISR
  2440  000770  6E3A               	movwf	i2c1_driver_setI2cISR@f,c
  2441  000772  0E0B               	movlw	high _i2c_ISR
  2442  000774  6E3B               	movwf	i2c1_driver_setI2cISR@f+1,c
  2443  000776  ECA3  F008         	call	_i2c1_driver_setI2cISR	;wreg free
  2444                           
  2445                           ;i2c_master.c: 159: ret = I2C_NOERR;
  2446  00077A  0E00               	movlw	0
  2447  00077C  6E3C               	movwf	i2c_open@ret,c
  2448  00077E  0012               	return	
  2449  000780                     __end_of_i2c_open:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           intcon	equ	0xFF2
  2458                           intcon2	equ	0xFF1
  2459                           postinc0	equ	0xFEE
  2460                           plusw0	equ	0xFEB
  2461                           wreg	equ	0xFE8
  2462                           postdec1	equ	0xFE5
  2463                           fsr1l	equ	0xFE1
  2464                           indf2	equ	0xFDF
  2465                           plusw2	equ	0xFDB
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _i2c1_driver_setI2cISR *****************
  2471 ;; Defined at:
  2472 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  f               2   20[COMRAM] PTR FTN()void 
  2475 ;;		 -> i2c_ISR(1), 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;		None
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2, status,0
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2487 ;;      Params:         2       0       0       0       0       0       0
  2488 ;;      Locals:         0       0       0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0
  2490 ;;      Totals:         2       0       0       0       0       0       0
  2491 ;;Total ram usage:        2 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    5
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		_i2c_open
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text18
  2502  001146                     __ptext18:
  2503                           	opt stack 0
  2504  001146                     _i2c1_driver_setI2cISR:
  2505                           	opt stack 23
  2506                           
  2507                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  2508                           
  2509                           ;incstack = 0
  2510  001146  C03A  F011         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  2511  00114A  C03B  F012         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  2512  00114E  0012               	return		;funcret
  2513  001150                     __end_of_i2c1_driver_setI2cISR:
  2514                           	opt stack 0
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           prodh	equ	0xFF4
  2520                           prodl	equ	0xFF3
  2521                           intcon	equ	0xFF2
  2522                           intcon2	equ	0xFF1
  2523                           postinc0	equ	0xFEE
  2524                           plusw0	equ	0xFEB
  2525                           wreg	equ	0xFE8
  2526                           postdec1	equ	0xFE5
  2527                           fsr1l	equ	0xFE1
  2528                           indf2	equ	0xFDF
  2529                           plusw2	equ	0xFDB
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  2535 ;; Defined at:
  2536 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  f               2   20[COMRAM] PTR FTN()void 
  2539 ;;		 -> i2c_busCollisionISR(1), 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;		None
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  1    wreg      void 
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2551 ;;      Params:         2       0       0       0       0       0       0
  2552 ;;      Locals:         0       0       0       0       0       0       0
  2553 ;;      Temps:          0       0       0       0       0       0       0
  2554 ;;      Totals:         2       0       0       0       0       0       0
  2555 ;;Total ram usage:        2 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    5
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		_i2c_open
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text19
  2566  001150                     __ptext19:
  2567                           	opt stack 0
  2568  001150                     _i2c1_driver_setBusCollisionISR:
  2569                           	opt stack 23
  2570                           
  2571                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  2572                           
  2573                           ;incstack = 0
  2574  001150  C03A  F013         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  2575  001154  C03B  F014         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  2576  001158  0012               	return		;funcret
  2577  00115A                     __end_of_i2c1_driver_setBusCollisionISR:
  2578                           	opt stack 0
  2579                           tblptru	equ	0xFF8
  2580                           tblptrh	equ	0xFF7
  2581                           tblptrl	equ	0xFF6
  2582                           tablat	equ	0xFF5
  2583                           prodh	equ	0xFF4
  2584                           prodl	equ	0xFF3
  2585                           intcon	equ	0xFF2
  2586                           intcon2	equ	0xFF1
  2587                           postinc0	equ	0xFEE
  2588                           plusw0	equ	0xFEB
  2589                           wreg	equ	0xFE8
  2590                           postdec1	equ	0xFE5
  2591                           fsr1l	equ	0xFE1
  2592                           indf2	equ	0xFDF
  2593                           plusw2	equ	0xFDB
  2594                           fsr2h	equ	0xFDA
  2595                           fsr2l	equ	0xFD9
  2596                           status	equ	0xFD8
  2597                           
  2598 ;; *************** function _i2c1_driver_open *****************
  2599 ;; Defined at:
  2600 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;		None               void
  2607 ;; Registers used:
  2608 ;;		wreg, status,2
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2614 ;;      Params:         0       0       0       0       0       0       0
  2615 ;;      Locals:         0       0       0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0
  2617 ;;      Totals:         0       0       0       0       0       0       0
  2618 ;;Total ram usage:        0 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    5
  2621 ;; This function calls:
  2622 ;;		Nothing
  2623 ;; This function is called by:
  2624 ;;		_i2c_open
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text20
  2629  000F3E                     __ptext20:
  2630                           	opt stack 0
  2631  000F3E                     _i2c1_driver_open:
  2632                           	opt stack 23
  2633                           
  2634                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  2635                           
  2636                           ;incstack = 0
  2637  000F3E  BAC6               	btfsc	4038,5,c	;volatile
  2638  000F40  0012               	return	
  2639                           
  2640                           ;i2c1_driver.c: 86: {
  2641                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  2642  000F42  0E00               	movlw	0
  2643  000F44  6EC7               	movwf	4039,c	;volatile
  2644                           
  2645                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  2646  000F46  0E28               	movlw	40
  2647  000F48  6EC6               	movwf	4038,c	;volatile
  2648                           
  2649                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  2650  000F4A  0E00               	movlw	0
  2651  000F4C  6EC5               	movwf	4037,c	;volatile
  2652                           
  2653                           ;i2c1_driver.c: 90: SSP1ADD = 0x27;
  2654  000F4E  0E27               	movlw	39
  2655  000F50  6EC8               	movwf	4040,c	;volatile
  2656                           
  2657                           ;i2c1_driver.c: 93: else
  2658                           ;i2c1_driver.c: 94: return 0;
  2659                           ;	Return value of _i2c1_driver_open is never used
  2660                           
  2661                           ;i2c1_driver.c: 92: }
  2662                           
  2663                           ;i2c1_driver.c: 91: return 1;
  2664                           ;	Return value of _i2c1_driver_open is never used
  2665  000F52  0012               	return	
  2666  000F54                     __end_of_i2c1_driver_open:
  2667                           	opt stack 0
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           prodh	equ	0xFF4
  2673                           prodl	equ	0xFF3
  2674                           intcon	equ	0xFF2
  2675                           intcon2	equ	0xFF1
  2676                           postinc0	equ	0xFEE
  2677                           plusw0	equ	0xFEB
  2678                           wreg	equ	0xFE8
  2679                           postdec1	equ	0xFE5
  2680                           fsr1l	equ	0xFE1
  2681                           indf2	equ	0xFDF
  2682                           plusw2	equ	0xFDB
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _i2c_masterAccelRead *****************
  2688 ;; Defined at:
  2689 ;;		line 249 in file "mcc_generated_files/drivers/i2c_master.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  reg             1    wreg     unsigned char 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  reg             1   25[COMRAM] unsigned char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      enum E6837
  2696 ;; Registers used:
  2697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2703 ;;      Params:         0       0       0       0       0       0       0
  2704 ;;      Locals:         1       0       0       0       0       0       0
  2705 ;;      Temps:          0       0       0       0       0       0       0
  2706 ;;      Totals:         1       0       0       0       0       0       0
  2707 ;;Total ram usage:        1 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:   11
  2710 ;; This function calls:
  2711 ;;		_i2c_masterOperation
  2712 ;; This function is called by:
  2713 ;;		_read_register
  2714 ;;		_read_xyzvalues
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text21
  2719  001092                     __ptext21:
  2720                           	opt stack 0
  2721  001092                     _i2c_masterAccelRead:
  2722                           	opt stack 18
  2723                           
  2724                           ;incstack = 0
  2725                           ;i2c_masterAccelRead@reg stored from wreg
  2726  001092  6E3F               	movwf	i2c_masterAccelRead@reg,c
  2727                           
  2728                           ;i2c_master.c: 252: i2c_status.register_address = reg;
  2729  001094  C03F  F0DA         	movff	i2c_masterAccelRead@reg,_i2c_status+36
  2730                           
  2731                           ;i2c_master.c: 254: return i2c_masterOperation(OPERATIONACCELREAD);
  2732  001098  0E01               	movlw	1
  2733  00109A  EC43  F006         	call	_i2c_masterOperation
  2734  00109E  0012               	return	
  2735  0010A0                     __end_of_i2c_masterAccelRead:
  2736                           	opt stack 0
  2737                           tblptru	equ	0xFF8
  2738                           tblptrh	equ	0xFF7
  2739                           tblptrl	equ	0xFF6
  2740                           tablat	equ	0xFF5
  2741                           prodh	equ	0xFF4
  2742                           prodl	equ	0xFF3
  2743                           intcon	equ	0xFF2
  2744                           intcon2	equ	0xFF1
  2745                           postinc0	equ	0xFEE
  2746                           plusw0	equ	0xFEB
  2747                           wreg	equ	0xFE8
  2748                           postdec1	equ	0xFE5
  2749                           fsr1l	equ	0xFE1
  2750                           indf2	equ	0xFDF
  2751                           plusw2	equ	0xFDB
  2752                           fsr2h	equ	0xFDA
  2753                           fsr2l	equ	0xFD9
  2754                           status	equ	0xFD8
  2755                           
  2756 ;; *************** function _i2c_masterOperation *****************
  2757 ;; Defined at:
  2758 ;;		line 210 in file "mcc_generated_files/drivers/i2c_master.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  operation       1    wreg     enum E6863
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  operation       1   23[COMRAM] enum E6863
  2763 ;;  ret             1   24[COMRAM] enum E6837
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      enum E6837
  2766 ;; Registers used:
  2767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2773 ;;      Params:         0       0       0       0       0       0       0
  2774 ;;      Locals:         2       0       0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0
  2776 ;;      Totals:         2       0       0       0       0       0       0
  2777 ;;Total ram usage:        2 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:   10
  2780 ;; This function calls:
  2781 ;;		_i2c1_driver_start
  2782 ;;		_i2c_poller
  2783 ;;		_mssp1_IRQisEnabled
  2784 ;; This function is called by:
  2785 ;;		_i2c_masterAccelRead
  2786 ;;		_i2c_masterWrite
  2787 ;;		_i2c_masterRead
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text22
  2792  000C86                     __ptext22:
  2793                           	opt stack 0
  2794  000C86                     _i2c_masterOperation:
  2795                           	opt stack 18
  2796                           
  2797                           ;incstack = 0
  2798                           ;i2c_masterOperation@operation stored from wreg
  2799  000C86  6E3D               	movwf	i2c_masterOperation@operation,c
  2800                           
  2801                           ;i2c_master.c: 212: i2c_error_t ret = I2C_BUSY;
  2802  000C88  0E01               	movlw	1
  2803  000C8A  6E3E               	movwf	i2c_masterOperation@ret,c
  2804                           
  2805                           ;i2c_master.c: 213: if(!i2c_status.busy)
  2806  000C8C  0100               	movlb	0	; () banked
  2807  000C8E  B1B6               	btfsc	_i2c_status& (0+255),0,b
  2808  000C90  D01C               	goto	l100
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;i2c_master.c: 214: {
  2812                           ;i2c_master.c: 215: i2c_status.busy = 1;
  2813  000C92  81B6               	bsf	_i2c_status& (0+255),0,b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;i2c_master.c: 216: ret = I2C_NOERR;
  2817  000C94  0E00               	movlw	0
  2818  000C96  6E3E               	movwf	i2c_masterOperation@ret,c
  2819                           
  2820                           ;i2c_master.c: 218: switch(operation) {
  2821  000C98  D007               	goto	l95
  2822  000C9A                     
  2823                           ; BSR set to: 0
  2824                           ;i2c_master.c: 220: i2c_status.state = I2C_SEND_ADR_READ;
  2825                           
  2826                           ; BSR set to: 0
  2827  000C9A  0E01               	movlw	1
  2828  000C9C  D003               	goto	L2
  2829  000C9E                     
  2830                           ; BSR set to: 0
  2831                           ;i2c_master.c: 224: i2c_status.state = I2C_SEND_INITIAL_READ;
  2832                           
  2833                           ; BSR set to: 0
  2834  000C9E  0E10               	movlw	16
  2835  000CA0  D001               	goto	L2
  2836  000CA2                     
  2837                           ; BSR set to: 0
  2838                           ;i2c_master.c: 228: i2c_status.state = I2C_SEND_ADR_WRITE;
  2839                           
  2840                           ; BSR set to: 0
  2841  000CA2  0E02               	movlw	2
  2842  000CA4                     L2:
  2843  000CA4  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;i2c_master.c: 230: }
  2847                           
  2848                           ;i2c_master.c: 229: break;
  2849  000CA6  D00A               	goto	l97
  2850  000CA8                     l95:
  2851                           
  2852                           ; BSR set to: 0
  2853                           
  2854                           ; BSR set to: 0
  2855  000CA8  503D               	movf	i2c_masterOperation@operation,w,c
  2856                           
  2857                           ; Switch size 1, requested type "space"
  2858                           ; Number of cases is 3, Range of values is 0 to 2
  2859                           ; switch strategies available:
  2860                           ; Name         Instructions Cycles
  2861                           ; simple_byte           10     6 (average)
  2862                           ;	Chosen strategy is simple_byte
  2863  000CAA  0A00               	xorlw	0	; case 0
  2864  000CAC  B4D8               	btfsc	status,2,c
  2865  000CAE  D7F5               	goto	l96
  2866  000CB0  0A01               	xorlw	1	; case 1
  2867  000CB2  B4D8               	btfsc	status,2,c
  2868  000CB4  D7F4               	goto	l98
  2869  000CB6  0A03               	xorlw	3	; case 2
  2870  000CB8  B4D8               	btfsc	status,2,c
  2871  000CBA  D7F3               	goto	l99
  2872  000CBC                     l97:
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;i2c_master.c: 241: i2c1_driver_start();
  2876                           
  2877                           ; BSR set to: 0
  2878  000CBC  ECFA  F008         	call	_i2c1_driver_start	;wreg free
  2879                           
  2880                           ;i2c_master.c: 243: if(! mssp1_IRQisEnabled())
  2881  000CC0  EC1A  F008         	call	_mssp1_IRQisEnabled	;wreg free
  2882  000CC4  A0D8               	btfss	status,0,c
  2883                           
  2884                           ;i2c_master.c: 244: i2c_poller();
  2885  000CC6  EC92  F007         	call	_i2c_poller	;wreg free
  2886  000CCA                     l100:
  2887                           
  2888                           ;i2c_master.c: 245: }
  2889                           ;i2c_master.c: 246: return ret;
  2890  000CCA  503E               	movf	i2c_masterOperation@ret,w,c
  2891  000CCC  0012               	return	
  2892  000CCE                     __end_of_i2c_masterOperation:
  2893                           	opt stack 0
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           intcon	equ	0xFF2
  2901                           intcon2	equ	0xFF1
  2902                           postinc0	equ	0xFEE
  2903                           plusw0	equ	0xFEB
  2904                           wreg	equ	0xFE8
  2905                           postdec1	equ	0xFE5
  2906                           fsr1l	equ	0xFE1
  2907                           indf2	equ	0xFDF
  2908                           plusw2	equ	0xFDB
  2909                           fsr2h	equ	0xFDA
  2910                           fsr2l	equ	0xFD9
  2911                           status	equ	0xFD8
  2912                           
  2913 ;; *************** function _mssp1_IRQisEnabled *****************
  2914 ;; Defined at:
  2915 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;		None
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;		None
  2920 ;; Return value:  Size  Location     Type
  2921 ;;		None               void
  2922 ;; Registers used:
  2923 ;;		wreg, status,0
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2929 ;;      Params:         0       0       0       0       0       0       0
  2930 ;;      Locals:         0       0       0       0       0       0       0
  2931 ;;      Temps:          1       0       0       0       0       0       0
  2932 ;;      Totals:         1       0       0       0       0       0       0
  2933 ;;Total ram usage:        1 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    5
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_i2c_masterOperation
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text23
  2944  001034                     __ptext23:
  2945                           	opt stack 0
  2946  001034                     _mssp1_IRQisEnabled:
  2947                           	opt stack 22
  2948                           
  2949                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
  2950                           
  2951                           ;incstack = 0
  2952  001034  A69D               	btfss	3997,3,c	;volatile
  2953  001036  D003               	goto	u1280
  2954  001038  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2955  00103A  2A3A               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  2956  00103C  D001               	goto	u1288
  2957  00103E                     u1280:
  2958  00103E  6A3A               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2959  001040                     u1288:
  2960  001040  303A               	rrcf	??_mssp1_IRQisEnabled,w,c
  2961  001042  0012               	return	
  2962  001044                     __end_of_mssp1_IRQisEnabled:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodh	equ	0xFF4
  2969                           prodl	equ	0xFF3
  2970                           intcon	equ	0xFF2
  2971                           intcon2	equ	0xFF1
  2972                           postinc0	equ	0xFEE
  2973                           plusw0	equ	0xFEB
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           plusw2	equ	0xFDB
  2979                           fsr2h	equ	0xFDA
  2980                           fsr2l	equ	0xFD9
  2981                           status	equ	0xFD8
  2982                           
  2983 ;; *************** function _i2c_poller *****************
  2984 ;; Defined at:
  2985 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;		None
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;		None
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  1    wreg      void 
  2992 ;; Registers used:
  2993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2999 ;;      Params:         0       0       0       0       0       0       0
  3000 ;;      Locals:         0       0       0       0       0       0       0
  3001 ;;      Temps:          0       0       0       0       0       0       0
  3002 ;;      Totals:         0       0       0       0       0       0       0
  3003 ;;Total ram usage:        0 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    9
  3006 ;; This function calls:
  3007 ;;		_i2c_ISR
  3008 ;;		_mssp1_waitForEvent
  3009 ;; This function is called by:
  3010 ;;		_i2c_masterOperation
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text24
  3015  000F24                     __ptext24:
  3016                           	opt stack 0
  3017  000F24                     _i2c_poller:
  3018                           	opt stack 18
  3019                           
  3020                           ;i2c_master.c: 274: while(i2c_status.busy)
  3021                           
  3022                           ;incstack = 0
  3023  000F24  D008               	goto	l113
  3024  000F26                     
  3025                           ;i2c_master.c: 275: {
  3026                           ;i2c_master.c: 276: mssp1_waitForEvent((0));
  3027  000F26  0E00               	movlw	0
  3028  000F28  6E3A               	movwf	mssp1_waitForEvent@timeout,c
  3029  000F2A  0E00               	movlw	0
  3030  000F2C  6E3B               	movwf	mssp1_waitForEvent@timeout+1,c
  3031  000F2E  ECFF  F007         	call	_mssp1_waitForEvent	;wreg free
  3032                           
  3033                           ;i2c_master.c: 277: i2c_ISR();
  3034  000F32  ECCF  F005         	call	_i2c_ISR	;wreg free
  3035  000F36                     l113:
  3036  000F36  0100               	movlb	0	; () banked
  3037  000F38  A1B6               	btfss	_i2c_status& (0+255),0,b
  3038  000F3A  0012               	return	
  3039  000F3C  D7F4               	goto	l114
  3040  000F3E                     __end_of_i2c_poller:
  3041                           	opt stack 0
  3042                           tblptru	equ	0xFF8
  3043                           tblptrh	equ	0xFF7
  3044                           tblptrl	equ	0xFF6
  3045                           tablat	equ	0xFF5
  3046                           prodh	equ	0xFF4
  3047                           prodl	equ	0xFF3
  3048                           intcon	equ	0xFF2
  3049                           intcon2	equ	0xFF1
  3050                           postinc0	equ	0xFEE
  3051                           plusw0	equ	0xFEB
  3052                           wreg	equ	0xFE8
  3053                           postdec1	equ	0xFE5
  3054                           fsr1l	equ	0xFE1
  3055                           indf2	equ	0xFDF
  3056                           plusw2	equ	0xFDB
  3057                           fsr2h	equ	0xFDA
  3058                           fsr2l	equ	0xFD9
  3059                           status	equ	0xFD8
  3060                           
  3061 ;; *************** function _mssp1_waitForEvent *****************
  3062 ;; Defined at:
  3063 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  timeout         2   20[COMRAM] PTR unsigned int 
  3066 ;;		 -> NULL(0), 
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      void 
  3071 ;; Registers used:
  3072 ;;		wreg
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3078 ;;      Params:         2       0       0       0       0       0       0
  3079 ;;      Locals:         0       0       0       0       0       0       0
  3080 ;;      Temps:          0       0       0       0       0       0       0
  3081 ;;      Totals:         2       0       0       0       0       0       0
  3082 ;;Total ram usage:        2 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    5
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_i2c_poller
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text25
  3093  000FFE                     __ptext25:
  3094                           	opt stack 0
  3095  000FFE                     _mssp1_waitForEvent:
  3096                           	opt stack 21
  3097                           
  3098                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;incstack = 0
  3102  000FFE  B69E               	btfsc	3998,3,c	;volatile
  3103  001000  0012               	return	
  3104  001002                     u1230:
  3105                           
  3106                           ;i2c1_driver.c: 76: {
  3107                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
  3108                           
  3109                           ;i2c1_driver.c: 74: {
  3110                           ;i2c1_driver.c: 75: while(1)
  3111  001002  B69E               	btfsc	3998,3,c	;volatile
  3112  001004  0012               	return	
  3113                           
  3114                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3115  001006  0E85               	movlw	133
  3116  001008                     u1787:
  3117  001008  2EE8               	decfsz	wreg,f,c
  3118  00100A  D7FE               	bra	u1787
  3119  00100C  F000               	nop	
  3120  00100E  D7F9               	goto	u1230
  3121  001010                     __end_of_mssp1_waitForEvent:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           intcon2	equ	0xFF1
  3131                           postinc0	equ	0xFEE
  3132                           plusw0	equ	0xFEB
  3133                           wreg	equ	0xFE8
  3134                           postdec1	equ	0xFE5
  3135                           fsr1l	equ	0xFE1
  3136                           indf2	equ	0xFDF
  3137                           plusw2	equ	0xFDB
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _i2c_ISR *****************
  3143 ;; Defined at:
  3144 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  1    wreg      void 
  3151 ;; Registers used:
  3152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3158 ;;      Params:         0       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0
  3161 ;;      Totals:         0       0       0       0       0       0       0
  3162 ;;Total ram usage:        0 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    8
  3165 ;; This function calls:
  3166 ;;		_do_I2C_DO_ACK
  3167 ;;		_do_I2C_DO_ADDRESS_NACK
  3168 ;;		_do_I2C_DO_NACK_RESTART
  3169 ;;		_do_I2C_DO_NACK_STOP
  3170 ;;		_do_I2C_IDLE
  3171 ;;		_do_I2C_RCEN
  3172 ;;		_do_I2C_RESET
  3173 ;;		_do_I2C_RX
  3174 ;;		_do_I2C_SEND_ADR_READ
  3175 ;;		_do_I2C_SEND_ADR_WRITE
  3176 ;;		_do_I2C_SEND_INITIAL_READ
  3177 ;;		_do_I2C_SEND_RESTART
  3178 ;;		_do_I2C_SEND_RESTART_READ
  3179 ;;		_do_I2C_SEND_RESTART_WRITE
  3180 ;;		_do_I2C_SEND_STOP
  3181 ;;		_do_I2C_TX
  3182 ;;		_do_I2C_TX_EMPTY
  3183 ;;		_do_I2C_TX_REGISTER
  3184 ;;		_i2c1_driver_isNACK
  3185 ;;		_mssp1_clearIRQ
  3186 ;; This function is called by:
  3187 ;;		_i2c_open
  3188 ;;		_i2c_poller
  3189 ;;		_INTERRUPT_InterruptManager
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text26
  3194  000B9E                     __ptext26:
  3195                           	opt stack 0
  3196  000B9E                     _i2c_ISR:
  3197                           	opt stack 0
  3198                           
  3199                           ;Skip over the trampoline to the duplicate function for level 2
  3200  000B9E  B24B               	btfsc	btemp,1,c
  3201  000BA0  EF67  F006         	goto	i2_i2c_ISR
  3202  000BA4                     _i2c_ISR$intlevel0:
  3203                           	opt stack 18
  3204                           
  3205                           ;i2c_master.c: 486: mssp1_clearIRQ();
  3206                           
  3207                           ;incstack = 0
  3208  000BA4  ECFE  F008         	call	_mssp1_clearIRQ	;wreg free
  3209                           
  3210                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  3211  000BA8  0100               	movlb	0	; () banked
  3212  000BAA  A7B6               	btfss	_i2c_status& (0+255),3,b
  3213  000BAC  D007               	goto	l209
  3214                           
  3215                           ; BSR set to: 0
  3216  000BAE  ECD6  F007         	call	_i2c1_driver_isNACK	;wreg free
  3217  000BB2  A0D8               	btfss	status,0,c
  3218  000BB4  D003               	goto	l209
  3219                           
  3220                           ;i2c_master.c: 493: {
  3221                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  3222  000BB6  0E0F               	movlw	15
  3223  000BB8  0100               	movlb	0	; () banked
  3224  000BBA  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  3225  000BBC                     l209:
  3226                           
  3227                           ;i2c_master.c: 495: }
  3228                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  3229                           
  3230                           ; BSR set to: 0
  3231  000BBC  0100               	movlb	0	; () banked
  3232  000BBE  51C0               	movf	(_i2c_status+10)& (0+255),w,b
  3233  000BC0  0D02               	mullw	2
  3234  000BC2  0E92               	movlw	low _fsmStateTable
  3235  000BC4  24F3               	addwf	prodl,w,c
  3236  000BC6  6ED9               	movwf	fsr2l,c
  3237  000BC8  0E00               	movlw	high _fsmStateTable
  3238  000BCA  20F4               	addwfc	prodh,w,c
  3239  000BCC  6EDA               	movwf	fsr2h,c
  3240  000BCE  D801               	call	u1278
  3241  000BD0  D00A               	goto	u1279
  3242  000BD2                     u1278:
  3243  000BD2  0005               	push	
  3244  000BD4  6EFA               	movwf	pclath,c
  3245  000BD6  50DE               	movf	postinc2,w,c
  3246  000BD8  6EFD               	movwf	tosl,c
  3247  000BDA  50DE               	movf	postinc2,w,c
  3248  000BDC  6EFE               	movwf	tosh,c
  3249  000BDE  50F8               	movf	tblptru,w,c
  3250  000BE0  6EFF               	movwf	tosu,c
  3251  000BE2  50FA               	movf	pclath,w,c
  3252  000BE4  0012               	return		;indir
  3253  000BE6                     u1279:
  3254  000BE6  0100               	movlb	0	; () banked
  3255  000BE8  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  3256                           
  3257                           ; BSR set to: 0
  3258  000BEA  0012               	return		;funcret
  3259  000BEC                     __end_of_i2c_ISR:
  3260                           	opt stack 0
  3261                           tosu	equ	0xFFF
  3262                           tosh	equ	0xFFE
  3263                           tosl	equ	0xFFD
  3264                           pclath	equ	0xFFA
  3265                           tblptru	equ	0xFF8
  3266                           tblptrh	equ	0xFF7
  3267                           tblptrl	equ	0xFF6
  3268                           tablat	equ	0xFF5
  3269                           prodh	equ	0xFF4
  3270                           prodl	equ	0xFF3
  3271                           intcon	equ	0xFF2
  3272                           intcon2	equ	0xFF1
  3273                           postinc0	equ	0xFEE
  3274                           plusw0	equ	0xFEB
  3275                           wreg	equ	0xFE8
  3276                           postdec1	equ	0xFE5
  3277                           fsr1l	equ	0xFE1
  3278                           indf2	equ	0xFDF
  3279                           postinc2	equ	0xFDE
  3280                           plusw2	equ	0xFDB
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _do_I2C_TX_EMPTY *****************
  3286 ;; Defined at:
  3287 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      enum E7019
  3294 ;; Registers used:
  3295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3301 ;;      Params:         0       0       0       0       0       0       0
  3302 ;;      Locals:         0       0       0       0       0       0       0
  3303 ;;      Temps:          0       0       0       0       0       0       0
  3304 ;;      Totals:         0       0       0       0       0       0       0
  3305 ;;Total ram usage:        0 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    7
  3308 ;; This function calls:
  3309 ;;		_do_I2C_SEND_RESTART
  3310 ;;		_do_I2C_SEND_STOP
  3311 ;;		_mssp1_setIRQ
  3312 ;;		_returnReset
  3313 ;;		_returnStop
  3314 ;; This function is called by:
  3315 ;;		_i2c_ISR
  3316 ;;		i2_i2c_ISR
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text27
  3321  000A92                     __ptext27:
  3322                           	opt stack 0
  3323  000A92                     _do_I2C_TX_EMPTY:
  3324                           	opt stack 0
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;Skip over the trampoline to the duplicate function for level 2
  3328  000A92  B24B               	btfsc	btemp,1,c
  3329  000A94  EF78  F005         	goto	i2_do_I2C_TX_EMPTY
  3330  000A98                     _do_I2C_TX_EMPTY$intlevel0:
  3331                           	opt stack 18
  3332                           
  3333                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  3334                           
  3335                           ;incstack = 0
  3336  000A98  0100               	movlb	0	; () banked
  3337  000A9A  85B6               	bsf	_i2c_status& (0+255),2,b
  3338                           
  3339                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3340  000A9C  D00A               	goto	l197
  3341  000A9E                     
  3342                           ;i2c_master.c: 448: case i2c_restart_write:
  3343                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  3344                           
  3345                           ; BSR set to: 0
  3346                           
  3347                           ; BSR set to: 0
  3348  000A9E  EC6C  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3349  000AA2  0012               	return	
  3350  000AA4                     
  3351                           ;i2c_master.c: 451: mssp1_setIRQ();
  3352  000AA4  ECF0  F008         	call	_mssp1_setIRQ	;wreg free
  3353                           
  3354                           ;i2c_master.c: 452: return I2C_TX;
  3355  000AA8  0E03               	movlw	3
  3356  000AAA  0012               	return	
  3357  000AAC                     
  3358                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  3359                           
  3360                           ;i2c_master.c: 454: case i2c_stop:
  3361  000AAC  EC65  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3362                           
  3363                           ;i2c_master.c: 456: }
  3364  000AB0  0012               	return	
  3365  000AB2                     l197:
  3366  000AB2  C0CE  F03A         	movff	_i2c_status+24,returnReset@p
  3367  000AB6  C0CF  F03B         	movff	_i2c_status+25,returnReset@p+1
  3368  000ABA  EE20  F0C2         	lfsr	2,_i2c_status+12
  3369  000ABE  D801               	call	u1228
  3370  000AC0  D00A               	goto	u1229
  3371  000AC2                     u1228:
  3372  000AC2  0005               	push	
  3373  000AC4  6EFA               	movwf	pclath,c
  3374  000AC6  50DE               	movf	postinc2,w,c
  3375  000AC8  6EFD               	movwf	tosl,c
  3376  000ACA  50DE               	movf	postinc2,w,c
  3377  000ACC  6EFE               	movwf	tosh,c
  3378  000ACE  50F8               	movf	tblptru,w,c
  3379  000AD0  6EFF               	movwf	tosu,c
  3380  000AD2  50FA               	movf	pclath,w,c
  3381  000AD4  0012               	return		;indir
  3382  000AD6                     u1229:
  3383                           
  3384                           ; Switch size 1, requested type "space"
  3385                           ; Number of cases is 4, Range of values is 1 to 4
  3386                           ; switch strategies available:
  3387                           ; Name         Instructions Cycles
  3388                           ; simple_byte           13     7 (average)
  3389                           ;	Chosen strategy is simple_byte
  3390  000AD6  0A01               	xorlw	1	; case 1
  3391  000AD8  B4D8               	btfsc	status,2,c
  3392  000ADA  D7E8               	goto	l202
  3393  000ADC  0A03               	xorlw	3	; case 2
  3394  000ADE  B4D8               	btfsc	status,2,c
  3395  000AE0  D7DE               	goto	l198
  3396  000AE2  0A01               	xorlw	1	; case 3
  3397  000AE4  B4D8               	btfsc	status,2,c
  3398  000AE6  D7DB               	goto	l198
  3399  000AE8  0A07               	xorlw	7	; case 4
  3400  000AEA  B4D8               	btfsc	status,2,c
  3401  000AEC  D7DB               	goto	l201
  3402  000AEE  D7DE               	goto	l202
  3403  000AF0                     __end_of_do_I2C_TX_EMPTY:
  3404                           	opt stack 0
  3405                           tosu	equ	0xFFF
  3406                           tosh	equ	0xFFE
  3407                           tosl	equ	0xFFD
  3408                           pclath	equ	0xFFA
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           prodh	equ	0xFF4
  3414                           prodl	equ	0xFF3
  3415                           intcon	equ	0xFF2
  3416                           intcon2	equ	0xFF1
  3417                           postinc0	equ	0xFEE
  3418                           plusw0	equ	0xFEB
  3419                           wreg	equ	0xFE8
  3420                           postdec1	equ	0xFE5
  3421                           fsr1l	equ	0xFE1
  3422                           indf2	equ	0xFDF
  3423                           postinc2	equ	0xFDE
  3424                           plusw2	equ	0xFDB
  3425                           fsr2h	equ	0xFDA
  3426                           fsr2l	equ	0xFD9
  3427                           status	equ	0xFD8
  3428                           
  3429 ;; *************** function _do_I2C_RX *****************
  3430 ;; Defined at:
  3431 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      enum E7019
  3438 ;; Registers used:
  3439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3445 ;;      Params:         0       0       0       0       0       0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0
  3448 ;;      Totals:         0       0       0       0       0       0       0
  3449 ;;Total ram usage:        0 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    7
  3452 ;; This function calls:
  3453 ;;		_do_I2C_DO_NACK_RESTART
  3454 ;;		_do_I2C_DO_NACK_STOP
  3455 ;;		_i2c1_driver_getRXData
  3456 ;;		_i2c1_driver_sendACK
  3457 ;;		_returnReset
  3458 ;;		_returnStop
  3459 ;; This function is called by:
  3460 ;;		_i2c_ISR
  3461 ;;		i2_i2c_ISR
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           	psect	text28
  3466  000938                     __ptext28:
  3467                           	opt stack 0
  3468  000938                     _do_I2C_RX:
  3469                           	opt stack 0
  3470                           
  3471                           ;Skip over the trampoline to the duplicate function for level 2
  3472  000938  B24B               	btfsc	btemp,1,c
  3473  00093A  EFD9  F004         	goto	i2_do_I2C_RX
  3474  00093E                     _do_I2C_RX$intlevel0:
  3475                           	opt stack 18
  3476                           
  3477                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  3478                           
  3479                           ;incstack = 0
  3480  00093E  ECF2  F008         	call	_i2c1_driver_getRXData	;wreg free
  3481  000942  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  3482  000946  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  3483  00094A  6EDF               	movwf	indf2,c
  3484  00094C  0100               	movlb	0	; () banked
  3485  00094E  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  3486  000950  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  3490  000952  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  3491  000954  A0D8               	btfss	status,0,c
  3492  000956  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  3493  000958  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  3494  00095A  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  3495  00095C  B4D8               	btfsc	status,2,c
  3496  00095E  D004               	goto	l185
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;i2c_master.c: 421: {
  3500                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  3501  000960  ECE2  F008         	call	_i2c1_driver_sendACK	;wreg free
  3502                           
  3503                           ;i2c_master.c: 423: return I2C_RCEN;
  3504  000964  0E05               	movlw	5
  3505                           
  3506                           ;i2c_master.c: 424: }
  3507  000966  0012               	return	
  3508  000968                     l185:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;i2c_master.c: 425: else
  3512                           ;i2c_master.c: 426: {
  3513                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  3514  000968  85B6               	bsf	_i2c_status& (0+255),2,b
  3515                           
  3516                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3517  00096A  D006               	goto	l188
  3518  00096C                     
  3519                           ;i2c_master.c: 431: case i2c_restart_read:
  3520                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  3521                           
  3522                           ; BSR set to: 0
  3523                           
  3524                           ; BSR set to: 0
  3525  00096C  EC50  F008         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  3526  000970  0012               	return	
  3527  000972                     
  3528                           ;i2c_master.c: 435: case i2c_stop:
  3529                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  3530                           
  3531                           ;i2c_master.c: 434: case i2c_continue:
  3532  000972  EC57  F008         	call	_do_I2C_DO_NACK_STOP	;wreg free
  3533                           
  3534                           ;i2c_master.c: 437: }
  3535  000976  0012               	return	
  3536  000978                     l188:
  3537  000978  C0CE  F03A         	movff	_i2c_status+24,returnReset@p
  3538  00097C  C0CF  F03B         	movff	_i2c_status+25,returnReset@p+1
  3539  000980  EE20  F0C2         	lfsr	2,_i2c_status+12
  3540  000984  D801               	call	u1218
  3541  000986  D00A               	goto	u1219
  3542  000988                     u1218:
  3543  000988  0005               	push	
  3544  00098A  6EFA               	movwf	pclath,c
  3545  00098C  50DE               	movf	postinc2,w,c
  3546  00098E  6EFD               	movwf	tosl,c
  3547  000990  50DE               	movf	postinc2,w,c
  3548  000992  6EFE               	movwf	tosh,c
  3549  000994  50F8               	movf	tblptru,w,c
  3550  000996  6EFF               	movwf	tosu,c
  3551  000998  50FA               	movf	pclath,w,c
  3552  00099A  0012               	return		;indir
  3553  00099C                     u1219:
  3554                           
  3555                           ; Switch size 1, requested type "space"
  3556                           ; Number of cases is 4, Range of values is 1 to 4
  3557                           ; switch strategies available:
  3558                           ; Name         Instructions Cycles
  3559                           ; simple_byte           13     7 (average)
  3560                           ;	Chosen strategy is simple_byte
  3561  00099C  0A01               	xorlw	1	; case 1
  3562  00099E  B4D8               	btfsc	status,2,c
  3563  0009A0  D7E8               	goto	l191
  3564  0009A2  0A03               	xorlw	3	; case 2
  3565  0009A4  B4D8               	btfsc	status,2,c
  3566  0009A6  D7E2               	goto	l189
  3567  0009A8  0A01               	xorlw	1	; case 3
  3568  0009AA  B4D8               	btfsc	status,2,c
  3569  0009AC  D7DF               	goto	l189
  3570  0009AE  0A07               	xorlw	7	; case 4
  3571  0009B0  D7E0               	goto	l191
  3572  0009B2                     __end_of_do_I2C_RX:
  3573                           	opt stack 0
  3574                           tosu	equ	0xFFF
  3575                           tosh	equ	0xFFE
  3576                           tosl	equ	0xFFD
  3577                           pclath	equ	0xFFA
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           intcon	equ	0xFF2
  3585                           intcon2	equ	0xFF1
  3586                           postinc0	equ	0xFEE
  3587                           plusw0	equ	0xFEB
  3588                           wreg	equ	0xFE8
  3589                           postdec1	equ	0xFE5
  3590                           fsr1l	equ	0xFE1
  3591                           indf2	equ	0xFDF
  3592                           postinc2	equ	0xFDE
  3593                           plusw2	equ	0xFDB
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _do_I2C_TX *****************
  3599 ;; Defined at:
  3600 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      enum E7019
  3607 ;; Registers used:
  3608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3614 ;;      Params:         0       0       0       0       0       0       0
  3615 ;;      Locals:         2       0       0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0
  3617 ;;      Totals:         2       0       0       0       0       0       0
  3618 ;;Total ram usage:        2 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    7
  3621 ;; This function calls:
  3622 ;;		_do_I2C_SEND_RESTART_READ
  3623 ;;		_do_I2C_SEND_RESTART_WRITE
  3624 ;;		_do_I2C_SEND_STOP
  3625 ;;		_i2c1_driver_TXData
  3626 ;;		_i2c1_driver_isNACK
  3627 ;;		_returnReset
  3628 ;;		_returnStop
  3629 ;; This function is called by:
  3630 ;;		_i2c_ISR
  3631 ;;		i2_i2c_ISR
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text29
  3636  000780                     __ptext29:
  3637                           	opt stack 0
  3638  000780                     _do_I2C_TX:
  3639                           	opt stack 0
  3640                           
  3641                           ;Skip over the trampoline to the duplicate function for level 2
  3642  000780  B24B               	btfsc	btemp,1,c
  3643  000782  EF54  F004         	goto	i2_do_I2C_TX
  3644  000786                     _do_I2C_TX$intlevel0:
  3645                           	opt stack 18
  3646                           
  3647                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  3648                           
  3649                           ;incstack = 0
  3650  000786  ECD6  F007         	call	_i2c1_driver_isNACK	;wreg free
  3651  00078A  B0D8               	btfsc	status,0,c
  3652  00078C  D00A               	goto	l170
  3653  00078E  D026               	goto	l169
  3654  000790                     
  3655                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  3656  000790  EC7A  F008         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  3657  000794  0012               	return	
  3658  000796                     
  3659                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  3660  000796  EC73  F008         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  3661  00079A  0012               	return	
  3662  00079C                     
  3663                           ;i2c_master.c: 405: case i2c_stop:
  3664                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  3665                           
  3666                           ;i2c_master.c: 404: case i2c_continue:
  3667  00079C  EC65  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3668                           
  3669                           ;i2c_master.c: 407: }
  3670  0007A0  0012               	return	
  3671  0007A2                     l170:
  3672  0007A2  C0D4  F03A         	movff	_i2c_status+30,returnReset@p
  3673  0007A6  C0D5  F03B         	movff	_i2c_status+31,returnReset@p+1
  3674  0007AA  EE20  F0C8         	lfsr	2,_i2c_status+18
  3675  0007AE  D801               	call	u1188
  3676  0007B0  D00A               	goto	u1189
  3677  0007B2                     u1188:
  3678  0007B2  0005               	push	
  3679  0007B4  6EFA               	movwf	pclath,c
  3680  0007B6  50DE               	movf	postinc2,w,c
  3681  0007B8  6EFD               	movwf	tosl,c
  3682  0007BA  50DE               	movf	postinc2,w,c
  3683  0007BC  6EFE               	movwf	tosh,c
  3684  0007BE  50F8               	movf	tblptru,w,c
  3685  0007C0  6EFF               	movwf	tosu,c
  3686  0007C2  50FA               	movf	pclath,w,c
  3687  0007C4  0012               	return		;indir
  3688  0007C6                     u1189:
  3689                           
  3690                           ; Switch size 1, requested type "space"
  3691                           ; Number of cases is 4, Range of values is 1 to 4
  3692                           ; switch strategies available:
  3693                           ; Name         Instructions Cycles
  3694                           ; simple_byte           13     7 (average)
  3695                           ;	Chosen strategy is simple_byte
  3696  0007C6  0A01               	xorlw	1	; case 1
  3697  0007C8  B4D8               	btfsc	status,2,c
  3698  0007CA  D7E8               	goto	l174
  3699  0007CC  0A03               	xorlw	3	; case 2
  3700  0007CE  B4D8               	btfsc	status,2,c
  3701  0007D0  D7DF               	goto	l171
  3702  0007D2  0A01               	xorlw	1	; case 3
  3703  0007D4  B4D8               	btfsc	status,2,c
  3704  0007D6  D7DF               	goto	l173
  3705  0007D8  0A07               	xorlw	7	; case 4
  3706  0007DA  D7E0               	goto	l174
  3707  0007DC                     l169:
  3708                           
  3709                           ;i2c_master.c: 409: else
  3710                           ;i2c_master.c: 410: {
  3711                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  3712  0007DC  0100               	movlb	0	; () banked
  3713  0007DE  97B6               	bcf	_i2c_status& (0+255),3,b
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  3717  0007E0  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  3718  0007E4  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  3719  0007E8  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  3720  0007EA  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  3721  0007EC  50DF               	movf	indf2,w,c
  3722  0007EE  ECBB  F008         	call	_i2c1_driver_TXData
  3723                           
  3724                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  3725  0007F2  0100               	movlb	0	; () banked
  3726  0007F4  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  3727  0007F6  A0D8               	btfss	status,0,c
  3728  0007F8  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  3729  0007FA  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  3730  0007FC  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  3731  0007FE  A4D8               	btfss	status,2,c
  3732  000800  D004               	goto	l180
  3733                           
  3734                           ; BSR set to: 0
  3735  000802  0E00               	movlw	0
  3736  000804  6E3C               	movwf	_do_I2C_TX$315+1,c
  3737  000806  0E06               	movlw	6
  3738  000808  D003               	goto	L3
  3739  00080A                     l180:
  3740                           
  3741                           ; BSR set to: 0
  3742                           
  3743                           ; BSR set to: 0
  3744  00080A  0E00               	movlw	0
  3745  00080C  6E3C               	movwf	_do_I2C_TX$315+1,c
  3746  00080E  0E03               	movlw	3
  3747  000810                     L3:
  3748  000810  6E3B               	movwf	_do_I2C_TX$315,c
  3749                           
  3750                           ; BSR set to: 0
  3751  000812  503B               	movf	_do_I2C_TX$315,w,c
  3752                           
  3753                           ; BSR set to: 0
  3754  000814  0012               	return	
  3755  000816                     __end_of_do_I2C_TX:
  3756                           	opt stack 0
  3757                           tosu	equ	0xFFF
  3758                           tosh	equ	0xFFE
  3759                           tosl	equ	0xFFD
  3760                           pclath	equ	0xFFA
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           intcon	equ	0xFF2
  3768                           intcon2	equ	0xFF1
  3769                           postinc0	equ	0xFEE
  3770                           plusw0	equ	0xFEB
  3771                           wreg	equ	0xFE8
  3772                           postdec1	equ	0xFE5
  3773                           fsr1l	equ	0xFE1
  3774                           indf2	equ	0xFDF
  3775                           postinc2	equ	0xFDE
  3776                           plusw2	equ	0xFDB
  3777                           fsr2h	equ	0xFDA
  3778                           fsr2l	equ	0xFD9
  3779                           status	equ	0xFD8
  3780                           
  3781 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  3782 ;; Defined at:
  3783 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;		None
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;		None
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  1    wreg      enum E7019
  3790 ;; Registers used:
  3791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3797 ;;      Params:         0       0       0       0       0       0       0
  3798 ;;      Locals:         0       0       0       0       0       0       0
  3799 ;;      Temps:          0       0       0       0       0       0       0
  3800 ;;      Totals:         0       0       0       0       0       0       0
  3801 ;;Total ram usage:        0 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    7
  3804 ;; This function calls:
  3805 ;;		_do_I2C_SEND_RESTART
  3806 ;;		_do_I2C_SEND_STOP
  3807 ;;		_returnReset
  3808 ;;		_returnStop
  3809 ;; This function is called by:
  3810 ;;		_i2c_ISR
  3811 ;;		i2_i2c_ISR
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text30
  3816  000BEC                     __ptext30:
  3817                           	opt stack 0
  3818  000BEC                     _do_I2C_DO_ADDRESS_NACK:
  3819                           	opt stack 0
  3820                           
  3821                           ;Skip over the trampoline to the duplicate function for level 2
  3822  000BEC  B24B               	btfsc	btemp,1,c
  3823  000BEE  EF8B  F006         	goto	i2_do_I2C_DO_ADDRESS_NACK
  3824  000BF2                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  3825                           	opt stack 18
  3826                           
  3827                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  3828                           
  3829                           ;incstack = 0
  3830  000BF2  0100               	movlb	0	; () banked
  3831  000BF4  97B6               	bcf	_i2c_status& (0+255),3,b
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  3835  000BF6  0E02               	movlw	2
  3836  000BF8  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  3837                           
  3838                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  3839  000BFA  D006               	goto	l161
  3840  000BFC                     
  3841                           ;i2c_master.c: 386: case i2c_restart_write:
  3842                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  3843                           
  3844                           ; BSR set to: 0
  3845                           
  3846                           ; BSR set to: 0
  3847  000BFC  EC6C  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3848  000C00  0012               	return	
  3849  000C02                     
  3850                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  3851  000C02  EC65  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3852                           
  3853                           ;i2c_master.c: 390: }
  3854  000C06  0012               	return	
  3855  000C08                     l161:
  3856  000C08  C0D2  F03A         	movff	_i2c_status+28,returnReset@p
  3857  000C0C  C0D3  F03B         	movff	_i2c_status+29,returnReset@p+1
  3858  000C10  EE20  F0C6         	lfsr	2,_i2c_status+16
  3859  000C14  D801               	call	u1168
  3860  000C16  D00A               	goto	u1169
  3861  000C18                     u1168:
  3862  000C18  0005               	push	
  3863  000C1A  6EFA               	movwf	pclath,c
  3864  000C1C  50DE               	movf	postinc2,w,c
  3865  000C1E  6EFD               	movwf	tosl,c
  3866  000C20  50DE               	movf	postinc2,w,c
  3867  000C22  6EFE               	movwf	tosh,c
  3868  000C24  50F8               	movf	tblptru,w,c
  3869  000C26  6EFF               	movwf	tosu,c
  3870  000C28  50FA               	movf	pclath,w,c
  3871  000C2A  0012               	return		;indir
  3872  000C2C                     u1169:
  3873                           
  3874                           ; Switch size 1, requested type "space"
  3875                           ; Number of cases is 2, Range of values is 2 to 3
  3876                           ; switch strategies available:
  3877                           ; Name         Instructions Cycles
  3878                           ; simple_byte            7     4 (average)
  3879                           ;	Chosen strategy is simple_byte
  3880  000C2C  0A02               	xorlw	2	; case 2
  3881  000C2E  B4D8               	btfsc	status,2,c
  3882  000C30  D7E5               	goto	l162
  3883  000C32  0A01               	xorlw	1	; case 3
  3884  000C34  B4D8               	btfsc	status,2,c
  3885  000C36  D7E2               	goto	l162
  3886  000C38  D7E4               	goto	l165
  3887  000C3A                     __end_of_do_I2C_DO_ADDRESS_NACK:
  3888                           	opt stack 0
  3889                           tosu	equ	0xFFF
  3890                           tosh	equ	0xFFE
  3891                           tosl	equ	0xFFD
  3892                           pclath	equ	0xFFA
  3893                           tblptru	equ	0xFF8
  3894                           tblptrh	equ	0xFF7
  3895                           tblptrl	equ	0xFF6
  3896                           tablat	equ	0xFF5
  3897                           prodh	equ	0xFF4
  3898                           prodl	equ	0xFF3
  3899                           intcon	equ	0xFF2
  3900                           intcon2	equ	0xFF1
  3901                           postinc0	equ	0xFEE
  3902                           plusw0	equ	0xFEB
  3903                           wreg	equ	0xFE8
  3904                           postdec1	equ	0xFE5
  3905                           fsr1l	equ	0xFE1
  3906                           indf2	equ	0xFDF
  3907                           postinc2	equ	0xFDE
  3908                           plusw2	equ	0xFDB
  3909                           fsr2h	equ	0xFDA
  3910                           fsr2l	equ	0xFD9
  3911                           status	equ	0xFD8
  3912                           
  3913 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  3914 ;; Defined at:
  3915 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      enum E7019
  3922 ;; Registers used:
  3923 ;;		wreg, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3929 ;;      Params:         0       0       0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0
  3932 ;;      Totals:         0       0       0       0       0       0       0
  3933 ;;Total ram usage:        0 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    6
  3936 ;; This function calls:
  3937 ;;		_i2c1_driver_sendNACK
  3938 ;; This function is called by:
  3939 ;;		_do_I2C_RX
  3940 ;;		_i2c_ISR
  3941 ;;		i2_i2c_ISR
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text31
  3946  0010A0                     __ptext31:
  3947                           	opt stack 0
  3948  0010A0                     _do_I2C_DO_NACK_RESTART:
  3949                           	opt stack 0
  3950                           
  3951                           ;Skip over the trampoline to the duplicate function for level 2
  3952  0010A0  B24B               	btfsc	btemp,1,c
  3953  0010A2  EFBF  F008         	goto	i2_do_I2C_DO_NACK_RESTART
  3954  0010A6                     _do_I2C_DO_NACK_RESTART$intlevel0:
  3955                           	opt stack 18
  3956                           
  3957                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  3958                           
  3959                           ;incstack = 0
  3960  0010A6  ECDF  F008         	call	_i2c1_driver_sendNACK	;wreg free
  3961                           
  3962                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  3963  0010AA  0E09               	movlw	9
  3964  0010AC  0012               	return	
  3965  0010AE                     __end_of_do_I2C_DO_NACK_RESTART:
  3966                           	opt stack 0
  3967                           tosu	equ	0xFFF
  3968                           tosh	equ	0xFFE
  3969                           tosl	equ	0xFFD
  3970                           pclath	equ	0xFFA
  3971                           tblptru	equ	0xFF8
  3972                           tblptrh	equ	0xFF7
  3973                           tblptrl	equ	0xFF6
  3974                           tablat	equ	0xFF5
  3975                           prodh	equ	0xFF4
  3976                           prodl	equ	0xFF3
  3977                           intcon	equ	0xFF2
  3978                           intcon2	equ	0xFF1
  3979                           postinc0	equ	0xFEE
  3980                           plusw0	equ	0xFEB
  3981                           wreg	equ	0xFE8
  3982                           postdec1	equ	0xFE5
  3983                           fsr1l	equ	0xFE1
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           plusw2	equ	0xFDB
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  3992 ;; Defined at:
  3993 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      enum E7019
  4000 ;; Registers used:
  4001 ;;		wreg, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4007 ;;      Params:         0       0       0       0       0       0       0
  4008 ;;      Locals:         0       0       0       0       0       0       0
  4009 ;;      Temps:          0       0       0       0       0       0       0
  4010 ;;      Totals:         0       0       0       0       0       0       0
  4011 ;;Total ram usage:        0 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    6
  4014 ;; This function calls:
  4015 ;;		_i2c1_driver_sendNACK
  4016 ;; This function is called by:
  4017 ;;		_do_I2C_RX
  4018 ;;		_i2c_ISR
  4019 ;;		i2_i2c_ISR
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text32
  4024  0010AE                     __ptext32:
  4025                           	opt stack 0
  4026  0010AE                     _do_I2C_DO_NACK_STOP:
  4027                           	opt stack 0
  4028                           
  4029                           ;Skip over the trampoline to the duplicate function for level 2
  4030  0010AE  B24B               	btfsc	btemp,1,c
  4031  0010B0  EFC3  F008         	goto	i2_do_I2C_DO_NACK_STOP
  4032  0010B4                     _do_I2C_DO_NACK_STOP$intlevel0:
  4033                           	opt stack 18
  4034                           
  4035                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  4036                           
  4037                           ;incstack = 0
  4038  0010B4  ECDF  F008         	call	_i2c1_driver_sendNACK	;wreg free
  4039                           
  4040                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  4041  0010B8  0E0A               	movlw	10
  4042  0010BA  0012               	return	
  4043  0010BC                     __end_of_do_I2C_DO_NACK_STOP:
  4044                           	opt stack 0
  4045                           tosu	equ	0xFFF
  4046                           tosh	equ	0xFFE
  4047                           tosl	equ	0xFFD
  4048                           pclath	equ	0xFFA
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           intcon	equ	0xFF2
  4056                           intcon2	equ	0xFF1
  4057                           postinc0	equ	0xFEE
  4058                           plusw0	equ	0xFEB
  4059                           wreg	equ	0xFE8
  4060                           postdec1	equ	0xFE5
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           plusw2	equ	0xFDB
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069 ;; *************** function _do_I2C_DO_ACK *****************
  4070 ;; Defined at:
  4071 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;		None
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;		None
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      enum E7019
  4078 ;; Registers used:
  4079 ;;		wreg, cstack
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4085 ;;      Params:         0       0       0       0       0       0       0
  4086 ;;      Locals:         0       0       0       0       0       0       0
  4087 ;;      Temps:          0       0       0       0       0       0       0
  4088 ;;      Totals:         0       0       0       0       0       0       0
  4089 ;;Total ram usage:        0 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    6
  4092 ;; This function calls:
  4093 ;;		_i2c1_driver_sendACK
  4094 ;; This function is called by:
  4095 ;;		_i2c_ISR
  4096 ;;		i2_i2c_ISR
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text33
  4101  0010BC                     __ptext33:
  4102                           	opt stack 0
  4103  0010BC                     _do_I2C_DO_ACK:
  4104                           	opt stack 0
  4105                           
  4106                           ;Skip over the trampoline to the duplicate function for level 2
  4107  0010BC  B24B               	btfsc	btemp,1,c
  4108  0010BE  EFC7  F008         	goto	i2_do_I2C_DO_ACK
  4109  0010C2                     _do_I2C_DO_ACK$intlevel0:
  4110                           	opt stack 19
  4111                           
  4112                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  4113                           
  4114                           ;incstack = 0
  4115  0010C2  ECE2  F008         	call	_i2c1_driver_sendACK	;wreg free
  4116                           
  4117                           ;i2c_master.c: 362: return I2C_RCEN;
  4118  0010C6  0E05               	movlw	5
  4119  0010C8  0012               	return	
  4120  0010CA                     __end_of_do_I2C_DO_ACK:
  4121                           	opt stack 0
  4122                           tosu	equ	0xFFF
  4123                           tosh	equ	0xFFE
  4124                           tosl	equ	0xFFD
  4125                           pclath	equ	0xFFA
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           prodh	equ	0xFF4
  4131                           prodl	equ	0xFF3
  4132                           intcon	equ	0xFF2
  4133                           intcon2	equ	0xFF1
  4134                           postinc0	equ	0xFEE
  4135                           plusw0	equ	0xFEB
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           fsr1l	equ	0xFE1
  4139                           indf2	equ	0xFDF
  4140                           postinc2	equ	0xFDE
  4141                           plusw2	equ	0xFDB
  4142                           fsr2h	equ	0xFDA
  4143                           fsr2l	equ	0xFD9
  4144                           status	equ	0xFD8
  4145                           
  4146 ;; *************** function _do_I2C_RCEN *****************
  4147 ;; Defined at:
  4148 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;		None
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  1    wreg      enum E7019
  4155 ;; Registers used:
  4156 ;;		wreg, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4162 ;;      Params:         0       0       0       0       0       0       0
  4163 ;;      Locals:         0       0       0       0       0       0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0
  4165 ;;      Totals:         0       0       0       0       0       0       0
  4166 ;;Total ram usage:        0 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    6
  4169 ;; This function calls:
  4170 ;;		_i2c1_driver_startRX
  4171 ;; This function is called by:
  4172 ;;		_i2c_ISR
  4173 ;;		i2_i2c_ISR
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text34
  4178  001010                     __ptext34:
  4179                           	opt stack 0
  4180  001010                     _do_I2C_RCEN:
  4181                           	opt stack 0
  4182                           
  4183                           ;Skip over the trampoline to the duplicate function for level 2
  4184  001010  B24B               	btfsc	btemp,1,c
  4185  001012  EF88  F008         	goto	i2_do_I2C_RCEN
  4186  001016                     _do_I2C_RCEN$intlevel0:
  4187                           	opt stack 19
  4188                           
  4189                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  4190                           
  4191                           ;incstack = 0
  4192  001016  0100               	movlb	0	; () banked
  4193  001018  97B6               	bcf	_i2c_status& (0+255),3,b
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;i2c_master.c: 355: i2c1_driver_startRX();
  4197  00101A  ECF4  F008         	call	_i2c1_driver_startRX	;wreg free
  4198                           
  4199                           ;i2c_master.c: 356: return I2C_RX;
  4200  00101E  0E04               	movlw	4
  4201  001020  0012               	return	
  4202  001022                     __end_of_do_I2C_RCEN:
  4203                           	opt stack 0
  4204                           tosu	equ	0xFFF
  4205                           tosh	equ	0xFFE
  4206                           tosl	equ	0xFFD
  4207                           pclath	equ	0xFFA
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           intcon	equ	0xFF2
  4215                           intcon2	equ	0xFF1
  4216                           postinc0	equ	0xFEE
  4217                           plusw0	equ	0xFEB
  4218                           wreg	equ	0xFE8
  4219                           postdec1	equ	0xFE5
  4220                           fsr1l	equ	0xFE1
  4221                           indf2	equ	0xFDF
  4222                           postinc2	equ	0xFDE
  4223                           plusw2	equ	0xFDB
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  4229 ;; Defined at:
  4230 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      enum E7019
  4237 ;; Registers used:
  4238 ;;		wreg, status,2, status,0, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4244 ;;      Params:         0       0       0       0       0       0       0
  4245 ;;      Locals:         0       0       0       0       0       0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0
  4247 ;;      Totals:         0       0       0       0       0       0       0
  4248 ;;Total ram usage:        0 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    6
  4251 ;; This function calls:
  4252 ;;		_i2c1_driver_TXData
  4253 ;; This function is called by:
  4254 ;;		_i2c_ISR
  4255 ;;		i2_i2c_ISR
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text35
  4260  000F54                     __ptext35:
  4261                           	opt stack 0
  4262  000F54                     _do_I2C_SEND_ADR_WRITE:
  4263                           	opt stack 0
  4264                           
  4265                           ;Skip over the trampoline to the duplicate function for level 2
  4266  000F54  B24B               	btfsc	btemp,1,c
  4267  000F56  EF22  F008         	goto	i2_do_I2C_SEND_ADR_WRITE
  4268  000F5A                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  4269                           	opt stack 19
  4270                           
  4271                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  4272                           
  4273                           ;incstack = 0
  4274  000F5A  0100               	movlb	0	; () banked
  4275  000F5C  87B6               	bsf	_i2c_status& (0+255),3,b
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  4279  000F5E  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  4280  000F60  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  4281  000F62  ECBB  F008         	call	_i2c1_driver_TXData
  4282                           
  4283                           ;i2c_master.c: 349: return I2C_TX;
  4284  000F66  0E03               	movlw	3
  4285  000F68  0012               	return	
  4286  000F6A                     __end_of_do_I2C_SEND_ADR_WRITE:
  4287                           	opt stack 0
  4288                           tosu	equ	0xFFF
  4289                           tosh	equ	0xFFE
  4290                           tosl	equ	0xFFD
  4291                           pclath	equ	0xFFA
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           intcon	equ	0xFF2
  4299                           intcon2	equ	0xFF1
  4300                           postinc0	equ	0xFEE
  4301                           plusw0	equ	0xFEB
  4302                           wreg	equ	0xFE8
  4303                           postdec1	equ	0xFE5
  4304                           fsr1l	equ	0xFE1
  4305                           indf2	equ	0xFDF
  4306                           postinc2	equ	0xFDE
  4307                           plusw2	equ	0xFDB
  4308                           fsr2h	equ	0xFDA
  4309                           fsr2l	equ	0xFD9
  4310                           status	equ	0xFD8
  4311                           
  4312 ;; *************** function _do_I2C_SEND_INITIAL_READ *****************
  4313 ;; Defined at:
  4314 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;		None
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;		None
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      enum E7019
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4328 ;;      Params:         0       0       0       0       0       0       0
  4329 ;;      Locals:         0       0       0       0       0       0       0
  4330 ;;      Temps:          0       0       0       0       0       0       0
  4331 ;;      Totals:         0       0       0       0       0       0       0
  4332 ;;Total ram usage:        0 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    6
  4335 ;; This function calls:
  4336 ;;		_i2c1_driver_TXData
  4337 ;; This function is called by:
  4338 ;;		_i2c_ISR
  4339 ;;		i2_i2c_ISR
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           	psect	text36
  4344  000F6A                     __ptext36:
  4345                           	opt stack 0
  4346  000F6A                     _do_I2C_SEND_INITIAL_READ:
  4347                           	opt stack 0
  4348                           
  4349                           ;Skip over the trampoline to the duplicate function for level 2
  4350  000F6A  B24B               	btfsc	btemp,1,c
  4351  000F6C  EF2A  F008         	goto	i2_do_I2C_SEND_INITIAL_READ
  4352  000F70                     _do_I2C_SEND_INITIAL_READ$intlevel0:
  4353                           	opt stack 19
  4354                           
  4355                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  4356                           
  4357                           ;incstack = 0
  4358  000F70  0100               	movlb	0	; () banked
  4359  000F72  87B6               	bsf	_i2c_status& (0+255),3,b
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  4363  000F74  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  4364  000F76  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  4365  000F78  ECBB  F008         	call	_i2c1_driver_TXData
  4366                           
  4367                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  4368  000F7C  0E11               	movlw	17
  4369  000F7E  0012               	return	
  4370  000F80                     __end_of_do_I2C_SEND_INITIAL_READ:
  4371                           	opt stack 0
  4372                           tosu	equ	0xFFF
  4373                           tosh	equ	0xFFE
  4374                           tosl	equ	0xFFD
  4375                           pclath	equ	0xFFA
  4376                           tblptru	equ	0xFF8
  4377                           tblptrh	equ	0xFF7
  4378                           tblptrl	equ	0xFF6
  4379                           tablat	equ	0xFF5
  4380                           prodh	equ	0xFF4
  4381                           prodl	equ	0xFF3
  4382                           intcon	equ	0xFF2
  4383                           intcon2	equ	0xFF1
  4384                           postinc0	equ	0xFEE
  4385                           plusw0	equ	0xFEB
  4386                           wreg	equ	0xFE8
  4387                           postdec1	equ	0xFE5
  4388                           fsr1l	equ	0xFE1
  4389                           indf2	equ	0xFDF
  4390                           postinc2	equ	0xFDE
  4391                           plusw2	equ	0xFDB
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  4397 ;; Defined at:
  4398 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      enum E7019
  4405 ;; Registers used:
  4406 ;;		wreg, status,0, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4412 ;;      Params:         0       0       0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0
  4415 ;;      Totals:         0       0       0       0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    6
  4419 ;; This function calls:
  4420 ;;		_i2c1_driver_TXData
  4421 ;; This function is called by:
  4422 ;;		_i2c_ISR
  4423 ;;		i2_i2c_ISR
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text37
  4428  000F80                     __ptext37:
  4429                           	opt stack 0
  4430  000F80                     _do_I2C_SEND_ADR_READ:
  4431                           	opt stack 0
  4432                           
  4433                           ;Skip over the trampoline to the duplicate function for level 2
  4434  000F80  B24B               	btfsc	btemp,1,c
  4435  000F82  EF32  F008         	goto	i2_do_I2C_SEND_ADR_READ
  4436  000F86                     _do_I2C_SEND_ADR_READ$intlevel0:
  4437                           	opt stack 19
  4438                           
  4439                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  4440                           
  4441                           ;incstack = 0
  4442  000F86  0100               	movlb	0	; () banked
  4443  000F88  87B6               	bsf	_i2c_status& (0+255),3,b
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  4447  000F8A  80D8               	bsf	status,0,c
  4448  000F8C  35B7               	rlcf	(_i2c_status+1)& (0+255),w,b
  4449  000F8E  ECBB  F008         	call	_i2c1_driver_TXData
  4450                           
  4451                           ;i2c_master.c: 325: return I2C_RCEN;
  4452  000F92  0E05               	movlw	5
  4453  000F94  0012               	return	
  4454  000F96                     __end_of_do_I2C_SEND_ADR_READ:
  4455                           	opt stack 0
  4456                           tosu	equ	0xFFF
  4457                           tosh	equ	0xFFE
  4458                           tosl	equ	0xFFD
  4459                           pclath	equ	0xFFA
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           intcon2	equ	0xFF1
  4468                           postinc0	equ	0xFEE
  4469                           plusw0	equ	0xFEB
  4470                           wreg	equ	0xFE8
  4471                           postdec1	equ	0xFE5
  4472                           fsr1l	equ	0xFE1
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           plusw2	equ	0xFDB
  4476                           fsr2h	equ	0xFDA
  4477                           fsr2l	equ	0xFD9
  4478                           status	equ	0xFD8
  4479                           
  4480 ;; *************** function _do_I2C_SEND_STOP *****************
  4481 ;; Defined at:
  4482 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;		None
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      enum E7019
  4489 ;; Registers used:
  4490 ;;		wreg, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4496 ;;      Params:         0       0       0       0       0       0       0
  4497 ;;      Locals:         0       0       0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0
  4499 ;;      Totals:         0       0       0       0       0       0       0
  4500 ;;Total ram usage:        0 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    6
  4503 ;; This function calls:
  4504 ;;		_i2c1_driver_stop
  4505 ;; This function is called by:
  4506 ;;		_do_I2C_DO_ADDRESS_NACK
  4507 ;;		_do_I2C_TX
  4508 ;;		_do_I2C_TX_EMPTY
  4509 ;;		_i2c_ISR
  4510 ;;		i2_i2c_ISR
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text38
  4515  0010CA                     __ptext38:
  4516                           	opt stack 0
  4517  0010CA                     _do_I2C_SEND_STOP:
  4518                           	opt stack 0
  4519                           
  4520                           ;Skip over the trampoline to the duplicate function for level 2
  4521  0010CA  B24B               	btfsc	btemp,1,c
  4522  0010CC  EFCB  F008         	goto	i2_do_I2C_SEND_STOP
  4523  0010D0                     _do_I2C_SEND_STOP$intlevel0:
  4524                           	opt stack 18
  4525                           
  4526                           ;i2c_master.c: 316: i2c1_driver_stop();
  4527                           
  4528                           ;incstack = 0
  4529  0010D0  ECF6  F008         	call	_i2c1_driver_stop	;wreg free
  4530                           
  4531                           ;i2c_master.c: 317: return I2C_IDLE;
  4532  0010D4  0E00               	movlw	0
  4533  0010D6  0012               	return	
  4534  0010D8                     __end_of_do_I2C_SEND_STOP:
  4535                           	opt stack 0
  4536                           tosu	equ	0xFFF
  4537                           tosh	equ	0xFFE
  4538                           tosl	equ	0xFFD
  4539                           pclath	equ	0xFFA
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           intcon	equ	0xFF2
  4547                           intcon2	equ	0xFF1
  4548                           postinc0	equ	0xFEE
  4549                           plusw0	equ	0xFEB
  4550                           wreg	equ	0xFE8
  4551                           postdec1	equ	0xFE5
  4552                           fsr1l	equ	0xFE1
  4553                           indf2	equ	0xFDF
  4554                           postinc2	equ	0xFDE
  4555                           plusw2	equ	0xFDB
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _do_I2C_SEND_RESTART *****************
  4561 ;; Defined at:
  4562 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      enum E7019
  4569 ;; Registers used:
  4570 ;;		wreg, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4576 ;;      Params:         0       0       0       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0
  4579 ;;      Totals:         0       0       0       0       0       0       0
  4580 ;;Total ram usage:        0 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    6
  4583 ;; This function calls:
  4584 ;;		_i2c1_driver_restart
  4585 ;; This function is called by:
  4586 ;;		_do_I2C_DO_ADDRESS_NACK
  4587 ;;		_do_I2C_TX_EMPTY
  4588 ;;		_i2c_ISR
  4589 ;;		i2_i2c_ISR
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text39
  4594  0010D8                     __ptext39:
  4595                           	opt stack 0
  4596  0010D8                     _do_I2C_SEND_RESTART:
  4597                           	opt stack 0
  4598                           
  4599                           ;Skip over the trampoline to the duplicate function for level 2
  4600  0010D8  B24B               	btfsc	btemp,1,c
  4601  0010DA  EFCF  F008         	goto	i2_do_I2C_SEND_RESTART
  4602  0010DE                     _do_I2C_SEND_RESTART$intlevel0:
  4603                           	opt stack 18
  4604                           
  4605                           ;i2c_master.c: 310: i2c1_driver_restart();
  4606                           
  4607                           ;incstack = 0
  4608  0010DE  ECF8  F008         	call	_i2c1_driver_restart	;wreg free
  4609                           
  4610                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  4611  0010E2  0E01               	movlw	1
  4612  0010E4  0012               	return	
  4613  0010E6                     __end_of_do_I2C_SEND_RESTART:
  4614                           	opt stack 0
  4615                           tosu	equ	0xFFF
  4616                           tosh	equ	0xFFE
  4617                           tosl	equ	0xFFD
  4618                           pclath	equ	0xFFA
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           prodh	equ	0xFF4
  4624                           prodl	equ	0xFF3
  4625                           intcon	equ	0xFF2
  4626                           intcon2	equ	0xFF1
  4627                           postinc0	equ	0xFEE
  4628                           plusw0	equ	0xFEB
  4629                           wreg	equ	0xFE8
  4630                           postdec1	equ	0xFE5
  4631                           fsr1l	equ	0xFE1
  4632                           indf2	equ	0xFDF
  4633                           postinc2	equ	0xFDE
  4634                           plusw2	equ	0xFDB
  4635                           fsr2h	equ	0xFDA
  4636                           fsr2l	equ	0xFD9
  4637                           status	equ	0xFD8
  4638                           
  4639 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  4640 ;; Defined at:
  4641 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;		None
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;		None
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      enum E7019
  4648 ;; Registers used:
  4649 ;;		wreg, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4655 ;;      Params:         0       0       0       0       0       0       0
  4656 ;;      Locals:         0       0       0       0       0       0       0
  4657 ;;      Temps:          0       0       0       0       0       0       0
  4658 ;;      Totals:         0       0       0       0       0       0       0
  4659 ;;Total ram usage:        0 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    6
  4662 ;; This function calls:
  4663 ;;		_i2c1_driver_restart
  4664 ;; This function is called by:
  4665 ;;		_do_I2C_TX
  4666 ;;		_i2c_ISR
  4667 ;;		i2_i2c_ISR
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text40
  4672  0010E6                     __ptext40:
  4673                           	opt stack 0
  4674  0010E6                     _do_I2C_SEND_RESTART_WRITE:
  4675                           	opt stack 0
  4676                           
  4677                           ;Skip over the trampoline to the duplicate function for level 2
  4678  0010E6  B24B               	btfsc	btemp,1,c
  4679  0010E8  EFD3  F008         	goto	i2_do_I2C_SEND_RESTART_WRITE
  4680  0010EC                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  4681                           	opt stack 18
  4682                           
  4683                           ;i2c_master.c: 304: i2c1_driver_restart();
  4684                           
  4685                           ;incstack = 0
  4686  0010EC  ECF8  F008         	call	_i2c1_driver_restart	;wreg free
  4687                           
  4688                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  4689  0010F0  0E02               	movlw	2
  4690  0010F2  0012               	return	
  4691  0010F4                     __end_of_do_I2C_SEND_RESTART_WRITE:
  4692                           	opt stack 0
  4693                           tosu	equ	0xFFF
  4694                           tosh	equ	0xFFE
  4695                           tosl	equ	0xFFD
  4696                           pclath	equ	0xFFA
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           intcon	equ	0xFF2
  4704                           intcon2	equ	0xFF1
  4705                           postinc0	equ	0xFEE
  4706                           plusw0	equ	0xFEB
  4707                           wreg	equ	0xFE8
  4708                           postdec1	equ	0xFE5
  4709                           fsr1l	equ	0xFE1
  4710                           indf2	equ	0xFDF
  4711                           postinc2	equ	0xFDE
  4712                           plusw2	equ	0xFDB
  4713                           fsr2h	equ	0xFDA
  4714                           fsr2l	equ	0xFD9
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  4718 ;; Defined at:
  4719 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;		None
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      enum E7019
  4726 ;; Registers used:
  4727 ;;		wreg, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4733 ;;      Params:         0       0       0       0       0       0       0
  4734 ;;      Locals:         0       0       0       0       0       0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0
  4736 ;;      Totals:         0       0       0       0       0       0       0
  4737 ;;Total ram usage:        0 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    6
  4740 ;; This function calls:
  4741 ;;		_i2c1_driver_restart
  4742 ;; This function is called by:
  4743 ;;		_do_I2C_TX
  4744 ;;		_i2c_ISR
  4745 ;;		i2_i2c_ISR
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text41
  4750  0010F4                     __ptext41:
  4751                           	opt stack 0
  4752  0010F4                     _do_I2C_SEND_RESTART_READ:
  4753                           	opt stack 0
  4754                           
  4755                           ;Skip over the trampoline to the duplicate function for level 2
  4756  0010F4  B24B               	btfsc	btemp,1,c
  4757  0010F6  EFD7  F008         	goto	i2_do_I2C_SEND_RESTART_READ
  4758  0010FA                     _do_I2C_SEND_RESTART_READ$intlevel0:
  4759                           	opt stack 18
  4760                           
  4761                           ;i2c_master.c: 298: i2c1_driver_restart();
  4762                           
  4763                           ;incstack = 0
  4764  0010FA  ECF8  F008         	call	_i2c1_driver_restart	;wreg free
  4765                           
  4766                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  4767  0010FE  0E01               	movlw	1
  4768  001100  0012               	return	
  4769  001102                     __end_of_do_I2C_SEND_RESTART_READ:
  4770                           	opt stack 0
  4771                           tosu	equ	0xFFF
  4772                           tosh	equ	0xFFE
  4773                           tosl	equ	0xFFD
  4774                           pclath	equ	0xFFA
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           intcon	equ	0xFF2
  4782                           intcon2	equ	0xFF1
  4783                           postinc0	equ	0xFEE
  4784                           plusw0	equ	0xFEB
  4785                           wreg	equ	0xFE8
  4786                           postdec1	equ	0xFE5
  4787                           fsr1l	equ	0xFE1
  4788                           indf2	equ	0xFDF
  4789                           postinc2	equ	0xFDE
  4790                           plusw2	equ	0xFDB
  4791                           fsr2h	equ	0xFDA
  4792                           fsr2l	equ	0xFD9
  4793                           status	equ	0xFD8
  4794                           
  4795 ;; *************** function _do_I2C_IDLE *****************
  4796 ;; Defined at:
  4797 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;		None
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      enum E7019
  4804 ;; Registers used:
  4805 ;;		wreg, status,2
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4811 ;;      Params:         0       0       0       0       0       0       0
  4812 ;;      Locals:         0       0       0       0       0       0       0
  4813 ;;      Temps:          0       0       0       0       0       0       0
  4814 ;;      Totals:         0       0       0       0       0       0       0
  4815 ;;Total ram usage:        0 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    5
  4818 ;; This function calls:
  4819 ;;		Nothing
  4820 ;; This function is called by:
  4821 ;;		_i2c_ISR
  4822 ;;		i2_i2c_ISR
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text42
  4827  001022                     __ptext42:
  4828                           	opt stack 0
  4829  001022                     _do_I2C_IDLE:
  4830                           	opt stack 0
  4831                           
  4832                           ;Skip over the trampoline to the duplicate function for level 2
  4833  001022  B24B               	btfsc	btemp,1,c
  4834  001024  EF8E  F008         	goto	i2_do_I2C_IDLE
  4835  001028                     _do_I2C_IDLE$intlevel0:
  4836                           	opt stack 20
  4837                           
  4838                           ;i2c_master.c: 291: i2c_status.busy = 0;
  4839                           
  4840                           ;incstack = 0
  4841  001028  0100               	movlb	0	; () banked
  4842  00102A  91B6               	bcf	_i2c_status& (0+255),0,b
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  4846  00102C  0E00               	movlw	0
  4847  00102E  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;i2c_master.c: 293: return I2C_RESET;
  4851  001030  0E0E               	movlw	14
  4852  001032  0012               	return	
  4853  001034                     __end_of_do_I2C_IDLE:
  4854                           	opt stack 0
  4855                           tosu	equ	0xFFF
  4856                           tosh	equ	0xFFE
  4857                           tosl	equ	0xFFD
  4858                           pclath	equ	0xFFA
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           prodh	equ	0xFF4
  4864                           prodl	equ	0xFF3
  4865                           intcon	equ	0xFF2
  4866                           intcon2	equ	0xFF1
  4867                           postinc0	equ	0xFEE
  4868                           plusw0	equ	0xFEB
  4869                           wreg	equ	0xFE8
  4870                           postdec1	equ	0xFE5
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           plusw2	equ	0xFDB
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _do_I2C_RESET *****************
  4880 ;; Defined at:
  4881 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  1    wreg      enum E7019
  4888 ;; Registers used:
  4889 ;;		wreg, status,2, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4895 ;;      Params:         0       0       0       0       0       0       0
  4896 ;;      Locals:         0       0       0       0       0       0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0
  4898 ;;      Totals:         0       0       0       0       0       0       0
  4899 ;;Total ram usage:        0 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    6
  4902 ;; This function calls:
  4903 ;;		_i2c1_driver_resetBus
  4904 ;; This function is called by:
  4905 ;;		_i2c_ISR
  4906 ;;		i2_i2c_ISR
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           	psect	text43
  4911  000F96                     __ptext43:
  4912                           	opt stack 0
  4913  000F96                     _do_I2C_RESET:
  4914                           	opt stack 0
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;Skip over the trampoline to the duplicate function for level 2
  4918  000F96  B24B               	btfsc	btemp,1,c
  4919  000F98  EF3A  F008         	goto	i2_do_I2C_RESET
  4920  000F9C                     _do_I2C_RESET$intlevel0:
  4921                           	opt stack 19
  4922                           
  4923                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  4924                           
  4925                           ;incstack = 0
  4926  000F9C  EC12  F009         	call	_i2c1_driver_resetBus	;wreg free
  4927                           
  4928                           ;i2c_master.c: 284: i2c_status.busy = 0;
  4929  000FA0  0100               	movlb	0	; () banked
  4930  000FA2  91B6               	bcf	_i2c_status& (0+255),0,b
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  4934  000FA4  0E00               	movlw	0
  4935  000FA6  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;i2c_master.c: 286: return I2C_RESET;
  4939  000FA8  0E0E               	movlw	14
  4940  000FAA  0012               	return	
  4941  000FAC                     __end_of_do_I2C_RESET:
  4942                           	opt stack 0
  4943                           tosu	equ	0xFFF
  4944                           tosh	equ	0xFFE
  4945                           tosl	equ	0xFFD
  4946                           pclath	equ	0xFFA
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           prodh	equ	0xFF4
  4952                           prodl	equ	0xFF3
  4953                           intcon	equ	0xFF2
  4954                           intcon2	equ	0xFF1
  4955                           postinc0	equ	0xFEE
  4956                           plusw0	equ	0xFEB
  4957                           wreg	equ	0xFE8
  4958                           postdec1	equ	0xFE5
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           plusw2	equ	0xFDB
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function _do_I2C_TX_REGISTER *****************
  4968 ;; Defined at:
  4969 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      enum E7019
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4983 ;;      Params:         0       0       0       0       0       0       0
  4984 ;;      Locals:         0       0       0       0       0       0       0
  4985 ;;      Temps:          0       0       0       0       0       0       0
  4986 ;;      Totals:         0       0       0       0       0       0       0
  4987 ;;Total ram usage:        0 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    6
  4990 ;; This function calls:
  4991 ;;		_i2c1_driver_TXData
  4992 ;; This function is called by:
  4993 ;;		_i2c_ISR
  4994 ;;		i2_i2c_ISR
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text44
  4999  000FD8                     __ptext44:
  5000                           	opt stack 0
  5001  000FD8                     _do_I2C_TX_REGISTER:
  5002                           	opt stack 0
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;Skip over the trampoline to the duplicate function for level 2
  5006  000FD8  B24B               	btfsc	btemp,1,c
  5007  000FDA  EF81  F008         	goto	i2_do_I2C_TX_REGISTER
  5008  000FDE                     _do_I2C_TX_REGISTER$intlevel0:
  5009                           	opt stack 19
  5010                           
  5011                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  5012                           
  5013                           ;incstack = 0
  5014  000FDE  0100               	movlb	0	; () banked
  5015  000FE0  87B6               	bsf	_i2c_status& (0+255),3,b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  5019  000FE2  51DA               	movf	(_i2c_status+36)& (0+255),w,b
  5020  000FE4  ECBB  F008         	call	_i2c1_driver_TXData
  5021                           
  5022                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  5023  000FE8  0E07               	movlw	7
  5024  000FEA  0012               	return	
  5025  000FEC                     __end_of_do_I2C_TX_REGISTER:
  5026                           	opt stack 0
  5027                           tosu	equ	0xFFF
  5028                           tosh	equ	0xFFE
  5029                           tosl	equ	0xFFD
  5030                           pclath	equ	0xFFA
  5031                           tblptru	equ	0xFF8
  5032                           tblptrh	equ	0xFF7
  5033                           tblptrl	equ	0xFF6
  5034                           tablat	equ	0xFF5
  5035                           prodh	equ	0xFF4
  5036                           prodl	equ	0xFF3
  5037                           intcon	equ	0xFF2
  5038                           intcon2	equ	0xFF1
  5039                           postinc0	equ	0xFEE
  5040                           plusw0	equ	0xFEB
  5041                           wreg	equ	0xFE8
  5042                           postdec1	equ	0xFE5
  5043                           fsr1l	equ	0xFE1
  5044                           indf2	equ	0xFDF
  5045                           postinc2	equ	0xFDE
  5046                           plusw2	equ	0xFDB
  5047                           fsr2h	equ	0xFDA
  5048                           fsr2l	equ	0xFD9
  5049                           status	equ	0xFD8
  5050                           
  5051 ;; *************** function _mssp1_setIRQ *****************
  5052 ;; Defined at:
  5053 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;		None
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;		None
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  1    wreg      void 
  5060 ;; Registers used:
  5061 ;;		None
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5067 ;;      Params:         0       0       0       0       0       0       0
  5068 ;;      Locals:         0       0       0       0       0       0       0
  5069 ;;      Temps:          0       0       0       0       0       0       0
  5070 ;;      Totals:         0       0       0       0       0       0       0
  5071 ;;Total ram usage:        0 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    5
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_do_I2C_TX_EMPTY
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text45
  5082  0011E0                     __ptext45:
  5083                           	opt stack 0
  5084  0011E0                     _mssp1_setIRQ:
  5085                           	opt stack 19
  5086                           
  5087                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  5088                           
  5089                           ;incstack = 0
  5090  0011E0  869E               	bsf	3998,3,c	;volatile
  5091  0011E2  0012               	return		;funcret
  5092  0011E4                     __end_of_mssp1_setIRQ:
  5093                           	opt stack 0
  5094                           tosu	equ	0xFFF
  5095                           tosh	equ	0xFFE
  5096                           tosl	equ	0xFFD
  5097                           pclath	equ	0xFFA
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           prodh	equ	0xFF4
  5103                           prodl	equ	0xFF3
  5104                           intcon	equ	0xFF2
  5105                           intcon2	equ	0xFF1
  5106                           postinc0	equ	0xFEE
  5107                           plusw0	equ	0xFEB
  5108                           wreg	equ	0xFE8
  5109                           postdec1	equ	0xFE5
  5110                           fsr1l	equ	0xFE1
  5111                           indf2	equ	0xFDF
  5112                           postinc2	equ	0xFDE
  5113                           plusw2	equ	0xFDB
  5114                           fsr2h	equ	0xFDA
  5115                           fsr2l	equ	0xFD9
  5116                           status	equ	0xFD8
  5117                           
  5118 ;; *************** function _i2c1_driver_isNACK *****************
  5119 ;; Defined at:
  5120 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;		None
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;		None
  5125 ;; Return value:  Size  Location     Type
  5126 ;;		None               void
  5127 ;; Registers used:
  5128 ;;		wreg, status,2, status,0
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5134 ;;      Params:         0       0       0       0       0       0       0
  5135 ;;      Locals:         0       0       0       0       0       0       0
  5136 ;;      Temps:          1       0       0       0       0       0       0
  5137 ;;      Totals:         1       0       0       0       0       0       0
  5138 ;;Total ram usage:        1 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    5
  5141 ;; This function calls:
  5142 ;;		Nothing
  5143 ;; This function is called by:
  5144 ;;		_do_I2C_TX
  5145 ;;		_i2c_ISR
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           	psect	text46
  5150  000FAC                     __ptext46:
  5151                           	opt stack 0
  5152  000FAC                     _i2c1_driver_isNACK:
  5153                           	opt stack 20
  5154                           
  5155                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  5156                           
  5157                           ;incstack = 0
  5158  000FAC  50C5               	movf	4037,w,c	;volatile
  5159  000FAE  0BBF               	andlw	-65
  5160  000FB0  0940               	iorlw	64
  5161  000FB2  6EC5               	movwf	4037,c	;volatile
  5162  000FB4  38C5               	swapf	4037,w,c	;volatile
  5163  000FB6  32E8               	rrcf	wreg,f,c
  5164  000FB8  32E8               	rrcf	wreg,f,c
  5165  000FBA  0B01               	andlw	1
  5166  000FBC  6E3A               	movwf	??_i2c1_driver_isNACK& (0+255),c
  5167  000FBE  303A               	rrcf	??_i2c1_driver_isNACK,w,c
  5168  000FC0  0012               	return	
  5169  000FC2                     __end_of_i2c1_driver_isNACK:
  5170                           	opt stack 0
  5171                           tosu	equ	0xFFF
  5172                           tosh	equ	0xFFE
  5173                           tosl	equ	0xFFD
  5174                           pclath	equ	0xFFA
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           intcon	equ	0xFF2
  5182                           intcon2	equ	0xFF1
  5183                           postinc0	equ	0xFEE
  5184                           plusw0	equ	0xFEB
  5185                           wreg	equ	0xFE8
  5186                           postdec1	equ	0xFE5
  5187                           fsr1l	equ	0xFE1
  5188                           indf2	equ	0xFDF
  5189                           postinc2	equ	0xFDE
  5190                           plusw2	equ	0xFDB
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _i2c1_driver_TXData *****************
  5196 ;; Defined at:
  5197 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  d               1    wreg     unsigned char 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  d               1   20[COMRAM] unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5211 ;;      Params:         0       0       0       0       0       0       0
  5212 ;;      Locals:         1       0       0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0
  5214 ;;      Totals:         1       0       0       0       0       0       0
  5215 ;;Total ram usage:        1 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    5
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_do_I2C_SEND_ADR_READ
  5222 ;;		_do_I2C_SEND_INITIAL_READ
  5223 ;;		_do_I2C_TX_REGISTER
  5224 ;;		_do_I2C_SEND_ADR_WRITE
  5225 ;;		_do_I2C_TX
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text47
  5230  001176                     __ptext47:
  5231                           	opt stack 0
  5232  001176                     _i2c1_driver_TXData:
  5233                           	opt stack 19
  5234                           
  5235                           ;incstack = 0
  5236                           ;i2c1_driver_TXData@d stored from wreg
  5237  001176  6E3A               	movwf	i2c1_driver_TXData@d,c
  5238                           
  5239                           ;i2c1_driver.c: 188: SSP1BUF = d;
  5240  001178  C03A  FFC9         	movff	i2c1_driver_TXData@d,4041	;volatile
  5241  00117C  0012               	return		;funcret
  5242  00117E                     __end_of_i2c1_driver_TXData:
  5243                           	opt stack 0
  5244                           tosu	equ	0xFFF
  5245                           tosh	equ	0xFFE
  5246                           tosl	equ	0xFFD
  5247                           pclath	equ	0xFFA
  5248                           tblptru	equ	0xFF8
  5249                           tblptrh	equ	0xFF7
  5250                           tblptrl	equ	0xFF6
  5251                           tablat	equ	0xFF5
  5252                           prodh	equ	0xFF4
  5253                           prodl	equ	0xFF3
  5254                           intcon	equ	0xFF2
  5255                           intcon2	equ	0xFF1
  5256                           postinc0	equ	0xFEE
  5257                           plusw0	equ	0xFEB
  5258                           wreg	equ	0xFE8
  5259                           postdec1	equ	0xFE5
  5260                           fsr1l	equ	0xFE1
  5261                           indf2	equ	0xFDF
  5262                           postinc2	equ	0xFDE
  5263                           plusw2	equ	0xFDB
  5264                           fsr2h	equ	0xFDA
  5265                           fsr2l	equ	0xFD9
  5266                           status	equ	0xFD8
  5267                           
  5268 ;; *************** function _i2c1_driver_getRXData *****************
  5269 ;; Defined at:
  5270 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      unsigned char 
  5277 ;; Registers used:
  5278 ;;		wreg, status,2
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5284 ;;      Params:         0       0       0       0       0       0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    5
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_do_I2C_RX
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           	psect	text48
  5299  0011E4                     __ptext48:
  5300                           	opt stack 0
  5301  0011E4                     _i2c1_driver_getRXData:
  5302                           	opt stack 19
  5303                           
  5304                           ;i2c1_driver.c: 173: return SSP1BUF;
  5305                           
  5306                           ;incstack = 0
  5307  0011E4  50C9               	movf	4041,w,c	;volatile
  5308  0011E6  0012               	return	
  5309  0011E8                     __end_of_i2c1_driver_getRXData:
  5310                           	opt stack 0
  5311                           tosu	equ	0xFFF
  5312                           tosh	equ	0xFFE
  5313                           tosl	equ	0xFFD
  5314                           pclath	equ	0xFFA
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           intcon	equ	0xFF2
  5322                           intcon2	equ	0xFF1
  5323                           postinc0	equ	0xFEE
  5324                           plusw0	equ	0xFEB
  5325                           wreg	equ	0xFE8
  5326                           postdec1	equ	0xFE5
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           plusw2	equ	0xFDB
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _i2c1_driver_sendNACK *****************
  5336 ;; Defined at:
  5337 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;		None
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		None
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5351 ;;      Params:         0       0       0       0       0       0       0
  5352 ;;      Locals:         0       0       0       0       0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0
  5354 ;;      Totals:         0       0       0       0       0       0       0
  5355 ;;Total ram usage:        0 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    5
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_do_I2C_DO_NACK_STOP
  5362 ;;		_do_I2C_DO_NACK_RESTART
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text49
  5367  0011BE                     __ptext49:
  5368                           	opt stack 0
  5369  0011BE                     _i2c1_driver_sendNACK:
  5370                           	opt stack 18
  5371                           
  5372                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  5373                           
  5374                           ;incstack = 0
  5375  0011BE  8AC5               	bsf	4037,5,c	;volatile
  5376                           
  5377                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  5378  0011C0  88C5               	bsf	4037,4,c	;volatile
  5379  0011C2  0012               	return		;funcret
  5380  0011C4                     __end_of_i2c1_driver_sendNACK:
  5381                           	opt stack 0
  5382                           tosu	equ	0xFFF
  5383                           tosh	equ	0xFFE
  5384                           tosl	equ	0xFFD
  5385                           pclath	equ	0xFFA
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           prodh	equ	0xFF4
  5391                           prodl	equ	0xFF3
  5392                           intcon	equ	0xFF2
  5393                           intcon2	equ	0xFF1
  5394                           postinc0	equ	0xFEE
  5395                           plusw0	equ	0xFEB
  5396                           wreg	equ	0xFE8
  5397                           postdec1	equ	0xFE5
  5398                           fsr1l	equ	0xFE1
  5399                           indf2	equ	0xFDF
  5400                           postinc2	equ	0xFDE
  5401                           plusw2	equ	0xFDB
  5402                           fsr2h	equ	0xFDA
  5403                           fsr2l	equ	0xFD9
  5404                           status	equ	0xFD8
  5405                           
  5406 ;; *************** function _i2c1_driver_resetBus *****************
  5407 ;; Defined at:
  5408 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		None
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5422 ;;      Params:         0       0       0       0       0       0       0
  5423 ;;      Locals:         0       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0
  5425 ;;      Totals:         0       0       0       0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    5
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_do_I2C_RESET
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text50
  5437  001224                     __ptext50:
  5438                           	opt stack 0
  5439  001224                     _i2c1_driver_resetBus:
  5440                           	opt stack 19
  5441                           
  5442                           ;incstack = 0
  5443  001224  0012               	return		;funcret
  5444  001226                     __end_of_i2c1_driver_resetBus:
  5445                           	opt stack 0
  5446                           tosu	equ	0xFFF
  5447                           tosh	equ	0xFFE
  5448                           tosl	equ	0xFFD
  5449                           pclath	equ	0xFFA
  5450                           tblptru	equ	0xFF8
  5451                           tblptrh	equ	0xFF7
  5452                           tblptrl	equ	0xFF6
  5453                           tablat	equ	0xFF5
  5454                           prodh	equ	0xFF4
  5455                           prodl	equ	0xFF3
  5456                           intcon	equ	0xFF2
  5457                           intcon2	equ	0xFF1
  5458                           postinc0	equ	0xFEE
  5459                           plusw0	equ	0xFEB
  5460                           wreg	equ	0xFE8
  5461                           postdec1	equ	0xFE5
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           plusw2	equ	0xFDB
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _i2c1_driver_startRX *****************
  5471 ;; Defined at:
  5472 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;		None
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;		None
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  1    wreg      void 
  5479 ;; Registers used:
  5480 ;;		None
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5486 ;;      Params:         0       0       0       0       0       0       0
  5487 ;;      Locals:         0       0       0       0       0       0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0
  5489 ;;      Totals:         0       0       0       0       0       0       0
  5490 ;;Total ram usage:        0 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    5
  5493 ;; This function calls:
  5494 ;;		Nothing
  5495 ;; This function is called by:
  5496 ;;		_do_I2C_RCEN
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text51
  5501  0011E8                     __ptext51:
  5502                           	opt stack 0
  5503  0011E8                     _i2c1_driver_startRX:
  5504                           	opt stack 19
  5505                           
  5506                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  5507                           
  5508                           ;incstack = 0
  5509  0011E8  86C5               	bsf	4037,3,c	;volatile
  5510  0011EA  0012               	return		;funcret
  5511  0011EC                     __end_of_i2c1_driver_startRX:
  5512                           	opt stack 0
  5513                           tosu	equ	0xFFF
  5514                           tosh	equ	0xFFE
  5515                           tosl	equ	0xFFD
  5516                           pclath	equ	0xFFA
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           intcon2	equ	0xFF1
  5525                           postinc0	equ	0xFEE
  5526                           plusw0	equ	0xFEB
  5527                           wreg	equ	0xFE8
  5528                           postdec1	equ	0xFE5
  5529                           fsr1l	equ	0xFE1
  5530                           indf2	equ	0xFDF
  5531                           postinc2	equ	0xFDE
  5532                           plusw2	equ	0xFDB
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function _returnReset *****************
  5538 ;; Defined at:
  5539 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  p               2   20[COMRAM] PTR void 
  5542 ;;		 -> NULL(0), 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;		None
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      enum E6842
  5547 ;; Registers used:
  5548 ;;		wreg
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5554 ;;      Params:         2       0       0       0       0       0       0
  5555 ;;      Locals:         0       0       0       0       0       0       0
  5556 ;;      Temps:          0       0       0       0       0       0       0
  5557 ;;      Totals:         2       0       0       0       0       0       0
  5558 ;;Total ram usage:        2 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    5
  5561 ;; This function calls:
  5562 ;;		Nothing
  5563 ;; This function is called by:
  5564 ;;		_i2c_open
  5565 ;;		_do_I2C_DO_ADDRESS_NACK
  5566 ;;		_do_I2C_TX
  5567 ;;		_do_I2C_RX
  5568 ;;		_do_I2C_TX_EMPTY
  5569 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5570 ;;		i2_do_I2C_TX
  5571 ;;		i2_do_I2C_RX
  5572 ;;		i2_do_I2C_TX_EMPTY
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text52
  5577  00115A                     __ptext52:
  5578                           	opt stack 0
  5579  00115A                     _returnReset:
  5580                           	opt stack 0
  5581                           
  5582                           ;Skip over the trampoline to the duplicate function for level 2
  5583  00115A  B24B               	btfsc	btemp,1,c
  5584  00115C  EF08  F009         	goto	i2_returnReset
  5585  001160                     _returnReset$intlevel0:
  5586                           	opt stack 19
  5587                           
  5588                           ;i2c_master.c: 515: return i2c_reset_link;
  5589                           
  5590                           ;incstack = 0
  5591  001160  0E05               	movlw	5
  5592  001162  0012               	return	
  5593  001164                     __end_of_returnReset:
  5594                           	opt stack 0
  5595                           tosu	equ	0xFFF
  5596                           tosh	equ	0xFFE
  5597                           tosl	equ	0xFFD
  5598                           pclath	equ	0xFFA
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           intcon2	equ	0xFF1
  5607                           postinc0	equ	0xFEE
  5608                           plusw0	equ	0xFEB
  5609                           wreg	equ	0xFE8
  5610                           postdec1	equ	0xFE5
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           plusw2	equ	0xFDB
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function _returnStop *****************
  5620 ;; Defined at:
  5621 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  p               2   20[COMRAM] PTR void 
  5624 ;;		 -> NULL(0), 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      enum E6842
  5629 ;; Registers used:
  5630 ;;		wreg
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5636 ;;      Params:         2       0       0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0
  5639 ;;      Totals:         2       0       0       0       0       0       0
  5640 ;;Total ram usage:        2 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    5
  5643 ;; This function calls:
  5644 ;;		Nothing
  5645 ;; This function is called by:
  5646 ;;		_i2c_open
  5647 ;;		_setCallBack
  5648 ;;		_do_I2C_DO_ADDRESS_NACK
  5649 ;;		_do_I2C_TX
  5650 ;;		_do_I2C_RX
  5651 ;;		_do_I2C_TX_EMPTY
  5652 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5653 ;;		i2_do_I2C_TX
  5654 ;;		i2_do_I2C_RX
  5655 ;;		i2_do_I2C_TX_EMPTY
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text53
  5660  001164                     __ptext53:
  5661                           	opt stack 0
  5662  001164                     _returnStop:
  5663                           	opt stack 0
  5664                           
  5665                           ;Skip over the trampoline to the duplicate function for level 2
  5666  001164  B24B               	btfsc	btemp,1,c
  5667  001166  EF0A  F009         	goto	i2_returnStop
  5668  00116A                     _returnStop$intlevel0:
  5669                           	opt stack 19
  5670                           
  5671                           ;i2c_master.c: 510: return i2c_stop;
  5672                           
  5673                           ;incstack = 0
  5674  00116A  0E01               	movlw	1
  5675  00116C  0012               	return	
  5676  00116E                     __end_of_returnStop:
  5677                           	opt stack 0
  5678                           tosu	equ	0xFFF
  5679                           tosh	equ	0xFFE
  5680                           tosl	equ	0xFFD
  5681                           pclath	equ	0xFFA
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           intcon	equ	0xFF2
  5689                           intcon2	equ	0xFF1
  5690                           postinc0	equ	0xFEE
  5691                           plusw0	equ	0xFEB
  5692                           wreg	equ	0xFE8
  5693                           postdec1	equ	0xFE5
  5694                           fsr1l	equ	0xFE1
  5695                           indf2	equ	0xFDF
  5696                           postinc2	equ	0xFDE
  5697                           plusw2	equ	0xFDB
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _i2c1_driver_stop *****************
  5703 ;; Defined at:
  5704 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;		None
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      void 
  5711 ;; Registers used:
  5712 ;;		None
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5718 ;;      Params:         0       0       0       0       0       0       0
  5719 ;;      Locals:         0       0       0       0       0       0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0
  5721 ;;      Totals:         0       0       0       0       0       0       0
  5722 ;;Total ram usage:        0 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    5
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_do_I2C_SEND_STOP
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text54
  5733  0011EC                     __ptext54:
  5734                           	opt stack 0
  5735  0011EC                     _i2c1_driver_stop:
  5736                           	opt stack 18
  5737                           
  5738                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  5739                           
  5740                           ;incstack = 0
  5741  0011EC  84C5               	bsf	4037,2,c	;volatile
  5742  0011EE  0012               	return		;funcret
  5743  0011F0                     __end_of_i2c1_driver_stop:
  5744                           	opt stack 0
  5745                           tosu	equ	0xFFF
  5746                           tosh	equ	0xFFE
  5747                           tosl	equ	0xFFD
  5748                           pclath	equ	0xFFA
  5749                           tblptru	equ	0xFF8
  5750                           tblptrh	equ	0xFF7
  5751                           tblptrl	equ	0xFF6
  5752                           tablat	equ	0xFF5
  5753                           prodh	equ	0xFF4
  5754                           prodl	equ	0xFF3
  5755                           intcon	equ	0xFF2
  5756                           intcon2	equ	0xFF1
  5757                           postinc0	equ	0xFEE
  5758                           plusw0	equ	0xFEB
  5759                           wreg	equ	0xFE8
  5760                           postdec1	equ	0xFE5
  5761                           fsr1l	equ	0xFE1
  5762                           indf2	equ	0xFDF
  5763                           postinc2	equ	0xFDE
  5764                           plusw2	equ	0xFDB
  5765                           fsr2h	equ	0xFDA
  5766                           fsr2l	equ	0xFD9
  5767                           status	equ	0xFD8
  5768                           
  5769 ;; *************** function _i2c1_driver_restart *****************
  5770 ;; Defined at:
  5771 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;		None
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;		None
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  1    wreg      void 
  5778 ;; Registers used:
  5779 ;;		None
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5785 ;;      Params:         0       0       0       0       0       0       0
  5786 ;;      Locals:         0       0       0       0       0       0       0
  5787 ;;      Temps:          0       0       0       0       0       0       0
  5788 ;;      Totals:         0       0       0       0       0       0       0
  5789 ;;Total ram usage:        0 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    5
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_do_I2C_SEND_RESTART_READ
  5796 ;;		_do_I2C_SEND_RESTART_WRITE
  5797 ;;		_do_I2C_SEND_RESTART
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text55
  5802  0011F0                     __ptext55:
  5803                           	opt stack 0
  5804  0011F0                     _i2c1_driver_restart:
  5805                           	opt stack 18
  5806                           
  5807                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  5808                           
  5809                           ;incstack = 0
  5810  0011F0  82C5               	bsf	4037,1,c	;volatile
  5811  0011F2  0012               	return		;funcret
  5812  0011F4                     __end_of_i2c1_driver_restart:
  5813                           	opt stack 0
  5814                           tosu	equ	0xFFF
  5815                           tosh	equ	0xFFE
  5816                           tosl	equ	0xFFD
  5817                           pclath	equ	0xFFA
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           intcon2	equ	0xFF1
  5826                           postinc0	equ	0xFEE
  5827                           plusw0	equ	0xFEB
  5828                           wreg	equ	0xFE8
  5829                           postdec1	equ	0xFE5
  5830                           fsr1l	equ	0xFE1
  5831                           indf2	equ	0xFDF
  5832                           postinc2	equ	0xFDE
  5833                           plusw2	equ	0xFDB
  5834                           fsr2h	equ	0xFDA
  5835                           fsr2l	equ	0xFD9
  5836                           status	equ	0xFD8
  5837                           
  5838 ;; *************** function _i2c1_driver_sendACK *****************
  5839 ;; Defined at:
  5840 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;		None
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;		None
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		None
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5854 ;;      Params:         0       0       0       0       0       0       0
  5855 ;;      Locals:         0       0       0       0       0       0       0
  5856 ;;      Temps:          0       0       0       0       0       0       0
  5857 ;;      Totals:         0       0       0       0       0       0       0
  5858 ;;Total ram usage:        0 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:    5
  5861 ;; This function calls:
  5862 ;;		Nothing
  5863 ;; This function is called by:
  5864 ;;		_do_I2C_DO_ACK
  5865 ;;		_do_I2C_RX
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text56
  5870  0011C4                     __ptext56:
  5871                           	opt stack 0
  5872  0011C4                     _i2c1_driver_sendACK:
  5873                           	opt stack 19
  5874                           
  5875                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  5876                           
  5877                           ;incstack = 0
  5878  0011C4  9AC5               	bcf	4037,5,c	;volatile
  5879                           
  5880                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  5881  0011C6  88C5               	bsf	4037,4,c	;volatile
  5882  0011C8  0012               	return		;funcret
  5883  0011CA                     __end_of_i2c1_driver_sendACK:
  5884                           	opt stack 0
  5885                           tosu	equ	0xFFF
  5886                           tosh	equ	0xFFE
  5887                           tosl	equ	0xFFD
  5888                           pclath	equ	0xFFA
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           intcon	equ	0xFF2
  5896                           intcon2	equ	0xFF1
  5897                           postinc0	equ	0xFEE
  5898                           plusw0	equ	0xFEB
  5899                           wreg	equ	0xFE8
  5900                           postdec1	equ	0xFE5
  5901                           fsr1l	equ	0xFE1
  5902                           indf2	equ	0xFDF
  5903                           postinc2	equ	0xFDE
  5904                           plusw2	equ	0xFDB
  5905                           fsr2h	equ	0xFDA
  5906                           fsr2l	equ	0xFD9
  5907                           status	equ	0xFD8
  5908                           
  5909 ;; *************** function _i2c1_driver_start *****************
  5910 ;; Defined at:
  5911 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;		None
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		None
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5925 ;;      Params:         0       0       0       0       0       0       0
  5926 ;;      Locals:         0       0       0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0
  5928 ;;      Totals:         0       0       0       0       0       0       0
  5929 ;;Total ram usage:        0 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    5
  5932 ;; This function calls:
  5933 ;;		Nothing
  5934 ;; This function is called by:
  5935 ;;		_i2c_masterOperation
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	text57
  5940  0011F4                     __ptext57:
  5941                           	opt stack 0
  5942  0011F4                     _i2c1_driver_start:
  5943                           	opt stack 22
  5944                           
  5945                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  5946                           
  5947                           ;incstack = 0
  5948  0011F4  80C5               	bsf	4037,0,c	;volatile
  5949  0011F6  0012               	return		;funcret
  5950  0011F8                     __end_of_i2c1_driver_start:
  5951                           	opt stack 0
  5952                           tosu	equ	0xFFF
  5953                           tosh	equ	0xFFE
  5954                           tosl	equ	0xFFD
  5955                           pclath	equ	0xFFA
  5956                           tblptru	equ	0xFF8
  5957                           tblptrh	equ	0xFF7
  5958                           tblptrl	equ	0xFF6
  5959                           tablat	equ	0xFF5
  5960                           prodh	equ	0xFF4
  5961                           prodl	equ	0xFF3
  5962                           intcon	equ	0xFF2
  5963                           intcon2	equ	0xFF1
  5964                           postinc0	equ	0xFEE
  5965                           plusw0	equ	0xFEB
  5966                           wreg	equ	0xFE8
  5967                           postdec1	equ	0xFE5
  5968                           fsr1l	equ	0xFE1
  5969                           indf2	equ	0xFDF
  5970                           postinc2	equ	0xFDE
  5971                           plusw2	equ	0xFDB
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _i2c_close *****************
  5977 ;; Defined at:
  5978 ;;		line 170 in file "mcc_generated_files/drivers/i2c_master.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  ret             1   20[COMRAM] enum E6837
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      enum E6837
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5992 ;;      Params:         0       0       0       0       0       0       0
  5993 ;;      Locals:         1       0       0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0
  5995 ;;      Totals:         1       0       0       0       0       0       0
  5996 ;;Total ram usage:        1 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    6
  5999 ;; This function calls:
  6000 ;;		_mssp1_clearIRQ
  6001 ;;		_mssp1_disableIRQ
  6002 ;; This function is called by:
  6003 ;;		_write_register
  6004 ;;		_read_register
  6005 ;;		_read_xyzvalues
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           	psect	text58
  6010  000EEC                     __ptext58:
  6011                           	opt stack 0
  6012  000EEC                     _i2c_close:
  6013                           	opt stack 23
  6014                           
  6015                           ;i2c_master.c: 172: i2c_error_t ret = I2C_BUSY;
  6016                           
  6017                           ;incstack = 0
  6018  000EEC  0E01               	movlw	1
  6019  000EEE  6E3A               	movwf	i2c_close@ret,c
  6020                           
  6021                           ;i2c_master.c: 173: if(!i2c_status.busy)
  6022  000EF0  0100               	movlb	0	; () banked
  6023  000EF2  B1B6               	btfsc	_i2c_status& (0+255),0,b
  6024  000EF4  D008               	goto	l83
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;i2c_master.c: 174: {
  6028                           ;i2c_master.c: 175: i2c_status.inUse = 0;
  6029  000EF6  93B6               	bcf	_i2c_status& (0+255),1,b
  6030                           
  6031                           ;i2c_master.c: 177: i2c_status.address = 0xff;
  6032  000EF8  69B7               	setf	(_i2c_status+1)& (0+255),b
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;i2c_master.c: 178: mssp1_clearIRQ();
  6036  000EFA  ECFE  F008         	call	_mssp1_clearIRQ	;wreg free
  6037                           
  6038                           ;i2c_master.c: 179: mssp1_disableIRQ();
  6039  000EFE  ECFC  F008         	call	_mssp1_disableIRQ	;wreg free
  6040                           
  6041                           ;i2c_master.c: 180: ret = i2c_status.error;
  6042  000F02  C0C1  F03A         	movff	_i2c_status+11,i2c_close@ret
  6043  000F06                     l83:
  6044                           
  6045                           ;i2c_master.c: 181: }
  6046                           ;i2c_master.c: 182: return ret;
  6047  000F06  503A               	movf	i2c_close@ret,w,c
  6048  000F08  0012               	return	
  6049  000F0A                     __end_of_i2c_close:
  6050                           	opt stack 0
  6051                           tosu	equ	0xFFF
  6052                           tosh	equ	0xFFE
  6053                           tosl	equ	0xFFD
  6054                           pclath	equ	0xFFA
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           intcon2	equ	0xFF1
  6063                           postinc0	equ	0xFEE
  6064                           plusw0	equ	0xFEB
  6065                           wreg	equ	0xFE8
  6066                           postdec1	equ	0xFE5
  6067                           fsr1l	equ	0xFE1
  6068                           indf2	equ	0xFDF
  6069                           postinc2	equ	0xFDE
  6070                           plusw2	equ	0xFDB
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function _mssp1_disableIRQ *****************
  6076 ;; Defined at:
  6077 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;		None
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		None
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6091 ;;      Params:         0       0       0       0       0       0       0
  6092 ;;      Locals:         0       0       0       0       0       0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0
  6094 ;;      Totals:         0       0       0       0       0       0       0
  6095 ;;Total ram usage:        0 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    5
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_i2c_close
  6102 ;;		_i2c_setTimeOut
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           	psect	text59
  6107  0011F8                     __ptext59:
  6108                           	opt stack 0
  6109  0011F8                     _mssp1_disableIRQ:
  6110                           	opt stack 23
  6111                           
  6112                           ;i2c1_driver.c: 50: PIE1bits.SSP1IE = 0;
  6113                           
  6114                           ;incstack = 0
  6115  0011F8  969D               	bcf	3997,3,c	;volatile
  6116  0011FA  0012               	return		;funcret
  6117  0011FC                     __end_of_mssp1_disableIRQ:
  6118                           	opt stack 0
  6119                           tosu	equ	0xFFF
  6120                           tosh	equ	0xFFE
  6121                           tosl	equ	0xFFD
  6122                           pclath	equ	0xFFA
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           prodh	equ	0xFF4
  6128                           prodl	equ	0xFF3
  6129                           intcon	equ	0xFF2
  6130                           intcon2	equ	0xFF1
  6131                           postinc0	equ	0xFEE
  6132                           plusw0	equ	0xFEB
  6133                           wreg	equ	0xFE8
  6134                           postdec1	equ	0xFE5
  6135                           fsr1l	equ	0xFE1
  6136                           indf2	equ	0xFDF
  6137                           postinc2	equ	0xFDE
  6138                           plusw2	equ	0xFDB
  6139                           fsr2h	equ	0xFDA
  6140                           fsr2l	equ	0xFD9
  6141                           status	equ	0xFD8
  6142                           
  6143 ;; *************** function _mssp1_clearIRQ *****************
  6144 ;; Defined at:
  6145 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;		None
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;		None
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  1    wreg      void 
  6152 ;; Registers used:
  6153 ;;		None
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6159 ;;      Params:         0       0       0       0       0       0       0
  6160 ;;      Locals:         0       0       0       0       0       0       0
  6161 ;;      Temps:          0       0       0       0       0       0       0
  6162 ;;      Totals:         0       0       0       0       0       0       0
  6163 ;;Total ram usage:        0 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    5
  6166 ;; This function calls:
  6167 ;;		Nothing
  6168 ;; This function is called by:
  6169 ;;		_i2c_open
  6170 ;;		_i2c_close
  6171 ;;		_i2c_ISR
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           	psect	text60
  6176  0011FC                     __ptext60:
  6177                           	opt stack 0
  6178  0011FC                     _mssp1_clearIRQ:
  6179                           	opt stack 23
  6180                           
  6181                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6182                           
  6183                           ;incstack = 0
  6184  0011FC  969E               	bcf	3998,3,c	;volatile
  6185  0011FE  0012               	return		;funcret
  6186  001200                     __end_of_mssp1_clearIRQ:
  6187                           	opt stack 0
  6188                           tosu	equ	0xFFF
  6189                           tosh	equ	0xFFE
  6190                           tosl	equ	0xFFD
  6191                           pclath	equ	0xFFA
  6192                           tblptru	equ	0xFF8
  6193                           tblptrh	equ	0xFF7
  6194                           tblptrl	equ	0xFF6
  6195                           tablat	equ	0xFF5
  6196                           prodh	equ	0xFF4
  6197                           prodl	equ	0xFF3
  6198                           intcon	equ	0xFF2
  6199                           intcon2	equ	0xFF1
  6200                           postinc0	equ	0xFEE
  6201                           plusw0	equ	0xFEB
  6202                           wreg	equ	0xFE8
  6203                           postdec1	equ	0xFE5
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           plusw2	equ	0xFDB
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function _INTERRUPT_InterruptManager *****************
  6213 ;; Defined at:
  6214 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;		None
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;		None
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      void 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6228 ;;      Params:         0       0       0       0       0       0       0
  6229 ;;      Locals:         0       0       0       0       0       0       0
  6230 ;;      Temps:         18       0       0       0       0       0       0
  6231 ;;      Totals:        18       0       0       0       0       0       0
  6232 ;;Total ram usage:       18 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    4
  6235 ;; This function calls:
  6236 ;;		Absolute function
  6237 ;;		_EUSART1_Receive_ISR
  6238 ;;		_EUSART1_Transmit_ISR
  6239 ;;		_i2c_busCollisionISR
  6240 ;;		i2_i2c_ISR
  6241 ;; This function is called by:
  6242 ;;		Interrupt level 2
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	intcode
  6247  000008                     __pintcode:
  6248                           	opt stack 0
  6249  000008                     _INTERRUPT_InterruptManager:
  6250                           	opt stack 17
  6251                           
  6252                           ;incstack = 0
  6253  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6254  00000A  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
  6255  00000E  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6256  000012  CFE9 F02A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6257  000016  CFEA F02B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6258  00001A  CFE1 F02C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6259  00001E  CFE2 F02D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6260  000022  CFD9 F02E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6261  000026  CFDA F02F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6262  00002A  CFF3 F030          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6263  00002E  CFF4 F031          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6264  000032  CFF6 F032          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6265  000036  CFF7 F033          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6266  00003A  CFF8 F034          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6267  00003E  CFF5 F035          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6268  000042  C04B  F036         	movff	btemp,??_INTERRUPT_InterruptManager+14
  6269  000046  C04C  F037         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  6270  00004A  C04D  F038         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  6271  00004E  C04E  F039         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  6272                           
  6273                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  6274  000052  ACF2               	btfss	intcon,6,c	;volatile
  6275  000054  D030               	goto	i2u165_49
  6276                           
  6277                           ;interrupt_manager.c: 61: {
  6278                           ;interrupt_manager.c: 62: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  6279  000056  B6A0               	btfsc	4000,3,c	;volatile
  6280  000058  A6A1               	btfss	4001,3,c	;volatile
  6281  00005A  D008               	goto	i2l567
  6282                           
  6283                           ;interrupt_manager.c: 63: {
  6284                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  6285  00005C  D801               	call	i2u156_48
  6286  00005E  D02B               	goto	i2u165_49
  6287  000060                     i2u156_48:
  6288  000060  0005               	push	
  6289  000062  6EFA               	movwf	pclath,c
  6290  000064  5013               	movf	_i2c1_driver_busCollisionISR,w,c
  6291  000066  6EFD               	movwf	tosl,c
  6292  000068  5014               	movf	_i2c1_driver_busCollisionISR+1,w,c
  6293  00006A  D020               	goto	L6
  6294  00006C                     i2l567:
  6295                           
  6296                           ;interrupt_manager.c: 66: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  6297  00006C  B69D               	btfsc	3997,3,c	;volatile
  6298  00006E  A69E               	btfss	3998,3,c	;volatile
  6299  000070  D008               	goto	i2l569
  6300                           
  6301                           ;interrupt_manager.c: 67: {
  6302                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  6303  000072  D801               	call	i2u159_48
  6304  000074  D020               	goto	i2u165_49
  6305  000076                     i2u159_48:
  6306  000076  0005               	push	
  6307  000078  6EFA               	movwf	pclath,c
  6308  00007A  5011               	movf	_i2c1_driver_i2cISR,w,c
  6309  00007C  6EFD               	movwf	tosl,c
  6310  00007E  5012               	movf	_i2c1_driver_i2cISR+1,w,c
  6311  000080  D015               	goto	L6
  6312  000082                     i2l569:
  6313                           
  6314                           ;interrupt_manager.c: 70: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6315  000082  B89D               	btfsc	3997,4,c	;volatile
  6316  000084  A89E               	btfss	3998,4,c	;volatile
  6317  000086  D008               	goto	i2l571
  6318                           
  6319                           ;interrupt_manager.c: 71: {
  6320                           ;interrupt_manager.c: 72: EUSART1_TxDefaultInterruptHandler();
  6321  000088  D801               	call	i2u162_48
  6322  00008A  D015               	goto	i2u165_49
  6323  00008C                     i2u162_48:
  6324  00008C  0005               	push	
  6325  00008E  6EFA               	movwf	pclath,c
  6326  000090  5048               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  6327  000092  6EFD               	movwf	tosl,c
  6328  000094  5049               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  6329  000096  D00A               	goto	L6
  6330  000098                     i2l571:
  6331                           
  6332                           ;interrupt_manager.c: 74: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6333  000098  BA9D               	btfsc	3997,5,c	;volatile
  6334  00009A  AA9E               	btfss	3998,5,c	;volatile
  6335  00009C  D00C               	goto	i2u165_49
  6336                           
  6337                           ;interrupt_manager.c: 75: {
  6338                           ;interrupt_manager.c: 76: EUSART1_RxDefaultInterruptHandler();
  6339  00009E  D801               	call	i2u165_48
  6340  0000A0  D00A               	goto	i2u165_49
  6341  0000A2                     i2u165_48:
  6342  0000A2  0005               	push	
  6343  0000A4  6EFA               	movwf	pclath,c
  6344  0000A6  5046               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  6345  0000A8  6EFD               	movwf	tosl,c
  6346  0000AA  5047               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  6347  0000AC                     L6:
  6348  0000AC  6EFE               	movwf	tosh,c
  6349  0000AE  50F8               	movf	tblptru,w,c
  6350  0000B0  6EFF               	movwf	tosu,c
  6351  0000B2  50FA               	movf	pclath,w,c
  6352  0000B4  0012               	return		;indir
  6353  0000B6                     i2u165_49:
  6354                           
  6355                           ;interrupt_manager.c: 83: else
  6356                           ;interrupt_manager.c: 84: {
  6357                           
  6358                           ;interrupt_manager.c: 81: }
  6359                           ;interrupt_manager.c: 82: }
  6360                           
  6361                           ;interrupt_manager.c: 78: else
  6362                           ;interrupt_manager.c: 79: {
  6363                           
  6364                           ;interrupt_manager.c: 77: }
  6365  0000B6  C039  F04E         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  6366  0000BA  C038  F04D         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  6367  0000BE  C037  F04C         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  6368  0000C2  C036  F04B         	movff	??_INTERRUPT_InterruptManager+14,btemp
  6369  0000C6  C035  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6370  0000CA  C034  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6371  0000CE  C033  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6372  0000D2  C032  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6373  0000D6  C031  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6374  0000DA  C030  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6375  0000DE  C02F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6376  0000E2  C02E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6377  0000E6  C02D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6378  0000EA  C02C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6379  0000EE  C02B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6380  0000F2  C02A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6381  0000F6  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6382  0000FA  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6383  0000FE  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6384  000100  0011               	retfie		f
  6385  000102                     __end_of_INTERRUPT_InterruptManager:
  6386                           	opt stack 0
  6387                           tosu	equ	0xFFF
  6388                           tosh	equ	0xFFE
  6389                           tosl	equ	0xFFD
  6390                           pclatu	equ	0xFFB
  6391                           pclath	equ	0xFFA
  6392                           tblptru	equ	0xFF8
  6393                           tblptrh	equ	0xFF7
  6394                           tblptrl	equ	0xFF6
  6395                           tablat	equ	0xFF5
  6396                           prodh	equ	0xFF4
  6397                           prodl	equ	0xFF3
  6398                           intcon	equ	0xFF2
  6399                           intcon2	equ	0xFF1
  6400                           postinc0	equ	0xFEE
  6401                           plusw0	equ	0xFEB
  6402                           fsr0h	equ	0xFEA
  6403                           fsr0l	equ	0xFE9
  6404                           wreg	equ	0xFE8
  6405                           postdec1	equ	0xFE5
  6406                           fsr1h	equ	0xFE2
  6407                           fsr1l	equ	0xFE1
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           plusw2	equ	0xFDB
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function i2_i2c_ISR *****************
  6416 ;; Defined at:
  6417 ;;		line 484 in file "mcc_generated_files/drivers/i2c_master.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6431 ;;      Params:         0       0       0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0
  6434 ;;      Totals:         0       0       0       0       0       0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    3
  6438 ;; This function calls:
  6439 ;;		i2_do_I2C_DO_ACK
  6440 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6441 ;;		i2_do_I2C_DO_NACK_RESTART
  6442 ;;		i2_do_I2C_DO_NACK_STOP
  6443 ;;		i2_do_I2C_IDLE
  6444 ;;		i2_do_I2C_RCEN
  6445 ;;		i2_do_I2C_RESET
  6446 ;;		i2_do_I2C_RX
  6447 ;;		i2_do_I2C_SEND_ADR_READ
  6448 ;;		i2_do_I2C_SEND_ADR_WRITE
  6449 ;;		i2_do_I2C_SEND_INITIAL_READ
  6450 ;;		i2_do_I2C_SEND_RESTART
  6451 ;;		i2_do_I2C_SEND_RESTART_READ
  6452 ;;		i2_do_I2C_SEND_RESTART_WRITE
  6453 ;;		i2_do_I2C_SEND_STOP
  6454 ;;		i2_do_I2C_TX
  6455 ;;		i2_do_I2C_TX_EMPTY
  6456 ;;		i2_do_I2C_TX_REGISTER
  6457 ;;		i2_i2c1_driver_isNACK
  6458 ;;		i2_mssp1_clearIRQ
  6459 ;; This function is called by:
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           	psect	text62
  6464  000CCE                     __ptext62:
  6465                           	opt stack 0
  6466  000CCE                     i2_i2c_ISR:
  6467                           	opt stack 17
  6468                           
  6469                           ;i2c_master.c: 486: mssp1_clearIRQ();
  6470                           
  6471                           ;incstack = 0
  6472  000CCE  EC00  F009         	call	i2_mssp1_clearIRQ	;wreg free
  6473                           
  6474                           ;i2c_master.c: 492: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  6475  000CD2  0100               	movlb	0	; () banked
  6476  000CD4  A7B6               	btfss	_i2c_status& (0+255),3,b
  6477  000CD6  D007               	goto	i2l209
  6478                           
  6479                           ; BSR set to: 0
  6480  000CD8  ECE1  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  6481  000CDC  A0D8               	btfss	status,0,c
  6482  000CDE  D003               	goto	i2l209
  6483                           
  6484                           ;i2c_master.c: 493: {
  6485                           ;i2c_master.c: 494: i2c_status.state = I2C_ADDRESS_NACK;
  6486  000CE0  0E0F               	movlw	15
  6487  000CE2  0100               	movlb	0	; () banked
  6488  000CE4  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  6489  000CE6                     i2l209:
  6490                           
  6491                           ;i2c_master.c: 495: }
  6492                           ;i2c_master.c: 497: i2c_status.state = fsmStateTable[i2c_status.state]();
  6493                           
  6494                           ; BSR set to: 0
  6495  000CE6  0100               	movlb	0	; () banked
  6496  000CE8  51C0               	movf	(_i2c_status+10)& (0+255),w,b
  6497  000CEA  0D02               	mullw	2
  6498  000CEC  0E92               	movlw	low _fsmStateTable
  6499  000CEE  24F3               	addwf	prodl,w,c
  6500  000CF0  6ED9               	movwf	fsr2l,c
  6501  000CF2  0E00               	movlw	high _fsmStateTable
  6502  000CF4  20F4               	addwfc	prodh,w,c
  6503  000CF6  6EDA               	movwf	fsr2h,c
  6504  000CF8  D801               	call	i2u151_48
  6505  000CFA  D00A               	goto	i2u151_49
  6506  000CFC                     i2u151_48:
  6507  000CFC  0005               	push	
  6508  000CFE  6EFA               	movwf	pclath,c
  6509  000D00  50DE               	movf	postinc2,w,c
  6510  000D02  6EFD               	movwf	tosl,c
  6511  000D04  50DE               	movf	postinc2,w,c
  6512  000D06  6EFE               	movwf	tosh,c
  6513  000D08  50F8               	movf	tblptru,w,c
  6514  000D0A  6EFF               	movwf	tosu,c
  6515  000D0C  50FA               	movf	pclath,w,c
  6516  000D0E  0012               	return		;indir
  6517  000D10                     i2u151_49:
  6518  000D10  0100               	movlb	0	; () banked
  6519  000D12  6FC0               	movwf	(_i2c_status+10)& (0+255),b
  6520                           
  6521                           ; BSR set to: 0
  6522  000D14  0012               	return		;funcret
  6523  000D16                     __end_ofi2_i2c_ISR:
  6524                           	opt stack 0
  6525                           tosu	equ	0xFFF
  6526                           tosh	equ	0xFFE
  6527                           tosl	equ	0xFFD
  6528                           pclatu	equ	0xFFB
  6529                           pclath	equ	0xFFA
  6530                           tblptru	equ	0xFF8
  6531                           tblptrh	equ	0xFF7
  6532                           tblptrl	equ	0xFF6
  6533                           tablat	equ	0xFF5
  6534                           prodh	equ	0xFF4
  6535                           prodl	equ	0xFF3
  6536                           intcon	equ	0xFF2
  6537                           intcon2	equ	0xFF1
  6538                           postinc0	equ	0xFEE
  6539                           plusw0	equ	0xFEB
  6540                           fsr0h	equ	0xFEA
  6541                           fsr0l	equ	0xFE9
  6542                           wreg	equ	0xFE8
  6543                           postdec1	equ	0xFE5
  6544                           fsr1h	equ	0xFE2
  6545                           fsr1l	equ	0xFE1
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           plusw2	equ	0xFDB
  6549                           fsr2h	equ	0xFDA
  6550                           fsr2l	equ	0xFD9
  6551                           status	equ	0xFD8
  6552                           
  6553 ;; *************** function i2_mssp1_clearIRQ *****************
  6554 ;; Defined at:
  6555 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		None
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6569 ;;      Params:         0       0       0       0       0       0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		i2_i2c_ISR
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	text63
  6583  001200                     __ptext63:
  6584                           	opt stack 0
  6585  001200                     i2_mssp1_clearIRQ:
  6586                           	opt stack 19
  6587                           
  6588                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;incstack = 0
  6592  001200  969E               	bcf	3998,3,c	;volatile
  6593  001202  0012               	return		;funcret
  6594  001204                     __end_ofi2_mssp1_clearIRQ:
  6595                           	opt stack 0
  6596                           tosu	equ	0xFFF
  6597                           tosh	equ	0xFFE
  6598                           tosl	equ	0xFFD
  6599                           pclatu	equ	0xFFB
  6600                           pclath	equ	0xFFA
  6601                           tblptru	equ	0xFF8
  6602                           tblptrh	equ	0xFF7
  6603                           tblptrl	equ	0xFF6
  6604                           tablat	equ	0xFF5
  6605                           prodh	equ	0xFF4
  6606                           prodl	equ	0xFF3
  6607                           intcon	equ	0xFF2
  6608                           intcon2	equ	0xFF1
  6609                           postinc0	equ	0xFEE
  6610                           plusw0	equ	0xFEB
  6611                           fsr0h	equ	0xFEA
  6612                           fsr0l	equ	0xFE9
  6613                           wreg	equ	0xFE8
  6614                           postdec1	equ	0xFE5
  6615                           fsr1h	equ	0xFE2
  6616                           fsr1l	equ	0xFE1
  6617                           indf2	equ	0xFDF
  6618                           postinc2	equ	0xFDE
  6619                           plusw2	equ	0xFDB
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function i2_do_I2C_TX_EMPTY *****************
  6625 ;; Defined at:
  6626 ;;		line 442 in file "mcc_generated_files/drivers/i2c_master.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      enum E7019
  6633 ;; Registers used:
  6634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6640 ;;      Params:         0       0       0       0       0       0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0
  6642 ;;      Temps:          0       0       0       0       0       0       0
  6643 ;;      Totals:         0       0       0       0       0       0       0
  6644 ;;Total ram usage:        0 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    2
  6647 ;; This function calls:
  6648 ;;		i2_do_I2C_SEND_RESTART
  6649 ;;		i2_do_I2C_SEND_STOP
  6650 ;;		i2_mssp1_setIRQ
  6651 ;;		i2_returnReset
  6652 ;;		i2_returnStop
  6653 ;; This function is called by:
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text64
  6658  000AF0                     __ptext64:
  6659                           	opt stack 0
  6660  000AF0                     i2_do_I2C_TX_EMPTY:
  6661                           	opt stack 17
  6662                           
  6663                           ;i2c_master.c: 444: i2c_status.bufferFree = 1;
  6664                           
  6665                           ;incstack = 0
  6666  000AF0  0100               	movlb	0	; () banked
  6667  000AF2  85B6               	bsf	_i2c_status& (0+255),2,b
  6668                           
  6669                           ;i2c_master.c: 445: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6670  000AF4  D00A               	goto	i2l197
  6671  000AF6                     
  6672                           ;i2c_master.c: 448: case i2c_restart_write:
  6673                           ;i2c_master.c: 449: return do_I2C_SEND_RESTART();
  6674                           
  6675                           ; BSR set to: 0
  6676                           
  6677                           ; BSR set to: 0
  6678  000AF6  ECCF  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  6679  000AFA  0012               	return	
  6680  000AFC                     
  6681                           ;i2c_master.c: 451: mssp1_setIRQ();
  6682  000AFC  EC02  F009         	call	i2_mssp1_setIRQ	;wreg free
  6683                           
  6684                           ;i2c_master.c: 452: return I2C_TX;
  6685  000B00  0E03               	movlw	3
  6686  000B02  0012               	return	
  6687  000B04                     
  6688                           ;i2c_master.c: 455: return do_I2C_SEND_STOP();
  6689                           
  6690                           ;i2c_master.c: 454: case i2c_stop:
  6691  000B04  ECCB  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  6692                           
  6693                           ;i2c_master.c: 456: }
  6694  000B08  0012               	return	
  6695  000B0A                     i2l197:
  6696  000B0A  C0CE  F026         	movff	_i2c_status+24,i2returnReset@p
  6697  000B0E  C0CF  F027         	movff	_i2c_status+25,i2returnReset@p+1
  6698  000B12  EE20  F0C2         	lfsr	2,_i2c_status+12
  6699  000B16  D801               	call	i2u145_48
  6700  000B18  D00A               	goto	i2u145_49
  6701  000B1A                     i2u145_48:
  6702  000B1A  0005               	push	
  6703  000B1C  6EFA               	movwf	pclath,c
  6704  000B1E  50DE               	movf	postinc2,w,c
  6705  000B20  6EFD               	movwf	tosl,c
  6706  000B22  50DE               	movf	postinc2,w,c
  6707  000B24  6EFE               	movwf	tosh,c
  6708  000B26  50F8               	movf	tblptru,w,c
  6709  000B28  6EFF               	movwf	tosu,c
  6710  000B2A  50FA               	movf	pclath,w,c
  6711  000B2C  0012               	return		;indir
  6712  000B2E                     i2u145_49:
  6713                           
  6714                           ; Switch size 1, requested type "space"
  6715                           ; Number of cases is 4, Range of values is 1 to 4
  6716                           ; switch strategies available:
  6717                           ; Name         Instructions Cycles
  6718                           ; simple_byte           13     7 (average)
  6719                           ;	Chosen strategy is simple_byte
  6720  000B2E  0A01               	xorlw	1	; case 1
  6721  000B30  B4D8               	btfsc	status,2,c
  6722  000B32  D7E8               	goto	i2l202
  6723  000B34  0A03               	xorlw	3	; case 2
  6724  000B36  B4D8               	btfsc	status,2,c
  6725  000B38  D7DE               	goto	i2l198
  6726  000B3A  0A01               	xorlw	1	; case 3
  6727  000B3C  B4D8               	btfsc	status,2,c
  6728  000B3E  D7DB               	goto	i2l198
  6729  000B40  0A07               	xorlw	7	; case 4
  6730  000B42  B4D8               	btfsc	status,2,c
  6731  000B44  D7DB               	goto	i2l201
  6732  000B46  D7DE               	goto	i2l202
  6733  000B48                     __end_ofi2_do_I2C_TX_EMPTY:
  6734                           	opt stack 0
  6735                           tosu	equ	0xFFF
  6736                           tosh	equ	0xFFE
  6737                           tosl	equ	0xFFD
  6738                           pclatu	equ	0xFFB
  6739                           pclath	equ	0xFFA
  6740                           tblptru	equ	0xFF8
  6741                           tblptrh	equ	0xFF7
  6742                           tblptrl	equ	0xFF6
  6743                           tablat	equ	0xFF5
  6744                           prodh	equ	0xFF4
  6745                           prodl	equ	0xFF3
  6746                           intcon	equ	0xFF2
  6747                           intcon2	equ	0xFF1
  6748                           postinc0	equ	0xFEE
  6749                           plusw0	equ	0xFEB
  6750                           fsr0h	equ	0xFEA
  6751                           fsr0l	equ	0xFE9
  6752                           wreg	equ	0xFE8
  6753                           postdec1	equ	0xFE5
  6754                           fsr1h	equ	0xFE2
  6755                           fsr1l	equ	0xFE1
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           plusw2	equ	0xFDB
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763 ;; *************** function i2_do_I2C_RX *****************
  6764 ;; Defined at:
  6765 ;;		line 417 in file "mcc_generated_files/drivers/i2c_master.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      enum E7019
  6772 ;; Registers used:
  6773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6779 ;;      Params:         0       0       0       0       0       0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0
  6782 ;;      Totals:         0       0       0       0       0       0       0
  6783 ;;Total ram usage:        0 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    2
  6786 ;; This function calls:
  6787 ;;		i2_do_I2C_DO_NACK_RESTART
  6788 ;;		i2_do_I2C_DO_NACK_STOP
  6789 ;;		i2_i2c1_driver_getRXData
  6790 ;;		i2_i2c1_driver_sendACK
  6791 ;;		i2_returnReset
  6792 ;;		i2_returnStop
  6793 ;; This function is called by:
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text65
  6798  0009B2                     __ptext65:
  6799                           	opt stack 0
  6800  0009B2                     i2_do_I2C_RX:
  6801                           	opt stack 17
  6802                           
  6803                           ;i2c_master.c: 419: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  6804                           
  6805                           ;incstack = 0
  6806  0009B2  EC04  F009         	call	i2_i2c1_driver_getRXData	;wreg free
  6807  0009B6  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  6808  0009BA  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  6809  0009BE  6EDF               	movwf	indf2,c
  6810  0009C0  0100               	movlb	0	; () banked
  6811  0009C2  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  6812  0009C4  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;i2c_master.c: 420: if(--i2c_status.data_length)
  6816  0009C6  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  6817  0009C8  A0D8               	btfss	status,0,c
  6818  0009CA  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  6819  0009CC  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  6820  0009CE  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  6821  0009D0  B4D8               	btfsc	status,2,c
  6822  0009D2  D004               	goto	i2l185
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;i2c_master.c: 421: {
  6826                           ;i2c_master.c: 422: i2c1_driver_sendACK();
  6827  0009D4  ECE8  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  6828                           
  6829                           ;i2c_master.c: 423: return I2C_RCEN;
  6830  0009D8  0E05               	movlw	5
  6831                           
  6832                           ;i2c_master.c: 424: }
  6833  0009DA  0012               	return	
  6834  0009DC                     i2l185:
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;i2c_master.c: 425: else
  6838                           ;i2c_master.c: 426: {
  6839                           ;i2c_master.c: 427: i2c_status.bufferFree = 1;
  6840  0009DC  85B6               	bsf	_i2c_status& (0+255),2,b
  6841                           
  6842                           ;i2c_master.c: 428: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  6843  0009DE  D006               	goto	i2l188
  6844  0009E0                     
  6845                           ;i2c_master.c: 431: case i2c_restart_read:
  6846                           ;i2c_master.c: 432: return do_I2C_DO_NACK_RESTART();
  6847                           
  6848                           ; BSR set to: 0
  6849                           
  6850                           ; BSR set to: 0
  6851  0009E0  ECBF  F008         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  6852  0009E4  0012               	return	
  6853  0009E6                     
  6854                           ;i2c_master.c: 435: case i2c_stop:
  6855                           ;i2c_master.c: 436: return do_I2C_DO_NACK_STOP();
  6856                           
  6857                           ;i2c_master.c: 434: case i2c_continue:
  6858  0009E6  ECC3  F008         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  6859                           
  6860                           ;i2c_master.c: 437: }
  6861  0009EA  0012               	return	
  6862  0009EC                     i2l188:
  6863  0009EC  C0CE  F026         	movff	_i2c_status+24,i2returnReset@p
  6864  0009F0  C0CF  F027         	movff	_i2c_status+25,i2returnReset@p+1
  6865  0009F4  EE20  F0C2         	lfsr	2,_i2c_status+12
  6866  0009F8  D801               	call	i2u144_48
  6867  0009FA  D00A               	goto	i2u144_49
  6868  0009FC                     i2u144_48:
  6869  0009FC  0005               	push	
  6870  0009FE  6EFA               	movwf	pclath,c
  6871  000A00  50DE               	movf	postinc2,w,c
  6872  000A02  6EFD               	movwf	tosl,c
  6873  000A04  50DE               	movf	postinc2,w,c
  6874  000A06  6EFE               	movwf	tosh,c
  6875  000A08  50F8               	movf	tblptru,w,c
  6876  000A0A  6EFF               	movwf	tosu,c
  6877  000A0C  50FA               	movf	pclath,w,c
  6878  000A0E  0012               	return		;indir
  6879  000A10                     i2u144_49:
  6880                           
  6881                           ; Switch size 1, requested type "space"
  6882                           ; Number of cases is 4, Range of values is 1 to 4
  6883                           ; switch strategies available:
  6884                           ; Name         Instructions Cycles
  6885                           ; simple_byte           13     7 (average)
  6886                           ;	Chosen strategy is simple_byte
  6887  000A10  0A01               	xorlw	1	; case 1
  6888  000A12  B4D8               	btfsc	status,2,c
  6889  000A14  D7E8               	goto	i2l191
  6890  000A16  0A03               	xorlw	3	; case 2
  6891  000A18  B4D8               	btfsc	status,2,c
  6892  000A1A  D7E2               	goto	i2l189
  6893  000A1C  0A01               	xorlw	1	; case 3
  6894  000A1E  B4D8               	btfsc	status,2,c
  6895  000A20  D7DF               	goto	i2l189
  6896  000A22  0A07               	xorlw	7	; case 4
  6897  000A24  D7E0               	goto	i2l191
  6898  000A26                     __end_ofi2_do_I2C_RX:
  6899                           	opt stack 0
  6900                           tosu	equ	0xFFF
  6901                           tosh	equ	0xFFE
  6902                           tosl	equ	0xFFD
  6903                           pclatu	equ	0xFFB
  6904                           pclath	equ	0xFFA
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           intcon2	equ	0xFF1
  6913                           postinc0	equ	0xFEE
  6914                           plusw0	equ	0xFEB
  6915                           fsr0h	equ	0xFEA
  6916                           fsr0l	equ	0xFE9
  6917                           wreg	equ	0xFE8
  6918                           postdec1	equ	0xFE5
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           plusw2	equ	0xFDB
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function i2_do_I2C_TX *****************
  6929 ;; Defined at:
  6930 ;;		line 393 in file "mcc_generated_files/drivers/i2c_master.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      enum E7019
  6937 ;; Registers used:
  6938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6944 ;;      Params:         0       0       0       0       0       0       0
  6945 ;;      Locals:         2       0       0       0       0       0       0
  6946 ;;      Temps:          0       0       0       0       0       0       0
  6947 ;;      Totals:         2       0       0       0       0       0       0
  6948 ;;Total ram usage:        2 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    2
  6951 ;; This function calls:
  6952 ;;		i2_do_I2C_SEND_RESTART_READ
  6953 ;;		i2_do_I2C_SEND_RESTART_WRITE
  6954 ;;		i2_do_I2C_SEND_STOP
  6955 ;;		i2_i2c1_driver_TXData
  6956 ;;		i2_i2c1_driver_isNACK
  6957 ;;		i2_returnReset
  6958 ;;		i2_returnStop
  6959 ;; This function is called by:
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           	psect	text66
  6964  0008A8                     __ptext66:
  6965                           	opt stack 0
  6966  0008A8                     i2_do_I2C_TX:
  6967                           	opt stack 17
  6968                           
  6969                           ;i2c_master.c: 395: if(i2c1_driver_isNACK())
  6970                           
  6971                           ;incstack = 0
  6972  0008A8  ECE1  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  6973  0008AC  B0D8               	btfsc	status,0,c
  6974  0008AE  D00A               	goto	i2l170
  6975  0008B0  D026               	goto	i2l169
  6976  0008B2                     
  6977                           ;i2c_master.c: 400: return do_I2C_SEND_RESTART_READ();
  6978  0008B2  ECD7  F008         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  6979  0008B6  0012               	return	
  6980  0008B8                     
  6981                           ;i2c_master.c: 402: return do_I2C_SEND_RESTART_WRITE();
  6982  0008B8  ECD3  F008         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  6983  0008BC  0012               	return	
  6984  0008BE                     
  6985                           ;i2c_master.c: 405: case i2c_stop:
  6986                           ;i2c_master.c: 406: return do_I2C_SEND_STOP();
  6987                           
  6988                           ;i2c_master.c: 404: case i2c_continue:
  6989  0008BE  ECCB  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  6990                           
  6991                           ;i2c_master.c: 407: }
  6992  0008C2  0012               	return	
  6993  0008C4                     i2l170:
  6994  0008C4  C0D4  F026         	movff	_i2c_status+30,i2returnReset@p
  6995  0008C8  C0D5  F027         	movff	_i2c_status+31,i2returnReset@p+1
  6996  0008CC  EE20  F0C8         	lfsr	2,_i2c_status+18
  6997  0008D0  D801               	call	i2u141_48
  6998  0008D2  D00A               	goto	i2u141_49
  6999  0008D4                     i2u141_48:
  7000  0008D4  0005               	push	
  7001  0008D6  6EFA               	movwf	pclath,c
  7002  0008D8  50DE               	movf	postinc2,w,c
  7003  0008DA  6EFD               	movwf	tosl,c
  7004  0008DC  50DE               	movf	postinc2,w,c
  7005  0008DE  6EFE               	movwf	tosh,c
  7006  0008E0  50F8               	movf	tblptru,w,c
  7007  0008E2  6EFF               	movwf	tosu,c
  7008  0008E4  50FA               	movf	pclath,w,c
  7009  0008E6  0012               	return		;indir
  7010  0008E8                     i2u141_49:
  7011                           
  7012                           ; Switch size 1, requested type "space"
  7013                           ; Number of cases is 4, Range of values is 1 to 4
  7014                           ; switch strategies available:
  7015                           ; Name         Instructions Cycles
  7016                           ; simple_byte           13     7 (average)
  7017                           ;	Chosen strategy is simple_byte
  7018  0008E8  0A01               	xorlw	1	; case 1
  7019  0008EA  B4D8               	btfsc	status,2,c
  7020  0008EC  D7E8               	goto	i2l174
  7021  0008EE  0A03               	xorlw	3	; case 2
  7022  0008F0  B4D8               	btfsc	status,2,c
  7023  0008F2  D7DF               	goto	i2l171
  7024  0008F4  0A01               	xorlw	1	; case 3
  7025  0008F6  B4D8               	btfsc	status,2,c
  7026  0008F8  D7DF               	goto	i2l173
  7027  0008FA  0A07               	xorlw	7	; case 4
  7028  0008FC  D7E0               	goto	i2l174
  7029  0008FE                     i2l169:
  7030                           
  7031                           ;i2c_master.c: 409: else
  7032                           ;i2c_master.c: 410: {
  7033                           ;i2c_master.c: 411: i2c_status.addressNACKCheck = 0;
  7034  0008FE  0100               	movlb	0	; () banked
  7035  000900  97B6               	bcf	_i2c_status& (0+255),3,b
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;i2c_master.c: 412: i2c1_driver_TXData(*i2c_status.data_ptr++);
  7039  000902  C0B8  FFD9         	movff	_i2c_status+2,fsr2l
  7040  000906  C0B9  FFDA         	movff	_i2c_status+3,fsr2h
  7041  00090A  4BB8               	infsnz	(_i2c_status+2)& (0+255),f,b
  7042  00090C  2BB9               	incf	(_i2c_status+3)& (0+255),f,b
  7043  00090E  50DF               	movf	indf2,w,c
  7044  000910  ECDB  F008         	call	i2_i2c1_driver_TXData
  7045                           
  7046                           ;i2c_master.c: 413: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7047  000914  0100               	movlb	0	; () banked
  7048  000916  07BA               	decf	(_i2c_status+4)& (0+255),f,b
  7049  000918  A0D8               	btfss	status,0,c
  7050  00091A  07BB               	decf	(_i2c_status+5)& (0+255),f,b
  7051  00091C  51BA               	movf	(_i2c_status+4)& (0+255),w,b
  7052  00091E  11BB               	iorwf	(_i2c_status+5)& (0+255),w,b
  7053  000920  A4D8               	btfss	status,2,c
  7054  000922  D004               	goto	i2l180
  7055                           
  7056                           ; BSR set to: 0
  7057  000924  0E00               	movlw	0
  7058  000926  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7059  000928  0E06               	movlw	6
  7060  00092A  D003               	goto	L7
  7061  00092C                     i2l180:
  7062                           
  7063                           ; BSR set to: 0
  7064                           
  7065                           ; BSR set to: 0
  7066  00092C  0E00               	movlw	0
  7067  00092E  6E27               	movwf	i2_do_I2C_TX$315+1,c
  7068  000930  0E03               	movlw	3
  7069  000932                     L7:
  7070  000932  6E26               	movwf	i2_do_I2C_TX$315,c
  7071                           
  7072                           ; BSR set to: 0
  7073  000934  5026               	movf	i2_do_I2C_TX$315,w,c
  7074                           
  7075                           ; BSR set to: 0
  7076  000936  0012               	return	
  7077  000938                     __end_ofi2_do_I2C_TX:
  7078                           	opt stack 0
  7079                           tosu	equ	0xFFF
  7080                           tosh	equ	0xFFE
  7081                           tosl	equ	0xFFD
  7082                           pclatu	equ	0xFFB
  7083                           pclath	equ	0xFFA
  7084                           tblptru	equ	0xFF8
  7085                           tblptrh	equ	0xFF7
  7086                           tblptrl	equ	0xFF6
  7087                           tablat	equ	0xFF5
  7088                           prodh	equ	0xFF4
  7089                           prodl	equ	0xFF3
  7090                           intcon	equ	0xFF2
  7091                           intcon2	equ	0xFF1
  7092                           postinc0	equ	0xFEE
  7093                           plusw0	equ	0xFEB
  7094                           fsr0h	equ	0xFEA
  7095                           fsr0l	equ	0xFE9
  7096                           wreg	equ	0xFE8
  7097                           postdec1	equ	0xFE5
  7098                           fsr1h	equ	0xFE2
  7099                           fsr1l	equ	0xFE1
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           plusw2	equ	0xFDB
  7103                           fsr2h	equ	0xFDA
  7104                           fsr2l	equ	0xFD9
  7105                           status	equ	0xFD8
  7106                           
  7107 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  7108 ;; Defined at:
  7109 ;;		line 379 in file "mcc_generated_files/drivers/i2c_master.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;		None
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;		None
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      enum E7019
  7116 ;; Registers used:
  7117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7123 ;;      Params:         0       0       0       0       0       0       0
  7124 ;;      Locals:         0       0       0       0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0
  7126 ;;      Totals:         0       0       0       0       0       0       0
  7127 ;;Total ram usage:        0 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    2
  7130 ;; This function calls:
  7131 ;;		i2_do_I2C_SEND_RESTART
  7132 ;;		i2_do_I2C_SEND_STOP
  7133 ;;		i2_returnReset
  7134 ;;		i2_returnStop
  7135 ;; This function is called by:
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139                           	psect	text67
  7140  000D16                     __ptext67:
  7141                           	opt stack 0
  7142  000D16                     i2_do_I2C_DO_ADDRESS_NACK:
  7143                           	opt stack 17
  7144                           
  7145                           ;i2c_master.c: 381: i2c_status.addressNACKCheck = 0;
  7146                           
  7147                           ;incstack = 0
  7148  000D16  0100               	movlb	0	; () banked
  7149  000D18  97B6               	bcf	_i2c_status& (0+255),3,b
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;i2c_master.c: 382: i2c_status.error = I2C_FAIL;
  7153  000D1A  0E02               	movlw	2
  7154  000D1C  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  7155                           
  7156                           ;i2c_master.c: 383: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  7157  000D1E  D006               	goto	i2l161
  7158  000D20                     
  7159                           ;i2c_master.c: 386: case i2c_restart_write:
  7160                           ;i2c_master.c: 387: return do_I2C_SEND_RESTART();
  7161                           
  7162                           ; BSR set to: 0
  7163                           
  7164                           ; BSR set to: 0
  7165  000D20  ECCF  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  7166  000D24  0012               	return	
  7167  000D26                     
  7168                           ;i2c_master.c: 389: return do_I2C_SEND_STOP();
  7169  000D26  ECCB  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7170                           
  7171                           ;i2c_master.c: 390: }
  7172  000D2A  0012               	return	
  7173  000D2C                     i2l161:
  7174  000D2C  C0D2  F026         	movff	_i2c_status+28,i2returnReset@p
  7175  000D30  C0D3  F027         	movff	_i2c_status+29,i2returnReset@p+1
  7176  000D34  EE20  F0C6         	lfsr	2,_i2c_status+16
  7177  000D38  D801               	call	i2u139_48
  7178  000D3A  D00A               	goto	i2u139_49
  7179  000D3C                     i2u139_48:
  7180  000D3C  0005               	push	
  7181  000D3E  6EFA               	movwf	pclath,c
  7182  000D40  50DE               	movf	postinc2,w,c
  7183  000D42  6EFD               	movwf	tosl,c
  7184  000D44  50DE               	movf	postinc2,w,c
  7185  000D46  6EFE               	movwf	tosh,c
  7186  000D48  50F8               	movf	tblptru,w,c
  7187  000D4A  6EFF               	movwf	tosu,c
  7188  000D4C  50FA               	movf	pclath,w,c
  7189  000D4E  0012               	return		;indir
  7190  000D50                     i2u139_49:
  7191                           
  7192                           ; Switch size 1, requested type "space"
  7193                           ; Number of cases is 2, Range of values is 2 to 3
  7194                           ; switch strategies available:
  7195                           ; Name         Instructions Cycles
  7196                           ; simple_byte            7     4 (average)
  7197                           ;	Chosen strategy is simple_byte
  7198  000D50  0A02               	xorlw	2	; case 2
  7199  000D52  B4D8               	btfsc	status,2,c
  7200  000D54  D7E5               	goto	i2l162
  7201  000D56  0A01               	xorlw	1	; case 3
  7202  000D58  B4D8               	btfsc	status,2,c
  7203  000D5A  D7E2               	goto	i2l162
  7204  000D5C  D7E4               	goto	i2l165
  7205  000D5E                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  7206                           	opt stack 0
  7207                           tosu	equ	0xFFF
  7208                           tosh	equ	0xFFE
  7209                           tosl	equ	0xFFD
  7210                           pclatu	equ	0xFFB
  7211                           pclath	equ	0xFFA
  7212                           tblptru	equ	0xFF8
  7213                           tblptrh	equ	0xFF7
  7214                           tblptrl	equ	0xFF6
  7215                           tablat	equ	0xFF5
  7216                           prodh	equ	0xFF4
  7217                           prodl	equ	0xFF3
  7218                           intcon	equ	0xFF2
  7219                           intcon2	equ	0xFF1
  7220                           postinc0	equ	0xFEE
  7221                           plusw0	equ	0xFEB
  7222                           fsr0h	equ	0xFEA
  7223                           fsr0l	equ	0xFE9
  7224                           wreg	equ	0xFE8
  7225                           postdec1	equ	0xFE5
  7226                           fsr1h	equ	0xFE2
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           plusw2	equ	0xFDB
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  7236 ;; Defined at:
  7237 ;;		line 371 in file "mcc_generated_files/drivers/i2c_master.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;		None
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;                  1    wreg      enum E7019
  7244 ;; Registers used:
  7245 ;;		wreg, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7251 ;;      Params:         0       0       0       0       0       0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0
  7253 ;;      Temps:          0       0       0       0       0       0       0
  7254 ;;      Totals:         0       0       0       0       0       0       0
  7255 ;;Total ram usage:        0 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:    1
  7258 ;; This function calls:
  7259 ;;		i2_i2c1_driver_sendNACK
  7260 ;; This function is called by:
  7261 ;;		i2_do_I2C_RX
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           	psect	text68
  7266  00117E                     __ptext68:
  7267                           	opt stack 0
  7268  00117E                     i2_do_I2C_DO_NACK_RESTART:
  7269                           	opt stack 17
  7270                           
  7271                           ;i2c_master.c: 373: i2c1_driver_sendNACK();
  7272                           
  7273                           ;incstack = 0
  7274  00117E  ECE5  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7275                           
  7276                           ;i2c_master.c: 374: return I2C_SEND_RESTART;
  7277  001182  0E09               	movlw	9
  7278  001184  0012               	return	
  7279  001186                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  7280                           	opt stack 0
  7281                           tosu	equ	0xFFF
  7282                           tosh	equ	0xFFE
  7283                           tosl	equ	0xFFD
  7284                           pclatu	equ	0xFFB
  7285                           pclath	equ	0xFFA
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           intcon	equ	0xFF2
  7293                           intcon2	equ	0xFF1
  7294                           postinc0	equ	0xFEE
  7295                           plusw0	equ	0xFEB
  7296                           fsr0h	equ	0xFEA
  7297                           fsr0l	equ	0xFE9
  7298                           wreg	equ	0xFE8
  7299                           postdec1	equ	0xFE5
  7300                           fsr1h	equ	0xFE2
  7301                           fsr1l	equ	0xFE1
  7302                           indf2	equ	0xFDF
  7303                           postinc2	equ	0xFDE
  7304                           plusw2	equ	0xFDB
  7305                           fsr2h	equ	0xFDA
  7306                           fsr2l	equ	0xFD9
  7307                           status	equ	0xFD8
  7308                           
  7309 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  7310 ;; Defined at:
  7311 ;;		line 365 in file "mcc_generated_files/drivers/i2c_master.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;		None
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;		None
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      enum E7019
  7318 ;; Registers used:
  7319 ;;		wreg, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7325 ;;      Params:         0       0       0       0       0       0       0
  7326 ;;      Locals:         0       0       0       0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0
  7328 ;;      Totals:         0       0       0       0       0       0       0
  7329 ;;Total ram usage:        0 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    1
  7332 ;; This function calls:
  7333 ;;		i2_i2c1_driver_sendNACK
  7334 ;; This function is called by:
  7335 ;;		i2_do_I2C_RX
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text69
  7340  001186                     __ptext69:
  7341                           	opt stack 0
  7342  001186                     i2_do_I2C_DO_NACK_STOP:
  7343                           	opt stack 17
  7344                           
  7345                           ;i2c_master.c: 367: i2c1_driver_sendNACK();
  7346                           
  7347                           ;incstack = 0
  7348  001186  ECE5  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  7349                           
  7350                           ;i2c_master.c: 368: return I2C_SEND_STOP;
  7351  00118A  0E0A               	movlw	10
  7352  00118C  0012               	return	
  7353  00118E                     __end_ofi2_do_I2C_DO_NACK_STOP:
  7354                           	opt stack 0
  7355                           tosu	equ	0xFFF
  7356                           tosh	equ	0xFFE
  7357                           tosl	equ	0xFFD
  7358                           pclatu	equ	0xFFB
  7359                           pclath	equ	0xFFA
  7360                           tblptru	equ	0xFF8
  7361                           tblptrh	equ	0xFF7
  7362                           tblptrl	equ	0xFF6
  7363                           tablat	equ	0xFF5
  7364                           prodh	equ	0xFF4
  7365                           prodl	equ	0xFF3
  7366                           intcon	equ	0xFF2
  7367                           intcon2	equ	0xFF1
  7368                           postinc0	equ	0xFEE
  7369                           plusw0	equ	0xFEB
  7370                           fsr0h	equ	0xFEA
  7371                           fsr0l	equ	0xFE9
  7372                           wreg	equ	0xFE8
  7373                           postdec1	equ	0xFE5
  7374                           fsr1h	equ	0xFE2
  7375                           fsr1l	equ	0xFE1
  7376                           indf2	equ	0xFDF
  7377                           postinc2	equ	0xFDE
  7378                           plusw2	equ	0xFDB
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function i2_do_I2C_DO_ACK *****************
  7384 ;; Defined at:
  7385 ;;		line 359 in file "mcc_generated_files/drivers/i2c_master.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;		None
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      enum E7019
  7392 ;; Registers used:
  7393 ;;		wreg, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7399 ;;      Params:         0       0       0       0       0       0       0
  7400 ;;      Locals:         0       0       0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0
  7402 ;;      Totals:         0       0       0       0       0       0       0
  7403 ;;Total ram usage:        0 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    1
  7406 ;; This function calls:
  7407 ;;		i2_i2c1_driver_sendACK
  7408 ;; This function is called by:
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text70
  7413  00118E                     __ptext70:
  7414                           	opt stack 0
  7415  00118E                     i2_do_I2C_DO_ACK:
  7416                           	opt stack 18
  7417                           
  7418                           ;i2c_master.c: 361: i2c1_driver_sendACK();
  7419                           
  7420                           ;incstack = 0
  7421  00118E  ECE8  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  7422                           
  7423                           ;i2c_master.c: 362: return I2C_RCEN;
  7424  001192  0E05               	movlw	5
  7425  001194  0012               	return	
  7426  001196                     __end_ofi2_do_I2C_DO_ACK:
  7427                           	opt stack 0
  7428                           tosu	equ	0xFFF
  7429                           tosh	equ	0xFFE
  7430                           tosl	equ	0xFFD
  7431                           pclatu	equ	0xFFB
  7432                           pclath	equ	0xFFA
  7433                           tblptru	equ	0xFF8
  7434                           tblptrh	equ	0xFF7
  7435                           tblptrl	equ	0xFF6
  7436                           tablat	equ	0xFF5
  7437                           prodh	equ	0xFF4
  7438                           prodl	equ	0xFF3
  7439                           intcon	equ	0xFF2
  7440                           intcon2	equ	0xFF1
  7441                           postinc0	equ	0xFEE
  7442                           plusw0	equ	0xFEB
  7443                           fsr0h	equ	0xFEA
  7444                           fsr0l	equ	0xFE9
  7445                           wreg	equ	0xFE8
  7446                           postdec1	equ	0xFE5
  7447                           fsr1h	equ	0xFE2
  7448                           fsr1l	equ	0xFE1
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           plusw2	equ	0xFDB
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function i2_do_I2C_RCEN *****************
  7457 ;; Defined at:
  7458 ;;		line 352 in file "mcc_generated_files/drivers/i2c_master.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;		None
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      enum E7019
  7465 ;; Registers used:
  7466 ;;		wreg, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7472 ;;      Params:         0       0       0       0       0       0       0
  7473 ;;      Locals:         0       0       0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0
  7475 ;;      Totals:         0       0       0       0       0       0       0
  7476 ;;Total ram usage:        0 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    1
  7479 ;; This function calls:
  7480 ;;		i2_i2c1_driver_startRX
  7481 ;; This function is called by:
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           	psect	text71
  7486  001110                     __ptext71:
  7487                           	opt stack 0
  7488  001110                     i2_do_I2C_RCEN:
  7489                           	opt stack 18
  7490                           
  7491                           ;i2c_master.c: 354: i2c_status.addressNACKCheck = 0;
  7492                           
  7493                           ;incstack = 0
  7494  001110  0100               	movlb	0	; () banked
  7495  001112  97B6               	bcf	_i2c_status& (0+255),3,b
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;i2c_master.c: 355: i2c1_driver_startRX();
  7499  001114  EC06  F009         	call	i2_i2c1_driver_startRX	;wreg free
  7500                           
  7501                           ;i2c_master.c: 356: return I2C_RX;
  7502  001118  0E04               	movlw	4
  7503  00111A  0012               	return	
  7504  00111C                     __end_ofi2_do_I2C_RCEN:
  7505                           	opt stack 0
  7506                           tosu	equ	0xFFF
  7507                           tosh	equ	0xFFE
  7508                           tosl	equ	0xFFD
  7509                           pclatu	equ	0xFFB
  7510                           pclath	equ	0xFFA
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           intcon	equ	0xFF2
  7518                           intcon2	equ	0xFF1
  7519                           postinc0	equ	0xFEE
  7520                           plusw0	equ	0xFEB
  7521                           fsr0h	equ	0xFEA
  7522                           fsr0l	equ	0xFE9
  7523                           wreg	equ	0xFE8
  7524                           postdec1	equ	0xFE5
  7525                           fsr1h	equ	0xFE2
  7526                           fsr1l	equ	0xFE1
  7527                           indf2	equ	0xFDF
  7528                           postinc2	equ	0xFDE
  7529                           plusw2	equ	0xFDB
  7530                           fsr2h	equ	0xFDA
  7531                           fsr2l	equ	0xFD9
  7532                           status	equ	0xFD8
  7533                           
  7534 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  7535 ;; Defined at:
  7536 ;;		line 345 in file "mcc_generated_files/drivers/i2c_master.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;		None
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;		None
  7541 ;; Return value:  Size  Location     Type
  7542 ;;                  1    wreg      enum E7019
  7543 ;; Registers used:
  7544 ;;		wreg, status,2, status,0, cstack
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7550 ;;      Params:         0       0       0       0       0       0       0
  7551 ;;      Locals:         0       0       0       0       0       0       0
  7552 ;;      Temps:          0       0       0       0       0       0       0
  7553 ;;      Totals:         0       0       0       0       0       0       0
  7554 ;;Total ram usage:        0 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:    1
  7557 ;; This function calls:
  7558 ;;		i2_i2c1_driver_TXData
  7559 ;; This function is called by:
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text72
  7564  001044                     __ptext72:
  7565                           	opt stack 0
  7566  001044                     i2_do_I2C_SEND_ADR_WRITE:
  7567                           	opt stack 18
  7568                           
  7569                           ;i2c_master.c: 347: i2c_status.addressNACKCheck = 1;
  7570                           
  7571                           ;incstack = 0
  7572  001044  0100               	movlb	0	; () banked
  7573  001046  87B6               	bsf	_i2c_status& (0+255),3,b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;i2c_master.c: 348: i2c1_driver_TXData(i2c_status.address << 1);
  7577  001048  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  7578  00104A  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  7579  00104C  ECDB  F008         	call	i2_i2c1_driver_TXData
  7580                           
  7581                           ;i2c_master.c: 349: return I2C_TX;
  7582  001050  0E03               	movlw	3
  7583  001052  0012               	return	
  7584  001054                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  7585                           	opt stack 0
  7586                           tosu	equ	0xFFF
  7587                           tosh	equ	0xFFE
  7588                           tosl	equ	0xFFD
  7589                           pclatu	equ	0xFFB
  7590                           pclath	equ	0xFFA
  7591                           tblptru	equ	0xFF8
  7592                           tblptrh	equ	0xFF7
  7593                           tblptrl	equ	0xFF6
  7594                           tablat	equ	0xFF5
  7595                           prodh	equ	0xFF4
  7596                           prodl	equ	0xFF3
  7597                           intcon	equ	0xFF2
  7598                           intcon2	equ	0xFF1
  7599                           postinc0	equ	0xFEE
  7600                           plusw0	equ	0xFEB
  7601                           fsr0h	equ	0xFEA
  7602                           fsr0l	equ	0xFE9
  7603                           wreg	equ	0xFE8
  7604                           postdec1	equ	0xFE5
  7605                           fsr1h	equ	0xFE2
  7606                           fsr1l	equ	0xFE1
  7607                           indf2	equ	0xFDF
  7608                           postinc2	equ	0xFDE
  7609                           plusw2	equ	0xFDB
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function i2_do_I2C_SEND_INITIAL_READ *****************
  7615 ;; Defined at:
  7616 ;;		line 329 in file "mcc_generated_files/drivers/i2c_master.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      enum E7019
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7630 ;;      Params:         0       0       0       0       0       0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0
  7633 ;;      Totals:         0       0       0       0       0       0       0
  7634 ;;Total ram usage:        0 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    1
  7637 ;; This function calls:
  7638 ;;		i2_i2c1_driver_TXData
  7639 ;; This function is called by:
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text73
  7644  001054                     __ptext73:
  7645                           	opt stack 0
  7646  001054                     i2_do_I2C_SEND_INITIAL_READ:
  7647                           	opt stack 18
  7648                           
  7649                           ;i2c_master.c: 330: i2c_status.addressNACKCheck = 1;
  7650                           
  7651                           ;incstack = 0
  7652  001054  0100               	movlb	0	; () banked
  7653  001056  87B6               	bsf	_i2c_status& (0+255),3,b
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;i2c_master.c: 331: i2c1_driver_TXData(i2c_status.address << 1 | 0);
  7657  001058  51B7               	movf	(_i2c_status+1)& (0+255),w,b
  7658  00105A  25B7               	addwf	(_i2c_status+1)& (0+255),w,b
  7659  00105C  ECDB  F008         	call	i2_i2c1_driver_TXData
  7660                           
  7661                           ;i2c_master.c: 333: return I2C_TX_REGISTER;
  7662  001060  0E11               	movlw	17
  7663  001062  0012               	return	
  7664  001064                     __end_ofi2_do_I2C_SEND_INITIAL_READ:
  7665                           	opt stack 0
  7666                           tosu	equ	0xFFF
  7667                           tosh	equ	0xFFE
  7668                           tosl	equ	0xFFD
  7669                           pclatu	equ	0xFFB
  7670                           pclath	equ	0xFFA
  7671                           tblptru	equ	0xFF8
  7672                           tblptrh	equ	0xFF7
  7673                           tblptrl	equ	0xFF6
  7674                           tablat	equ	0xFF5
  7675                           prodh	equ	0xFF4
  7676                           prodl	equ	0xFF3
  7677                           intcon	equ	0xFF2
  7678                           intcon2	equ	0xFF1
  7679                           postinc0	equ	0xFEE
  7680                           plusw0	equ	0xFEB
  7681                           fsr0h	equ	0xFEA
  7682                           fsr0l	equ	0xFE9
  7683                           wreg	equ	0xFE8
  7684                           postdec1	equ	0xFE5
  7685                           fsr1h	equ	0xFE2
  7686                           fsr1l	equ	0xFE1
  7687                           indf2	equ	0xFDF
  7688                           postinc2	equ	0xFDE
  7689                           plusw2	equ	0xFDB
  7690                           fsr2h	equ	0xFDA
  7691                           fsr2l	equ	0xFD9
  7692                           status	equ	0xFD8
  7693                           
  7694 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  7695 ;; Defined at:
  7696 ;;		line 320 in file "mcc_generated_files/drivers/i2c_master.c"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;		None
  7699 ;; Auto vars:     Size  Location     Type
  7700 ;;		None
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  1    wreg      enum E7019
  7703 ;; Registers used:
  7704 ;;		wreg, status,0, cstack
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7710 ;;      Params:         0       0       0       0       0       0       0
  7711 ;;      Locals:         0       0       0       0       0       0       0
  7712 ;;      Temps:          0       0       0       0       0       0       0
  7713 ;;      Totals:         0       0       0       0       0       0       0
  7714 ;;Total ram usage:        0 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    1
  7717 ;; This function calls:
  7718 ;;		i2_i2c1_driver_TXData
  7719 ;; This function is called by:
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           	psect	text74
  7724  001064                     __ptext74:
  7725                           	opt stack 0
  7726  001064                     i2_do_I2C_SEND_ADR_READ:
  7727                           	opt stack 18
  7728                           
  7729                           ;i2c_master.c: 322: i2c_status.addressNACKCheck = 1;
  7730                           
  7731                           ;incstack = 0
  7732  001064  0100               	movlb	0	; () banked
  7733  001066  87B6               	bsf	_i2c_status& (0+255),3,b
  7734                           
  7735                           ; BSR set to: 0
  7736                           ;i2c_master.c: 323: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  7737  001068  80D8               	bsf	status,0,c
  7738  00106A  35B7               	rlcf	(_i2c_status+1)& (0+255),w,b
  7739  00106C  ECDB  F008         	call	i2_i2c1_driver_TXData
  7740                           
  7741                           ;i2c_master.c: 325: return I2C_RCEN;
  7742  001070  0E05               	movlw	5
  7743  001072  0012               	return	
  7744  001074                     __end_ofi2_do_I2C_SEND_ADR_READ:
  7745                           	opt stack 0
  7746                           tosu	equ	0xFFF
  7747                           tosh	equ	0xFFE
  7748                           tosl	equ	0xFFD
  7749                           pclatu	equ	0xFFB
  7750                           pclath	equ	0xFFA
  7751                           tblptru	equ	0xFF8
  7752                           tblptrh	equ	0xFF7
  7753                           tblptrl	equ	0xFF6
  7754                           tablat	equ	0xFF5
  7755                           prodh	equ	0xFF4
  7756                           prodl	equ	0xFF3
  7757                           intcon	equ	0xFF2
  7758                           intcon2	equ	0xFF1
  7759                           postinc0	equ	0xFEE
  7760                           plusw0	equ	0xFEB
  7761                           fsr0h	equ	0xFEA
  7762                           fsr0l	equ	0xFE9
  7763                           wreg	equ	0xFE8
  7764                           postdec1	equ	0xFE5
  7765                           fsr1h	equ	0xFE2
  7766                           fsr1l	equ	0xFE1
  7767                           indf2	equ	0xFDF
  7768                           postinc2	equ	0xFDE
  7769                           plusw2	equ	0xFDB
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8
  7773                           
  7774 ;; *************** function i2_do_I2C_SEND_STOP *****************
  7775 ;; Defined at:
  7776 ;;		line 314 in file "mcc_generated_files/drivers/i2c_master.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;		None
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      enum E7019
  7783 ;; Registers used:
  7784 ;;		wreg, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7790 ;;      Params:         0       0       0       0       0       0       0
  7791 ;;      Locals:         0       0       0       0       0       0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0
  7793 ;;      Totals:         0       0       0       0       0       0       0
  7794 ;;Total ram usage:        0 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    1
  7797 ;; This function calls:
  7798 ;;		i2_i2c1_driver_stop
  7799 ;; This function is called by:
  7800 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7801 ;;		i2_do_I2C_TX
  7802 ;;		i2_do_I2C_TX_EMPTY
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text75
  7807  001196                     __ptext75:
  7808                           	opt stack 0
  7809  001196                     i2_do_I2C_SEND_STOP:
  7810                           	opt stack 17
  7811                           
  7812                           ;i2c_master.c: 316: i2c1_driver_stop();
  7813                           
  7814                           ;incstack = 0
  7815  001196  EC0C  F009         	call	i2_i2c1_driver_stop	;wreg free
  7816                           
  7817                           ;i2c_master.c: 317: return I2C_IDLE;
  7818  00119A  0E00               	movlw	0
  7819  00119C  0012               	return	
  7820  00119E                     __end_ofi2_do_I2C_SEND_STOP:
  7821                           	opt stack 0
  7822                           tosu	equ	0xFFF
  7823                           tosh	equ	0xFFE
  7824                           tosl	equ	0xFFD
  7825                           pclatu	equ	0xFFB
  7826                           pclath	equ	0xFFA
  7827                           tblptru	equ	0xFF8
  7828                           tblptrh	equ	0xFF7
  7829                           tblptrl	equ	0xFF6
  7830                           tablat	equ	0xFF5
  7831                           prodh	equ	0xFF4
  7832                           prodl	equ	0xFF3
  7833                           intcon	equ	0xFF2
  7834                           intcon2	equ	0xFF1
  7835                           postinc0	equ	0xFEE
  7836                           plusw0	equ	0xFEB
  7837                           fsr0h	equ	0xFEA
  7838                           fsr0l	equ	0xFE9
  7839                           wreg	equ	0xFE8
  7840                           postdec1	equ	0xFE5
  7841                           fsr1h	equ	0xFE2
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           plusw2	equ	0xFDB
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  7851 ;; Defined at:
  7852 ;;		line 308 in file "mcc_generated_files/drivers/i2c_master.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;		None
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;		None
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  1    wreg      enum E7019
  7859 ;; Registers used:
  7860 ;;		wreg, cstack
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7866 ;;      Params:         0       0       0       0       0       0       0
  7867 ;;      Locals:         0       0       0       0       0       0       0
  7868 ;;      Temps:          0       0       0       0       0       0       0
  7869 ;;      Totals:         0       0       0       0       0       0       0
  7870 ;;Total ram usage:        0 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    1
  7873 ;; This function calls:
  7874 ;;		i2_i2c1_driver_restart
  7875 ;; This function is called by:
  7876 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7877 ;;		i2_do_I2C_TX_EMPTY
  7878 ;; This function uses a non-reentrant model
  7879 ;;
  7880                           
  7881                           	psect	text76
  7882  00119E                     __ptext76:
  7883                           	opt stack 0
  7884  00119E                     i2_do_I2C_SEND_RESTART:
  7885                           	opt stack 17
  7886                           
  7887                           ;i2c_master.c: 310: i2c1_driver_restart();
  7888                           
  7889                           ;incstack = 0
  7890  00119E  EC0E  F009         	call	i2_i2c1_driver_restart	;wreg free
  7891                           
  7892                           ;i2c_master.c: 311: return I2C_SEND_ADR_READ;
  7893  0011A2  0E01               	movlw	1
  7894  0011A4  0012               	return	
  7895  0011A6                     __end_ofi2_do_I2C_SEND_RESTART:
  7896                           	opt stack 0
  7897                           tosu	equ	0xFFF
  7898                           tosh	equ	0xFFE
  7899                           tosl	equ	0xFFD
  7900                           pclatu	equ	0xFFB
  7901                           pclath	equ	0xFFA
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           prodh	equ	0xFF4
  7907                           prodl	equ	0xFF3
  7908                           intcon	equ	0xFF2
  7909                           intcon2	equ	0xFF1
  7910                           postinc0	equ	0xFEE
  7911                           plusw0	equ	0xFEB
  7912                           fsr0h	equ	0xFEA
  7913                           fsr0l	equ	0xFE9
  7914                           wreg	equ	0xFE8
  7915                           postdec1	equ	0xFE5
  7916                           fsr1h	equ	0xFE2
  7917                           fsr1l	equ	0xFE1
  7918                           indf2	equ	0xFDF
  7919                           postinc2	equ	0xFDE
  7920                           plusw2	equ	0xFDB
  7921                           fsr2h	equ	0xFDA
  7922                           fsr2l	equ	0xFD9
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  7926 ;; Defined at:
  7927 ;;		line 302 in file "mcc_generated_files/drivers/i2c_master.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  1    wreg      enum E7019
  7934 ;; Registers used:
  7935 ;;		wreg, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7941 ;;      Params:         0       0       0       0       0       0       0
  7942 ;;      Locals:         0       0       0       0       0       0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0
  7944 ;;      Totals:         0       0       0       0       0       0       0
  7945 ;;Total ram usage:        0 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    1
  7948 ;; This function calls:
  7949 ;;		i2_i2c1_driver_restart
  7950 ;; This function is called by:
  7951 ;;		i2_do_I2C_TX
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           	psect	text77
  7956  0011A6                     __ptext77:
  7957                           	opt stack 0
  7958  0011A6                     i2_do_I2C_SEND_RESTART_WRITE:
  7959                           	opt stack 17
  7960                           
  7961                           ;i2c_master.c: 304: i2c1_driver_restart();
  7962                           
  7963                           ;incstack = 0
  7964  0011A6  EC0E  F009         	call	i2_i2c1_driver_restart	;wreg free
  7965                           
  7966                           ;i2c_master.c: 305: return I2C_SEND_ADR_WRITE;
  7967  0011AA  0E02               	movlw	2
  7968  0011AC  0012               	return	
  7969  0011AE                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  7970                           	opt stack 0
  7971                           tosu	equ	0xFFF
  7972                           tosh	equ	0xFFE
  7973                           tosl	equ	0xFFD
  7974                           pclatu	equ	0xFFB
  7975                           pclath	equ	0xFFA
  7976                           tblptru	equ	0xFF8
  7977                           tblptrh	equ	0xFF7
  7978                           tblptrl	equ	0xFF6
  7979                           tablat	equ	0xFF5
  7980                           prodh	equ	0xFF4
  7981                           prodl	equ	0xFF3
  7982                           intcon	equ	0xFF2
  7983                           intcon2	equ	0xFF1
  7984                           postinc0	equ	0xFEE
  7985                           plusw0	equ	0xFEB
  7986                           fsr0h	equ	0xFEA
  7987                           fsr0l	equ	0xFE9
  7988                           wreg	equ	0xFE8
  7989                           postdec1	equ	0xFE5
  7990                           fsr1h	equ	0xFE2
  7991                           fsr1l	equ	0xFE1
  7992                           indf2	equ	0xFDF
  7993                           postinc2	equ	0xFDE
  7994                           plusw2	equ	0xFDB
  7995                           fsr2h	equ	0xFDA
  7996                           fsr2l	equ	0xFD9
  7997                           status	equ	0xFD8
  7998                           
  7999 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  8000 ;; Defined at:
  8001 ;;		line 296 in file "mcc_generated_files/drivers/i2c_master.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;		None
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;		None
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      enum E7019
  8008 ;; Registers used:
  8009 ;;		wreg, cstack
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8015 ;;      Params:         0       0       0       0       0       0       0
  8016 ;;      Locals:         0       0       0       0       0       0       0
  8017 ;;      Temps:          0       0       0       0       0       0       0
  8018 ;;      Totals:         0       0       0       0       0       0       0
  8019 ;;Total ram usage:        0 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    1
  8022 ;; This function calls:
  8023 ;;		i2_i2c1_driver_restart
  8024 ;; This function is called by:
  8025 ;;		i2_do_I2C_TX
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text78
  8030  0011AE                     __ptext78:
  8031                           	opt stack 0
  8032  0011AE                     i2_do_I2C_SEND_RESTART_READ:
  8033                           	opt stack 17
  8034                           
  8035                           ;i2c_master.c: 298: i2c1_driver_restart();
  8036                           
  8037                           ;incstack = 0
  8038  0011AE  EC0E  F009         	call	i2_i2c1_driver_restart	;wreg free
  8039                           
  8040                           ;i2c_master.c: 299: return I2C_SEND_ADR_READ;
  8041  0011B2  0E01               	movlw	1
  8042  0011B4  0012               	return	
  8043  0011B6                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  8044                           	opt stack 0
  8045                           tosu	equ	0xFFF
  8046                           tosh	equ	0xFFE
  8047                           tosl	equ	0xFFD
  8048                           pclatu	equ	0xFFB
  8049                           pclath	equ	0xFFA
  8050                           tblptru	equ	0xFF8
  8051                           tblptrh	equ	0xFF7
  8052                           tblptrl	equ	0xFF6
  8053                           tablat	equ	0xFF5
  8054                           prodh	equ	0xFF4
  8055                           prodl	equ	0xFF3
  8056                           intcon	equ	0xFF2
  8057                           intcon2	equ	0xFF1
  8058                           postinc0	equ	0xFEE
  8059                           plusw0	equ	0xFEB
  8060                           fsr0h	equ	0xFEA
  8061                           fsr0l	equ	0xFE9
  8062                           wreg	equ	0xFE8
  8063                           postdec1	equ	0xFE5
  8064                           fsr1h	equ	0xFE2
  8065                           fsr1l	equ	0xFE1
  8066                           indf2	equ	0xFDF
  8067                           postinc2	equ	0xFDE
  8068                           plusw2	equ	0xFDB
  8069                           fsr2h	equ	0xFDA
  8070                           fsr2l	equ	0xFD9
  8071                           status	equ	0xFD8
  8072                           
  8073 ;; *************** function i2_do_I2C_IDLE *****************
  8074 ;; Defined at:
  8075 ;;		line 289 in file "mcc_generated_files/drivers/i2c_master.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;		None
  8078 ;; Auto vars:     Size  Location     Type
  8079 ;;		None
  8080 ;; Return value:  Size  Location     Type
  8081 ;;                  1    wreg      enum E7019
  8082 ;; Registers used:
  8083 ;;		wreg, status,2
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8089 ;;      Params:         0       0       0       0       0       0       0
  8090 ;;      Locals:         0       0       0       0       0       0       0
  8091 ;;      Temps:          0       0       0       0       0       0       0
  8092 ;;      Totals:         0       0       0       0       0       0       0
  8093 ;;Total ram usage:        0 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; This function calls:
  8096 ;;		Nothing
  8097 ;; This function is called by:
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           	psect	text79
  8102  00111C                     __ptext79:
  8103                           	opt stack 0
  8104  00111C                     i2_do_I2C_IDLE:
  8105                           	opt stack 19
  8106                           
  8107                           ;i2c_master.c: 291: i2c_status.busy = 0;
  8108                           
  8109                           ;incstack = 0
  8110  00111C  0100               	movlb	0	; () banked
  8111  00111E  91B6               	bcf	_i2c_status& (0+255),0,b
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;i2c_master.c: 292: i2c_status.error = I2C_NOERR;
  8115  001120  0E00               	movlw	0
  8116  001122  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;i2c_master.c: 293: return I2C_RESET;
  8120  001124  0E0E               	movlw	14
  8121  001126  0012               	return	
  8122  001128                     __end_ofi2_do_I2C_IDLE:
  8123                           	opt stack 0
  8124                           tosu	equ	0xFFF
  8125                           tosh	equ	0xFFE
  8126                           tosl	equ	0xFFD
  8127                           pclatu	equ	0xFFB
  8128                           pclath	equ	0xFFA
  8129                           tblptru	equ	0xFF8
  8130                           tblptrh	equ	0xFF7
  8131                           tblptrl	equ	0xFF6
  8132                           tablat	equ	0xFF5
  8133                           prodh	equ	0xFF4
  8134                           prodl	equ	0xFF3
  8135                           intcon	equ	0xFF2
  8136                           intcon2	equ	0xFF1
  8137                           postinc0	equ	0xFEE
  8138                           plusw0	equ	0xFEB
  8139                           fsr0h	equ	0xFEA
  8140                           fsr0l	equ	0xFE9
  8141                           wreg	equ	0xFE8
  8142                           postdec1	equ	0xFE5
  8143                           fsr1h	equ	0xFE2
  8144                           fsr1l	equ	0xFE1
  8145                           indf2	equ	0xFDF
  8146                           postinc2	equ	0xFDE
  8147                           plusw2	equ	0xFDB
  8148                           fsr2h	equ	0xFDA
  8149                           fsr2l	equ	0xFD9
  8150                           status	equ	0xFD8
  8151                           
  8152 ;; *************** function i2_do_I2C_RESET *****************
  8153 ;; Defined at:
  8154 ;;		line 281 in file "mcc_generated_files/drivers/i2c_master.c"
  8155 ;; Parameters:    Size  Location     Type
  8156 ;;		None
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;		None
  8159 ;; Return value:  Size  Location     Type
  8160 ;;                  1    wreg      enum E7019
  8161 ;; Registers used:
  8162 ;;		wreg, status,2, cstack
  8163 ;; Tracked objects:
  8164 ;;		On entry : 0/0
  8165 ;;		On exit  : 0/0
  8166 ;;		Unchanged: 0/0
  8167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8168 ;;      Params:         0       0       0       0       0       0       0
  8169 ;;      Locals:         0       0       0       0       0       0       0
  8170 ;;      Temps:          0       0       0       0       0       0       0
  8171 ;;      Totals:         0       0       0       0       0       0       0
  8172 ;;Total ram usage:        0 bytes
  8173 ;; Hardware stack levels used:    1
  8174 ;; Hardware stack levels required when called:    1
  8175 ;; This function calls:
  8176 ;;		i2_i2c1_driver_resetBus
  8177 ;; This function is called by:
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text80
  8182  001074                     __ptext80:
  8183                           	opt stack 0
  8184  001074                     i2_do_I2C_RESET:
  8185                           	opt stack 18
  8186                           
  8187                           ;i2c_master.c: 283: i2c1_driver_resetBus();
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;incstack = 0
  8191  001074  EC13  F009         	call	i2_i2c1_driver_resetBus	;wreg free
  8192                           
  8193                           ;i2c_master.c: 284: i2c_status.busy = 0;
  8194  001078  0100               	movlb	0	; () banked
  8195  00107A  91B6               	bcf	_i2c_status& (0+255),0,b
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;i2c_master.c: 285: i2c_status.error = I2C_NOERR;
  8199  00107C  0E00               	movlw	0
  8200  00107E  6FC1               	movwf	(_i2c_status+11)& (0+255),b
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;i2c_master.c: 286: return I2C_RESET;
  8204  001080  0E0E               	movlw	14
  8205  001082  0012               	return	
  8206  001084                     __end_ofi2_do_I2C_RESET:
  8207                           	opt stack 0
  8208                           tosu	equ	0xFFF
  8209                           tosh	equ	0xFFE
  8210                           tosl	equ	0xFFD
  8211                           pclatu	equ	0xFFB
  8212                           pclath	equ	0xFFA
  8213                           tblptru	equ	0xFF8
  8214                           tblptrh	equ	0xFF7
  8215                           tblptrl	equ	0xFF6
  8216                           tablat	equ	0xFF5
  8217                           prodh	equ	0xFF4
  8218                           prodl	equ	0xFF3
  8219                           intcon	equ	0xFF2
  8220                           intcon2	equ	0xFF1
  8221                           postinc0	equ	0xFEE
  8222                           plusw0	equ	0xFEB
  8223                           fsr0h	equ	0xFEA
  8224                           fsr0l	equ	0xFE9
  8225                           wreg	equ	0xFE8
  8226                           postdec1	equ	0xFE5
  8227                           fsr1h	equ	0xFE2
  8228                           fsr1l	equ	0xFE1
  8229                           indf2	equ	0xFDF
  8230                           postinc2	equ	0xFDE
  8231                           plusw2	equ	0xFDB
  8232                           fsr2h	equ	0xFDA
  8233                           fsr2l	equ	0xFD9
  8234                           status	equ	0xFD8
  8235                           
  8236 ;; *************** function i2_do_I2C_TX_REGISTER *****************
  8237 ;; Defined at:
  8238 ;;		line 336 in file "mcc_generated_files/drivers/i2c_master.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;		None
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;		None
  8243 ;; Return value:  Size  Location     Type
  8244 ;;                  1    wreg      enum E7019
  8245 ;; Registers used:
  8246 ;;		wreg, status,2, cstack
  8247 ;; Tracked objects:
  8248 ;;		On entry : 0/0
  8249 ;;		On exit  : 0/0
  8250 ;;		Unchanged: 0/0
  8251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8252 ;;      Params:         0       0       0       0       0       0       0
  8253 ;;      Locals:         0       0       0       0       0       0       0
  8254 ;;      Temps:          0       0       0       0       0       0       0
  8255 ;;      Totals:         0       0       0       0       0       0       0
  8256 ;;Total ram usage:        0 bytes
  8257 ;; Hardware stack levels used:    1
  8258 ;; Hardware stack levels required when called:    1
  8259 ;; This function calls:
  8260 ;;		i2_i2c1_driver_TXData
  8261 ;; This function is called by:
  8262 ;; This function uses a non-reentrant model
  8263 ;;
  8264                           
  8265                           	psect	text81
  8266  001102                     __ptext81:
  8267                           	opt stack 0
  8268  001102                     i2_do_I2C_TX_REGISTER:
  8269                           	opt stack 18
  8270                           
  8271                           ;i2c_master.c: 337: i2c_status.addressNACKCheck = 1;
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;incstack = 0
  8275  001102  0100               	movlb	0	; () banked
  8276  001104  87B6               	bsf	_i2c_status& (0+255),3,b
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;i2c_master.c: 338: i2c1_driver_TXData(i2c_status.register_address);
  8280  001106  51DA               	movf	(_i2c_status+36)& (0+255),w,b
  8281  001108  ECDB  F008         	call	i2_i2c1_driver_TXData
  8282                           
  8283                           ;i2c_master.c: 340: return I2C_SEND_RESTART_READ;
  8284  00110C  0E07               	movlw	7
  8285  00110E  0012               	return	
  8286  001110                     __end_ofi2_do_I2C_TX_REGISTER:
  8287                           	opt stack 0
  8288                           tosu	equ	0xFFF
  8289                           tosh	equ	0xFFE
  8290                           tosl	equ	0xFFD
  8291                           pclatu	equ	0xFFB
  8292                           pclath	equ	0xFFA
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           postinc0	equ	0xFEE
  8302                           plusw0	equ	0xFEB
  8303                           fsr0h	equ	0xFEA
  8304                           fsr0l	equ	0xFE9
  8305                           wreg	equ	0xFE8
  8306                           postdec1	equ	0xFE5
  8307                           fsr1h	equ	0xFE2
  8308                           fsr1l	equ	0xFE1
  8309                           indf2	equ	0xFDF
  8310                           postinc2	equ	0xFDE
  8311                           plusw2	equ	0xFDB
  8312                           fsr2h	equ	0xFDA
  8313                           fsr2l	equ	0xFD9
  8314                           status	equ	0xFD8
  8315                           
  8316 ;; *************** function i2_mssp1_setIRQ *****************
  8317 ;; Defined at:
  8318 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;		None
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;		None
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  1    wreg      void 
  8325 ;; Registers used:
  8326 ;;		None
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8332 ;;      Params:         0       0       0       0       0       0       0
  8333 ;;      Locals:         0       0       0       0       0       0       0
  8334 ;;      Temps:          0       0       0       0       0       0       0
  8335 ;;      Totals:         0       0       0       0       0       0       0
  8336 ;;Total ram usage:        0 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; This function calls:
  8339 ;;		Nothing
  8340 ;; This function is called by:
  8341 ;;		i2_do_I2C_TX_EMPTY
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text82
  8346  001204                     __ptext82:
  8347                           	opt stack 0
  8348  001204                     i2_mssp1_setIRQ:
  8349                           	opt stack 18
  8350                           
  8351                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
  8352                           
  8353                           ;incstack = 0
  8354  001204  869E               	bsf	3998,3,c	;volatile
  8355  001206  0012               	return		;funcret
  8356  001208                     __end_ofi2_mssp1_setIRQ:
  8357                           	opt stack 0
  8358                           tosu	equ	0xFFF
  8359                           tosh	equ	0xFFE
  8360                           tosl	equ	0xFFD
  8361                           pclatu	equ	0xFFB
  8362                           pclath	equ	0xFFA
  8363                           tblptru	equ	0xFF8
  8364                           tblptrh	equ	0xFF7
  8365                           tblptrl	equ	0xFF6
  8366                           tablat	equ	0xFF5
  8367                           prodh	equ	0xFF4
  8368                           prodl	equ	0xFF3
  8369                           intcon	equ	0xFF2
  8370                           intcon2	equ	0xFF1
  8371                           postinc0	equ	0xFEE
  8372                           plusw0	equ	0xFEB
  8373                           fsr0h	equ	0xFEA
  8374                           fsr0l	equ	0xFE9
  8375                           wreg	equ	0xFE8
  8376                           postdec1	equ	0xFE5
  8377                           fsr1h	equ	0xFE2
  8378                           fsr1l	equ	0xFE1
  8379                           indf2	equ	0xFDF
  8380                           postinc2	equ	0xFDE
  8381                           plusw2	equ	0xFDB
  8382                           fsr2h	equ	0xFDA
  8383                           fsr2l	equ	0xFD9
  8384                           status	equ	0xFD8
  8385                           
  8386 ;; *************** function i2_i2c1_driver_isNACK *****************
  8387 ;; Defined at:
  8388 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;		None
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;		None
  8393 ;; Return value:  Size  Location     Type
  8394 ;;		None               void
  8395 ;; Registers used:
  8396 ;;		wreg, status,2, status,0
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8402 ;;      Params:         0       0       0       0       0       0       0
  8403 ;;      Locals:         0       0       0       0       0       0       0
  8404 ;;      Temps:          1       0       0       0       0       0       0
  8405 ;;      Totals:         1       0       0       0       0       0       0
  8406 ;;Total ram usage:        1 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; This function calls:
  8409 ;;		Nothing
  8410 ;; This function is called by:
  8411 ;;		i2_do_I2C_TX
  8412 ;;		i2_i2c_ISR
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           	psect	text83
  8417  000FC2                     __ptext83:
  8418                           	opt stack 0
  8419  000FC2                     i2_i2c1_driver_isNACK:
  8420                           	opt stack 19
  8421                           
  8422                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  8423                           
  8424                           ;incstack = 0
  8425  000FC2  50C5               	movf	4037,w,c	;volatile
  8426  000FC4  0BBF               	andlw	-65
  8427  000FC6  0940               	iorlw	64
  8428  000FC8  6EC5               	movwf	4037,c	;volatile
  8429  000FCA  38C5               	swapf	4037,w,c	;volatile
  8430  000FCC  32E8               	rrcf	wreg,f,c
  8431  000FCE  32E8               	rrcf	wreg,f,c
  8432  000FD0  0B01               	andlw	1
  8433  000FD2  6E26               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
  8434  000FD4  3026               	rrcf	??i2_i2c1_driver_isNACK,w,c
  8435  000FD6  0012               	return	
  8436  000FD8                     __end_ofi2_i2c1_driver_isNACK:
  8437                           	opt stack 0
  8438                           tosu	equ	0xFFF
  8439                           tosh	equ	0xFFE
  8440                           tosl	equ	0xFFD
  8441                           pclatu	equ	0xFFB
  8442                           pclath	equ	0xFFA
  8443                           tblptru	equ	0xFF8
  8444                           tblptrh	equ	0xFF7
  8445                           tblptrl	equ	0xFF6
  8446                           tablat	equ	0xFF5
  8447                           prodh	equ	0xFF4
  8448                           prodl	equ	0xFF3
  8449                           intcon	equ	0xFF2
  8450                           intcon2	equ	0xFF1
  8451                           postinc0	equ	0xFEE
  8452                           plusw0	equ	0xFEB
  8453                           fsr0h	equ	0xFEA
  8454                           fsr0l	equ	0xFE9
  8455                           wreg	equ	0xFE8
  8456                           postdec1	equ	0xFE5
  8457                           fsr1h	equ	0xFE2
  8458                           fsr1l	equ	0xFE1
  8459                           indf2	equ	0xFDF
  8460                           postinc2	equ	0xFDE
  8461                           plusw2	equ	0xFDB
  8462                           fsr2h	equ	0xFDA
  8463                           fsr2l	equ	0xFD9
  8464                           status	equ	0xFD8
  8465                           
  8466 ;; *************** function i2_i2c1_driver_TXData *****************
  8467 ;; Defined at:
  8468 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  d               1    wreg     unsigned char 
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;  d               1    0[COMRAM] unsigned char 
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      void 
  8475 ;; Registers used:
  8476 ;;		wreg
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8482 ;;      Params:         0       0       0       0       0       0       0
  8483 ;;      Locals:         1       0       0       0       0       0       0
  8484 ;;      Temps:          0       0       0       0       0       0       0
  8485 ;;      Totals:         1       0       0       0       0       0       0
  8486 ;;Total ram usage:        1 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; This function calls:
  8489 ;;		Nothing
  8490 ;; This function is called by:
  8491 ;;		i2_do_I2C_SEND_ADR_READ
  8492 ;;		i2_do_I2C_SEND_INITIAL_READ
  8493 ;;		i2_do_I2C_TX_REGISTER
  8494 ;;		i2_do_I2C_SEND_ADR_WRITE
  8495 ;;		i2_do_I2C_TX
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           	psect	text84
  8500  0011B6                     __ptext84:
  8501                           	opt stack 0
  8502  0011B6                     i2_i2c1_driver_TXData:
  8503                           	opt stack 18
  8504                           
  8505                           ;incstack = 0
  8506                           ;i2i2c1_driver_TXData@d stored from wreg
  8507  0011B6  6E26               	movwf	i2i2c1_driver_TXData@d,c
  8508                           
  8509                           ;i2c1_driver.c: 188: SSP1BUF = d;
  8510  0011B8  C026  FFC9         	movff	i2i2c1_driver_TXData@d,4041	;volatile
  8511  0011BC  0012               	return		;funcret
  8512  0011BE                     __end_ofi2_i2c1_driver_TXData:
  8513                           	opt stack 0
  8514                           tosu	equ	0xFFF
  8515                           tosh	equ	0xFFE
  8516                           tosl	equ	0xFFD
  8517                           pclatu	equ	0xFFB
  8518                           pclath	equ	0xFFA
  8519                           tblptru	equ	0xFF8
  8520                           tblptrh	equ	0xFF7
  8521                           tblptrl	equ	0xFF6
  8522                           tablat	equ	0xFF5
  8523                           prodh	equ	0xFF4
  8524                           prodl	equ	0xFF3
  8525                           intcon	equ	0xFF2
  8526                           intcon2	equ	0xFF1
  8527                           postinc0	equ	0xFEE
  8528                           plusw0	equ	0xFEB
  8529                           fsr0h	equ	0xFEA
  8530                           fsr0l	equ	0xFE9
  8531                           wreg	equ	0xFE8
  8532                           postdec1	equ	0xFE5
  8533                           fsr1h	equ	0xFE2
  8534                           fsr1l	equ	0xFE1
  8535                           indf2	equ	0xFDF
  8536                           postinc2	equ	0xFDE
  8537                           plusw2	equ	0xFDB
  8538                           fsr2h	equ	0xFDA
  8539                           fsr2l	equ	0xFD9
  8540                           status	equ	0xFD8
  8541                           
  8542 ;; *************** function i2_i2c1_driver_getRXData *****************
  8543 ;; Defined at:
  8544 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;		None
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;		None
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  1    wreg      unsigned char 
  8551 ;; Registers used:
  8552 ;;		wreg, status,2
  8553 ;; Tracked objects:
  8554 ;;		On entry : 0/0
  8555 ;;		On exit  : 0/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8558 ;;      Params:         0       0       0       0       0       0       0
  8559 ;;      Locals:         0       0       0       0       0       0       0
  8560 ;;      Temps:          0       0       0       0       0       0       0
  8561 ;;      Totals:         0       0       0       0       0       0       0
  8562 ;;Total ram usage:        0 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; This function calls:
  8565 ;;		Nothing
  8566 ;; This function is called by:
  8567 ;;		i2_do_I2C_RX
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           	psect	text85
  8572  001208                     __ptext85:
  8573                           	opt stack 0
  8574  001208                     i2_i2c1_driver_getRXData:
  8575                           	opt stack 18
  8576                           
  8577                           ;i2c1_driver.c: 173: return SSP1BUF;
  8578                           
  8579                           ;incstack = 0
  8580  001208  50C9               	movf	4041,w,c	;volatile
  8581  00120A  0012               	return	
  8582  00120C                     __end_ofi2_i2c1_driver_getRXData:
  8583                           	opt stack 0
  8584                           tosu	equ	0xFFF
  8585                           tosh	equ	0xFFE
  8586                           tosl	equ	0xFFD
  8587                           pclatu	equ	0xFFB
  8588                           pclath	equ	0xFFA
  8589                           tblptru	equ	0xFF8
  8590                           tblptrh	equ	0xFF7
  8591                           tblptrl	equ	0xFF6
  8592                           tablat	equ	0xFF5
  8593                           prodh	equ	0xFF4
  8594                           prodl	equ	0xFF3
  8595                           intcon	equ	0xFF2
  8596                           intcon2	equ	0xFF1
  8597                           postinc0	equ	0xFEE
  8598                           plusw0	equ	0xFEB
  8599                           fsr0h	equ	0xFEA
  8600                           fsr0l	equ	0xFE9
  8601                           wreg	equ	0xFE8
  8602                           postdec1	equ	0xFE5
  8603                           fsr1h	equ	0xFE2
  8604                           fsr1l	equ	0xFE1
  8605                           indf2	equ	0xFDF
  8606                           postinc2	equ	0xFDE
  8607                           plusw2	equ	0xFDB
  8608                           fsr2h	equ	0xFDA
  8609                           fsr2l	equ	0xFD9
  8610                           status	equ	0xFD8
  8611                           
  8612 ;; *************** function i2_i2c1_driver_sendNACK *****************
  8613 ;; Defined at:
  8614 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;		None
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;		None
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  1    wreg      void 
  8621 ;; Registers used:
  8622 ;;		None
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8628 ;;      Params:         0       0       0       0       0       0       0
  8629 ;;      Locals:         0       0       0       0       0       0       0
  8630 ;;      Temps:          0       0       0       0       0       0       0
  8631 ;;      Totals:         0       0       0       0       0       0       0
  8632 ;;Total ram usage:        0 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; This function calls:
  8635 ;;		Nothing
  8636 ;; This function is called by:
  8637 ;;		i2_do_I2C_DO_NACK_STOP
  8638 ;;		i2_do_I2C_DO_NACK_RESTART
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           	psect	text86
  8643  0011CA                     __ptext86:
  8644                           	opt stack 0
  8645  0011CA                     i2_i2c1_driver_sendNACK:
  8646                           	opt stack 17
  8647                           
  8648                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  8649                           
  8650                           ;incstack = 0
  8651  0011CA  8AC5               	bsf	4037,5,c	;volatile
  8652                           
  8653                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  8654  0011CC  88C5               	bsf	4037,4,c	;volatile
  8655  0011CE  0012               	return		;funcret
  8656  0011D0                     __end_ofi2_i2c1_driver_sendNACK:
  8657                           	opt stack 0
  8658                           tosu	equ	0xFFF
  8659                           tosh	equ	0xFFE
  8660                           tosl	equ	0xFFD
  8661                           pclatu	equ	0xFFB
  8662                           pclath	equ	0xFFA
  8663                           tblptru	equ	0xFF8
  8664                           tblptrh	equ	0xFF7
  8665                           tblptrl	equ	0xFF6
  8666                           tablat	equ	0xFF5
  8667                           prodh	equ	0xFF4
  8668                           prodl	equ	0xFF3
  8669                           intcon	equ	0xFF2
  8670                           intcon2	equ	0xFF1
  8671                           postinc0	equ	0xFEE
  8672                           plusw0	equ	0xFEB
  8673                           fsr0h	equ	0xFEA
  8674                           fsr0l	equ	0xFE9
  8675                           wreg	equ	0xFE8
  8676                           postdec1	equ	0xFE5
  8677                           fsr1h	equ	0xFE2
  8678                           fsr1l	equ	0xFE1
  8679                           indf2	equ	0xFDF
  8680                           postinc2	equ	0xFDE
  8681                           plusw2	equ	0xFDB
  8682                           fsr2h	equ	0xFDA
  8683                           fsr2l	equ	0xFD9
  8684                           status	equ	0xFD8
  8685                           
  8686 ;; *************** function i2_i2c1_driver_resetBus *****************
  8687 ;; Defined at:
  8688 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;		None
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      void 
  8695 ;; Registers used:
  8696 ;;		None
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8702 ;;      Params:         0       0       0       0       0       0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0
  8705 ;;      Totals:         0       0       0       0       0       0       0
  8706 ;;Total ram usage:        0 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; This function calls:
  8709 ;;		Nothing
  8710 ;; This function is called by:
  8711 ;;		i2_do_I2C_RESET
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text87
  8716  001226                     __ptext87:
  8717                           	opt stack 0
  8718  001226                     i2_i2c1_driver_resetBus:
  8719                           	opt stack 18
  8720                           
  8721                           ;incstack = 0
  8722  001226  0012               	return		;funcret
  8723  001228                     __end_ofi2_i2c1_driver_resetBus:
  8724                           	opt stack 0
  8725                           tosu	equ	0xFFF
  8726                           tosh	equ	0xFFE
  8727                           tosl	equ	0xFFD
  8728                           pclatu	equ	0xFFB
  8729                           pclath	equ	0xFFA
  8730                           tblptru	equ	0xFF8
  8731                           tblptrh	equ	0xFF7
  8732                           tblptrl	equ	0xFF6
  8733                           tablat	equ	0xFF5
  8734                           prodh	equ	0xFF4
  8735                           prodl	equ	0xFF3
  8736                           intcon	equ	0xFF2
  8737                           intcon2	equ	0xFF1
  8738                           postinc0	equ	0xFEE
  8739                           plusw0	equ	0xFEB
  8740                           fsr0h	equ	0xFEA
  8741                           fsr0l	equ	0xFE9
  8742                           wreg	equ	0xFE8
  8743                           postdec1	equ	0xFE5
  8744                           fsr1h	equ	0xFE2
  8745                           fsr1l	equ	0xFE1
  8746                           indf2	equ	0xFDF
  8747                           postinc2	equ	0xFDE
  8748                           plusw2	equ	0xFDB
  8749                           fsr2h	equ	0xFDA
  8750                           fsr2l	equ	0xFD9
  8751                           status	equ	0xFD8
  8752                           
  8753 ;; *************** function i2_i2c1_driver_startRX *****************
  8754 ;; Defined at:
  8755 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;		None
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  1    wreg      void 
  8762 ;; Registers used:
  8763 ;;		None
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8769 ;;      Params:         0       0       0       0       0       0       0
  8770 ;;      Locals:         0       0       0       0       0       0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0
  8772 ;;      Totals:         0       0       0       0       0       0       0
  8773 ;;Total ram usage:        0 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; This function calls:
  8776 ;;		Nothing
  8777 ;; This function is called by:
  8778 ;;		i2_do_I2C_RCEN
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text88
  8783  00120C                     __ptext88:
  8784                           	opt stack 0
  8785  00120C                     i2_i2c1_driver_startRX:
  8786                           	opt stack 18
  8787                           
  8788                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  8789                           
  8790                           ;incstack = 0
  8791  00120C  86C5               	bsf	4037,3,c	;volatile
  8792  00120E  0012               	return		;funcret
  8793  001210                     __end_ofi2_i2c1_driver_startRX:
  8794                           	opt stack 0
  8795                           tosu	equ	0xFFF
  8796                           tosh	equ	0xFFE
  8797                           tosl	equ	0xFFD
  8798                           pclatu	equ	0xFFB
  8799                           pclath	equ	0xFFA
  8800                           tblptru	equ	0xFF8
  8801                           tblptrh	equ	0xFF7
  8802                           tblptrl	equ	0xFF6
  8803                           tablat	equ	0xFF5
  8804                           prodh	equ	0xFF4
  8805                           prodl	equ	0xFF3
  8806                           intcon	equ	0xFF2
  8807                           intcon2	equ	0xFF1
  8808                           postinc0	equ	0xFEE
  8809                           plusw0	equ	0xFEB
  8810                           fsr0h	equ	0xFEA
  8811                           fsr0l	equ	0xFE9
  8812                           wreg	equ	0xFE8
  8813                           postdec1	equ	0xFE5
  8814                           fsr1h	equ	0xFE2
  8815                           fsr1l	equ	0xFE1
  8816                           indf2	equ	0xFDF
  8817                           postinc2	equ	0xFDE
  8818                           plusw2	equ	0xFDB
  8819                           fsr2h	equ	0xFDA
  8820                           fsr2l	equ	0xFD9
  8821                           status	equ	0xFD8
  8822                           
  8823 ;; *************** function i2_returnReset *****************
  8824 ;; Defined at:
  8825 ;;		line 513 in file "mcc_generated_files/drivers/i2c_master.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;  p               2    0[COMRAM] PTR void 
  8828 ;;		 -> NULL(0), 
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;		None
  8831 ;; Return value:  Size  Location     Type
  8832 ;;                  1    wreg      enum E6842
  8833 ;; Registers used:
  8834 ;;		wreg
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8840 ;;      Params:         2       0       0       0       0       0       0
  8841 ;;      Locals:         0       0       0       0       0       0       0
  8842 ;;      Temps:          0       0       0       0       0       0       0
  8843 ;;      Totals:         2       0       0       0       0       0       0
  8844 ;;Total ram usage:        2 bytes
  8845 ;; Hardware stack levels used:    1
  8846 ;; This function calls:
  8847 ;;		Nothing
  8848 ;; This function is called by:
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           	psect	text89
  8853  001210                     __ptext89:
  8854                           	opt stack 0
  8855  001210                     i2_returnReset:
  8856                           	opt stack 18
  8857                           
  8858                           ;i2c_master.c: 515: return i2c_reset_link;
  8859                           
  8860                           ;incstack = 0
  8861  001210  0E05               	movlw	5
  8862  001212  0012               	return	
  8863  001214                     __end_ofi2_returnReset:
  8864                           	opt stack 0
  8865                           tosu	equ	0xFFF
  8866                           tosh	equ	0xFFE
  8867                           tosl	equ	0xFFD
  8868                           pclatu	equ	0xFFB
  8869                           pclath	equ	0xFFA
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           intcon	equ	0xFF2
  8877                           intcon2	equ	0xFF1
  8878                           postinc0	equ	0xFEE
  8879                           plusw0	equ	0xFEB
  8880                           fsr0h	equ	0xFEA
  8881                           fsr0l	equ	0xFE9
  8882                           wreg	equ	0xFE8
  8883                           postdec1	equ	0xFE5
  8884                           fsr1h	equ	0xFE2
  8885                           fsr1l	equ	0xFE1
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           plusw2	equ	0xFDB
  8889                           fsr2h	equ	0xFDA
  8890                           fsr2l	equ	0xFD9
  8891                           status	equ	0xFD8
  8892                           
  8893 ;; *************** function i2_returnStop *****************
  8894 ;; Defined at:
  8895 ;;		line 508 in file "mcc_generated_files/drivers/i2c_master.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;  p               2    0[COMRAM] PTR void 
  8898 ;;		 -> NULL(0), 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      enum E6842
  8903 ;; Registers used:
  8904 ;;		wreg
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8910 ;;      Params:         2       0       0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0
  8913 ;;      Totals:         2       0       0       0       0       0       0
  8914 ;;Total ram usage:        2 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           	psect	text90
  8923  001214                     __ptext90:
  8924                           	opt stack 0
  8925  001214                     i2_returnStop:
  8926                           	opt stack 18
  8927                           
  8928                           ;i2c_master.c: 510: return i2c_stop;
  8929                           
  8930                           ;incstack = 0
  8931  001214  0E01               	movlw	1
  8932  001216  0012               	return	
  8933  001218                     __end_ofi2_returnStop:
  8934                           	opt stack 0
  8935                           tosu	equ	0xFFF
  8936                           tosh	equ	0xFFE
  8937                           tosl	equ	0xFFD
  8938                           pclatu	equ	0xFFB
  8939                           pclath	equ	0xFFA
  8940                           tblptru	equ	0xFF8
  8941                           tblptrh	equ	0xFF7
  8942                           tblptrl	equ	0xFF6
  8943                           tablat	equ	0xFF5
  8944                           prodh	equ	0xFF4
  8945                           prodl	equ	0xFF3
  8946                           intcon	equ	0xFF2
  8947                           intcon2	equ	0xFF1
  8948                           postinc0	equ	0xFEE
  8949                           plusw0	equ	0xFEB
  8950                           fsr0h	equ	0xFEA
  8951                           fsr0l	equ	0xFE9
  8952                           wreg	equ	0xFE8
  8953                           postdec1	equ	0xFE5
  8954                           fsr1h	equ	0xFE2
  8955                           fsr1l	equ	0xFE1
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           plusw2	equ	0xFDB
  8959                           fsr2h	equ	0xFDA
  8960                           fsr2l	equ	0xFD9
  8961                           status	equ	0xFD8
  8962                           
  8963 ;; *************** function i2_i2c1_driver_stop *****************
  8964 ;; Defined at:
  8965 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;		None
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;		None
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  1    wreg      void 
  8972 ;; Registers used:
  8973 ;;		None
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8979 ;;      Params:         0       0       0       0       0       0       0
  8980 ;;      Locals:         0       0       0       0       0       0       0
  8981 ;;      Temps:          0       0       0       0       0       0       0
  8982 ;;      Totals:         0       0       0       0       0       0       0
  8983 ;;Total ram usage:        0 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; This function calls:
  8986 ;;		Nothing
  8987 ;; This function is called by:
  8988 ;;		i2_do_I2C_SEND_STOP
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           	psect	text91
  8993  001218                     __ptext91:
  8994                           	opt stack 0
  8995  001218                     i2_i2c1_driver_stop:
  8996                           	opt stack 17
  8997                           
  8998                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  8999                           
  9000                           ;incstack = 0
  9001  001218  84C5               	bsf	4037,2,c	;volatile
  9002  00121A  0012               	return		;funcret
  9003  00121C                     __end_ofi2_i2c1_driver_stop:
  9004                           	opt stack 0
  9005                           tosu	equ	0xFFF
  9006                           tosh	equ	0xFFE
  9007                           tosl	equ	0xFFD
  9008                           pclatu	equ	0xFFB
  9009                           pclath	equ	0xFFA
  9010                           tblptru	equ	0xFF8
  9011                           tblptrh	equ	0xFF7
  9012                           tblptrl	equ	0xFF6
  9013                           tablat	equ	0xFF5
  9014                           prodh	equ	0xFF4
  9015                           prodl	equ	0xFF3
  9016                           intcon	equ	0xFF2
  9017                           intcon2	equ	0xFF1
  9018                           postinc0	equ	0xFEE
  9019                           plusw0	equ	0xFEB
  9020                           fsr0h	equ	0xFEA
  9021                           fsr0l	equ	0xFE9
  9022                           wreg	equ	0xFE8
  9023                           postdec1	equ	0xFE5
  9024                           fsr1h	equ	0xFE2
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           plusw2	equ	0xFDB
  9029                           fsr2h	equ	0xFDA
  9030                           fsr2l	equ	0xFD9
  9031                           status	equ	0xFD8
  9032                           
  9033 ;; *************** function i2_i2c1_driver_restart *****************
  9034 ;; Defined at:
  9035 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;		None
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;		None
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  1    wreg      void 
  9042 ;; Registers used:
  9043 ;;		None
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9049 ;;      Params:         0       0       0       0       0       0       0
  9050 ;;      Locals:         0       0       0       0       0       0       0
  9051 ;;      Temps:          0       0       0       0       0       0       0
  9052 ;;      Totals:         0       0       0       0       0       0       0
  9053 ;;Total ram usage:        0 bytes
  9054 ;; Hardware stack levels used:    1
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		i2_do_I2C_SEND_RESTART_READ
  9059 ;;		i2_do_I2C_SEND_RESTART_WRITE
  9060 ;;		i2_do_I2C_SEND_RESTART
  9061 ;; This function uses a non-reentrant model
  9062 ;;
  9063                           
  9064                           	psect	text92
  9065  00121C                     __ptext92:
  9066                           	opt stack 0
  9067  00121C                     i2_i2c1_driver_restart:
  9068                           	opt stack 17
  9069                           
  9070                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  9071                           
  9072                           ;incstack = 0
  9073  00121C  82C5               	bsf	4037,1,c	;volatile
  9074  00121E  0012               	return		;funcret
  9075  001220                     __end_ofi2_i2c1_driver_restart:
  9076                           	opt stack 0
  9077                           tosu	equ	0xFFF
  9078                           tosh	equ	0xFFE
  9079                           tosl	equ	0xFFD
  9080                           pclatu	equ	0xFFB
  9081                           pclath	equ	0xFFA
  9082                           tblptru	equ	0xFF8
  9083                           tblptrh	equ	0xFF7
  9084                           tblptrl	equ	0xFF6
  9085                           tablat	equ	0xFF5
  9086                           prodh	equ	0xFF4
  9087                           prodl	equ	0xFF3
  9088                           intcon	equ	0xFF2
  9089                           intcon2	equ	0xFF1
  9090                           postinc0	equ	0xFEE
  9091                           plusw0	equ	0xFEB
  9092                           fsr0h	equ	0xFEA
  9093                           fsr0l	equ	0xFE9
  9094                           wreg	equ	0xFE8
  9095                           postdec1	equ	0xFE5
  9096                           fsr1h	equ	0xFE2
  9097                           fsr1l	equ	0xFE1
  9098                           indf2	equ	0xFDF
  9099                           postinc2	equ	0xFDE
  9100                           plusw2	equ	0xFDB
  9101                           fsr2h	equ	0xFDA
  9102                           fsr2l	equ	0xFD9
  9103                           status	equ	0xFD8
  9104                           
  9105 ;; *************** function i2_i2c1_driver_sendACK *****************
  9106 ;; Defined at:
  9107 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  9108 ;; Parameters:    Size  Location     Type
  9109 ;;		None
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;		None
  9112 ;; Return value:  Size  Location     Type
  9113 ;;                  1    wreg      void 
  9114 ;; Registers used:
  9115 ;;		None
  9116 ;; Tracked objects:
  9117 ;;		On entry : 0/0
  9118 ;;		On exit  : 0/0
  9119 ;;		Unchanged: 0/0
  9120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9121 ;;      Params:         0       0       0       0       0       0       0
  9122 ;;      Locals:         0       0       0       0       0       0       0
  9123 ;;      Temps:          0       0       0       0       0       0       0
  9124 ;;      Totals:         0       0       0       0       0       0       0
  9125 ;;Total ram usage:        0 bytes
  9126 ;; Hardware stack levels used:    1
  9127 ;; This function calls:
  9128 ;;		Nothing
  9129 ;; This function is called by:
  9130 ;;		i2_do_I2C_DO_ACK
  9131 ;;		i2_do_I2C_RX
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           	psect	text93
  9136  0011D0                     __ptext93:
  9137                           	opt stack 0
  9138  0011D0                     i2_i2c1_driver_sendACK:
  9139                           	opt stack 18
  9140                           
  9141                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  9142                           
  9143                           ;incstack = 0
  9144  0011D0  9AC5               	bcf	4037,5,c	;volatile
  9145                           
  9146                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  9147  0011D2  88C5               	bsf	4037,4,c	;volatile
  9148  0011D4  0012               	return		;funcret
  9149  0011D6                     __end_ofi2_i2c1_driver_sendACK:
  9150                           	opt stack 0
  9151                           tosu	equ	0xFFF
  9152                           tosh	equ	0xFFE
  9153                           tosl	equ	0xFFD
  9154                           pclatu	equ	0xFFB
  9155                           pclath	equ	0xFFA
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           prodh	equ	0xFF4
  9161                           prodl	equ	0xFF3
  9162                           intcon	equ	0xFF2
  9163                           intcon2	equ	0xFF1
  9164                           postinc0	equ	0xFEE
  9165                           plusw0	equ	0xFEB
  9166                           fsr0h	equ	0xFEA
  9167                           fsr0l	equ	0xFE9
  9168                           wreg	equ	0xFE8
  9169                           postdec1	equ	0xFE5
  9170                           fsr1h	equ	0xFE2
  9171                           fsr1l	equ	0xFE1
  9172                           indf2	equ	0xFDF
  9173                           postinc2	equ	0xFDE
  9174                           plusw2	equ	0xFDB
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _i2c_busCollisionISR *****************
  9180 ;; Defined at:
  9181 ;;		line 500 in file "mcc_generated_files/drivers/i2c_master.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;		None
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  1    wreg      void 
  9188 ;; Registers used:
  9189 ;;		cstack
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9195 ;;      Params:         0       0       0       0       0       0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0
  9198 ;;      Totals:         0       0       0       0       0       0       0
  9199 ;;Total ram usage:        0 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    1
  9202 ;; This function calls:
  9203 ;;		_i2c1_driver_clearBusCollision
  9204 ;; This function is called by:
  9205 ;;		_i2c_open
  9206 ;;		_INTERRUPT_InterruptManager
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           	psect	text94
  9211  0011D6                     __ptext94:
  9212                           	opt stack 0
  9213  0011D6                     _i2c_busCollisionISR:
  9214                           	opt stack 19
  9215                           
  9216                           ;i2c_master.c: 502: i2c1_driver_clearBusCollision();
  9217                           
  9218                           ;incstack = 0
  9219  0011D6  EC10  F009         	call	_i2c1_driver_clearBusCollision	;wreg free
  9220  0011DA  0012               	return		;funcret
  9221  0011DC                     __end_of_i2c_busCollisionISR:
  9222                           	opt stack 0
  9223                           tosu	equ	0xFFF
  9224                           tosh	equ	0xFFE
  9225                           tosl	equ	0xFFD
  9226                           pclatu	equ	0xFFB
  9227                           pclath	equ	0xFFA
  9228                           tblptru	equ	0xFF8
  9229                           tblptrh	equ	0xFF7
  9230                           tblptrl	equ	0xFF6
  9231                           tablat	equ	0xFF5
  9232                           prodh	equ	0xFF4
  9233                           prodl	equ	0xFF3
  9234                           intcon	equ	0xFF2
  9235                           intcon2	equ	0xFF1
  9236                           postinc0	equ	0xFEE
  9237                           plusw0	equ	0xFEB
  9238                           fsr0h	equ	0xFEA
  9239                           fsr0l	equ	0xFE9
  9240                           wreg	equ	0xFE8
  9241                           postdec1	equ	0xFE5
  9242                           fsr1h	equ	0xFE2
  9243                           fsr1l	equ	0xFE1
  9244                           indf2	equ	0xFDF
  9245                           postinc2	equ	0xFDE
  9246                           plusw2	equ	0xFDB
  9247                           fsr2h	equ	0xFDA
  9248                           fsr2l	equ	0xFD9
  9249                           status	equ	0xFD8
  9250                           
  9251 ;; *************** function _i2c1_driver_clearBusCollision *****************
  9252 ;; Defined at:
  9253 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;		None
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;		None
  9258 ;; Return value:  Size  Location     Type
  9259 ;;                  1    wreg      void 
  9260 ;; Registers used:
  9261 ;;		None
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9267 ;;      Params:         0       0       0       0       0       0       0
  9268 ;;      Locals:         0       0       0       0       0       0       0
  9269 ;;      Temps:          0       0       0       0       0       0       0
  9270 ;;      Totals:         0       0       0       0       0       0       0
  9271 ;;Total ram usage:        0 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; This function calls:
  9274 ;;		Nothing
  9275 ;; This function is called by:
  9276 ;;		_i2c_busCollisionISR
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           	psect	text95
  9281  001220                     __ptext95:
  9282                           	opt stack 0
  9283  001220                     _i2c1_driver_clearBusCollision:
  9284                           	opt stack 19
  9285                           
  9286                           ;i2c1_driver.c: 255: PIR2bits.BCL1IF = 0;
  9287                           
  9288                           ;incstack = 0
  9289  001220  96A1               	bcf	4001,3,c	;volatile
  9290  001222  0012               	return		;funcret
  9291  001224                     __end_of_i2c1_driver_clearBusCollision:
  9292                           	opt stack 0
  9293                           tosu	equ	0xFFF
  9294                           tosh	equ	0xFFE
  9295                           tosl	equ	0xFFD
  9296                           pclatu	equ	0xFFB
  9297                           pclath	equ	0xFFA
  9298                           tblptru	equ	0xFF8
  9299                           tblptrh	equ	0xFF7
  9300                           tblptrl	equ	0xFF6
  9301                           tablat	equ	0xFF5
  9302                           prodh	equ	0xFF4
  9303                           prodl	equ	0xFF3
  9304                           intcon	equ	0xFF2
  9305                           intcon2	equ	0xFF1
  9306                           postinc0	equ	0xFEE
  9307                           plusw0	equ	0xFEB
  9308                           fsr0h	equ	0xFEA
  9309                           fsr0l	equ	0xFE9
  9310                           wreg	equ	0xFE8
  9311                           postdec1	equ	0xFE5
  9312                           fsr1h	equ	0xFE2
  9313                           fsr1l	equ	0xFE1
  9314                           indf2	equ	0xFDF
  9315                           postinc2	equ	0xFDE
  9316                           plusw2	equ	0xFDB
  9317                           fsr2h	equ	0xFDA
  9318                           fsr2l	equ	0xFD9
  9319                           status	equ	0xFD8
  9320                           
  9321 ;; *************** function _EUSART1_Transmit_ISR *****************
  9322 ;; Defined at:
  9323 ;;		line 183 in file "mcc_generated_files/eusart1.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;		None
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;		None
  9328 ;; Return value:  Size  Location     Type
  9329 ;;                  1    wreg      void 
  9330 ;; Registers used:
  9331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9332 ;; Tracked objects:
  9333 ;;		On entry : 0/0
  9334 ;;		On exit  : 0/0
  9335 ;;		Unchanged: 0/0
  9336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9337 ;;      Params:         0       0       0       0       0       0       0
  9338 ;;      Locals:         0       0       0       0       0       0       0
  9339 ;;      Temps:          0       0       0       0       0       0       0
  9340 ;;      Totals:         0       0       0       0       0       0       0
  9341 ;;Total ram usage:        0 bytes
  9342 ;; Hardware stack levels used:    1
  9343 ;; This function calls:
  9344 ;;		Nothing
  9345 ;; This function is called by:
  9346 ;;		_EUSART1_Initialize
  9347 ;;		_INTERRUPT_InterruptManager
  9348 ;; This function uses a non-reentrant model
  9349 ;;
  9350                           
  9351                           	psect	text96
  9352  000E3E                     __ptext96:
  9353                           	opt stack 0
  9354  000E3E                     _EUSART1_Transmit_ISR:
  9355                           	opt stack 20
  9356                           
  9357                           ;eusart1.c: 187: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  9358                           
  9359                           ;incstack = 0
  9360  000E3E  0E08               	movlw	8
  9361  000E40  604A               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  9362  000E42  D012               	goto	i2l321
  9363                           
  9364                           ;eusart1.c: 188: {
  9365                           ;eusart1.c: 189: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  9366  000E44  501B               	movf	_eusart1TxTail,w,c	;volatile
  9367  000E46  0D01               	mullw	1
  9368  000E48  0E09               	movlw	low _eusart1TxBuffer
  9369  000E4A  24F3               	addwf	prodl,w,c
  9370  000E4C  6ED9               	movwf	fsr2l,c
  9371  000E4E  0E00               	movlw	high _eusart1TxBuffer
  9372  000E50  20F4               	addwfc	prodh,w,c
  9373  000E52  6EDA               	movwf	fsr2h,c
  9374  000E54  50DF               	movf	indf2,w,c
  9375  000E56  6EAD               	movwf	4013,c	;volatile
  9376  000E58  2A1B               	incf	_eusart1TxTail,f,c	;volatile
  9377                           
  9378                           ;eusart1.c: 190: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  9379  000E5A  0E07               	movlw	7
  9380  000E5C  641B               	cpfsgt	_eusart1TxTail,c	;volatile
  9381  000E5E  D002               	goto	i2l322
  9382                           
  9383                           ;eusart1.c: 191: {
  9384                           ;eusart1.c: 192: eusart1TxTail = 0;
  9385  000E60  0E00               	movlw	0
  9386  000E62  6E1B               	movwf	_eusart1TxTail,c	;volatile
  9387  000E64                     i2l322:
  9388                           
  9389                           ;eusart1.c: 193: }
  9390                           ;eusart1.c: 194: eusart1TxBufferRemaining++;
  9391  000E64  2A4A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9392                           
  9393                           ;eusart1.c: 195: }
  9394  000E66  0012               	return	
  9395  000E68                     i2l321:
  9396                           
  9397                           ;eusart1.c: 196: else
  9398                           ;eusart1.c: 197: {
  9399                           ;eusart1.c: 198: PIE1bits.TX1IE = 0;
  9400  000E68  989D               	bcf	3997,4,c	;volatile
  9401  000E6A  0012               	return	
  9402  000E6C                     __end_of_EUSART1_Transmit_ISR:
  9403                           	opt stack 0
  9404                           tosu	equ	0xFFF
  9405                           tosh	equ	0xFFE
  9406                           tosl	equ	0xFFD
  9407                           pclatu	equ	0xFFB
  9408                           pclath	equ	0xFFA
  9409                           tblptru	equ	0xFF8
  9410                           tblptrh	equ	0xFF7
  9411                           tblptrl	equ	0xFF6
  9412                           tablat	equ	0xFF5
  9413                           prodh	equ	0xFF4
  9414                           prodl	equ	0xFF3
  9415                           intcon	equ	0xFF2
  9416                           intcon2	equ	0xFF1
  9417                           postinc0	equ	0xFEE
  9418                           plusw0	equ	0xFEB
  9419                           fsr0h	equ	0xFEA
  9420                           fsr0l	equ	0xFE9
  9421                           wreg	equ	0xFE8
  9422                           postdec1	equ	0xFE5
  9423                           fsr1h	equ	0xFE2
  9424                           fsr1l	equ	0xFE1
  9425                           indf2	equ	0xFDF
  9426                           postinc2	equ	0xFDE
  9427                           plusw2	equ	0xFDB
  9428                           fsr2h	equ	0xFDA
  9429                           fsr2l	equ	0xFD9
  9430                           status	equ	0xFD8
  9431                           
  9432 ;; *************** function _EUSART1_Receive_ISR *****************
  9433 ;; Defined at:
  9434 ;;		line 202 in file "mcc_generated_files/eusart1.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;		None
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;		None
  9439 ;; Return value:  Size  Location     Type
  9440 ;;                  1    wreg      void 
  9441 ;; Registers used:
  9442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9448 ;;      Params:         0       0       0       0       0       0       0
  9449 ;;      Locals:         0       0       0       0       0       0       0
  9450 ;;      Temps:          0       0       0       0       0       0       0
  9451 ;;      Totals:         0       0       0       0       0       0       0
  9452 ;;Total ram usage:        0 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; This function calls:
  9455 ;;		Nothing
  9456 ;; This function is called by:
  9457 ;;		_EUSART1_Initialize
  9458 ;;		_INTERRUPT_InterruptManager
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           	psect	text97
  9463  000E6C                     __ptext97:
  9464                           	opt stack 0
  9465  000E6C                     _EUSART1_Receive_ISR:
  9466                           	opt stack 20
  9467                           
  9468                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
  9469                           
  9470                           ;incstack = 0
  9471  000E6C  A2AB               	btfss	4011,1,c	;volatile
  9472  000E6E  D002               	goto	i2l327
  9473                           
  9474                           ;eusart1.c: 206: {
  9475                           ;eusart1.c: 209: RCSTA1bits.CREN = 0;
  9476  000E70  98AB               	bcf	4011,4,c	;volatile
  9477                           
  9478                           ;eusart1.c: 210: RCSTA1bits.CREN = 1;
  9479  000E72  88AB               	bsf	4011,4,c	;volatile
  9480  000E74                     i2l327:
  9481                           
  9482                           ;eusart1.c: 211: }
  9483                           ;eusart1.c: 214: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  9484  000E74  501A               	movf	_eusart1RxHead,w,c	;volatile
  9485  000E76  0D01               	mullw	1
  9486  000E78  0E01               	movlw	low _eusart1RxBuffer
  9487  000E7A  24F3               	addwf	prodl,w,c
  9488  000E7C  6ED9               	movwf	fsr2l,c
  9489  000E7E  0E00               	movlw	high _eusart1RxBuffer
  9490  000E80  20F4               	addwfc	prodh,w,c
  9491  000E82  6EDA               	movwf	fsr2h,c
  9492  000E84  CFAE FFDF          	movff	4014,indf2	;volatile
  9493  000E88  2A1A               	incf	_eusart1RxHead,f,c	;volatile
  9494                           
  9495                           ;eusart1.c: 215: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  9496  000E8A  0E07               	movlw	7
  9497  000E8C  641A               	cpfsgt	_eusart1RxHead,c	;volatile
  9498  000E8E  D002               	goto	i2l328
  9499                           
  9500                           ;eusart1.c: 216: {
  9501                           ;eusart1.c: 217: eusart1RxHead = 0;
  9502  000E90  0E00               	movlw	0
  9503  000E92  6E1A               	movwf	_eusart1RxHead,c	;volatile
  9504  000E94                     i2l328:
  9505                           
  9506                           ;eusart1.c: 218: }
  9507                           ;eusart1.c: 219: eusart1RxCount++;
  9508  000E94  2A18               	incf	_eusart1RxCount,f,c	;volatile
  9509  000E96  0012               	return		;funcret
  9510  000E98                     __end_of_EUSART1_Receive_ISR:
  9511                           	opt stack 0
  9512                           tosu	equ	0xFFF
  9513                           tosh	equ	0xFFE
  9514                           tosl	equ	0xFFD
  9515                           pclatu	equ	0xFFB
  9516                           pclath	equ	0xFFA
  9517                           tblptru	equ	0xFF8
  9518                           tblptrh	equ	0xFF7
  9519                           tblptrl	equ	0xFF6
  9520                           tablat	equ	0xFF5
  9521                           prodh	equ	0xFF4
  9522                           prodl	equ	0xFF3
  9523                           intcon	equ	0xFF2
  9524                           intcon2	equ	0xFF1
  9525                           postinc0	equ	0xFEE
  9526                           plusw0	equ	0xFEB
  9527                           fsr0h	equ	0xFEA
  9528                           fsr0l	equ	0xFE9
  9529                           wreg	equ	0xFE8
  9530                           postdec1	equ	0xFE5
  9531                           fsr1h	equ	0xFE2
  9532                           fsr1l	equ	0xFE1
  9533                           indf2	equ	0xFDF
  9534                           postinc2	equ	0xFDE
  9535                           plusw2	equ	0xFDB
  9536                           fsr2h	equ	0xFDA
  9537                           fsr2l	equ	0xFD9
  9538                           status	equ	0xFD8
  9539                           tosu	equ	0xFFF
  9540                           tosh	equ	0xFFE
  9541                           tosl	equ	0xFFD
  9542                           pclatu	equ	0xFFB
  9543                           pclath	equ	0xFFA
  9544                           tblptru	equ	0xFF8
  9545                           tblptrh	equ	0xFF7
  9546                           tblptrl	equ	0xFF6
  9547                           tablat	equ	0xFF5
  9548                           prodh	equ	0xFF4
  9549                           prodl	equ	0xFF3
  9550                           intcon	equ	0xFF2
  9551                           intcon2	equ	0xFF1
  9552                           postinc0	equ	0xFEE
  9553                           plusw0	equ	0xFEB
  9554                           fsr0h	equ	0xFEA
  9555                           fsr0l	equ	0xFE9
  9556                           wreg	equ	0xFE8
  9557                           postdec1	equ	0xFE5
  9558                           fsr1h	equ	0xFE2
  9559                           fsr1l	equ	0xFE1
  9560                           indf2	equ	0xFDF
  9561                           postinc2	equ	0xFDE
  9562                           plusw2	equ	0xFDB
  9563                           fsr2h	equ	0xFDA
  9564                           fsr2l	equ	0xFD9
  9565                           status	equ	0xFD8
  9566                           
  9567                           	psect	text98
  9568  000000                     __ptext98:
  9569                           	opt stack 0
  9570                           tosu	equ	0xFFF
  9571                           tosh	equ	0xFFE
  9572                           tosl	equ	0xFFD
  9573                           pclatu	equ	0xFFB
  9574                           pclath	equ	0xFFA
  9575                           tblptru	equ	0xFF8
  9576                           tblptrh	equ	0xFF7
  9577                           tblptrl	equ	0xFF6
  9578                           tablat	equ	0xFF5
  9579                           prodh	equ	0xFF4
  9580                           prodl	equ	0xFF3
  9581                           intcon	equ	0xFF2
  9582                           intcon2	equ	0xFF1
  9583                           postinc0	equ	0xFEE
  9584                           plusw0	equ	0xFEB
  9585                           fsr0h	equ	0xFEA
  9586                           fsr0l	equ	0xFE9
  9587                           wreg	equ	0xFE8
  9588                           postdec1	equ	0xFE5
  9589                           fsr1h	equ	0xFE2
  9590                           fsr1l	equ	0xFE1
  9591                           indf2	equ	0xFDF
  9592                           postinc2	equ	0xFDE
  9593                           plusw2	equ	0xFDB
  9594                           fsr2h	equ	0xFDA
  9595                           fsr2l	equ	0xFD9
  9596                           status	equ	0xFD8
  9597                           
  9598                           	psect	rparam
  9599  0000                     tosu	equ	0xFFF
  9600                           tosh	equ	0xFFE
  9601                           tosl	equ	0xFFD
  9602                           pclatu	equ	0xFFB
  9603                           pclath	equ	0xFFA
  9604                           tblptru	equ	0xFF8
  9605                           tblptrh	equ	0xFF7
  9606                           tblptrl	equ	0xFF6
  9607                           tablat	equ	0xFF5
  9608                           prodh	equ	0xFF4
  9609                           prodl	equ	0xFF3
  9610                           intcon	equ	0xFF2
  9611                           intcon2	equ	0xFF1
  9612                           postinc0	equ	0xFEE
  9613                           plusw0	equ	0xFEB
  9614                           fsr0h	equ	0xFEA
  9615                           fsr0l	equ	0xFE9
  9616                           wreg	equ	0xFE8
  9617                           postdec1	equ	0xFE5
  9618                           fsr1h	equ	0xFE2
  9619                           fsr1l	equ	0xFE1
  9620                           indf2	equ	0xFDF
  9621                           postinc2	equ	0xFDE
  9622                           plusw2	equ	0xFDB
  9623                           fsr2h	equ	0xFDA
  9624                           fsr2l	equ	0xFD9
  9625                           status	equ	0xFD8
  9626                           
  9627                           	psect	temp
  9628  00004B                     btemp:
  9629                           	opt stack 0
  9630  00004B                     	ds	1
  9631  0000                     int$flags	set	btemp
  9632  0000                     wtemp6	set	btemp+1
  9633                           tosu	equ	0xFFF
  9634                           tosh	equ	0xFFE
  9635                           tosl	equ	0xFFD
  9636                           pclatu	equ	0xFFB
  9637                           pclath	equ	0xFFA
  9638                           tblptru	equ	0xFF8
  9639                           tblptrh	equ	0xFF7
  9640                           tblptrl	equ	0xFF6
  9641                           tablat	equ	0xFF5
  9642                           prodh	equ	0xFF4
  9643                           prodl	equ	0xFF3
  9644                           intcon	equ	0xFF2
  9645                           intcon2	equ	0xFF1
  9646                           postinc0	equ	0xFEE
  9647                           plusw0	equ	0xFEB
  9648                           fsr0h	equ	0xFEA
  9649                           fsr0l	equ	0xFE9
  9650                           wreg	equ	0xFE8
  9651                           postdec1	equ	0xFE5
  9652                           fsr1h	equ	0xFE2
  9653                           fsr1l	equ	0xFE1
  9654                           indf2	equ	0xFDF
  9655                           postinc2	equ	0xFDE
  9656                           plusw2	equ	0xFDB
  9657                           fsr2h	equ	0xFDA
  9658                           fsr2l	equ	0xFD9
  9659                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        86
    BSS         74
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      74
    BANK0           160     14     137
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_ISR$2283	PTR const FTN()enum E7019 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$11$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    i2c1_driver_setI2cISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR FTN()void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART1_SetRxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_SetTxInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E7019[18] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_TX_REGISTER(), do_I2C_SEND_INITIAL_READ(), do_I2C_SEND_ADR_READ(), 
		 -> do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), 
		 -> do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    S53$callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S53$callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6842[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S53$data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> read_xyzvalues@readbuffer(COMRAM[6]), read_register@receivebuffer(COMRAM[1]), write_register@buffer(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_read_xyzvalues
    _read_xyzvalues->_i2c_masterAccelRead
    _printf->_putch
    _putch->_EUSART1_Write
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ACCELEROMETER_Initialize->_read_register
    _ACCELEROMETER_Initialize->_write_register
    _i2c_masterWrite->_i2c_masterOperation
    _read_register->_i2c_masterAccelRead
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterAccelRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX_REGISTER->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_INITIAL_READ->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX

Critical Paths under _main in BANK0

    _main->_read_xyzvalues

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    8825
                                              6 BANK0      8     8      0
           _ACCELEROMETER_Initialize
                      _EUSART1_Write
                  _SYSTEM_Initialize
                             _printf
                     _read_xyzvalues
 ---------------------------------------------------------------------------------
 (1) _read_xyzvalues                                      12     6      6    2685
                                             26 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     251
                                             22 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             21 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ACCELEROMETER_Initialize                             2     2      0    5384
                                             27 COMRAM     2     2      0
                      _read_register
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _write_register                                       2     1      1    3007
                                             25 COMRAM     2     1      1
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0    1390
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (2) _read_register                                        1     1      0    2377
                                             26 COMRAM     1     1      0
                          _i2c_close
                _i2c_masterAccelRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4     602
                                             20 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     286
                                             22 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       2     0      2     121
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_masterAccelRead                                  1     1      0    1421
                                             25 COMRAM     1     1      0
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0    1390
                                             23 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0    1322
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0    1232
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
           _do_I2C_SEND_INITIAL_READ *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _do_I2C_TX_REGISTER *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_REGISTER                                   0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0     328
                                             21 COMRAM     2     2      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_INITIAL_READ                             0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0     260
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0     260
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2       0
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2     260
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            1     1      0      37
                                             20 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     563
                                              2 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (11) i2_i2c_ISR                                           0     0      0     563
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
         i2_do_I2C_SEND_INITIAL_READ *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_do_I2C_TX_REGISTER *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (12) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_REGISTER                                0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX_EMPTY                                   0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                     i2_mssp1_setIRQ
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_TX                                         2     2      0     163
                                              0 COMRAM     2     2      0
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (12) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_INITIAL_READ                          0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RX                                         0     0      0     104
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0     104
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                      i2_returnReset *
                       i2_returnStop *
 ---------------------------------------------------------------------------------
 (13) i2_returnStop                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_returnReset                                       2     0      2     104
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (13) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (12) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACCELEROMETER_Initialize
     _read_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterAccelRead
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
     _write_register
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_INITIAL_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_REGISTER *
                 _i2c1_driver_TXData
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printf
     _putch
       _EUSART1_Write
   _read_xyzvalues
     _i2c_close
       _mssp1_clearIRQ
       _mssp1_disableIRQ
     _i2c_masterAccelRead
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _returnReset *
               _returnStop *
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               _do_I2C_DO_NACK_RESTART
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData
               _i2c1_driver_sendACK
               _returnReset *
               _returnStop *
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_INITIAL_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               _do_I2C_SEND_RESTART_READ
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _i2c1_driver_TXData
               _i2c1_driver_isNACK
               _returnReset *
               _returnStop *
             _do_I2C_TX_EMPTY *
               _do_I2C_SEND_RESTART
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP
                 _i2c1_driver_stop
               _mssp1_setIRQ
               _returnReset *
               _returnStop *
             _do_I2C_TX_REGISTER *
               _i2c1_driver_TXData
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       i2_do_I2C_DO_NACK_RESTART
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData
       i2_i2c1_driver_sendACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_INITIAL_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       i2_do_I2C_SEND_RESTART_READ
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData
       i2_i2c1_driver_isNACK
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_EMPTY *
       i2_do_I2C_SEND_RESTART
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP
         i2_i2c1_driver_stop
       i2_mssp1_setIRQ
       i2_returnReset *
       i2_returnStop *
     i2_do_I2C_TX_REGISTER *
       i2_i2c1_driver_TXData
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      E      89       4       85.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      4A       1       78.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3       9        0.0%
DATA                 0      0      D3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 28 11:14:30 2018

                ??i2_i2c1_driver_startRX 0026             _do_I2C_TX_REGISTER$intlevel0 0FDE  
                           returnReset@p 003A                 _eusart1TxBufferRemaining 004A  
          _do_I2C_SEND_RESTART$intlevel0 10DE                                       l83 0F06  
                                     l95 0CA8                                       l96 0C9A  
                                     l97 0CBC                                       l98 0C9E  
                                     l99 0CA2                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 10D8                     __size_of_do_I2C_RCEN 0012  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                            __CFG_LVP$ON 000000                                      l100 0CCA  
                                    l201 0AA4                                      l113 0F36  
                                    l202 0AAC                                      l114 0F26  
                                    l310 0DDA                                      l311 0DD8  
                                    l161 0C08                                      l209 0BBC  
                                    l162 0BFC                                      l170 07A2  
                                    l171 0790                                      l180 080A  
                                    l165 0C02                                      l173 0796  
                                    l309 0DB6                                      l174 079C  
                                    l191 0972                                      l169 07DC  
                                    l185 0968                                      l188 0978  
                                    l189 096C                                      l197 0AB2  
                                    l613 0612                                      l198 0A9E  
                                    l636 0A48                                      l666 0EA8  
                                    l667 0EA2                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000          __end_ofi2_i2c1_driver_getRXData 120C  
           __size_of_i2c_masterOperation 0048                     _returnStop$intlevel0 116A  
                  __size_of_do_I2C_RESET 0016                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                             _TXSTA1bits 000FAC          i2c1_driver_setBusCollisionISR@f 003A  
                            i2_do_I2C_RX 09B2                              i2_do_I2C_TX 08A8  
                                   l3541 0DA6                           i2_mssp1_setIRQ 1204  
                 __size_ofi2_do_I2C_IDLE 000C                                     STR_1 0601  
                                   u1230 1002                   __size_ofi2_do_I2C_RCEN 000C  
                                   u1218 0988                                     u1219 099C  
                                   u1228 0AC2                                     u1229 0AD6  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u1168 0C18  
                                   u1280 103E                                     u1169 0C2C  
                                   u1188 07B2                                     u1189 07C6  
                                   u1278 0BD2                                     u1279 0BE6  
                                   u1471 089E                                     u1288 1040  
                                   u1707 0630                                     u1717 064C  
                                   u1727 0666                                     u1737 0680  
                                   u1747 069A                                     u1691 061C  
                                   u1757 06B4                                     u1767 06CE  
                                   u1777 0A3A                                     u1787 1008  
                   ?_do_I2C_SEND_RESTART 0026                                     _WPUB 000F61  
                          _EUSART1_Write 0DA4        __size_of_do_I2C_SEND_RESTART_READ 000E  
                   __end_ofi2_returnStop 1218                ?_do_I2C_SEND_RESTART_READ 0026  
                                   _main 0606                __size_of_do_I2C_SEND_STOP 000E  
                 __size_of_do_I2C_DO_ACK 000E                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   fsr0l 000FE9                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                                   btemp 004B                            __CFG_BORV$190 000000  
                  ?_do_I2C_SEND_ADR_READ 0026                                     prodh 000FF4  
                                   prodl 000FF3          ??_i2c1_driver_clearBusCollision 0026  
                                   start 0102                            __CFG_IESO$OFF 000000  
                          _i2c_setBuffer 0F0A                          __end_of_i2c_ISR 0BEC  
                           ___param_bank 000000                 ??_do_I2C_DO_NACK_RESTART 003A  
              __size_of_mssp1_disableIRQ 0004                             _do_I2C_RESET 0F96  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1092  
               __end_of_i2c1_driver_open 0F54                                    ?_main 0026  
               __end_of_i2c1_driver_stop 11F0               __end_of_i2c1_driver_TXData 117E  
                         __CFG_DEBUG$OFF 000000                                    i2l201 0AFC  
                                  i2l202 0B04                  __size_ofi2_do_I2C_RESET 0010  
                                  i2l321 0E68                                    i2l161 0D2C  
                                  i2l209 0CE6                                    i2l322 0E64  
                                  i2l162 0D20                                    i2l170 08C4  
                                  i2l171 08B2                                    i2l180 092C  
                                  i2l165 0D26                                    i2l173 08B8  
                                  i2l174 08BE                                    i2l327 0E74  
                                  i2l191 09E6                                    i2l328 0E94  
                                  i2l169 08FE                                    i2l185 09DC  
                                  i2l188 09EC                                    i2l189 09E0  
                                  i2l197 0B0A                                    i2l198 0AF6  
                                  i2l571 0098                                    i2l567 006C  
                                  i2l569 0082                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 0E3E                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                            i2c_open@ret 003C                            __CFG_WRTB$OFF 000000  
                  __end_ofi2_returnReset 1214                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                   __end_ofi2_mssp1_setIRQ 1208  
                         __CFG_EBTRB$OFF 000000               __end_of_i2c1_driver_isNACK 0FC2  
                      write_register@reg 0040                       __size_ofi2_i2c_ISR 0048  
             ?_do_I2C_SEND_RESTART_WRITE 0026                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 1128                    ??_do_I2C_SEND_RESTART 003A  
                          i2returnStop@p 0026   __end_of_i2c1_driver_setBusCollisionISR 115A  
__size_of_i2c1_driver_setBusCollisionISR 000A           _i2c1_driver_setBusCollisionISR 1150  
                         ?_EUSART1_Write 0026                                    pclath 000FFA  
                                  tablat 000FF5                  __size_of_mssp1_clearIRQ 0004  
                                  plusw0 000FEB                                    plusw2 000FDB  
                 ?_do_I2C_SEND_ADR_WRITE 0026                                    status 000FD8  
                                  wtemp6 004C                           __CFG_HFOFST$ON 000000  
        __size_ofi2_i2c1_driver_sendNACK 0006                           ?_i2c_setBuffer 003A  
                         __CFG_PBADEN$ON 000000          __size_ofi2_i2c1_driver_resetBus 0002  
                          _fsmStateTable 0092                          __initialization 0D5E  
                             _i2c_poller 0F24                               _i2c_status 00B6  
             __end_of_EUSART1_Initialize 0C86                             __end_of_main 06E6  
                          i2_do_I2C_IDLE 111C                            i2_do_I2C_RCEN 1110  
                       __end_of_i2c_open 0780              ?_INTERRUPT_InterruptManager 0026  
                       i2_mssp1_clearIRQ 1200         __end_ofi2_do_I2C_DO_ADDRESS_NACK 0D5E  
                          _do_I2C_DO_ACK 10BC                                   ??_main 00E1  
                          _do_I2C_TX$315 003B            __size_of_i2c1_driver_sendNACK 0006  
                          __activetblptr 000002                             i2c_close@ret 003A  
                    _i2c_masterAccelRead 1092                    ?_EUSART1_Transmit_ISR 0026  
          __size_of_i2c1_driver_resetBus 0002                  ?_do_I2C_DO_ADDRESS_NACK 0026  
                        ?i2_mssp1_setIRQ 0026       __end_ofi2_do_I2C_SEND_RESTART_READ 11B6  
             i2_do_I2C_SEND_RESTART_READ 11AE                         ??_read_xyzvalues 0046  
                                 _ANSELA 000F38                                   ?_putch 0026  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
               __size_ofi2_do_I2C_DO_ACK 0008                         ??_write_register 0040  
                         __CFG_WDTEN$OFF 000000                                   _RCREG1 000FAE  
                                 _RCSTA1 000FAB                       __size_of_i2c_close 001E  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                i2_do_I2C_SEND_ADR_WRITE 1044                   ??_do_I2C_SEND_ADR_READ 003A  
          __size_ofi2_do_I2C_TX_REGISTER 000E                                ??_i2c_ISR 003D  
                                 _TXREG1 000FAD                                   _TXSTA1 000FAC  
                   ?_i2c_masterAccelRead 0026             i2c_masterOperation@operation 003D  
                ??i2_do_I2C_SEND_RESTART 0026              ?i2_do_I2C_SEND_INITIAL_READ 0026  
               _do_I2C_SEND_INITIAL_READ 0F6A                           __CFG_XINST$OFF 000000  
       __size_ofi2_i2c1_driver_getRXData 0004                    _i2c1_driver_getRXData 11E4  
                     i2_i2c1_driver_stop 1218                      _do_I2C_RX$intlevel0 093E  
      __size_of_ACCELEROMETER_Initialize 006C              __end_of_do_I2C_DO_NACK_STOP 10BC  
              ?_ACCELEROMETER_Initialize 0026                           ?i2_do_I2C_IDLE 0026  
                        _i2c_masterWrite 116E                           ?i2_do_I2C_RCEN 0026  
  __end_of_i2c1_driver_clearBusCollision 1224   __size_of_i2c1_driver_clearBusCollision 0004  
          _i2c1_driver_clearBusCollision 1220                           __CFG_STVREN$ON 000000  
                      __end_ofi2_i2c_ISR 0D16          __size_of_do_I2C_DO_NACK_RESTART 000E  
                     write_register@data 003F                           i2returnReset@p 0026  
                                 clear_0 0D84                                   clear_1 0D90  
                         ?_do_I2C_DO_ACK 0026                                   _printf 0E98  
                    ?i2_i2c1_driver_stop 0026                   i2_i2c1_driver_sendNACK 11CA  
                 i2c1_driver_setI2cISR@f 003A              __end_of_i2c1_driver_sendACK 11CA  
         __end_of_do_I2C_DO_ADDRESS_NACK 0C3A                   i2_i2c1_driver_resetBus 1226  
                           __mediumconst 0000     __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008  
            __end_of_i2c1_driver_restart 11F4                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                           ?_returnReset 003A            _do_I2C_DO_NACK_STOP$intlevel0 10B4  
                  _i2c1_driver_setI2cISR 1146              __end_of_i2c1_driver_startRX 11EC  
                        ??_EUSART1_Write 003A                    __size_ofi2_returnStop 0004  
                        _eusart1RxBuffer 0001     EUSART1_SetTxInterruptHandler@handler 003A  
         __size_ofi2_do_I2C_DO_NACK_STOP 0008            __size_of_INTERRUPT_Initialize 0004  
          __end_ofi2_do_I2C_DO_NACK_STOP 118E                          _eusart1TxBuffer 0009  
                      _SYSTEM_Initialize 0FEC                               __accesstop 0060  
                   ??i2_i2c1_driver_stop 0026                  __end_of__initialization 0D96  
                        ??_i2c_setBuffer 003E           _do_I2C_SEND_ADR_READ$intlevel0 0F86  
                       _do_I2C_SEND_STOP 10CA                       __size_of_do_I2C_RX 007A  
                     _do_I2C_TX_REGISTER 0FD8                       __size_of_do_I2C_TX 0096  
                 __size_of_read_register 002E                       ?_SYSTEM_Initialize 0026  
                  ??_i2c_masterAccelRead 003F                            ___rparam_used 000001  
             __end_of_mssp1_IRQisEnabled 1044                      _i2c_masterOperation 0C86  
               __size_of_do_I2C_TX_EMPTY 005E           __size_ofi2_i2c1_driver_sendACK 0006  
             __end_of_mssp1_waitForEvent 1010            __end_ofi2_i2c1_driver_sendACK 11D6  
                            ?_i2c_poller 0026                           __pcstackCOMRAM 0026  
                    ?_do_I2C_TX_REGISTER 0026                      _do_I2C_TX$intlevel0 0786  
                           __pidataBANK0 0B48                      ??_SYSTEM_Initialize 003C  
         __size_ofi2_i2c1_driver_restart 0004            __end_ofi2_i2c1_driver_restart 1220  
                       _mssp1_disableIRQ 11F8           __size_ofi2_i2c1_driver_startRX 0004  
          __end_ofi2_i2c1_driver_startRX 1210                            __end_of_putch 1132  
                      __end_of_i2c_close 0F0A                             i2_returnStop 1214  
                         i2_do_I2C_RESET 1074                   ??_EUSART1_Transmit_ISR 0026  
                   ?_i2c_masterOperation 0026                 i2_do_I2C_DO_ADDRESS_NACK 0D16  
            __end_of_EUSART1_Receive_ISR 0E98                     ??_do_I2C_TX_REGISTER 003B  
                           ?i2_do_I2C_RX 0026                             ?i2_do_I2C_TX 0026  
      __size_ofi2_do_I2C_DO_NACK_RESTART 0008                ?i2_do_I2C_DO_NACK_RESTART 0026  
                 _do_I2C_DO_NACK_RESTART 10A0                __end_of_SYSTEM_Initialize 0FFE  
              ??i2_do_I2C_SEND_ADR_WRITE 0026                                  ??_putch 003B  
                          _eusart1RxHead 001A               __end_ofi2_do_I2C_SEND_STOP 119E  
                          _eusart1TxHead 001C                            _eusart1RxTail 0019  
                         _mssp1_clearIRQ 11FC                               __pbssBANK0 00B6  
                          _eusart1TxTail 001B        _EUSART1_TxDefaultInterruptHandler 0048  
        ??_EUSART1_SetRxInterruptHandler 003C            __size_ofi2_i2c1_driver_TXData 0008  
                        __CFG_PLLCFG$OFF 000000                                ?_i2c_open 0026  
                             __pnvCOMRAM 0046                  __end_of_i2c_masterWrite 1176  
                 ?_i2c1_driver_getRXData 0026                        ??i2_do_I2C_DO_ACK 0026  
          __size_ofi2_i2c1_driver_isNACK 0016                    _do_I2C_IDLE$intlevel0 1028  
                      i2_do_I2C_TX_EMPTY 0AF0                          ??i2_do_I2C_IDLE 0026  
           __size_of_i2c_busCollisionISR 0006                          ??i2_do_I2C_RCEN 0026  
                     __CFG_CCP2MX$PORTC1 000000                            ??_do_I2C_IDLE 003A  
                          ??_do_I2C_RCEN 003A                       ?i2_do_I2C_TX_EMPTY 0026  
                     __CFG_CCP3MX$PORTB5 000000                          ??_do_I2C_DO_ACK 003A  
                 __end_ofi2_do_I2C_RESET 1084                      i2c_setBuffer@buffer 003A  
                                ?_printf 003C                            _read_register 0E10  
         ?_i2c1_driver_clearBusCollision 0026                      ??i2_do_I2C_TX_EMPTY 0026  
                  ??_i2c_masterOperation 003D                        ?_i2c1_driver_open 0026  
                      __end_of_do_I2C_RX 09B2                        __end_of_do_I2C_TX 0816  
               ??i2_do_I2C_SEND_ADR_READ 0026                        ?_i2c1_driver_stop 0026  
                 ?_i2c1_driver_setI2cISR 003A                       ??_i2c1_driver_open 003A  
                     ??_i2c1_driver_stop 003A                                  _OSCCON2 000FD2  
                          ?_mssp1_setIRQ 0026                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9                   __end_of_mssp1_clearIRQ 1200  
                                _SSP1MSK 000FCA      __size_ofi2_do_I2C_SEND_INITIAL_READ 0010  
                    __size_of_i2c_poller 001A                  ??_do_I2C_SEND_ADR_WRITE 003B  
    _do_I2C_SEND_RESTART_WRITE$intlevel0 10EC              ??_do_I2C_SEND_RESTART_WRITE 003A  
                     _i2c1_driver_TXData 1176                               ??_i2c_open 003C  
               __end_ofi2_mssp1_clearIRQ 1204                       _i2c1_driver_i2cISR 0011  
                                _i2c_ISR 0B9E                __end_ofi2_do_I2C_TX_EMPTY 0B48  
                i2_i2c1_driver_getRXData 1208                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                    _returnReset$intlevel0 1160  
                  _do_I2C_RCEN$intlevel0 1016                       _i2c1_driver_isNACK 0FAC  
                    ?_i2c1_driver_TXData 0026                                  __Lparam 0000  
       _do_I2C_DO_ADDRESS_NACK$intlevel0 0BF2                             __psmallconst 0600  
                      ??_do_I2C_TX_EMPTY 003A                      ?_i2c1_driver_isNACK 0026  
                        ?i2_do_I2C_RESET 0026                                  __pcinit 0D5E  
                                __ramtop 0600                           ?_read_register 0026  
                                __ptext0 0606                                  __ptext1 0816  
                                __ptext2 0E98                                  __ptext3 1128  
                                __ptext4 0DA4                                  __ptext5 0FEC  
                                __ptext6 0EC2                                  __ptext7 1084  
                                __ptext8 11DC                                  __ptext9 0C3A  
                    __end_of_do_I2C_IDLE 1034                          __size_of_printf 002A  
                    __end_of_do_I2C_RCEN 1022                         ??i2_mssp1_setIRQ 0026  
                  _OSCILLATOR_Initialize 1084              __end_of_do_I2C_SEND_RESTART 10E6  
                         ??_mssp1_setIRQ 003A                     ??_i2c1_driver_TXData 003A  
                     _EUSART1_Initialize 0C3A                 ??_PIN_MANAGER_Initialize 003A  
                 i2c_masterOperation@ret 003E                          ?_mssp1_clearIRQ 0026  
             _do_I2C_SEND_STOP$intlevel0 10D0              ?i2_do_I2C_SEND_RESTART_READ 0026  
               _do_I2C_SEND_RESTART_READ 10F4               __size_of_SYSTEM_Initialize 0012  
                   __size_of_returnReset 000A                     end_of_initialization 0D96  
             ??_do_I2C_SEND_INITIAL_READ 003B         __end_of_ACCELEROMETER_Initialize 0A92  
                   ??_i2c1_driver_isNACK 003A                      ?_EUSART1_Initialize 0026  
           __end_of_i2c1_driver_sendNACK 11C4                            __Lmediumconst 0000  
                       ?_i2c_masterWrite 0026             __end_of_i2c1_driver_resetBus 1226  
  __end_of_EUSART1_SetRxInterruptHandler 1146   __size_of_EUSART1_SetRxInterruptHandler 000A  
          _EUSART1_SetRxInterruptHandler 113C           __size_ofi2_do_I2C_SEND_RESTART 0008  
                                printf@c 0040                                  printf@f 003C  
          __end_ofi2_do_I2C_SEND_RESTART 11A6                                  postdec1 000FE5  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __size_ofi2_returnReset 0004             ?i2_do_I2C_SEND_RESTART_WRITE 0026  
              _do_I2C_SEND_RESTART_WRITE 10E6                  ?i2_i2c1_driver_sendNACK 0026  
                   ??_EUSART1_Initialize 003C             __end_ofi2_do_I2C_TX_REGISTER 1110  
                ?i2_i2c1_driver_resetBus 0026                               _returnStop 1164  
               __end_of_do_I2C_SEND_STOP 10D8                                i2_i2c_ISR 0CCE  
        __size_ofi2_do_I2C_SEND_ADR_READ 0010                 read_xyzvalues@readbuffer 001D  
                            returnStop@p 003A                      EUSART1_Write@txData 003A  
               __end_of_mssp1_disableIRQ 11FC                     __size_ofi2_do_I2C_RX 0074  
                   __size_ofi2_do_I2C_TX 0090                ??i2_i2c1_driver_getRXData 0026  
             __size_ofi2_do_I2C_TX_EMPTY 0058            __size_of_do_I2C_SEND_ADR_READ 0016  
                           ??_i2c_poller 003D           __end_ofi2_i2c1_driver_sendNACK 11D0  
                            _do_I2C_IDLE 1022                              _do_I2C_RCEN 1010  
           __end_of_INTERRUPT_Initialize 11E0                          ??_read_register 0040  
         __end_ofi2_i2c1_driver_resetBus 1228                      read_register@status 0016  
             ??i2_do_I2C_DO_ADDRESS_NACK 0026         __end_ofi2_do_I2C_DO_NACK_RESTART 1186  
          ??i2_do_I2C_SEND_RESTART_WRITE 0026                       _mssp1_IRQisEnabled 1034  
                 ?_OSCILLATOR_Initialize 0026                               ?i2_i2c_ISR 0026  
           __size_of_do_I2C_DO_NACK_STOP 000E                 read_xyzvalues@sensorData 00DB  
                         __end_of_printf 0EC2                       _mssp1_waitForEvent 0FFE  
                ?_do_I2C_DO_NACK_RESTART 0026                      start_initialization 0D5E  
                              _i2c_close 0EEC                      _i2c_busCollisionISR 11D6  
        __size_of_PIN_MANAGER_Initialize 002A                      ?_mssp1_IRQisEnabled 0026  
                        i2_do_I2C_DO_ACK 118E                            i2_returnReset 1210  
                        i2_do_I2C_TX$315 0026                      ?_mssp1_waitForEvent 003A  
            __end_of_i2c_masterAccelRead 10A0                              putch@txData 003B  
                     __end_of_i2c_poller 0F3E             __size_of_i2c1_driver_sendACK 0006  
                  __end_of_EUSART1_Write 0DDE                          i2c_open@address 003D  
                i2c_setBuffer@bufferSize 003C                  ??_i2c1_driver_getRXData 003A  
           __size_of_i2c1_driver_restart 0004              __size_ofi2_i2c1_driver_stop 0004  
           __size_of_i2c1_driver_startRX 0004                    i2_do_I2C_DO_NACK_STOP 1186  
                 i2_do_I2C_SEND_ADR_READ 1064                    __end_of_i2c_setBuffer 0F24  
               _ACCELEROMETER_Initialize 0A26                        __size_of_i2c_open 009A  
                   ?_i2c_busCollisionISR 0026                     __end_of_mssp1_setIRQ 11E4  
                   ??_mssp1_IRQisEnabled 003A                  __size_of_read_xyzvalues 0092  
                   read_xyzvalues@status 0015                  __size_of_write_register 0032  
                     i2_do_I2C_SEND_STOP 1196                     ??_mssp1_waitForEvent 003C  
         ?_EUSART1_SetRxInterruptHandler 003A                    i2_i2c1_driver_sendACK 11D0  
                          ?_do_I2C_RESET 0026             __end_ofi2_i2c1_driver_TXData 11BE  
                            __pdataBANK0 0060                    i2i2c1_driver_TXData@d 0026  
              _do_I2C_TX_EMPTY$intlevel0 0A98      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 121C                              ?_returnStop 003A  
                               ??_printf 003E                      ?i2_do_I2C_SEND_STOP 0026  
                ??_i2c1_driver_setI2cISR 003C                    i2_i2c1_driver_startRX 120C  
         __end_of_do_I2C_DO_NACK_RESTART 10AE                           _eusart1RxCount 0018  
                   _i2c1_driver_sendNACK 11BE             __end_ofi2_i2c1_driver_isNACK 0FD8  
                            __pbssCOMRAM 0001        _EUSART1_RxDefaultInterruptHandler 0046  
                             ?_i2c_close 0026                     _i2c1_driver_resetBus 1224  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 00DB  
                         ?i2_returnReset 0026                                _do_I2C_RX 0938  
                              _do_I2C_TX 0780              __size_of_do_I2C_TX_REGISTER 0014  
       __end_of_do_I2C_SEND_INITIAL_READ 0F80           __size_of_do_I2C_SEND_ADR_WRITE 0016  
        ??_EUSART1_SetTxInterruptHandler 003C            __end_of_do_I2C_SEND_ADR_WRITE 0F6A  
           __size_of_EUSART1_Receive_ISR 002C                     ??i2_do_I2C_SEND_STOP 0026  
              __size_of_i2c1_driver_open 0016                        ?i2_mssp1_clearIRQ 0026  
                   i2_do_I2C_TX_REGISTER 1102                __size_of_i2c1_driver_stop 0004  
                               ?_i2c_ISR 0026          _do_I2C_SEND_ADR_WRITE$intlevel0 0F5A  
                        _do_I2C_TX_EMPTY 0A92                       ??i2_mssp1_clearIRQ 0026  
                  ??_i2c_busCollisionISR 0026                   _PIN_MANAGER_Initialize 0EC2  
                       ??i2_do_I2C_RESET 0026                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 1128                    __end_ofi2_do_I2C_RCEN 111C  
                         ??_do_I2C_RESET 003A              __end_of_i2c_masterOperation 0CCE  
               ??_do_I2C_DO_ADDRESS_NACK 003A              _i2c1_driver_busCollisionISR 0013  
                  __end_of_do_I2C_DO_ACK 10CA             ??_INTERRUPT_InterruptManager 0028  
                       __CFG_PRICLKEN$ON 000000               ??_do_I2C_SEND_RESTART_READ 003A  
                  ?_i2c1_driver_sendNACK 0026                              ??i2_i2c_ISR 0028  
                __end_ofi2_do_I2C_DO_ACK 1196                         ??_mssp1_clearIRQ 003A  
                            __smallconst 0600                                 _BAUDCON1 000FB8  
               i2_do_I2C_DO_NACK_RESTART 117E                    ?_i2c1_driver_resetBus 0026  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0026  
                             ?_do_I2C_RX 0026                               ?_do_I2C_TX 0026  
                      _i2c1_driver_start 11F4               read_register@receivebuffer 0025  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 11DC  
                      _i2c_ISR$intlevel0 0BA4                       ?_i2c1_driver_start 0026  
                 ?i2_do_I2C_DO_NACK_STOP 0026                    ?i2_do_I2C_TX_REGISTER 0026  
                    __size_of_returnStop 000A                                 _PIE1bits 000F9D  
                               _PIE2bits 000FA0       _do_I2C_SEND_INITIAL_READ$intlevel0 0F70  
                    ??_i2c1_driver_start 003A                                 i2u141_48 08D4  
                               i2u141_49 08E8      __size_of_INTERRUPT_InterruptManager 00FA  
                               i2u151_48 0CFC                                 i2u151_49 0D10  
                               i2u144_48 09FC                                 i2u144_49 0A10  
                               i2u145_48 0B1A                                 i2u145_49 0B2E  
                               i2u162_48 008C                                 i2u139_48 0D3C  
                               i2u139_49 0D50                                 i2u156_48 0060  
                               i2u165_48 00A2                                 i2u165_49 00B6  
                               i2u159_48 0076                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1             ??i2_do_I2C_SEND_INITIAL_READ 0026  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                 ?i2_i2c1_driver_sendACK 0026                                 _SSP1CON1 000FC6  
                               _SSP1CON2 000FC5                                 _SSP1STAT 000FC7  
                 ?i2_i2c1_driver_restart 0026                   ?i2_i2c1_driver_startRX 0026  
                      ?_do_I2C_SEND_STOP 0026                          ??i2_returnReset 0028  
                            ??_i2c_close 003A                __end_of_i2c1_driver_start 11F8  
                          ??_returnReset 003C                       ??_do_I2C_SEND_STOP 003A  
            __size_of_i2c1_driver_TXData 0008        __end_of_do_I2C_SEND_RESTART_WRITE 10F4  
                __end_of_do_I2C_TX_EMPTY 0AF0                              _INTCON2bits 000FF1  
                              copy_data0 0D72                    ?_INTERRUPT_Initialize 0026  
                      ?_mssp1_disableIRQ 0026             __size_of_do_I2C_SEND_RESTART 000E  
            __size_of_i2c1_driver_isNACK 0016                     i2_i2c1_driver_TXData 11B6  
                _do_I2C_DO_ACK$intlevel0 10C2                                 _i2c_open 06E6  
                  __size_of_mssp1_setIRQ 0004                       ??_mssp1_disableIRQ 003A  
                    _do_I2C_DO_NACK_STOP 10AE                         __size_of_i2c_ISR 004E  
  __end_of_EUSART1_SetTxInterruptHandler 113C   __size_of_EUSART1_SetTxInterruptHandler 000A  
          _EUSART1_SetTxInterruptHandler 1132                                 __Hrparam 0000  
                   i2_i2c1_driver_isNACK 0FC2                           _read_xyzvalues 0816  
                         _write_register 0DDE                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                             ?_do_I2C_IDLE 0026  
                           ?_do_I2C_RCEN 0026                        __CFG_P2BMX$PORTB5 000000  
      __size_of_do_I2C_SEND_INITIAL_READ 0016                  ??_OSCILLATOR_Initialize 003A  
              ?_do_I2C_SEND_INITIAL_READ 0026                      _i2c1_driver_sendACK 11C4  
               __size_of_i2c_masterWrite 0008                    i2_do_I2C_SEND_RESTART 119E  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                      i2c1_driver_TXData@d 003A  
            __size_of_EUSART1_Initialize 004C                   ??_i2c1_driver_sendNACK 003A  
        __end_ofi2_do_I2C_SEND_ADR_WRITE 1054         ??_i2c1_driver_setBusCollisionISR 003C  
        ?_i2c1_driver_setBusCollisionISR 003A                         read_register@reg 0040  
     _do_I2C_SEND_RESTART_READ$intlevel0 10FA                      _i2c1_driver_restart 11F0  
                          ?i2_returnStop 0026                     ?_do_I2C_DO_NACK_STOP 0026  
                    _i2c1_driver_startRX 11E8             __end_of_do_I2C_SEND_ADR_READ 0F96  
                 ??_i2c1_driver_resetBus 003A                         ?i2_do_I2C_DO_ACK 0026  
                          ??i2_do_I2C_RX 0026                            ??i2_do_I2C_TX 0026  
                           _mssp1_setIRQ 11E0                              ??_do_I2C_RX 003A  
                            ??_do_I2C_TX 003B                                 __ptext10 1132  
                               __ptext11 113C                                 __ptext20 0F3E  
                               __ptext12 0A26                                 __ptext21 1092  
                               __ptext13 0DDE                                 __ptext30 0BEC  
                               __ptext22 0C86                                 __ptext14 116E  
                               __ptext31 10A0                                 __ptext23 1034  
                               __ptext15 0E10                                 __ptext40 10E6  
                               __ptext32 10AE                                 __ptext24 0F24  
                               __ptext16 0F0A                                 __ptext41 10F4  
                               __ptext33 10BC                                 __ptext25 0FFE  
                               __ptext17 06E6                                 __ptext50 1224  
                               __ptext42 1022                                 __ptext34 1010  
                               __ptext26 0B9E                                 __ptext18 1146  
                               __ptext51 11E8                                 __ptext43 0F96  
                               __ptext35 0F54                                 __ptext27 0A92  
                               __ptext19 1150                                 __ptext60 11FC  
                               __ptext52 115A                                 __ptext44 0FD8  
                               __ptext36 0F6A                                 __ptext28 0938  
                               __ptext53 1164                                 __ptext45 11E0  
                               __ptext37 0F80                                 __ptext29 0780  
                               __ptext70 118E                                 __ptext62 0CCE  
                               __ptext54 11EC                                 __ptext46 0FAC  
                               __ptext38 10CA                                 __ptext71 1110  
                               __ptext63 1200                                 __ptext55 11F0  
                               __ptext47 1176                                 __ptext39 10D8  
                               __ptext80 1074                                 __ptext72 1044  
                               __ptext64 0AF0                                 __ptext56 11C4  
                               __ptext48 11E4                                 __ptext81 1102  
                               __ptext73 1054                                 __ptext65 09B2  
                               __ptext57 11F4                                 __ptext49 11BE  
                               __ptext90 1214                                 __ptext82 1204  
                               __ptext74 1064                                 __ptext66 08A8  
                               __ptext58 0EEC                                 __ptext91 1218  
                               __ptext83 0FC2                                 __ptext75 1196  
                               __ptext67 0D16                                 __ptext59 11F8  
                               __ptext92 121C                                 __ptext84 11B6  
                               __ptext76 119E                                 __ptext68 117E  
                               __ptext93 11D0                                 __ptext85 1208  
                               __ptext77 11A6                                 __ptext69 1186  
                               __ptext94 11D6                                 __ptext86 11CA  
                               __ptext78 11AE                                 __ptext95 1220  
                               __ptext87 1226                                 __ptext79 111C  
                               __ptext96 0E3E                                 __ptext88 120C  
                               __ptext97 0E6C                                 __ptext89 1210  
                               __ptext98 0000                             _SSP1CON1bits 000FC6  
             ??_ACCELEROMETER_Initialize 0041                             _SSP1CON2bits 000FC5  
                   ?_i2c1_driver_sendACK 0026                     __end_of_do_I2C_RESET 0FAC  
                 ??i2_do_I2C_TX_REGISTER 0026                    ?i2_i2c1_driver_TXData 0026  
                ?i2_do_I2C_SEND_ADR_READ 0026                  __size_ofi2_mssp1_setIRQ 0004  
                   write_register@buffer 0023                     ?_i2c1_driver_restart 0026  
                    __end_of_returnReset 1164                         _i2c1_driver_open 0F3E  
                       _i2c1_driver_stop 11EC                            __size_of_main 00E0  
                   ?_i2c1_driver_startRX 0026           __size_of_i2c1_driver_getRXData 0004  
                 __end_of_read_xyzvalues 08A8                     write_register@status 0017  
          __end_of_i2c1_driver_getRXData 11E8                   __end_of_write_register 0E10  
                 i2c_masterAccelRead@reg 003F                    ?i2_i2c1_driver_isNACK 0026  
                       printString@F7170 0060                                 int$flags 004B  
   EUSART1_SetRxInterruptHandler@handler 003A       __end_of_INTERRUPT_InterruptManager 0102  
             _INTERRUPT_InterruptManager 0008                                 main@data 00E3  
                           _SSP1STATbits 000FC7                           ??i2_returnStop 0028  
       __end_of_do_I2C_SEND_RESTART_READ 1102                    __end_of_read_register 0E3E  
                           ??_returnStop 003C                      _EUSART1_Receive_ISR 0E6C  
                  ??_do_I2C_DO_NACK_STOP 003A                mssp1_waitForEvent@timeout 003A  
         __size_of_i2c1_driver_setI2cISR 000A            __end_of_i2c1_driver_setI2cISR 1150  
                             _INTCONbits 000FF2               __size_of_i2c1_driver_start 0004  
                 ??_INTERRUPT_Initialize 003A                 ?i2_i2c1_driver_getRXData 0026  
         __end_ofi2_do_I2C_SEND_ADR_READ 1074                    ??_i2c1_driver_sendACK 003A  
                       ?_do_I2C_TX_EMPTY 0026        __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048  
             __end_ofi2_i2c1_driver_stop 121C                ?i2_do_I2C_DO_ADDRESS_NACK 0026  
                 _do_I2C_DO_ADDRESS_NACK 0BEC                                 intlevel2 0000  
                 _do_I2C_RESET$intlevel0 0F9C                    ??_i2c1_driver_restart 003A  
                   ?_EUSART1_Receive_ISR 0026                    ??_i2c1_driver_startRX 003A  
                    __end_ofi2_do_I2C_RX 0A26                      __end_ofi2_do_I2C_TX 0938  
                ?_PIN_MANAGER_Initialize 0026                          ?_read_xyzvalues 0040  
                             _RCSTA1bits 000FAB                          ?_write_register 003F  
                     __end_of_returnStop 116E             __end_of_EUSART1_Transmit_ISR 0E6C  
           __size_of_i2c_masterAccelRead 000E       __end_ofi2_do_I2C_SEND_INITIAL_READ 1064  
             i2_do_I2C_SEND_INITIAL_READ 1054              __size_of_mssp1_IRQisEnabled 0010  
    __end_ofi2_do_I2C_SEND_RESTART_WRITE 11AE              i2_do_I2C_SEND_RESTART_WRITE 11A6  
                               printf@ap 003E                   ?i2_do_I2C_SEND_RESTART 0026  
             ??i2_do_I2C_DO_NACK_RESTART 0026              __size_of_mssp1_waitForEvent 0012  
         ?_EUSART1_SetTxInterruptHandler 003A                __size_ofi2_mssp1_clearIRQ 0004  
                 __size_of_EUSART1_Write 003A               __end_of_do_I2C_TX_REGISTER 0FEC  
                      ??_i2c_masterWrite 003F                   __size_of_i2c_setBuffer 001A  
                      __CFG_T3CMX$PORTC0 000000                              _returnReset 115A  
       _do_I2C_DO_NACK_RESTART$intlevel0 10A6                  ??i2_do_I2C_DO_NACK_STOP 0026  
                 ??i2_i2c1_driver_TXData 0026             ??i2_do_I2C_SEND_RESTART_READ 0026  
                  ??_EUSART1_Receive_ISR 0026           __end_of_PIN_MANAGER_Initialize 0EEC  
            __end_of_i2c_busCollisionISR 11DC              __size_ofi2_do_I2C_SEND_STOP 0008  
               ??i2_i2c1_driver_sendNACK 0026                        __CFG_FOSC$INTIO67 000000  
                 ??i2_i2c1_driver_isNACK 0026         __size_ofi2_do_I2C_SEND_ADR_WRITE 0010  
                  _do_I2C_SEND_ADR_WRITE 0F54                  ??i2_i2c1_driver_sendACK 0026  
                   _do_I2C_SEND_ADR_READ 0F80                 ??i2_i2c1_driver_resetBus 0026  
                ??i2_i2c1_driver_restart 0026  
